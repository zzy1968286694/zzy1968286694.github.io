<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>月明水清深</title>
  
  <subtitle>Insist</subtitle>
  <link href="https://zzyong24.github.io/atom.xml" rel="self"/>
  
  <link href="https://zzyong24.github.io/"/>
  <updated>2024-06-01T03:47:48.739Z</updated>
  <id>https://zzyong24.github.io/</id>
  
  <author>
    <name>zhuzhiyong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>240529-xfg大营销</title>
    <link href="https://zzyong24.github.io/2024/05/29/xiang-mu/240529-xfg-da-ying-xiao/"/>
    <id>https://zzyong24.github.io/2024/05/29/xiang-mu/240529-xfg-da-ying-xiao/</id>
    <published>2024-05-29T02:50:10.000Z</published>
    <updated>2024-06-01T03:47:48.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大营销项目"><a href="#大营销项目" class="headerlink" title="大营销项目"></a>大营销项目</h1><p><img src="/2024/05/29/xiang-mu/240529-xfg-da-ying-xiao/FneS159mh275DXpKFwFuvHQ8AO_t" alt="抽奖奖盘"></p><p>gitee地址：<a href="https://gitee.com/zzy888888/big-marketing">项目-大营销: 大营销项目 (gitee.com)</a></p><h2 id="1-DDD脚手架"><a href="#1-DDD脚手架" class="headerlink" title="1. DDD脚手架"></a>1. DDD脚手架</h2><p>脚手架地址标准版：<a href="https://gitcode.net/KnowledgePlanet/road-map/xfg-frame-archetype-std.git">https://gitcode.net/KnowledgePlanet/road-map/xfg-frame-archetype-std.git</a></p><p>脚手架地址轻量版：<a href="https://gitcode.net/KnowledgePlanet/road-map/xfg-frame-archetype-lite">KnowledgePlanet / road-map / xfg-frame-archetype-lite · GitCode</a></p><p>使用步骤：<a href="https://bugstack.cn/md/road-map/ddd-archetype.html">DDD 脚手架【Maven 本地版】 | 小傅哥 bugstack 虫洞栈</a></p><h2 id="2-环境部署"><a href="#2-环境部署" class="headerlink" title="2. 环境部署"></a>2. 环境部署</h2><p><strong>linux下docker以及dockercompose安装</strong></p><p><a href="https://bugstack.cn/md/devops/2023-04-18-docker.html">Docker | 小傅哥 bugstack 虫洞栈</a></p><p><strong>docker-compose配置文件</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 命令执行 docker-compose -f docker-compose-environment.yml up -d</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.9'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>8.0.32    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>default<span class="token punctuation">-</span>authentication<span class="token punctuation">-</span>plugin=mysql_native_password    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> my<span class="token punctuation">-</span>network    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql<span class="token punctuation">-</span>job<span class="token punctuation">-</span>dbdata    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"13306:3306"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./mysql/sql<span class="token punctuation">:</span>/docker<span class="token punctuation">-</span>entrypoint<span class="token punctuation">-</span>initdb.d    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"mysqladmin"</span> <span class="token punctuation">,</span><span class="token string">"ping"</span><span class="token punctuation">,</span> <span class="token string">"-h"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span> <span class="token punctuation">]</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 5s      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">start_period</span><span class="token punctuation">:</span> 15s    <span class="token key atrule">volumes_from</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql<span class="token punctuation">-</span>job<span class="token punctuation">-</span>dbdata  <span class="token comment"># 自动加载数据</span>  <span class="token key atrule">mysql-job-dbdata</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> alpine<span class="token punctuation">:</span>3.18.2    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>job<span class="token punctuation">-</span>dbdata    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /var/lib/mysql  <span class="token comment"># phpmyadmin https://hub.docker.com/_/phpmyadmin</span>  <span class="token key atrule">phpmyadmin</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> phpmyadmin<span class="token punctuation">:</span>5.2.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> phpmyadmin    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> phpmyadmin    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8899<span class="token punctuation">:</span><span class="token number">80</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> PMA_HOST=mysql      <span class="token punctuation">-</span> PMA_PORT=3306      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=123456    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token key atrule">mysql</span><span class="token punctuation">:</span>        <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_healthy    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> my<span class="token punctuation">-</span>network  <span class="token comment"># Redis</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span><span class="token number">6.2</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> redis    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 16379<span class="token punctuation">:</span><span class="token number">6379</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./redis/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> my<span class="token punctuation">-</span>network    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"redis-cli"</span><span class="token punctuation">,</span> <span class="token string">"ping"</span> <span class="token punctuation">]</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 10s      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token comment"># RedisAdmin https://github.com/joeferner/redis-commander</span>  <span class="token key atrule">redis-admin</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> spryker/redis<span class="token punctuation">-</span>commander<span class="token punctuation">:</span>0.8.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>admin    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>commander    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8081<span class="token punctuation">:</span><span class="token number">8081</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> REDIS_HOSTS=local<span class="token punctuation">:</span>redis<span class="token punctuation">:</span><span class="token number">6379</span>      <span class="token punctuation">-</span> HTTP_USER=admin      <span class="token punctuation">-</span> HTTP_PASSWORD=admin      <span class="token punctuation">-</span> LANG=C.UTF<span class="token punctuation">-</span><span class="token number">8</span>      <span class="token punctuation">-</span> LANGUAGE=C.UTF<span class="token punctuation">-</span><span class="token number">8</span>      <span class="token punctuation">-</span> LC_ALL=C.UTF<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> my<span class="token punctuation">-</span>network    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token key atrule">redis</span><span class="token punctuation">:</span>        <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_healthy<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">my-network</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-phpmyadmin"><a href="#2-1-phpmyadmin" class="headerlink" title="2.1 phpmyadmin"></a>2.1 phpmyadmin</h3><p>地址：<a href="http://8.140.192.82:8899/index.php?route=/&amp;route=/">8.140.192.82:8899 / mysql | phpMyAdmin 5.2.1</a></p><p>用户名：root</p><p>密码：123456</p><h3 id="2-2-spryker"><a href="#2-2-spryker" class="headerlink" title="2.2 spryker"></a>2.2 spryker</h3><p>地址：<a href="http://8.140.192.82:8081/">Redis Commander: Home</a></p><p>用户名：admin</p><p>密码：admin</p><h3 id="2-3-mysql"><a href="#2-3-mysql" class="headerlink" title="2.3 mysql"></a>2.3 mysql</h3><p>地址：8.140.192.82:13006</p><p>用户名：root</p><p>密码：123456</p><p>数据库：big_macket</p><h3 id="2-4-redis"><a href="#2-4-redis" class="headerlink" title="2.4 redis"></a>2.4 redis</h3><p>地址：8.140.192.82:16379</p><p>用户名：</p><p>密码：</p><h2 id="3-抽奖"><a href="#3-抽奖" class="headerlink" title="3. 抽奖"></a>3. 抽奖</h2><p><img src="/2024/05/29/xiang-mu/240529-xfg-da-ying-xiao/1717213664326.png" alt="抽奖流程"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大营销项目&quot;&gt;&lt;a href=&quot;#大营销项目&quot; class=&quot;headerlink&quot; title=&quot;大营销项目&quot;&gt;&lt;/a&gt;大营销项目&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2024/05/29/xiang-mu/240529-xfg-da-ying-xiao/Fne</summary>
      
    
    
    
    <category term="项目" scheme="https://zzyong24.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="https://zzyong24.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://zzyong24.github.io/2024/05/28/shu-ju-ku/mysql-fu-xi/"/>
    <id>https://zzyong24.github.io/2024/05/28/shu-ju-ku/mysql-fu-xi/</id>
    <published>2024-05-28T14:21:29.915Z</published>
    <updated>2024-05-28T14:21:29.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1 基础"></a>1 基础</h2><h3 id="1-1-DDL、DML、DCL、TCL"><a href="#1-1-DDL、DML、DCL、TCL" class="headerlink" title="1.1 DDL、DML、DCL、TCL"></a>1.1 DDL、DML、DCL、TCL</h3><blockquote><p><strong>DDL（Data Definition Languages）语句</strong>：即数据库定义语句，用来创建数据库中的表、索引、视图、存储过程、触发器等，常用的语句关键字有：CREATE,ALTER,DROP,TRUNCATE,COMMENT,RENAME。</p><p><strong>DML（Data Manipulation Language）语句</strong>：即数据操纵语句，用来查询、添加、更新、删除等，常用的语句关键字有：SELECT,INSERT,UPDATE,DELETE,MERGE,CALL,EXPLAIN PLAN,LOCK TABLE,包括通用性的增删改查。</p><p><strong>DCL（Data Control Language）语句</strong>：即数据控制语句，用于授权/撤销数据库及其字段的权限（DCL is short name of Data Control Language which includes commands such as GRANT and mostly concerned with rights, permissions and other controls of the database system.）。常用的语句关键字有：GRANT,REVOKE。</p><p><strong>TCL（Transaction Control Language）语句</strong>：事务控制语句，用于控制事务，常用的语句关键字有：COMMIT,ROLLBACK,SAVEPOINT,SET TRANSACTION。</p></blockquote><h3 id="1-2-数据库范式"><a href="#1-2-数据库范式" class="headerlink" title="1.2 数据库范式"></a>1.2 数据库范式</h3><blockquote><ul><li><p>第一范式： 所有列都是不可分割的原子</p></li><li><p>第二范式： 消除部分函数依赖(第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）)</p><p>例如：</p><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/1716427033769.png" alt="第二范式"></p></li><li><p>第三范式： 消除传递函数依赖(每一列数据都和主键直接相关，而不能间接相关)</p><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/1716427177963.png" alt="第三范式"></p></li></ul></blockquote><h3 id="1-3-多表关联"><a href="#1-3-多表关联" class="headerlink" title="1.3 多表关联"></a>1.3 多表关联</h3><h4 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">join</span> t2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>​    笛卡尔积实际上将表1所有数据与表2 一一匹配进行展示</p><p>例如：</p><p>因此t1 join t2</p><p>​    a            d                                 a         d</p><p>​    b            e                                 a         e    </p><p>​    c            f                                  a          f</p><p>​                                                     b         d</p><p>​                                                    …</p></blockquote><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">left</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319142752582?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><blockquote><p>表t1 与 表t2 进行关联, 关联上的中间部分 t2 表字段展示为实际数据</p><p>关联不上的左边部分, t2 表字段展示为null</p></blockquote><h4 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">right</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token comment">#等价于</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">left</span> <span class="token keyword">join</span> t1 <span class="token keyword">on</span> t2<span class="token punctuation">.</span>id <span class="token operator">=</span> t1<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319143202765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">inner</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319143445607?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><blockquote><p>内连接展示的是两表完全能匹配的部分</p></blockquote><h4 id="左表独有"><a href="#左表独有" class="headerlink" title="左表独有"></a>左表独有</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">left</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id <span class="token keyword">where</span> t2<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319143724064?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><blockquote><p>单独查询表1独有数据, 将表2存在数据的部分筛除出去即可</p></blockquote><h4 id="右表独有"><a href="#右表独有" class="headerlink" title="右表独有"></a>右表独有</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">right</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id <span class="token keyword">where</span> t1<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319143933426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="全连接FULL-OUTER-JOIN"><a href="#全连接FULL-OUTER-JOIN" class="headerlink" title="全连接FULL OUTER JOIN"></a>全连接FULL OUTER JOIN</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#在Mysql中不支持全连接,oracle中支持,在Mysql中可以使用合并结果集达到全连接的效果</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">union</span> <span class="token punctuation">(</span><span class="token keyword">all</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意点：</p><pre><code> 1. 多个select 语句union 时, 结果集列数必须相同, 同时列名也得一致, 以第一个select 列为标准 2. union 与 union all 的区别在于union all 对于完全重复数据不会去重, 而union会进行去重, 很影响性能, 因此尽量使用union all</code></pre><p>示例：</p><p>t1                                            t2                            t1 union t2                t1 union all t2 与 t1 union t2 区别仅在于 1 a 会出现两次,未</p><p>id    name                             id    name              id    name             进行去重。</p><p>1    a                                      1     a                      1     a</p><p>2    b                                     4     e                       2    b</p><p>3    c                                      5     f                       3    c</p><p>​                                                                             4     e</p><p>​                                                                             5     f</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#在上述场景中,若需要求得二表关联后的全连接数据,实际上是将表1 和 表2 左关联的数据与表2 和 表1左关联的数据合并,这里会发现中间数据会重复,而union自带去重,解决了这个问题</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">left</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id uniom <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">left</span> <span class="token keyword">join</span> t1 <span class="token keyword">on</span> t2<span class="token punctuation">.</span>id <span class="token operator">=</span> t1<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319142752582?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><blockquote><p>加上</p></blockquote><p><img src="https://img-blog.csdn.net/20170319143202765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><blockquote><p>使用union 自带去重后</p></blockquote><p><img src="https://img-blog.csdn.net/20170319144159774?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="并集去交集"><a href="#并集去交集" class="headerlink" title="并集去交集"></a>并集去交集</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">left</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id <span class="token keyword">where</span> t2<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">left</span> <span class="token keyword">join</span> t1 <span class="token keyword">on</span> t2<span class="token punctuation">.</span>id <span class="token operator">=</span> t1<span class="token punctuation">.</span>id <span class="token keyword">where</span> t1<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319144515693?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><blockquote><p>取到表1的独有关联表2的独有即为并集去交集</p></blockquote><h2 id="2-内核"><a href="#2-内核" class="headerlink" title="2 内核"></a>2 内核</h2><h3 id="2-1-MySQL-基本构造"><a href="#2-1-MySQL-基本构造" class="headerlink" title="2.1 MySQL 基本构造"></a>2.1 MySQL 基本构造</h3><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/1713491999502.png" alt="1713491999502"></p><h4 id="存储层"><a href="#存储层" class="headerlink" title="存储层"></a>存储层</h4><blockquote><p>​    存储层架构模式是插件式, 支持InnoDB、MyISAM、Memory等多个存储引擎,最常用的是InnoDB, 在MySql5.5.5 版本成为了默认存储引擎。同时,无论选用什么存储引擎, Server层是共用的。</p></blockquote><h5 id="MyISAM与InnoDB区别"><a href="#MyISAM与InnoDB区别" class="headerlink" title="MyISAM与InnoDB区别"></a>MyISAM与InnoDB区别</h5><blockquote><ol><li><p><strong>InnoDB支持事务，MyISAM不支持</strong></p></li><li><p><strong>InnoDB支持外键，而MyISAM不支持</strong></p></li><li><p><strong>InnoDB的B+树主键索引的叶子节点就是数据文件</strong>，辅助索引的叶子节点是主键的值；而MyISAM的B+树主键索引和辅助索引的叶子节点都是数据文件的<strong>地址指针</strong>。</p></li><li><p><strong>InnoDB不保存表的具体行数，执行select count(*) from table时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快（注意不能加有任何WHERE条件）；</strong></p></li><li><p><strong>InnoDB支持表、行(默认)级锁，而MyISAM支持表级锁</strong></p></li><li><p><strong>InnoDB表必须有唯一索引（如主键），而Myisam可以没有</strong></p></li><li><p><strong>Innodb存储文件有frm、ibd，而Myisam是frm、MYD、MYI</strong></p><p>​    <strong>Innodb：frm是表定义文件，ibd是数据文件</strong></p><p>​    <strong>Myisam：frm是表定义文件，myd是数据文件，myi是索引文件</strong></p></li></ol></blockquote><h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4><blockquote><p>​    连接器的创建实际上就是在输入以下命令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>h xxx <span class="token operator">-</span>P xxx <span class="token operator">-</span>u xxx <span class="token operator">-</span>p <span class="token comment">#主机端口  用户   密码(不建议密码直接跟在-p后面, 使用history命令能查看所有执行的命令,可能会泄露数据库连接密码)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>权限问题：</p><p>创建连接的过程中,连接器会读取权限表中当前登录用户所拥有的权限,之后这次连接持续时间内都将拥有创建时所读取到的权限级别。(因此在增减权限时, 被授权用户需要断开连接, 重新建立连接才能获取权限)。</p><p>长连接与短连接：</p><p>长连接指客户端持续有请求,则一直使用同一个连接。</p><p>短连接指每次执行很少几次查询后就断开连接, 下次查询再重新建立。</p><p>由于建立连接过程比较复杂, 所以尽量使用长连接。</p></blockquote><h4 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h4><blockquote><p>查询缓存是以key(SQL)-value(结果)直接存储在内存中的, 如果在查询中能够去查询缓存找到缓存SQL, 那么这个value会直接返回给客户端。</p><p>查询缓存利大于弊, 由于只要对这张表进行了更新,那么针对于这个表的所有查询缓存都会失效, MySQL 也提供了查询缓存的按需使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 通过SQL_CACHE 指定使用查询缓存</span><span class="token keyword">select</span> SQL_CACHE <span class="token operator">*</span> <span class="token keyword">from</span> T <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意,在MySQL 8.0 以上版本已经彻底没有查询缓存这个功能了。</p></blockquote><h4 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h4><blockquote><p>分析器的主要任务是解析一条SQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Select</span> id<span class="token punctuation">,</span> name <span class="token keyword">from</span> student<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主要验证一条SQL写的对不对,</p><p>需要干以下几件事情</p><ol><li>解析语句, 生成解析树</li><li>检查语句中的关键字、表、字段是否存在</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 出现问题后会报错(以下是常见错误之一)</span>ERROR <span class="token number">1064</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><blockquote><p>经过分析器, MySQL已经知道了你要做什么, 接下来是经过优化器的处理。</p><p>优化器主要干以下几件事情</p><ol><li>一条语句有多表关联时, 各个表的连接顺序(原则是尽可能扫描行记录少的表)</li><li>表中有多个索引时, 决定使用哪个索引</li></ol></blockquote><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><blockquote><p>执行器做的工作有以下几点</p><ol><li>检查当前用户是否有查询权限, 若没有, 则会进行报错</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ERROR <span class="token number">1142</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: <span class="token keyword">SELECT</span> command denied <span class="token keyword">to</span> <span class="token keyword">user</span> <span class="token string">'b'</span><span class="token variable">@'localhost'</span> <span class="token keyword">for</span> <span class="token keyword">table</span> <span class="token string">'T'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   2.检查完执行权限之后, 执行器会调用底层数据库引擎接口, 执行查询语句</p></blockquote><h3 id="2-2-WAL、redo-log、undo-log、binlog"><a href="#2-2-WAL、redo-log、undo-log、binlog" class="headerlink" title="2.2 WAL、redo log、undo log、binlog"></a>2.2 WAL、redo log、undo log、binlog</h3><blockquote><p>redo log(引擎层日志,仅存在于InnoDB)：</p><p>​    WAL(Write-Ahead Logging) 关键在于先写日志, 再写磁盘。 在执行更新操作SQL语句时, 会先将更新写入至redo log日志中,本质上redo log日志也是写磁盘操作, 但因为写日志可以追加写,而更新操作需要找到要更新的存储位置, 再进行更新操作, 涉及到寻址过程,随机写会比较耗时。</p><p>​    但由于redo log只有一份, 写满后再写会覆盖掉前面的redo log日志, 因此redo log满了之后, 就必须要进行落盘了。(系统空闲时, 也会推进check point的位置, 慢慢落盘更新操作)</p></blockquote><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/1713494917083.png" alt="1713494917083"></p><blockquote><p>undo log：</p><p>​    undo log有两个作用：提供回滚和多个行版本控制(MVCC)。</p><p>​    在数据修改的时候，不仅记录了redo，还记录了相对应的undo，如果因为某些原因导致事务失败或回滚了，可以借助该undo进行回滚。</p><p>​    undo log和redo log记录物理日志不一样，它是逻辑日志。<strong>可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。</strong></p><p>crash-safe：</p><p>​    redo log 是InnoDB所独有的, InnoDB正是由于拥有了redo log 所以才具备crash-safe的能力(即使MySQL宕机, 也不会丢失数据的能力。)</p></blockquote><blockquote><p>binlog(Server层日志)：</p><p>​    binlog主要记录的是执行update这个语句的原始逻辑, 属于逻辑日志, 而redo log属于物理日志, 记录的是“在某个数据页上做了那些修改”。仅仅存在binlog日志无法实现crash-safe能力。</p><p>​    主要用于数据库的备份。</p></blockquote><blockquote><p>​    在update操作中, 我们可以看到在写redo log过程中, 进行了一次<strong>二阶段提交</strong>(写入redo log时, 首先进行了prepare操作, 待得binlog写入完毕, 才进行redo log 写操作commit, 有点类似于事务)。</p><p>​    需要二阶段提交主要是<strong>保证redo log和binlog的一致性</strong>,如果二者不一致, 那么通过redo log恢复的数据库和使用binlog恢复的数据库将会不一致。</p><p>redo log和binlog具有关联性，在恢复数据时，redo log用于恢复主机故障时的未更新的物理数据，binlog用于备份操作。每个阶段的log操作都是记录在磁盘的，在恢复数据时，redo log 状态为commit则说明binlog也成功，直接恢复数据；如果redo log是prepare，则需要查询对应的binlog事务是否成功，决定是回滚还是执行。</p></blockquote><h4 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h4><p><img src="https://static001.geekbang.org/resource/image/2e/be/2e5bff4910ec189fe1ee6e2ecc7b4bbe.png" alt="img"></p><blockquote><p>在上述提交事务的时候，innodb先更新数据行，然后写入redolog，再处于prepare阶段，最后写入binlog并提交事务。</p><p>在写入redolog以及binlog这两个日志的过程中，便是处于两阶段体检，prepare -&gt; commit;</p><p>能够避免由于事务提交失败，导致的redolog和binlog二者不一致问题。</p></blockquote><h4 id="redolog和binlog的区别"><a href="#redolog和binlog的区别" class="headerlink" title="redolog和binlog的区别"></a>redolog和binlog的区别</h4><blockquote><p>redo log是InnoDB引擎特有的，只记录该引擎中表的修改记录。binlog是MySQL的Server层实现的，会记录所有引擎对数据库的修改。 </p><p> redo log是物理日志，记录的是在具体某个数据页上做了什么修改；binlog是逻辑日志，记录的是这个语句的原始逻辑。 </p><p> redo log是循环写的，空间固定会用完；binlog是可以追加写入的，binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p></blockquote><h3 id="2-3-事务"><a href="#2-3-事务" class="headerlink" title="2.3 事务"></a>2.3 事务</h3><blockquote><p>​    简单来说, 事务就是保证一组数据库操作,要么全部成功,要么全部失败。在MySQL中, 事务是基于引擎层实现的, 而并不是所有的引擎都支持事务操作, 比如MySQL原生引擎, MyISAM引擎就不支持事务。这也是MyISAM会被InnoDB替代的重要原因之一。</p></blockquote><h4 id="隔离性与隔离级别"><a href="#隔离性与隔离级别" class="headerlink" title="隔离性与隔离级别"></a>隔离性与隔离级别</h4><h5 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h5><blockquote><p>事务的四个特征,ACID分别为原子性、一致性、隔离性、持久性</p><p>原子性(Atomicity)：一个事务中的所有操作要么全部执行,要么全部不执行。</p><p>一致性(Consistency)：在事务的开始之前和事务的结束以后,数据库完整性未被破坏。(写入的数据满足约束、触发器等)</p><p>隔离性(Isolation)：数据库允许多个并发事务同时对数据进行读写和修改的能力,隔离性防止事务交叉执行导致数据不一致。</p><p>持久性(Durability)：事务处理结束后,对数据的修改就是持久的。</p></blockquote><h5 id="什么是隔离级别"><a href="#什么是隔离级别" class="headerlink" title="什么是隔离级别"></a>什么是隔离级别</h5><blockquote><p>​    当数据库上同时有多个事务同时执行时, 就可能出现以下问题：</p><p>脏读(dirty read)： 读到了其他事物未提交的数据</p><p>不可重复读(non-repeatable read)：前后读取的记录内容不一致, 简单来说就是在自己的事务中, 两次读结果不一样, 因为能看到其他事务的修改(偏向于更新操作)</p><p>幻读(phantom read)：幻读侧重的方面是某一次的 select 操作得到的结果所表征的数据状态无法支撑后续的业务操作。更为具体一些：select 某记录是否存在，不存在，准备插入此记录，但执行 insert 时发现此记录已存在，无法插入，此时就发生了幻读。(偏向于增删)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">step1 T1: <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>step2 T2: <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'big cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>step3 T1: <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'big cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>step4 T1: <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>T1 ：主事务，检测表中是否有 id 为 <span class="token number">1</span> 的记录，没有则插入，这是我们期望的正常业务逻辑。T2 ：干扰事务，目的在于扰乱 T1 的正常的事务执行。在 RR 隔离级别下，step1、step2 是会正常执行的，step3 则会报错主键冲突，对于 T1 的业务来说是执行失败的，这里 T1 就是发生了幻读，因为 T1 在 step1 中读取的数据状态并不能支撑后续的业务操作，T1：“见鬼了，我刚才读到的结果应该可以支持我这样操作才对啊，为什么现在不可以”。T1 不敢相信的又执行了 step4，发现和 setp1 读取的结果是一样的（RR下的 MVCC机制）。此时，幻读无疑已经发生，T1 无论读取多少次，都查不到 id <span class="token operator">=</span> <span class="token number">1</span> 的记录，但它的确无法插入这条他通过读取来认定不存在的记录（此数据已被T2插入），对于 T1 来说，它幻读了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps：对于不可重复度和幻读可以这样理解, </p><p>​    因为不可重复读的会出现是在读已提交隔离级别下, 而在读已提交隔离级别下, read view 是在每一次查询SQL的执行时创建的, 因此在这之间如果有其他事物对数据进行了修改且完成提交, 那么同一个事务的两次Select read view 可能不一致, 因此导致了不可重复读。</p><p>​    而针对于幻读, 简单来说就是其他事物的增删操作对当前事务会起到影响。 </p></blockquote><p>由于以上问题的出现, 因此需要使用隔离级别来解决</p><blockquote><p>首先需要明确的一点是,隔离的越严格, 效率就会越低。事务的隔离级别包括：</p><p>读未提交(read uncommitted)：一个事务还没提交时,它做的变更其他事务就能够看到。</p><p>读提交(read committed)：一个事务提交之后, 它做的变更其他事务才能看到。</p><p>可重复读(repeatable read)：一个事务在执行中所看到的数据, 和这个事务在启动时看到的是一致的,中间其他事务的修改该事务是读不到的。</p><p>串行化(serializable)：对于同一行记录, 在前一个事务为提交之前, 后一个事务无法对其进行操作。(通过加锁完成)</p></blockquote><p><img src="https://static001.geekbang.org/resource/image/7d/f8/7dea45932a6b722eb069d2264d0066f8.png" alt="img"></p><blockquote><p>以上图片是一个实际并行事务的例子, 在不同的隔离级别下, V1、V2、V3读到的数据都是不一致的</p><p>读未提交： 由于时序图中, 事务B修改值操作再事务A读值操作之前, 而且当前处于读未提交隔离级别, 尽管事务B尚未提交修改操作, 但这对于事务A来说仍然是可读的, 因此V1、V2、V3的值分别为2、2、2。        <strong>2,2,2</strong></p><p>读已提交：在读已提交事务隔离级别中, 事务A读取到的V1仍然是1, 因为事务B尚未提交, 待得事务B提交完成之后, 事务A读取到的数值V2、V3就是事务B提交完成修改后的2了。                <strong>1,2,2</strong></p><p>可重复读：不可重复读简单理解就是一个事务对于一行数据只会读取一次, 因此在事务A启动时, 读取到的值就是1, 无论后序事务B对其进行了怎样的修改, 事务A都不会再去读, 因此V1、V2的值都是最开始读取到的1, 待得事务A提交之后,V3 才能读取到事务B修改到的值2。                            <strong>1,1,2</strong></p><p>串行化：在串行化中, 事务A首先开启, 事务A拿到读锁, 读取数值, 因此事务B便被阻塞了, 只有事务A提交之后释放读锁, 事务B才可能拿到写锁对事务A进行修改。因此V1、V2的值是1, 事务A提交之后, 事务B拿到写锁, 进行数值的修改, V3的便是1了2了。    <strong>1,1,2</strong></p></blockquote><h5 id="隔离级别实现原理"><a href="#隔离级别实现原理" class="headerlink" title="隔离级别实现原理"></a>隔离级别实现原理</h5><p><img src="https://static001.geekbang.org/resource/image/d9/ee/d9c313809e5ac148fc39feff532f0fee.png" alt="img"></p><blockquote><p>在MySQL中, 每条更新操作除了记载redo log 之外还会记载undo log, undo log是用来将这个操作反向回滚, 比如操作时将1改成2, 在redo log便会记载这个操作, 同时在undo log也会记载将2改成1, 用于后序事务回滚。</p><p>因此我们可以发现尽管是一条记录, 在数据库中可能会存在多个版本, 这实际上就是数据库的<strong>多版本并发控制(MVCC)</strong></p></blockquote><blockquote><p>事务隔离级别实际上是基于一致性视图read view实现的,</p><p>读未提交直接返回记录上的最新值, 没有视图概念。</p><p>读提交视图是在每次读请求的时候创建的(自己每读一次可能拿到的视图都不一致)。</p><p>可重复读视图是在事务启动的时候(第一条执行的sql)创建的, 之后都使用这个视图。</p><p>串行化直接加锁避免并行访问, 不存在视图概念。</p></blockquote><h5 id="什么是MVCC"><a href="#什么是MVCC" class="headerlink" title="什么是MVCC"></a>什么是MVCC</h5><blockquote><p>多版本并发控制： 读取数据时通过一种类似快照的方式将数据保存下来, 这样读锁和写锁就不冲突了, 不同事务session会看到自己特定版本的数据, 版本链。</p><p>MVCC只在RC和RR两个隔离级别下工作。</p><p>聚族索引记录中有两个必要的隐藏列：</p><p>trx_id: 用来存储每次对某条聚族索引记录进行修改时的事务id</p><p>roll_pointer: 每次对哪条聚族索引记录有修改的时候, 都会将老版本写入undo log中, 这个roll_pointer就是存了一个指针, 用来指向这条聚族索引记录的上一个版本位置, 通过它来获取上一个版本的记录信息；</p></blockquote><h5 id="修改事务的隔离级别"><a href="#修改事务的隔离级别" class="headerlink" title="修改事务的隔离级别"></a>修改事务的隔离级别</h5><blockquote><p>在oracle数据库中, 默认隔离级别是读提交。</p><p>MySQL中可以通过以下语句查看当前事务隔离级别。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'transaction_isolation'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以使用以下SQL来设置隔离级别</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> transaction_isolation <span class="token operator">=</span> <span class="token string">'read-committed'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="InnoDB如何保证事务的原子性、持久性和一致性"><a href="#InnoDB如何保证事务的原子性、持久性和一致性" class="headerlink" title="InnoDB如何保证事务的原子性、持久性和一致性"></a>InnoDB如何保证事务的原子性、持久性和一致性</h4><blockquote><p>利用undo log保障原子性。该log保存了事务发生之前的数据的一个版本，可以用于回滚，从而保证事务原子性。 </p><p> 利用redo log保证事务的持久性，该log关注于事务的恢复.在重启mysql服务的时候，根据redo log进行重做，从而使事务有持久性。 </p><p> 利用undo log+redo log保障一致性。事务中的执行需要redo log，如果执行失败，需要undo log 回滚。</p></blockquote><h4 id="事务的开启方式"><a href="#事务的开启方式" class="headerlink" title="事务的开启方式"></a>事务的开启方式</h4><blockquote><p>在MySQL中, 事务既可以手动提交, 也可以交给系统自动提交</p><ol><li>显式启动事务语句， begin 或 start transaction。配套的提交语句是 commit，回滚语句是 rollback。</li><li>set autocommit=0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。(默认autocommit=1, 表示系统自动提交事务)</li></ol></blockquote><h4 id="长事务的弊端"><a href="#长事务的弊端" class="headerlink" title="长事务的弊端"></a>长事务的弊端</h4><blockquote><p>长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数 据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占 用存储空间。 </p><p>在MySQL 5.5及以前的版本，回滚日志是跟数据字典一起放在ibdata文件里的，即使长事务最终提交，回滚被清理，文件也不会变小。我见过数据只有20GB，而回滚段有200GB的库。最终 </p><p>只好为了清理回滚段，重建整个库。 除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库。</p></blockquote><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">查询长事务超过60S的select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="场景题1"><a href="#场景题1" class="headerlink" title="场景题1"></a>场景题1</h4><blockquote><p>如何避免长事务对业务的影响？</p><p><strong>首先，从应用开发端来看：</strong></p><ol><li>确认是否使用了 set autocommit=0。这个确认工作可以在测试环境中开展，把 MySQL 的 general_log 开起来，然后随便跑一个业务逻辑，通过 general_log 的日志来确认。一般框架如果会设置这个值，也就会提供参数来控制行为，你的目标就是把它改成 1。</li><li>确认是否有不必要的只读事务。有些框架会习惯不管什么语句先用 begin/commit 框起来。我见过有些是业务并没有这个需要，但是也把好几个 select 语句放到了事务中。这种只读事务可以去掉。</li><li>业务连接数据库的时候，根据业务本身的预估，通过 SET MAX_EXECUTION_TIME 命令，来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。</li></ol><p><strong>其次，从数据库端来看：</strong></p><ol><li>监控 information_schema.Innodb_trx 表，设置长事务阈值，超过就报警 / 或者 kill；</li><li>Percona 的 pt-kill 这个工具不错，推荐使用；</li><li>在业务功能测试阶段要求输出所有的 general_log，分析日志行为提前发现问题；</li><li>如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2（或更大的值）。如果真的出现大事务导致回滚段过大，这样设置后清理起来更方便。</li></ol></blockquote><h3 id="2-4-索引"><a href="#2-4-索引" class="headerlink" title="2.4 索引"></a>2.4 索引</h3><blockquote><p>索引本质上是一种数据结构, 简略来说 <strong>索引是帮助MySQL快速检索数据的一种排好序的数据结构</strong></p></blockquote><h4 id="创建索引的三种方法"><a href="#创建索引的三种方法" class="headerlink" title="创建索引的三种方法"></a>创建索引的三种方法</h4><blockquote><ol><li><p>创建表的时候创建索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_dept<span class="token punctuation">(</span>    <span class="token keyword">no</span> <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    info <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">index</span> index_no<span class="token punctuation">(</span><span class="token keyword">no</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>已建表中添加索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> index_name <span class="token keyword">on</span> t_dept<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改表创建索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> t_dept <span class="token keyword">add</span> <span class="token keyword">index</span> index_name<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></blockquote><h4 id="索引的三种实现模型"><a href="#索引的三种实现模型" class="headerlink" title="索引的三种实现模型"></a>索引的三种实现模型</h4><h5 id="基于哈希表"><a href="#基于哈希表" class="headerlink" title="基于哈希表"></a>基于哈希表</h5><blockquote><p>基于哈希表的索引缺点很明显, 容易造成哈希冲突, 造成哈希冲突之后链表的检索速度不够快, 而且哈希算法的选择也是需要深思熟虑的一个点, 基于<strong>哈希表的索引适合应用于做等值查询</strong></p><p>只有 Memory 引擎显式支持哈希索引。</p><p>Hash索引不支持范围查询，无法用于排序, 也不支持部分索引列匹配查找。</p></blockquote><h5 id="基于有序数组"><a href="#基于有序数组" class="headerlink" title="基于有序数组"></a>基于有序数组</h5><blockquote><p>基于有序数组的索引优点在于<strong>做等值检索与范围检索时性能都十分优秀</strong>(二分查找), 但是一旦需要更新数据就比较麻烦了, 由于需要维系数组的有序, 插入需要挪动后面所有元素。因此<strong>有序数组索引只适合于静态存储引擎</strong></p></blockquote><h5 id="基于多叉树"><a href="#基于多叉树" class="headerlink" title="基于多叉树"></a>基于多叉树</h5><p><img src="https://static001.geekbang.org/resource/image/04/68/04fb9d24065635a6a637c25ba9ddde68.png" alt="img"></p><blockquote><p>树的层数过高会导致需要访问的数据块过多</p></blockquote><h6 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h6><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/.%5CMySql%E5%A4%8D%E4%B9%A0%5Cimage-20211016163825186.png" alt="image-20211016163825186"></p><blockquote><p>在B树中， 每一个结点(磁盘块)都存储了索引以及数据，</p><p>模拟下查找key为29的data的过程：</p><p>1、根据根结点指针读取文件目录的根磁盘块1。【磁盘IO操作<strong>1次</strong>】</p><p>2、磁盘块1存储17，35和三个指针数据。我们发现17&lt;29&lt;35，因此我们找到指针p2。</p><p>3、根据p2指针，我们定位并读取磁盘块3。【磁盘IO操作<strong>2次</strong>】</p><p>4、磁盘块3存储26，30和三个指针数据。我们发现26&lt;29&lt;30，因此我们找到指针p2。</p><p>5、根据p2指针，我们定位并读取磁盘块8。【磁盘IO操作<strong>3次</strong>】</p><p>6、磁盘块8中存储28，29。我们找到29，获取29所对应的数据data。</p><p><strong>因此， B树索引使每次磁盘I/O读取到内存的数据都发挥了作用， 从而提高了查询效率。</strong></p></blockquote><h6 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h6><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/.%5CMySql%E5%A4%8D%E4%B9%A0%5Cimage-20211016164358084.png" alt="image-20211016164358084"></p><blockquote><p>与B树最大的不同在于：</p><p>​        数据只存储于叶子节点，而非叶子节点只存储键值信息， 因此B+树的高度比B树低得多</p><p>而我们知道， 每一个结点都代表一次磁盘I/O， 非叶子节点不存储数据之后， 就可以存储更多的索引信息， 因此在检索时， 可以通过更低的代价(更少的磁盘I/O)找到最终索引数据存储于哪一个磁盘块。</p><p>另外， B+树和B树的不同在于在B+Tree上通常有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构。所以我们除了可以对B+Tree进行主键的范围查找和分页查找，还可以从根节点开始，进行随机查找。</p></blockquote><h4 id="聚族索引与二级索引"><a href="#聚族索引与二级索引" class="headerlink" title="聚族索引与二级索引"></a>聚族索引与二级索引</h4><p><strong>主键索引树为B+树，普通索引也有一颗索引树，普通索引命中时，先基于普通索引查询普通索引树对应的主键ID,在基于主键ID查询主键索引的B+树</strong></p><blockquote><p>在InnoDB中, 主键索引称为聚族索引, 而非主键索引称为普通(二级)索引。</p><p>在主键索引中, 叶子节点内容存储的是整行数据, 而在二级索引中, 存储的值是主键的值。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> T<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> k <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">index</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下图片便是上述建表中索引存储的值的情况, 可以看出ID作为主键索引, 存储的值为这一行完整的数据, 而k作为二级索引, 记录的是主键对应的值。</p></blockquote><p><img src="https://static001.geekbang.org/resource/image/dc/8d/dcda101051f28502bd5c4402b292e38d.png" alt="img"></p><p><strong>那么主键索引和普通索引的区别在于哪里呢</strong></p><blockquote><p>主要区别在于使用普通索引进行查询需要<strong>回表</strong></p><p>什么是回表？我们根据上图主键索引和普通索引存储的东西来看, 很清楚的能够发现主键索引直接存储了这一行记录的所有信息, 因此使用主键查询的时候, 我们直接能够从B+树中获取这行的所有字段信息, 而<strong>使用普通索引进行查询时, 查到的仅仅是主键ID的值, 还需要根据这个ID值去表中查询具体的记录行</strong>, 这个操作便被称为回表。</p></blockquote><h4 id="索引的维护"><a href="#索引的维护" class="headerlink" title="索引的维护"></a>索引的维护</h4><blockquote><p>在使用索引的过程中,插入新的值需要维护B+树索引的有序性, 因此可能造成页分裂与页合并。</p><p>举个例子：</p><p>当前 ID索引如下所示</p><pre class="line-numbers language-none"><code class="language-none">1,2,3,4,6,7,8,9,10 |<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到10已经存满了, 那么这个时候我又插入了一个ID为5的数据会发生什么情况呢, 因为需要保证B+树索引的有序性, 因此必须重新创建数据页存储索引 ,便会造成以下情况</p><pre class="line-numbers language-none"><code class="language-none">1,2,3,4,5,6,7,8,9 | 10 |<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要将原来页的数据挪到新的页, 这个称为<strong>页分裂</strong></p><p><strong>那么如何防止页分裂呢?</strong></p><p>使用自增主键便可以防止页分裂,  使用自增主键之后, 由于新增的主键都是比之前存储的主键数值大, 因此不涉及插入操作, 都是追加操作, 因此也不存在叶子节点的分裂。</p><p>同理, 那什么是页合并呢？</p><p>页合并由于相邻的两个页数据存储利用率过低, 导致两个数据页合并。</p><p><strong>使用逻辑删除替换物理删除能防止页合并。</strong></p></blockquote><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><blockquote><p>前面提到使用二级索引会导致回表, 那么什么情况下会使用覆盖索引而不会导致回表呢,很简单, 使用覆盖索引查询覆盖索引存的东西(即主键), 我们称之为覆盖索引。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> ID <span class="token keyword">from</span> T <span class="token keyword">where</span> k<span class="token operator">=</span><span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>覆盖索引不光适用于查询主键的情况, 在使用普通索引或者联合索引的最左匹配字段时,查询的结果是联合索引的字段或者主键, 不用回表, 直接返回结果。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 联合索引(ID,Name)</span><span class="token keyword">select</span> Name <span class="token keyword">from</span> T <span class="token keyword">where</span> ID<span class="token operator">=</span><span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="普通索引和唯一索引如何选择-Change-buffer"><a href="#普通索引和唯一索引如何选择-Change-buffer" class="headerlink" title="普通索引和唯一索引如何选择(Change buffer)"></a>普通索引和唯一索引如何选择(Change buffer)</h4><blockquote><p>普通索引允许被索引的数据列包含重复的值。比如说，因为人有可能同名，所以同一个姓名在同一个“员工个人资料”数据表里可能出现两次或更多次。</p><p>唯一索引可以保证数据记录的唯一性。(UNIQUE INDEX)</p></blockquote><h6 id="查找过程中"><a href="#查找过程中" class="headerlink" title="查找过程中"></a>查找过程中</h6><blockquote><p>假设，执行查询的语句是 select id from T where k=5。这个查询语句在索引树上查找的过程，先是通过 B+ 树从树根开始，按层搜索到叶子节点，也就是图中右下角的这个数据页，然后可以认为数据页内部通过二分法来定位记录。</p><ul><li><p>对于普通索引来说，查找到满足条件的第一个记录 (5,500) 后，需要查找下一个记录，直到碰到第一个不满足 k=5 条件的记录。</p></li><li><p>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</p></li></ul><p><strong>在以上场景中,二者性能微乎其微</strong></p></blockquote><blockquote><p>因为在MySQL中是以页为单位将记录从磁盘中读取出来, 在InnoDB中, 默认页大小为16KB</p><p>所以对于普通索引而言, 已经加载出来一页了, 顺序查找第一个不满足条件的记录可太简单了, 只需要移动一次指针即可, 针对最坏情况, 找到的记录刚好是这一页的最后一条, 就需要加载第二个页, 不过这个情况出现的可能性微乎其微, 因为一个数据页可以存放近千个key。</p></blockquote><h6 id="更新过程中"><a href="#更新过程中" class="headerlink" title="更新过程中"></a>更新过程中</h6><blockquote><p><strong>change buffer：</strong></p><p>​    当需要更新一条数据时, 如果这条数据(包含数据的数据页)在内存中则直接对其进行更新, 如果不在的话, InnoDB会将更新操作缓存在change buffer 中, 这样就不需要从磁盘中加载这个数据页了, <strong>在下次查询这个数据页时, 会先执行change buffer 和这个数据页的 merge操作, 将更新实际写入, 再完成查询操作。</strong></p><p>​    虽然名字叫做change buffer , 但是实际上是可以进行持久化的。</p><p>​    merge操作除了加载数据页到内存中会执行, 系统后台也会有线程定期执行merge ,在数据库正常关闭（shutdown）的过程中，也会执行 merge 操作。</p><p><strong>优点：</strong></p><p>​    显然，如果能够将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用 buffer pool 的，所以这种方式还能够避免占用内存，提高内存利用率。</p><p><strong>change buffer内存大小的设置(0即为关闭)：</strong></p><p>​    change buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数 innodb_change_buffer_max_size 来动态设置。这个参数设置为 50 的时候，表示 change buffer 的大小最多只能占用 buffer pool 的 50%。</p></blockquote><blockquote><p>对于唯一索引, 更新过程中需要检查是否满足了唯一性约束, 比如要插入(4,400)这条记录, 就必须判断当前表中是否有k=4的记录, 而判断这个记录是否存在必须<strong>将其读入到内存中</strong>。既然已经读到内存中了, 也就没change buffer什么事情了, 所以对于唯一索引的更新, 读到内存中更新是最快的方法, 所以读到内存也是必不可少的开支。</p><p>而对于普通索引, 如果待更新页在内存中, 那么和唯一索引一样, 直接更新即可。</p><p>但是如果待更新页不在内存中, 普通索引是不用加载记录页到内存的, 直接将更新操作记录在change buffer里面就好了, 而唯一索引还要傻乎乎的去加载数据页到内存。</p></blockquote><h4 id="Change-Buffer的使用场景"><a href="#Change-Buffer的使用场景" class="headerlink" title="Change Buffer的使用场景"></a>Change Buffer的使用场景</h4><blockquote><p>上面已经分析了Change Buffer适用于普通索引的更新操作</p><p>但是是不是所有场景都可以用Change Buffer呢？</p><p>​    其实不是的, Change Buffer和数据页Merge之前, Change Buffer记录的变更越多, 收益就越大。但是反过来来说, 如果一个业务都是更新之后就查找, 那么Change Buffer既不会起到加速的作用, 甚至还会起到相反的作用, 因为要维护Change Buffer和数据页的merge 还要维护Change Buffer本身。</p><p>​    这种情况下应该关闭掉Change Buffer</p></blockquote><h4 id="Change-Buffer和Redo-log区别"><a href="#Change-Buffer和Redo-log区别" class="headerlink" title="Change Buffer和Redo log区别"></a>Change Buffer和Redo log区别</h4><blockquote><p>数据页在内存，那就修改数据页，写redo log，如果数据页不在内存，修改的也不是唯一索引，而是普通索引，那就写change buffer。并把这个change buffer写入到redo log，防止更新丢失。</p><p>如果要简单地对比这两个机制在提升更新性能上的收益的话，<strong>redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。</strong></p></blockquote><h4 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h4><blockquote><p>使用索引的过程中, 对于字符串索引可以匹配到最左N个字符, 对于联合索引可以匹配到最左N个字段。</p><p>比如联合索引(id, name)</p><p>针对查询 id=1 and name=“xxx” 可以使用到索引</p><p>​        查询id=1  可以使用到索引</p><p>​        查询id=1 and name=“xx%” 可以使用到索引</p><p>​        查询name=“xxx” 无法使用到索引</p></blockquote><h4 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h4><blockquote><p>针对联合索引(name, age), 需求查询姓张,年龄为10岁的所有男孩</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tuser <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'张%'</span> <span class="token operator">and</span> age<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> ismale<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们已经知道通过最左匹配原则, 可以使用到联合索引</p><p>在MySQL 5.6 之前, 使用了联合索引之后, 只能够通过联合索引找到的主键ID, 回表一一查询</p><p>而在MySQL 5.6 引入了<strong>索引下推</strong>优化, 可以在索引遍历过程中, 对索引包含的字段先做判断, 直接过滤掉不满足条件的记录, 减少回表次数。</p><p>上述案例中, 因为age是联合索引的一部分, 因此可以使用到age=10这个条件针对age做一次筛除, 减少回表次数</p></blockquote><p><img src="https://static001.geekbang.org/resource/image/76/1b/76e385f3df5a694cc4238c7b65acfe1b.jpg" alt="img"></p><p>如上图所示, 实际回表次数只有两次, 因为ID3 和 ID6 在使用联合索引筛查时已经由于不满足联合索引age部分的判定条件而被筛除出去了。</p><h4 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h4><blockquote><ol><li>使用or</li><li>复合索引未使用最左字段</li><li>like以%开头</li><li>需要进行类型转换</li><li>where中索引列有计算</li><li>where中索引列使用了函数</li><li>如果MySQL觉得全表扫描更快时(数据量少)</li></ol></blockquote><h4 id="explain执行计划"><a href="#explain执行计划" class="headerlink" title="explain执行计划"></a>explain执行计划</h4><blockquote><p>explain关键字用于分析sql语句的执行情况，可以通过他进行sql语句的性能分析。 </p><p> type：表示连接类型，从好到差的类型排序为 </p><ul><li>system：系统表，数据已经加载到内存里。 </li><li>const：常量连接，通过索引一次就找到。 </li><li>eq_ref：唯一性索引扫描，返回所有匹配某个单独值的行。 </li><li>ref：非主键非唯一索引等值扫描，const或eq_ref改为普通非唯一索引。 </li><li>range：范围扫描，在索引上扫码特定范围内的值。 </li><li>index：索引树扫描，扫描索引上的全部数据。 </li><li>all：全表扫描。</li></ul><p> key：显示MySQL实际决定使用的键。 </p><p> key_len：显示MySQL决定使用的键长度，长度越短越好 </p><p> Extra：额外信息 </p><ul><li>Using filesort：MySQL使用外部的索引排序，很慢需要优化。 </li><li>Using temporary：使用了临时表保存中间结果，很慢需要优化。 </li><li>Using index：使用了覆盖索引。 </li><li>Using where：使用了where。</li></ul></blockquote><h4 id="SQL优化过程"><a href="#SQL优化过程" class="headerlink" title="SQL优化过程"></a>SQL优化过程</h4><blockquote><ol><li>通过慢日志定位执行较慢的SQL语句</li><li>利用explain对这些关键字段进行分析</li><li>根据分析结果进行优化</li></ol></blockquote><h4 id="场景题1-1"><a href="#场景题1-1" class="headerlink" title="场景题1"></a>场景题1</h4><blockquote><p>question：</p><p>​    <strong>分析一下哪些场景下应该使用自增主键，而哪些场景下不应该。</strong></p><p>比如使用身份证作为主键还是使用自增主键呢？</p><p>​    使用身份证等业务字段作为主键有以下几个问题</p><ol><li><p>主键不自增, 可能导致页分裂</p></li><li><p>二级索引存储的是主键的值, 会导致存储的数据量很大</p></li></ol><p><strong>什么时候可以使用业务字段作为主键呢？</strong></p><ol><li>只有一个索引</li><li>该索引是唯一索引(如果确定某个数据列只包含彼此各不相同的值，在为这个数据列创建索引的时候，就应该用关键字UNIQUE把它定义为一个唯一索引。)</li></ol></blockquote><h4 id="场景题2"><a href="#场景题2" class="headerlink" title="场景题2"></a>场景题2</h4><blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>geek<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>b<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>c<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>d<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>b<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>c<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>c<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>ca<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>c<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>cb<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>c<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>b<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有上述一个表, 请问以上联合索引ca、cb是必须的吗？</p><p>答： cb 是必须的, ca可以去掉</p><p>因为主键索引是复合索引【a,b】</p><p>遵循最左匹配原则【a,b】 可以覆盖到 【a】, 【a,b】</p><p>而还有一个普通索引【c】</p><p>根据覆盖索引, 使用普通索引【c】查询到的实际上是主键【a,b】</p><p>可以建立这样一条映射【c,a,b】</p><p>因此可以认为当前存在这样一个复合索引【c,a,b】</p><p>根据最左匹配原则, 复合索引【c,a,b】可以覆盖到【c,a】, 但是无法覆盖到【c,b】</p><p><strong>因此添加的索引【c,a】是多余的, 而索引【c,b】是有必要的</strong></p></blockquote><h3 id="2-5-锁"><a href="#2-5-锁" class="headerlink" title="2.5 锁"></a>2.5 锁</h3><p>可参考文章：<a href="https://www.cnblogs.com/qdhxhz/p/15587726.html">一文详解MySQL的锁机制 - 雨点的名字 - 博客园 (cnblogs.com)</a></p><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/v2-4c17d8e79c98524c0f5d90d843cea70b_r.jpg" alt="各种锁的描述维度"></p><h4 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h4><blockquote><p>全局锁是对整个数据库实例加锁, 如果需要令整个库处于只读状态时, 可以使用全局锁。使用全局锁之后, 整个库的数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句将会被阻塞。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 添加全局锁的语句</span>Flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>全局锁的常见使用场景是<strong>全库逻辑备份</strong></p><p>然而使用了全局锁会存在很多需要注意的细节</p><ul><li>如果在主库上进行备份使用了全局锁, 那么在备份期间无法进行更新操作, 业务基本得停摆</li><li>如果在从库上进行备份使用了全局锁, 那么备份期间从库将不能执行主库同步过来的binlog。 将会导致主从库延迟</li></ul><p>官方自带的逻辑备份工具mysqldump，当mysqldump使用参数–single-transaction的时候，会启动一个事务，确保拿到一致性视图。而由于MVCC的支持，这个过程中数据是可以正常更新的。</p></blockquote><h4 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h4><h5 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h5><blockquote><p>表锁时MyISAM仅支持的锁。</p><p>开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低。</p><p>添加表锁、释放表锁的语句是</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">lock</span> <span class="token keyword">tables</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span><span class="token keyword">unlock</span> <span class="token keyword">tables</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对表添加了读锁, 该表对于所有进程(包括加锁者), 都无法修改该表的内容, 只能读</p><p>对表添加了写锁, 在加锁进程完成写操作,释放锁之前, 其他任何进程既无权对该表进行读取, 也无权对该表进行修改 </p><p>简略来讲,读锁所有人只能读, 写锁仅仅加锁者可读写,其他人既不能读也不能写。</p><p>在没有更细粒度的锁时, 表锁是最常见处理并发的方式。InnoDB支持行锁, 因此一般不适用表锁控制并发。</p></blockquote><h5 id="元数据锁-metadata-lock"><a href="#元数据锁-metadata-lock" class="headerlink" title="元数据锁(metadata lock)"></a>元数据锁(metadata lock)</h5><blockquote><p>元数据锁(MDL锁)是server层的锁，表级锁，主要用于隔离DML（Data Manipulation Language，数据操纵语言，如select）和DDL（Data Definition Language，数据定义语言，如改表头新增一列）操作之间的干扰。每执行一条DML、DDL语句时都会申请MDL锁，DML操作需要MDL读锁，DDL操作需要MDL写锁（MDL加锁过程是系统自动控制，无法直接干预，读读共享，读写互斥，写写互斥。</p><p>对表添加了读锁时, 只有需要所有进程只能读, 不可写</p><p>对表结构进行修改时, 会给表添加元数据写锁, 除加锁进程外, 其他所有进程无法对表进行读写。</p><p>给表添加元数据写锁时, 表结构无法修改, 可以CRUD。</p><p>MDL读写锁中，如果存在读锁，那么写锁需要等待读锁释放，而存在写锁时，读锁需要等待写锁释放。</p><p>注意：元数据锁写锁读锁优先级不一致, 写锁的优先级会高于读锁</p><p><img src="https://static001.geekbang.org/resource/image/7c/ce/7cf6a3bf90d72d1f0fc156ececdfb0ce.jpg" alt="img"></p><p>在上述场景中, sessionA sessionB需要的都是读锁, 可以读到数据, 这时session C需求写锁, 由于读锁写锁相互制约, 在读锁为释放之前, 写锁不可能拿得到, 但又因为写锁优先级高于读锁, 因此session D都被session 阻塞了, </p></blockquote><p><img src="https://img-blog.csdnimg.cn/2019071820433258.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3EyODc4OTQ4,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="页锁"><a href="#页锁" class="headerlink" title="页锁"></a>页锁</h4><blockquote><p>开销和加锁速度介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般。</p></blockquote><h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><blockquote><p>顾名思义, 行锁就是针对数据表中行记录的锁。</p><p>开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高。</p><p>在InnoDB事务中, 行锁在事务开启后,需要更新该行数据就会加上, 修改完毕之后并不会马上释放, 而是在事务提交了之后才会释放行锁。这个就是<strong>两阶段锁协议</strong>。(如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。)</p></blockquote><h5 id="给Sql手动加锁"><a href="#给Sql手动加锁" class="headerlink" title="给Sql手动加锁"></a>给Sql手动加锁</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 加共享锁（S）</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token comment">-- 加排它锁（X)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h4><blockquote><p>乐观锁：对于数据冲突保持一种乐观态度，操作数据时不会对操作的数据进行加锁，只有到数据提交的时候才通过一种机制来验证数据是否存在冲突。 </p><p> 悲观锁：对于数据冲突保持一种悲观态度，在修改数据之前把数据锁住，然后再对数据进行读写，在它释放锁之前任何人都不能对其数据进行操作，直到前面一个人把锁释放后下一个人数据加锁才可对数据进行加锁，然后才可以对数据进行操作，一般数据库本身锁的机制都是基于悲观锁的机制实现的。</p></blockquote><h4 id="从粒度上来看-锁的类型"><a href="#从粒度上来看-锁的类型" class="headerlink" title="从粒度上来看, 锁的类型"></a>从粒度上来看, 锁的类型</h4><blockquote><ul><li><p>表锁： 锁整个表</p></li><li><p>页锁： 锁一页</p></li><li><p>行锁： 锁一行或者多行</p></li><li><p>记录锁： 通过唯一索引, 锁一行(一定是一行)</p></li><li><p>间隙锁：属于行锁的一种, 左开右闭, 比如锁(1,4) 则实际锁的是【2, 3, 4】</p><p>​    <img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/MySql%E5%A4%8D%E4%B9%A0%5Cimage-20210820223002859.png" alt="image-20210820223002859"></p><ul><li>间隙锁的存在主要是为了防止幻读</li><li>间隙锁的引入，可能会导致同样的语句锁住更大的范围，这其实是影响了并发度的。</li></ul></li><li><p>临键锁： </p><ul><li>临键锁=记录锁+间隙锁, 加了临键锁之后, 在范围内数据不允许修改和插入</li></ul></li></ul></blockquote><h4 id="各种引擎对于锁的支持"><a href="#各种引擎对于锁的支持" class="headerlink" title="各种引擎对于锁的支持"></a>各种引擎对于锁的支持</h4><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/.%5CMySql%E5%A4%8D%E4%B9%A0%5Cimage-20210817095539354.png" alt="image-20210817095539354"></p><h4 id="死锁与死锁检测"><a href="#死锁与死锁检测" class="headerlink" title="死锁与死锁检测"></a>死锁与死锁检测</h4><p><img src="https://static001.geekbang.org/resource/image/4d/52/4d0eeec7b136371b79248a0aed005a52.jpg" alt="img"></p><blockquote><p>上述场景中, 事务A锁id=1的行, 事务B锁id=2的行, 而事务A执行完id=1的update之后, 需要更新id=2的行, 需要拿到行锁, 而锁被B占用, 恰好由于事务B 也因为id=1 的行锁被事务A占用, 无法完成事务, 无法提交, 造成持续占有锁, 造成了死锁。</p><p>当出现死锁以后，有两种策略：</p><ol><li>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。(默认50s)</li><li>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。(默认开启, 但是需要耗费大量cpu资源)</li></ol><p>两种策略都各有各的劣势</p><p>其他方案是</p><ul><li><p>客户端做并发限制</p></li><li><p>MySQL中间件做并发限制</p></li><li><p>修改数据库源码，排队控制并发</p></li><li><p>业务逻辑上进行优化，将一行数据分解成多行，降低写入压力。</p></li></ul></blockquote><h4 id="锁的总结"><a href="#锁的总结" class="headerlink" title="锁的总结"></a>锁的总结</h4><p>这里对 <strong>记录锁</strong>、<strong>间隙锁</strong>、<strong>临键锁</strong> 做一个总结</p><ul><li><strong>InnoDB</strong> 中的<strong>行锁</strong>的实现依赖于<strong>索引</strong>，一旦某个加锁操作没有使用到索引，那么该锁就会退化为<code>表锁</code>。</li><li><strong>记录锁</strong>存在于包括<strong>主键索引</strong>在内的<strong>唯一索引</strong>中，锁定单条索引记录。</li><li><strong>间隙锁</strong>存在于<strong>非唯一索引</strong>中，锁定<strong>开区间</strong>范围内的一段间隔，它是基于<strong>临键锁</strong>实现的。</li><li><strong>临键锁</strong>存在于<strong>非唯一索引</strong>中，该类型的每条记录的索引上都存在这种锁，它是一种特殊的<strong>间隙锁</strong>，锁定一段<strong>左开右闭</strong>的索引区间。</li></ul><h3 id="2-6-MySQL主从复制"><a href="#2-6-MySQL主从复制" class="headerlink" title="2.6 MySQL主从复制"></a>2.6 MySQL主从复制</h3><blockquote><p>MySQL提供主从复制功能，可以方便的实现数据的多处自动备份，不仅能增加数据库的安全性，还能进行读写分离，提升数据库负载性能。 </p><p> 主从复制流程： </p><ol><li>在事务完成之前，主库在binlog上记录这些改变，完成binlog写入过程后，主库通知存储引擎提交事物 </li><li>从库将主库的binlog复制到对应的中继日志，即开辟一个I/O工作线程，I/O线程在主库上打开一个普通的连接，然后开始binlog dump process，将这些事件写入中继日志。从主库的binlog中读取事件，如果已经读到最新了，线程进入睡眠并等待ma主库产生新的事件。</li></ol><p> 读写分离：即只在MySQL主库上写，只在MySQL从库上读，以减少数据库压力，提高性能。</p></blockquote><h2 id="3-常用函数"><a href="#3-常用函数" class="headerlink" title="3 常用函数"></a>3 常用函数</h2><h3 id="3-1Limit函数"><a href="#3-1Limit函数" class="headerlink" title="3.1Limit函数"></a>3.1Limit函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">limit</span> m<span class="token punctuation">,</span>n<span class="token comment">#m为偏移量（从0开始）， n为显示的行数</span><span class="token keyword">limit</span> m    <span class="token operator">=</span>   <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span>m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-窗口函数"><a href="#3-2-窗口函数" class="headerlink" title="3.2 窗口函数"></a>3.2 窗口函数</h3><p><img src="https://img-blog.csdnimg.cn/2019022312202720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAxMDc3MA==,size_16,color_FFFFFF,t_70" alt="img"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#基本语法</span>lag<span class="token punctuation">(</span>salary<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> emp_no <span class="token keyword">order</span> <span class="token keyword">by</span> hire_day<span class="token punctuation">)</span> <span class="token keyword">as</span> last_salary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-SQL-优化"><a href="#4-SQL-优化" class="headerlink" title="4    SQL 优化"></a>4    SQL 优化</h2><h3 id="4-1-优化规则"><a href="#4-1-优化规则" class="headerlink" title="4.1    优化规则"></a>4.1    优化规则</h3><h4 id="表连接数"><a href="#表连接数" class="headerlink" title="表连接数"></a>表连接数</h4><blockquote><ul><li>连接的表越多，性能越差</li><li>可能的话，将连接拆分成若干个过程逐一执行</li><li>优先执行可显著减少数据量的连接，既降低了复杂度，也能够容易按照预期执行</li><li>如果不可避免多表连接，很可能是设计缺陷</li><li>外链接效果差，因为必须对左右表进行表扫描</li><li>尽量使用inner join查询</li></ul></blockquote><h4 id="使用临时表"><a href="#使用临时表" class="headerlink" title="使用临时表"></a>使用临时表</h4><blockquote><p>如果不可避免，可以考虑使用临时表或表变量存放中间结果。</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">temporary</span> <span class="token keyword">table</span>TABLENAME<span class="token keyword">as</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>TABLENAME<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="少用子查询"><a href="#少用子查询" class="headerlink" title="少用子查询"></a>少用子查询</h4><h4 id="视图嵌套"><a href="#视图嵌套" class="headerlink" title="视图嵌套"></a>视图嵌套</h4><blockquote><p>不要过深,一般视图嵌套不要超过2个为宜。</p></blockquote><h3 id="4-2-SQL编写注意事项"><a href="#4-2-SQL编写注意事项" class="headerlink" title="4.2    SQL编写注意事项"></a>4.2    SQL编写注意事项</h3><h4 id="NULL列"><a href="#NULL列" class="headerlink" title="NULL列"></a>NULL列</h4><blockquote><p>Null列使用索引没有意义，任何包含null值的列都不会被包含在索引中。因此where语句中的is null或is not null的语句优化器是不允许使用索引的。</p></blockquote><h4 id="concat或"><a href="#concat或" class="headerlink" title="concat或||"></a>concat或||</h4><blockquote><p>concat或||是mysql和oracle的字符串连接操作，如果对列进行该函数操作，那么也开会忽略索引的使用。比较下面的查询语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 忽略索引</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> first_name <span class="token operator">||</span> <span class="token string">''</span> <span class="token operator">||</span> last_name <span class="token operator">=</span> <span class="token string">'bill gates'</span> <span class="token punctuation">;</span><span class="token comment">-- 使用索引</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> first_name <span class="token operator">=</span> <span class="token string">'bill'</span> <span class="token operator">and</span> last_name <span class="token operator">=</span> <span class="token string">'bill gates'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4><blockquote><p>通配符出现在首位，无法使用索引，反之可以。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 无法使用索引</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%t%'</span> <span class="token punctuation">;</span><span class="token comment">-- 可以使用索引</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'t%'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h4><blockquote><p>order by子句中不要使用非索引列或嵌套表达式，这样都会导致性能降低。</p></blockquote><h4 id="Not运算"><a href="#Not运算" class="headerlink" title="Not运算"></a>Not运算</h4><blockquote><p>not运算无法使用索引，可以改成其他能够使用索引的操作。如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 索引无效</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> sal <span class="token operator">!=</span> <span class="token number">3000</span> <span class="token punctuation">;</span><span class="token comment">-- 索引生效</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> sal <span class="token operator">&lt;</span> <span class="token number">3000</span>  <span class="token operator">or</span> sal <span class="token operator">&gt;</span> <span class="token number">3000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="过滤要趁早"><a href="#过滤要趁早" class="headerlink" title="过滤要趁早"></a>过滤要趁早</h4><h4 id="exists替代in"><a href="#exists替代in" class="headerlink" title="exists替代in"></a>exists替代in</h4><blockquote><p>not in是最低效的，因为要对子查询的表进行全表扫描。可以考虑使用外链接或not exists。如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 正确</span><span class="token keyword">SELECT</span>  <span class="token operator">*</span><span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span>  EMPNO <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">AND</span>  <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ‘X<span class="token string">' FROM DEPT WHERE DEPT.DEPTNO = EMP.DEPTNO AND LOC = ‘MELB'</span><span class="token punctuation">)</span><span class="token comment">-- 错误</span><span class="token keyword">SELECT</span>  <span class="token operator">*</span> <span class="token keyword">FROM</span>  EMP <span class="token keyword">WHERE</span>  EMPNO <span class="token operator">&gt;</span> <span class="token number">0</span>  <span class="token operator">AND</span>  DEPTNO <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> DEPTNO  <span class="token keyword">FROM</span>  DEPT  <span class="token keyword">WHERE</span>  LOC <span class="token operator">=</span> ‘MELB'<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-3-索引"><a href="#4-3-索引" class="headerlink" title="4.3    索引"></a>4.3    索引</h3><h4 id="不要在索引列上使用函数"><a href="#不要在索引列上使用函数" class="headerlink" title="不要在索引列上使用函数"></a>不要在索引列上使用函数</h4><blockquote><p>这样会停止使用索引，进行全表扫描，如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 错误</span><span class="token keyword">SELECT</span> … <span class="token keyword">FROM</span>  DEPT  <span class="token keyword">WHERE</span> SAL <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">&gt;</span> <span class="token number">25000</span><span class="token punctuation">;</span> <span class="token comment">-- 正确</span><span class="token keyword">SELECT</span> … <span class="token keyword">FROM</span>  DEPT  <span class="token keyword">WHERE</span> SAL <span class="token operator">&gt;</span> <span class="token number">25000</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="gt-与-gt-x3D"><a href="#gt-与-gt-x3D" class="headerlink" title=">与>="></a>&gt;与&gt;=</h4><blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 直接定位到4的记录(推荐)</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> SAL <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token punctuation">;</span><span class="token comment">-- 先定位到3，再向后找1个(不推荐)</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> SAL <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="union代替or"><a href="#union代替or" class="headerlink" title="union代替or"></a>union代替or</h4><blockquote><p>在索引列上，可以使用union替换or操作。索引列上的or操作会造成全表扫描。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 高效: </span><span class="token keyword">SELECT</span> LOC_ID <span class="token punctuation">,</span> LOC_DESC <span class="token punctuation">,</span> REGION <span class="token keyword">FROM</span> LOCATION <span class="token keyword">WHERE</span> LOC_ID <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> LOC_ID <span class="token punctuation">,</span> LOC_DESC <span class="token punctuation">,</span> REGION <span class="token keyword">FROM</span> LOCATION <span class="token keyword">WHERE</span> REGION <span class="token operator">=</span> <span class="token string">'MELBOURNE'</span> <span class="token comment">-- 低效: </span><span class="token keyword">SELECT</span> LOC_ID <span class="token punctuation">,</span>LOC_DESC <span class="token punctuation">,</span>REGION <span class="token keyword">FROM</span> LOCATION <span class="token keyword">WHERE</span> LOC_ID<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">OR</span> REGION <span class="token operator">=</span><span class="token string">'MELBOURNE'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="is-null-amp-is-not-null"><a href="#is-null-amp-is-not-null" class="headerlink" title="is null &amp; is not null"></a>is null &amp; is not null</h4><blockquote><p>如果列可空，避免使用索引。对于多个列使用的索引，起码保证至少有个列不为空。对于多列索引，只有访问了第一个列才会启用索引，如果访问后面的列则使用的是全表扫描。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 低效: (索引失效) </span><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span>  DEPARTMENT  <span class="token keyword">WHERE</span>  DEPT_CODE <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span> <span class="token comment">-- 高效: (索引有效) </span><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span>  DEPARTMENT  <span class="token keyword">WHERE</span>  DEPT_CODE <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="union-amp-union-all"><a href="#union-amp-union-all" class="headerlink" title="union &amp; union all"></a>union &amp; union all</h4><blockquote><p>union具有去重的操作，增加了计算时间。union all不需要去重，但会包含相同记录。同样功能下，首选union all操作。</p></blockquote><h3 id="4-4-优化口诀"><a href="#4-4-优化口诀" class="headerlink" title="4.4    优化口诀"></a>4.4    优化口诀</h3><blockquote><p>全值匹配我最爱，最左前缀要遵守；<br>带头大哥不能死，中间兄弟不能断；<br>索引列上少计算，范围之后全失效；<br>Like百分写最右，覆盖索引不写星；<br>不等空值还有or，索引失效要少用；<br>哇恰引号不可丢，SQL高级也不难！</p></blockquote><h2 id="5-SQL题"><a href="#5-SQL题" class="headerlink" title="5 SQL题"></a>5 SQL题</h2><h3 id="5-1-显示排名第二高的员工工资"><a href="#5-1-显示排名第二高的员工工资" class="headerlink" title="5.1 显示排名第二高的员工工资"></a>5.1 显示排名第二高的员工工资</h3><p><a href="https://www.nowcoder.com/practice/c1472daba75d4635b7f8540b837cc719?tpId=82&amp;tqId=29769&amp;rp=1&amp;ru=/ta/sql&amp;qru=/ta/sql/question-ranking">https://www.nowcoder.com/practice/c1472daba75d4635b7f8540b837cc719?tpId=82&amp;tqId=29769&amp;rp=1&amp;ru=%2Fta%2Fsql&amp;qru=%2Fta%2Fsql%2Fquestion-ranking</a></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#方法1： 使用 order by</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> salaries <span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#方法2： 不使用 order by</span><span class="token comment"># 简单方法， max(salary) = max(salary (where salary &lt; max(salary)))</span> <span class="token comment"># 通用方法(求任意第n高的工资)</span><span class="token keyword">select</span> salary<span class="token keyword">from</span>salaries<span class="token keyword">where</span> s<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token punctuation">(</span>     <span class="token keyword">select</span> s1<span class="token punctuation">.</span>salary     <span class="token keyword">from</span>      salaries s1     <span class="token keyword">join</span>     salaries s2 <span class="token keyword">on</span> s1<span class="token punctuation">.</span>salary<span class="token operator">&lt;=</span>s2<span class="token punctuation">.</span>salary      <span class="token keyword">group</span> <span class="token keyword">by</span> s1<span class="token punctuation">.</span>salary     <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> s2<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-查询在职员工自入职以来的薪水涨幅情况"><a href="#5-2-查询在职员工自入职以来的薪水涨幅情况" class="headerlink" title="5.2 查询在职员工自入职以来的薪水涨幅情况"></a>5.2 查询在职员工自入职以来的薪水涨幅情况</h3><p><a href="https://www.nowcoder.com/practice/fc7344ece7294b9e98401826b94c6ea5?tpId=82&amp;&amp;tqId=29773&amp;rp=1&amp;ru=/ta/sql&amp;qru=/ta/sql/question-ranking">https://www.nowcoder.com/practice/fc7344ece7294b9e98401826b94c6ea5?tpId=82&amp;&amp;tqId=29773&amp;rp=1&amp;ru=/ta/sql&amp;qru=/ta/sql/question-ranking</a></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token punctuation">(</span>t2<span class="token punctuation">.</span>salary<span class="token operator">-</span>t1<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> growth<span class="token keyword">from</span> salaries t1<span class="token keyword">inner</span> <span class="token keyword">join</span> salaries t2<span class="token keyword">on</span> t1<span class="token punctuation">.</span>emp_no<span class="token operator">=</span>t2<span class="token punctuation">.</span>emp_no<span class="token keyword">where</span> t1<span class="token punctuation">.</span>from_date <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> hire_date <span class="token keyword">from</span> employees <span class="token keyword">where</span> emp_no<span class="token operator">=</span>t1<span class="token punctuation">.</span>emp_no<span class="token punctuation">)</span><span class="token operator">and</span> t2<span class="token punctuation">.</span>to_date<span class="token operator">=</span><span class="token string">'9999-01-01'</span><span class="token keyword">order</span> <span class="token keyword">by</span> growth <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h1&gt;&lt;h2 id=&quot;1-基础&quot;&gt;&lt;a href=&quot;#1-基础&quot; class=&quot;headerlink&quot; title=&quot;1 基础&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>240527腾娱面试纪要</title>
    <link href="https://zzyong24.github.io/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/"/>
    <id>https://zzyong24.github.io/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/</id>
    <published>2024-05-27T11:40:41.000Z</published>
    <updated>2024-05-28T14:21:29.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h3 id="1-I-x2F-O模型了解吗，Select-Pool-Epool区别"><a href="#1-I-x2F-O模型了解吗，Select-Pool-Epool区别" class="headerlink" title="1.  I/O模型了解吗，Select Pool Epool区别"></a>1.  I/O模型了解吗，Select Pool Epool区别</h3><blockquote><p>SELECT / POLL / EPOLL 本质上都是I/O多路复用的技术，I/O多路复用本质是通过一种机制，让单个线程可以监视多个描述符，当发现某个描述符就绪以后，能够通知程序进行对应的读写操作。</p><p>三者本质都是同步IO，就是说在读写事件触发之后，需要自己负责读写，而异步IO会将数据从内核空间拷贝到用户空间，不需要自己负责读写。</p><p><strong>和阻塞模式的区别</strong></p><p>​    这三种相较于阻塞模式而言，不需要通过多线程的技术实现同时对多个socket进行监听，这就是多路复用的目的。</p><p><img src="/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/1716877707687.png" alt="EPOLL"></p><p><strong>三者区别</strong></p><ol><li>SELECT: 需要对文件描述符数组fd进行遍历，找到需要处理读写请求的fd，然后对其进行处理，考虑到fd数组用户态和内核态的拷贝，以及遍历的效率，内核对fd集合大小进行了限制</li><li>POLL：POLL相较于SELECT区别其实就是一个基于数组另一个基于链表进行存储fd，因此对fd链表大小没有进行限制，但是遍历还是会很慢</li><li>EPOLL: EPOLL实际是POLL的增强版，他对POLL的优化是在绑定连接描述符时，会给描述符指定一个回调函数，当设备就绪时，回调函数会将自己添加到一个Ready队列中，EPOLL_WAIT实际上只会去这个Ready队列中扫描是否存在被唤醒而加入队列的描述符，不再需要遍历整个被监听的描述符集合。因此能够显著提高程序在大量并发连接中只有少量活跃情况下的CPU利用率</li></ol></blockquote><h3 id="2-进程间通信的方式"><a href="#2-进程间通信的方式" class="headerlink" title="2.  进程间通信的方式"></a>2.  进程间通信的方式</h3><blockquote><p>匿名管道、管道、共享内存、消息队列、信号、信号量、Socket</p></blockquote><h3 id="3-如何做Jvm监控，有没有遇到过full-gc问题"><a href="#3-如何做Jvm监控，有没有遇到过full-gc问题" class="headerlink" title="3.  如何做Jvm监控，有没有遇到过full gc问题"></a>3.  如何做Jvm监控，有没有遇到过full gc问题</h3><blockquote><p><strong>使用 JDK 自带工具</strong></p><ul><li><strong>jconsole</strong>: 一个图形化工具，可以实时监控 JVM 的内存使用、线程活动、GC 活动等。</li><li><strong>jvisualvm</strong>: 提供了更全面的监控和分析功能，包括线程、内存、GC、CPU 性能分析等。</li><li><strong>jstat</strong>: 一个命令行工具，用于监控 JVM 的各种统计数据，如 GC 活动、类加载等。</li></ul><p><strong>第三方监控工具</strong></p><ul><li><strong>Prometheus + Grafana</strong>: 通过 Java Agent（如 jmx_exporter）采集 JVM 指标，并使用 Grafana 进行可视化展示。</li><li><strong>New Relic</strong>: 提供 JVM 监控和应用性能监控（APM）功能，可以集成多种指标和日志进行分析。</li><li><strong>Elasticsearch + Logstash + Kibana (ELK)</strong>: 收集和分析 JVM 日志和 GC 日志。</li></ul><p><strong>GC分析</strong></p><p>启用详细的 GC 日志记录，以便后续分析。使用如下 JVM 参数：</p><pre class="line-numbers language-none"><code class="language-none">-Xlog:gc*:file=gc.log:tags,uptime,time,level<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>a.分析 GC 日志</strong></p><ul><li><strong>使用 GC 日志分析工具</strong>: 如 GCViewer、GCEasy，这些工具可以帮助解析 GC 日志并生成图表，显示 Full GC 发生的频率和原因。</li><li><strong>手动分析</strong>: 查看 GC 日志中的 Full GC 记录，关注发生的时间点、持续时间和回收的内存量。</li></ul><p><strong>b.监控和分析内存使用情况</strong></p><ul><li>通过 jconsole 或 jvisualvm 实时监控堆内存的使用情况，注意是否有老年代（Old Generation）内存占用过高的现象。</li><li>检查内存分配情况，特别是大对象（Large Objects）是否频繁分配导致老年代内存不足。</li></ul></blockquote><h3 id="4-如何做SQL优化，如果性能瓶颈在DB层面，考虑从哪几个方面去排查问题"><a href="#4-如何做SQL优化，如果性能瓶颈在DB层面，考虑从哪几个方面去排查问题" class="headerlink" title="4.  如何做SQL优化，如果性能瓶颈在DB层面，考虑从哪几个方面去排查问题"></a>4.  如何做SQL优化，如果性能瓶颈在DB层面，考虑从哪几个方面去排查问题</h3><blockquote><ol><li>连接数量方面：考虑是否连接数不够，使用连接池</li><li>SQL层面：检查EXPLAIN执行计划，分析索引使用情况，重构复杂查询</li><li>数据库配置：优化数据库配置，如调整数据库参数，buffer_pool_size</li><li>表设计：检查表数据量，对于数据量较大的表，是否需要考虑表的拆分，如水平或垂直拆表</li><li>缓存：对于热点数据缓存，减轻数据库压力</li></ol></blockquote><h3 id="5-输入www-baidu-com，经历了什么流程"><a href="#5-输入www-baidu-com，经历了什么流程" class="headerlink" title="5.  输入www.baidu.com，经历了什么流程"></a>5.  输入<a href="http://www.baidu.com,经历了什么流程/">www.baidu.com，经历了什么流程</a></h3><blockquote><ol><li>浏览器地址栏输入url</li><li>浏览器会先查看浏览器缓存系统缓存路由缓存， 如有存在缓存， 就直接显示。 如果没有， 接着第3步</li><li>域名解析（DNS）获取相应的 IP</li><li>浏览器向服务器发起 tcp 连接， 与浏览器建立 tcp 三次握手</li><li>握手成功， 浏览器向服务器发送 http 请求， 请求数据包</li><li>服务器请求数据， 将数据返回到浏览器</li><li>浏览器接收响应， 读取页面内容， 解析 html 源码， 生成 Dom 树</li><li>解析 css 样式、 浏览器渲染， js交互</li></ol><p><a href="https://cloud.tencent.com/developer/article/1493941">地址栏中输入网址后发生了什么？-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><strong>三次握手与四次挥手</strong></p><p><img src="/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/1716875573112.png" alt="三次握手与四次挥手"></p><p>为什么需要三次握手？：三次握手是为了保证客户端和服务端明确知道双方具备收发消息的能力，第一次握手，客户端发送消息SYN给服务端（<code>第一次握手</code>），服务端收到后，回发SYN+ACK给客户端（<code>第二次握手</code>），证实了服务端具备了收发消息的能力，客户端收到后，知道了服务端是没问题的，但是服务端其实还不知道客户端的接收消息能力是否有问题，所以客户端还需要回一个ACK给服务端（<code>第三次握手</code>）。</p><p><code>握手阶段：两次不安全、四次没必要</code></p><p>为什么需要四次挥手？：四次挥手的原因是因为TCP协议是全双工的，客户端以及服务端均具备主动发送消息的能力，第一次挥手由客户端发起，会发送一个FIN给服务端（<code>第一次挥手</code>），服务端收到回会回一个ACK给客户端（<code>第二次挥手</code>），表示自己不再接受客户端的消息，但是服务端可能存在消息未发送完成（<code>全双工</code>）。因此在自己准备完成后，会接着发送一个FIN个客户端（<code>第三次挥手</code>），客户端接收到FIN之后，就知道服务端也没有消息给自己发送了，为了证明自己已收到，会发送一个ACK给服务端（<code>第四次挥手</code>）。</p></blockquote><h3 id="6-Kafka两个分区，五个消费者，会遇到什么问题"><a href="#6-Kafka两个分区，五个消费者，会遇到什么问题" class="headerlink" title="6.  Kafka两个分区，五个消费者，会遇到什么问题"></a>6.  Kafka两个分区，五个消费者，会遇到什么问题</h3><blockquote><p>会导致消费不均衡的问题，分区数量和消费者数量不匹配</p></blockquote><h3 id="7-有没有使用到缓存，应用场景是什么，为什么没有使用本地缓存，如何保证缓存一致性"><a href="#7-有没有使用到缓存，应用场景是什么，为什么没有使用本地缓存，如何保证缓存一致性" class="headerlink" title="7. 有没有使用到缓存，应用场景是什么，为什么没有使用本地缓存，如何保证缓存一致性"></a>7. 有没有使用到缓存，应用场景是什么，为什么没有使用本地缓存，如何保证缓存一致性</h3><blockquote></blockquote><h3 id="8-HTTPS和HTTP的区别，用到了几次加密，为什么使用对称加密以及非对称加密"><a href="#8-HTTPS和HTTP的区别，用到了几次加密，为什么使用对称加密以及非对称加密" class="headerlink" title="8.  HTTPS和HTTP的区别，用到了几次加密，为什么使用对称加密以及非对称加密"></a>8.  HTTPS和HTTP的区别，用到了几次加密，为什么使用对称加密以及非对称加密</h3><blockquote><p>HTTPS 通过结合非对称加密和对称加密来实现安全的通信：</p><ul><li><strong>非对称加密</strong>: 用于安全地交换对称加密密钥，保证密钥交换的安全性。</li><li><strong>对称加密</strong>: 用于实际的数据传输，加密和解密速度快，保证数据传输的效率。</li></ul><p><strong>流程</strong>:</p><ol><li>客户端向服务器发送连接请求。</li><li>服务器发送公钥证书给客户端，证书中包含服务器的公钥。</li><li>客户端验证证书的有效性（由受信任的证书颁发机构 CA 签名）。</li><li>客户端生成一个对称密钥，用服务器的公钥加密这个对称密钥并发送给服务器。</li><li>服务器用自己的私钥解密，得到对称密钥。</li><li>客户端请求服务端，通过自己生成的对称密钥加密请求数据，服务端通过解密后的对称密钥解密请求数据</li></ol></blockquote><h3 id="9-一体化系统部署的架构是什么，资源部署时服务器什么配置"><a href="#9-一体化系统部署的架构是什么，资源部署时服务器什么配置" class="headerlink" title="9.  一体化系统部署的架构是什么，资源部署时服务器什么配置"></a>9.  一体化系统部署的架构是什么，资源部署时服务器什么配置</h3><blockquote><p>整体上使用前后端分离的微服务架构，前端流量入口通过Nginx做第一层转发，转发到前端静态页面或者后端网关，后端使用SpringCloud Netflix微服务那一套，使用Gateway作为网关，流量到达网关之后会基于路由规则进行转发，转发到后台的如登录鉴权服务、债务服务或者其他平台组件服务。</p><p>部署方式层面，由于我们各个项目现场情况不一致，有的使用云平台，有的使用物理机，以湖南为例，我们是使用的物理机进行的部署，首先我们会申请三台应用服务器，分别在这三台应用服务器上部署三套服务，并注册到同一个注册中心中，在其中挑选一台服务器作为网关，负责路由到这三台服务器中，除此之外，还需要申请数据库服务器，但是数据库基本都是政府负责运维的，只是给我们分配了一个用户，因此数据库的配置我们不是太了解，其他就是针对如redis、sftp这种文件服务器的申请，redis需要申请一台，sftp需要申请一个磁盘空间大一点的 如4TB的服务器。</p></blockquote><h3 id="10-一体化系统系统支不支持弹性伸缩，如何实现的，如果宕机了怎么保证服务调用不会出问题"><a href="#10-一体化系统系统支不支持弹性伸缩，如何实现的，如果宕机了怎么保证服务调用不会出问题" class="headerlink" title="10. 一体化系统系统支不支持弹性伸缩，如何实现的，如果宕机了怎么保证服务调用不会出问题"></a>10. 一体化系统系统支不支持弹性伸缩，如何实现的，如果宕机了怎么保证服务调用不会出问题</h3><blockquote><p>在使用云平台的省份是支持弹性伸缩的，底层应该是通过K8S的自动拓展POD实现的，但是针对于没有上云的省份，我们系统在部署层面没有考虑弹性伸缩的问题，如果服务宕机了，首先我们在Eureka端会有个心跳检测的机制。</p><p><strong>Eureka心跳检测机制</strong></p><p>eureka server和eureka client之间会通过心跳检测的形式进行通信，client默认情况下每间隔5秒会发送心跳包给server，如果server端收到心跳包之后，就知道client是一个存活的状态，如果server在一段时间内（默认情况下90秒）没有收到心跳包，就会从服务列表中剔除该服务，前提是没有开启自我保护机制。</p><p><strong>自我保护机制</strong></p><p>eureka自我保护机制是用于在特殊情况下，比如突然比较多的服务短时间内丢失了心跳，则这个时候会开启自我保护机制，不会剔除服务，这本质上是一种AP的体现，因为有的情况是服务伪宕机了，实际上请求还能够请求的通，如果直接剔除的话，可用服务列表便直接会少一个服务提供者，严重情况下甚至会导致服务不可用。</p><p>但是自我保护机制也可以进行关闭，如果关闭的话其实是一个CP的体现，保证了server 和 client的一致性。</p><p><img src="/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/1716860905411.png" alt="各个注册中心CAP权衡"></p><p><strong>自我保护机制开关以及心跳间隔的配置</strong></p><pre class="line-numbers language-none"><code class="language-none">自我保护：eureka:  server:    # 服务自保机制，默认开启    enable-self-preservation: true    # 每隔多久触发一次服务剔除（单位ms毫秒）    eviction-interval-timer-in-ms: 10000心跳间隔：eureka:  client:    service-url:      defaultZone: http://localhost:20000/eureka/  instance:    # 每间隔5秒钟，向服务中心发送一条续约指令    # 心跳检测与续约时间（开发环境可以将值设小一点，保证服务关闭后注册中心能及时剔除）    lease-expiration-duration-in-seconds: 5    # 如果30秒内，依然没有收到续约请求，判断服务过期    lease-renewal-interval-in-seconds: 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="11-JVM内存分布，如何做的垃圾回收，展开讲讲"><a href="#11-JVM内存分布，如何做的垃圾回收，展开讲讲" class="headerlink" title="11.  JVM内存分布，如何做的垃圾回收，展开讲讲"></a>11.  JVM内存分布，如何做的垃圾回收，展开讲讲</h3><blockquote><p><img src="/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/1716862653125.png" alt="内存分布空间"></p><p>Java内存分布主要有以下五个区域：堆、方法区、虚拟机栈、本地方法栈以及程序计数器。从线程隔离的角度上来讲，堆和方法区是线程共享的，而虚拟机栈、本地方法栈以及程序计数器是线程隔离的，在虚拟机栈中，是由一个个栈帧组成的，每个栈帧中包含局部变量表、操作数栈、动态链接以及方法出口，程序计数器用于记录当前线程正在执行的字节码指令地址，保存线程切换前执行状态。</p><p><strong>垃圾回收</strong></p><p>垃圾回收主要是在堆空间上完成的，垃圾回收的目的是自动回收不再使用的对象，释放内存空间，垃圾回收的算法主要有以下几种：</p><ol><li>标记-清除：分为两个阶段，标记阶段和清除阶段，会导致内存碎片化严重的问题</li><li>复制：将内存划分为两个区域，每次只是用其中一个区域，将存活的对象从当前区域复制到另外一个空的区域，然后清空当前区域</li><li>标记-整理：分为两个阶段，标记阶段和整理阶段，标记阶段会将存活的对象标记，然后整理阶段会将存活的对象移动到一端，最后再进行垃圾的清除</li><li>分代收集：分代手机主要指的是新生代和老年代垃圾收集算法的区别，对于新生代，更多的是使用复制算法，而老年代更多的是使用标记清楚或标记整理算法。</li></ol><p><strong>具体的垃圾回收器</strong></p><p>JVM提供了多种垃圾回收器，每种回收器适用于不同的应用场景：</p><ol><li>Serial GC<br>单线程垃圾回收器，适用于单核处理器和小型应用。<br>年轻代使用复制算法，老年代使用标记-整理算法。</li><li>Parallel GC（吞吐量优先GC）<br>多线程垃圾回收器，适用于多核处理器和高吞吐量应用。<br>年轻代和老年代都使用并行回收。</li><li>CMS（Concurrent Mark-Sweep） GC<br>低暂停垃圾回收器，适用于需要低延迟的应用。<br>年轻代使用并行复制算法，老年代使用并发标记-清除算法。</li><li>G1（Garbage First） GC<br>面向服务端应用，适用于大内存和低延迟需求的应用。<br>将堆分为多个区域，优先回收垃圾最多的区域。</li><li>ZGC（Z Garbage Collector）<br>超低延迟垃圾回收器，适用于对延迟敏感的应用。<br>支持非常大的堆（数TB）。</li></ol></blockquote><h3 id="12-单点登录如何实现的"><a href="#12-单点登录如何实现的" class="headerlink" title="12.  单点登录如何实现的"></a>12.  单点登录如何实现的</h3><blockquote><p><img src="/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/049f6492889bd943188b35161c8cdac1.png" alt="SSO单点登录流程"></p><ol><li>用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户未登录，将用户引导至登录页面</li><li>用户输入用户名密码提交登录申请</li><li>sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌</li><li>sso认证中心带着令牌跳转会最初的请求地址（系统1）</li><li>系统1拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统1</li><li>系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源</li><li>用户访问系统2的受保护资源</li><li>系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌</li><li>系统2拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统2</li><li>系统2使用该令牌创建与用户的局部会话，返回受保护资源</li></ol></blockquote><h3 id="13-登录后，浏览器关闭了，能否登录上；如何保证关闭后仍然可以登陆上的，cookie和redis的token失效时间如何设置的，会不会有什么问题"><a href="#13-登录后，浏览器关闭了，能否登录上；如何保证关闭后仍然可以登陆上的，cookie和redis的token失效时间如何设置的，会不会有什么问题" class="headerlink" title="13. 登录后，浏览器关闭了，能否登录上；如何保证关闭后仍然可以登陆上的，cookie和redis的token失效时间如何设置的，会不会有什么问题"></a>13. 登录后，浏览器关闭了，能否登录上；如何保证关闭后仍然可以登陆上的，cookie和redis的token失效时间如何设置的，会不会有什么问题</h3><blockquote><p>能登录上，这个主要是通过会话保持机制实现的，首先在服务端，会通过redis持久化保存用户的token信息，另外再客户端，即浏览器端，会通过cookie持久化保存用户信息。因此浏览器关闭后只要不清楚浏览器缓存，是能够在关闭浏览器后仍然登录上系统的。</p><p>针对cookie和redis的token失效时间，一般情况下是需要保持一致的，如果不一致可能存在会话失效或者安全层面的问题。</p><p>为了更好的保证持久化cookie不会被盗用的问题，需要使用https传输cookie，并设置<code>HTTPONLY</code>和<code>Secure</code> 标识，防止客户端访问到cookie</p></blockquote><h3 id="14-一体化系统有几个模块，几个微服务，服务间怎么调用的"><a href="#14-一体化系统有几个模块，几个微服务，服务间怎么调用的" class="headerlink" title="14. 一体化系统有几个模块，几个微服务，服务间怎么调用的"></a>14. 一体化系统有几个模块，几个微服务，服务间怎么调用的</h3><blockquote><p>一体化系统模块分布如下：</p><p>基础数据管理模块：用于管理基础数据包括单位数据、区划数据、汇率数据、资金投向领域数据、项目类型数据等等。</p><p>项目管理模块：用于管理项目的申报和项目基本信息包括项目类型、项目建设期限、项目收支预算等</p><p>债券发行注册模块：项目申报财政部批复完成之后，需要申请债券，债券的发型以省级财政为单位，会将多个项目打包成一个债券，通过项目申报金额确定债券注册金额，并设置债券的还本方式以及付息方式，在注册后生成债券的还本付息计划</p><p>限额管理模块：债券的发型需要通过限额来管控，限额是财政部根据各个省份的情况进行动态调控的，在债券发型阶段，会校验当前省份的限额是否满足累计申请金额的标准</p><p>债券支出模块：债券支出在一体化系统中需要接入到执行模块，将执行模块的支出回单信息接入到我们的系统，并匹配到债券以及项目上</p><p>债券还本付息模块：债券还本付息计划会在债券注册阶段进行初始化和创建，但是真正的还款是在银行端进行，项目方在进行还款时，会带身我们的还本付息凭证的ID，然后我们通过执行端接收还款单据时，基于这个ID匹配上我们的还款计划，通过这样一个关联关系满足实际还款的情况。</p><p>报表模块、基础数据同步模块、离线数据包导入导出模块、工作流模块</p></blockquote><h3 id="15-一体化系统性能指标有没有评估过，TPS多少，用户量多少，并发多少，数据量多少"><a href="#15-一体化系统性能指标有没有评估过，TPS多少，用户量多少，并发多少，数据量多少" class="headerlink" title="15. 一体化系统性能指标有没有评估过，TPS多少，用户量多少，并发多少，数据量多少"></a>15. 一体化系统性能指标有没有评估过，TPS多少，用户量多少，并发多少，数据量多少</h3><h3 id="16-Kafka的特点，为什么快？"><a href="#16-Kafka的特点，为什么快？" class="headerlink" title="16. Kafka的特点，为什么快？"></a>16. Kafka的特点，为什么快？</h3><blockquote><p>Kafka 的高性能主要来源于其在架构和实现上的设计优势，以下是具体的原因：</p><ol><li><strong>顺序写入磁盘</strong>:<ul><li>Kafka 采用顺序写入磁盘（sequential write），避免了随机写入磁盘带来的高开销。</li><li>顺序写入效率高，减少了磁盘寻道时间，提高了写入速度。</li></ul></li><li><strong>零拷贝技术</strong>:<ul><li>Kafka 利用操作系统的零拷贝（zero-copy）技术，减少了数据在用户态和内核态之间的拷贝次数。</li><li>零拷贝技术使得数据可以直接从磁盘传输到网络，提高了传输效率。</li></ul></li><li><strong>分区机制</strong>:<ul><li>Kafka 通过分区（partition）将数据分布在多个 broker 上，实现并行处理。</li><li>分区机制提高了数据的写入和读取吞吐量。</li></ul></li><li><strong>批量处理</strong>:<ul><li>Kafka 支持批量处理消息，将多条消息打包成一个批次进行处理，减少了网络和 I/O 开销。</li><li>批量处理提高了数据传输和存储的效率。</li></ul></li><li><strong>高效的序列化和反序列化</strong>:<ul><li>Kafka 使用高效的序列化和反序列化机制，如 Avro、Protocol Buffers 等，减少了数据处理的开销。</li><li>高效的序列化和反序列化确保了数据在传输和存储中的高性能。</li></ul></li><li><strong>异步处理</strong>:<ul><li>Kafka 的生产者和消费者可以进行异步处理，提高了系统的吞吐量和响应速度。</li><li>异步处理使得 Kafka 能够高效处理大量的并发请求。</li></ul></li><li><strong>内存映射文件</strong>:<ul><li>Kafka 使用内存映射文件（memory-mapped files）技术，将磁盘文件映射到内存，提高了文件读取的速度。</li><li>内存映射文件技术减少了磁盘 I/O 操作，提高了数据处理的效率。</li></ul></li></ol></blockquote><h3 id="17-springcloud接口调用失败如何考虑？"><a href="#17-springcloud接口调用失败如何考虑？" class="headerlink" title="17. springcloud接口调用失败如何考虑？"></a>17. springcloud接口调用失败如何考虑？</h3><blockquote><p>假设一个订单系统调用库存服务和支付服务，如果支付服务调用失败：</p><ol><li><strong>重试机制</strong>: 自动重试支付服务调用。</li><li><strong>断路器模式</strong>: 如果支付服务持续失败，触发断路器，短时间内不再调用支付服务，避免系统过载。</li><li><strong>降级处理</strong>: 返回支付失败的友好提示，通知用户稍后再试。</li><li><strong>幂等性设计</strong>: 确保订单状态在多次支付调用中保持一致。</li><li><strong>异步处理</strong>: 将订单创建和支付分为异步任务，提升系统响应性能。</li><li><strong>限流和熔断</strong>: 控制支付服务的调用频率，避免因支付服务不稳定导致系统崩溃。</li><li><strong>日志和监控</strong>: 记录支付服务的调用日志，监控支付服务的健康状态。</li><li><strong>回滚和补偿</strong>: 如果支付失败，回滚订单状态或执行补偿逻辑，如退款。</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h1&gt;&lt;h3 id=&quot;1-I-x2F-O模型了解吗，Select-Pool-Epool区别&quot;&gt;&lt;a href=&quot;#1-I-x2F-O模型了解吗，</summary>
      
    
    
    
    <category term="面试纪要" scheme="https://zzyong24.github.io/categories/%E9%9D%A2%E8%AF%95%E7%BA%AA%E8%A6%81/"/>
    
    
    <category term="面试纪要" scheme="https://zzyong24.github.io/tags/%E9%9D%A2%E8%AF%95%E7%BA%AA%E8%A6%81/"/>
    
  </entry>
  
  <entry>
    <title>Hollis面试提纲</title>
    <link href="https://zzyong24.github.io/2024/05/27/mian-shi/hollis-mian-shi-ti-gang/"/>
    <id>https://zzyong24.github.io/2024/05/27/mian-shi/hollis-mian-shi-ti-gang/</id>
    <published>2024-05-27T06:21:38.000Z</published>
    <updated>2024-05-28T14:21:29.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hollis面试提纲"><a href="#Hollis面试提纲" class="headerlink" title="Hollis面试提纲"></a>Hollis面试提纲</h1><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><p><a href="https://www.yuque.com/hollis666/io9xi1/bit2y4">✅接口和抽象类的区别，如何选择？ (yuque.com)</a></p><blockquote><p>接口方法默认是public的，不允许有实现；抽象类方法可以使public private protected等，允许有实现。</p><p>接口职责更多的是指定规范，而抽象类更多的是为了复用，比较典型的就是模板方法模式。</p></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/bzmvmo4s1l8mig23">✅如何理解Java中的多态？ (yuque.com)</a></p><blockquote><p>多态指的是同一个操作对于不同的对象有不同的表现形式，会产生不同的执行结果。</p><p>有以下三个条件：</p><ol><li>有类继承或接口实现</li><li>子类需要重写或者实现父类/接口的方法</li><li>父类引用指向了子类实现</li></ol></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/hhkgh2nsrlnf2g0g">✅String为什么设计成不可变的？ (yuque.com)</a>    </p><blockquote><ol><li>安全性</li><li>缓存性</li><li>线程安全性</li></ol></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/hqm4f0">✅RPC接口返回中，使用基本类型还是包装类？ (yuque.com)</a></p><blockquote><p>使用包装类，如果使用的基本数据类型，无法区分未返回和0.0，例如对于一个long类型的数字，包装类Long的默认值是null，而long是0.0L，会有歧义。</p></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/dwdzin">✅说几个常见的语法糖？ (yuque.com)</a></p><blockquote><ol><li>switch：case匹配的时候是通过hashcode匹配的，然后在通过equals，但是语法上可以直接写为case “a”</li><li>泛型：泛型都会在编译期进行擦除</li><li>自动装箱与拆箱</li><li>方法的可变参数</li><li>枚举：枚举实际上是一个类，会默认使用final修饰并继承Enum</li><li>断言：断言底层实际就是if判断，如果true则什么都不做程序继续执行，否则如果为false，则会抛出一个AssertError的错误来打断程序的执行</li><li>数字字面量：在定义数字变量时，可以加入任意个_，例如int a = 1_0000，编译后会将 _ 移除掉。</li><li>try-with-resource</li><li>lambda表达式</li></ol></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/eltpur">✅什么是SPI，和API有啥区别 (yuque.com)</a></p><blockquote><p>SPI全名叫Service Provider Interface。<strong>API用于定义调用接口，SPI用于定义和提供可插拔的实现方式。</strong></p><p>SPI开发步骤：</p><ol><li>定义接口A，并写出多个实现A1,A2,A3</li><li>在src/main/resources/下建立/META-INF/services目录，新增一个以接口A全类名命名的文件，内容是需要加载的实现类</li><li>使用ServiceLoader.load(A.class)来加载需要加载的实现</li></ol><p><strong>应用场景：</strong></p><ul><li>数据库驱动：JDBC</li><li>日志门面：SLF4J加载不同的日志实现</li></ul></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/sr19rp">✅什么是反射机制？为什么反射慢？ (yuque.com)</a></p><blockquote><p>反射提供了一种运行时获取类相关属性、方法的方式，能够支持我们在JVM运行时对类的属性进行修改或者对类的方法进行调用。</p><p>反射的缺点：</p><ol><li>代码可读性以及可维护性较低</li><li>性能较低</li><li>破坏了封装性</li></ol><p><strong>反射为什么慢？</strong></p><ol><li>无法进行虚拟机优化，如JIT</li><li>方法调用参数需要进行拆箱和装箱的动作，效率低且容易产生大量的对象，容易造成GC（需要转换为Object[]类型）</li><li>反射调用方法需要从方法数组中遍历查找并检查方法的可见性，并对参数进行检查，这些操作比较耗时</li></ol></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/bw0z5kus5ry1xq0u">✅Java中创建对象有哪些种方式 (yuque.com)</a></p><blockquote><p>1.new关键字<br>2.使用反射<br>3.反序列化构造<br>4.clone<br>5.方法句柄<br>6.使用unsafe，不建议正式环境使用</p></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/ugvfzx">✅Java的动态代理如何实现？ (yuque.com)</a></p><blockquote><p>动态代理有基于JDK的动态代理还有CGLIB的动态代理，二者区别如下：</p><ol><li>JDK动态代理需要实现接口才可以被代理，CGLIB不需要</li><li>JDK动态代理底层是通过实现该接口，而CGLIB是实现被代理类的子类</li></ol><p>JDK动态代理核心逻辑：</p><pre class="line-numbers language-none"><code class="language-none">InvocationHandler： 处理增加的逻辑Proxy.newProxyInstance: 生成代理对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>CGLIB动态代理核心逻辑：</p><pre class="line-numbers language-none"><code class="language-none">实现MethodInterceptor接口：在intercept方法中创建代理类Enhancer： 用于处理父类和代理类的勾稽关系<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/zelhse">✅Java注解的作用是啥 (yuque.com)</a></p><blockquote><p>注解实际就是给当前类、方法打上一个标识，方便后续使用时区分，常常和AOP结合起来使用。</p><p><strong>元注解</strong>：</p><ol><li>@Target：标识注解可以用于什么地方</li><li>@Rentention：标识在什么级别保存该注解信息</li><li>@Documented：标识是否将注解包含在javadoc中</li><li>@Inherited：标识是否子类继承父类中的注解</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hollis面试提纲&quot;&gt;&lt;a href=&quot;#Hollis面试提纲&quot; class=&quot;headerlink&quot; title=&quot;Hollis面试提纲&quot;&gt;&lt;/a&gt;Hollis面试提纲&lt;/h1&gt;&lt;h2 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;</summary>
      
    
    
    
    <category term="面试" scheme="https://zzyong24.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="https://zzyong24.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>政府债务发展历史</title>
    <link href="https://zzyong24.github.io/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/"/>
    <id>https://zzyong24.github.io/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/</id>
    <published>2024-05-20T01:24:50.000Z</published>
    <updated>2024-05-28T14:21:29.869Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2015年，GWY要求全力清理甄别15年之前的政府性债务以及政府作为担保CT公司作为借债主体的YX债务，并修正自94年分税制改革之后地方财权和事权严重不匹配的局面。同时，旧的预算法对于债务这块存在几个比较大的问题，包括：1、从举债权限来看，地方政府没有被赋予自主发债的权利;2、从预算管理来看，有大量的债务游离在预算体制之外;3、从规模控制来看，地方政府没能建立起适合中国国情的规模控制机制:4、从风险管理来看，没有健全的风险预警机制;5、从信息披露来看，没有完全公开地方政府举债情况。</p><p>为了解决以上问题，财预10号文《地方政府专项债券项目穿透式监测工作方案》明确指出，要建立地方政府债务管理制度框架，包括：发行限额管理、落实预算管理、风险评估管理、应急处置管理、常态化监督管理、信息公开管理。因此，预算管理一体化系统前身-穿透式监测系统应运而生。</p><p>随着财政体系建设的发展，各个信息系统的丰富和完善，也为了打破信息孤岛，打通财政体系下的数据，避免存在底层基础数据业务架构重复搭建且各个业务系统之间数据各统计各的导致上层数据不一致的严重问题，在2022年，财预1号文《CZB关于印发地方政府法定债务全面纳入预算管理一体化工作方案的通知》明确指出，债务必须完全纳入一体化范围。</p><p>CZB为此制定统一的业务规范和技术标准，以实现预算管理一体化系统的全面推进。预算管理一体化涵盖了基础信息管理、项目库管理、预算编制、预算批复、预算调整与调剂、预算执行、会计核算、决算和报告等八大顶层业务活动，并在各省独立部署。主要用户包括：省端/市端/区县端/单位端经办岗以及审核岗用户，参与整合模块包括：门户（如华为、新华三、科创）、预算（中科、博思）、债务（大数元）、汇总系统（大数元）、穿透式系统（大数元）、执行（中科、博思）等。</p></blockquote><blockquote><p><strong>背景介绍：</strong></p><p>2015年，中央政府要求全面清理和甄别2015年之前的政府性债务，以及政府作为担保主体的城投公司（CT公司）所负担的YX债务。这项任务的目的在于修正自1994年分税制改革后地方财权与事权严重不匹配的局面。旧预算法在债务管理方面存在以下几个主要问题：</p><ol><li><strong>举债权限</strong>：地方政府没有自主发债的权利。</li><li><strong>预算管理</strong>：大量债务游离在预算体制之外。</li><li><strong>规模控制</strong>：没有建立适合中国国情的债务规模控制机制。</li><li><strong>风险管理</strong>：缺乏健全的风险预警机制。</li><li><strong>信息披露</strong>：地方政府举债情况没有完全公开。</li></ol><p>为解决上述问题，财预10号文《地方政府专项债券项目穿透式监测工作方案》明确提出要建立地方政府债务管理制度框架，包括发行限额管理、预算管理、风险评估管理、应急处置管理、常态化监督管理以及信息公开管理。基于此背景，预算管理一体化系统的前身——穿透式监测系统应运而生。</p><p><strong>系统演变与发展：</strong></p><p>随着财政体系建设的发展，各信息系统的丰富和完善，为了打破信息孤岛，打通财政体系下的数据，避免底层基础数据和业务架构重复搭建以及各业务系统之间数据统计不一致的问题，2022年，财预1号文《CZB关于印发地方政府法定债务全面纳入预算管理一体化工作方案的通知》明确指出，地方政府债务必须完全纳入预算管理一体化范围。</p><p><strong>项目实施：</strong></p><p>为此，财政部制定了统一的业务规范和技术标准，以实现预算管理一体化系统的全面推进。预算管理一体化系统涵盖了八大顶层业务活动，包括基础信息管理、项目库管理、预算编制、预算批复、预算调整与调剂、预算执行、会计核算、决算和报告，并在各省独立部署。主要用户包括省、市、区县及单位的经办岗和审核岗用户。整合的系统模块包括：</p><ul><li>门户（如华为、新华三、科创）</li><li>预算（中科、博思）</li><li>债务（大数元）</li><li>汇总系统（大数元）</li><li>穿透式系统（大数元）</li><li>执行（中科、博思）</li></ul><p>这些系统模块的整合旨在实现数据的共享与协同，确保各层级业务活动的数据一致性和系统高效性。通过这些措施，预算管理一体化系统不仅提升了财政管理的效率，还大大增强了债务管理的透明度和风险控制能力。</p></blockquote><h1 id="一、债务是什么"><a href="#一、债务是什么" class="headerlink" title="一、债务是什么"></a>一、债务是什么</h1><p>经济的正常运行以及发展离不开债务，地方政府债务由以下债务构成：</p><p>​    包括2015年之前需要清理甄别锁定的债务即：政府债务（政府债务又分为一般债务和专项债务）、或有债务（或有债务可以细化为政府富有担保责任的债务以及政府可能承担一定救助责任的债务）</p><p>​    还有2015年之后省级代发政府债券所允许的一些债券，即：新增债券、置换债券、再融资债券。</p><p>​    除了以2015年以节点所划分的债务之外， 还有隐性债务，包括：非债券发行的由财政性资金偿还的、政府提供担保的、约定回购本金、承诺保底收益的政府中长期支出事项。</p><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716168952330.png" alt="地方政府债务构成"></p><h1 id="二、如何对政府债务进行管理"><a href="#二、如何对政府债务进行管理" class="headerlink" title="二、如何对政府债务进行管理"></a>二、如何对政府债务进行管理</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716169336524.png" alt="政府债务的管理"></p><h1 id="三、债务发展历史"><a href="#三、债务发展历史" class="headerlink" title="三、债务发展历史"></a>三、债务发展历史</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716169647321.png" alt="债务发展历史"></p><h1 id="四、传统债务管理模式的缺陷"><a href="#四、传统债务管理模式的缺陷" class="headerlink" title="四、传统债务管理模式的缺陷"></a>四、传统债务管理模式的缺陷</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716169675985.png" alt="传统债务管理模式的缺陷"></p><h1 id="五、地方政府债务管理制度框架"><a href="#五、地方政府债务管理制度框架" class="headerlink" title="五、地方政府债务管理制度框架"></a>五、地方政府债务管理制度框架</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716169733113.png" alt="形成管理闭环"></p><h1 id="六、YX债务"><a href="#六、YX债务" class="headerlink" title="六、YX债务"></a>六、YX债务</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716169883081.png" alt="YX债务"></p><h1 id="七、产品体系"><a href="#七、产品体系" class="headerlink" title="七、产品体系"></a>七、产品体系</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716169966321.png" alt="产品体系"></p><h1 id="八、产品架构"><a href="#八、产品架构" class="headerlink" title="八、产品架构"></a>八、产品架构</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716170074661.png" alt="产品架构"></p><h1 id="九、创新产品"><a href="#九、创新产品" class="headerlink" title="九、创新产品"></a>九、创新产品</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716170203652.png" alt="创新产品"></p><h1 id="十、服务产品体系详细"><a href="#十、服务产品体系详细" class="headerlink" title="十、服务产品体系详细"></a>十、服务产品体系详细</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716170313415.png" alt="产品体系详细"></p><h1 id="十一、咨询产品体系详细"><a href="#十一、咨询产品体系详细" class="headerlink" title="十一、咨询产品体系详细"></a>十一、咨询产品体系详细</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716170354992.png" alt="咨询产品"></p><h1 id="十二、发文"><a href="#十二、发文" class="headerlink" title="十二、发文"></a>十二、发文</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716170795551.png" alt="发文"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2015年，GWY要求全力清理甄别15年之前的政府性债务以及政府作为担保CT公司作为借债主体的YX债务，并修正自94年分税制改革之后地方财权和事权严重不匹配的局面。同时，旧的预算法对于债务这块存在几个比较大的问题，包括：1、从举债权限来看，地方政府</summary>
      
    
    
    
    <category term="业务" scheme="https://zzyong24.github.io/categories/%E4%B8%9A%E5%8A%A1/"/>
    
    
    <category term="业务" scheme="https://zzyong24.github.io/tags/%E4%B8%9A%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>chat-im</title>
    <link href="https://zzyong24.github.io/2024/05/16/xiang-mu/chat-im/"/>
    <id>https://zzyong24.github.io/2024/05/16/xiang-mu/chat-im/</id>
    <published>2024-05-16T00:45:13.000Z</published>
    <updated>2024-06-02T07:23:51.723Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://gitee.com/zzy888888/skill-test/tree/master/S-T-ChatDemo">https://gitee.com/zzy888888/skill-test/tree/master/S-T-ChatDemo</a></p><h1 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h1><p><a href="https://www.notion.so/f60817a0be4c4c3495a11235b4c06d7c?pvs=21">断线重连</a></p><blockquote><p>断线重连是client客户端配置在处理channel I/O 的eventLoopGroup中的一个eventloop处理的，是一个入站事件处理器，在client和server初次建立连接时，会触发<code>channelActive</code> 事件，在client和server断开连接时，会触发<code>channelInactive</code> 事件；一旦触发<code>channelInactive</code> 事件，则通过eventLoop注册延时任务，延时任务中负责对server端进行重连。</p><p>延时任务的触发时间随着重试次数递增，递增步幅如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 2 4 8 16 32 64</span><span class="token keyword">long</span> sleepMs <span class="token operator">=</span> baseSleepTimeMs <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> retryCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p><a href="https://www.notion.so/73a0a0b007c94e80a35fe21943053d71?pvs=21">心跳检测</a></p><blockquote><p>心跳检测是client客户端在连接server完成之后，会启动一个定时任务，定时任务中每秒会向server端发送ping消息，server服务端在处理消息时，优先过滤出ping消息，并回应客服端一个pong消息</p></blockquote><p><a href="https://www.notion.so/b60a6de198034b9987b1dd24bfd1f679?pvs=21">跨节点聊天</a></p><blockquote><p>跨节点聊天的场景主要是客户端在注册时，两个客户端并不在同一个server中进行连接，用户A在发送消息时，可能发送到了ServerA， 但是接收消息的用户B是与ServerB进行连接的，因此在这个场景下，存在跨节点聊天的问题。解决流程如下：</p><ol><li>用户A发送消息给用户B，用户A与ServerA建立连接</li><li>ServerA检查用户B是否与自己建立连接</li><li>如果用户B与自己建立了连接，则直接将消息发送给用户B；如果用户B未与自己建立连接，则将消息推送至与用户B建立了连接的ServerB的redis list中</li><li>在Server启动时会开启对于当前Server 的 redis list中的消息的定时消费，此时Server B发现自己的redis list中存在消息，则会获取消息并解析消息的接受者，并将消息发送给用户B</li></ol></blockquote><p><a href="https://www.notion.so/Server-61fc67165e0449cb875827357384a30a?pvs=21">Server负载均衡</a></p><blockquote><p>Server负载均衡主要是在client建立连接时，会从服务端集群中挑选一个负载最小的服务器，并与之建立连接</p></blockquote><p><a href="https://www.notion.so/98d588f9b2774e2a8f6cb23b7467b667?pvs=21">单聊与群聊</a></p><p><img src="/2024/05/16/xiang-mu/chat-im/1715820381611.png" alt="1715820381611"></p><h1 id="支持功能"><a href="#支持功能" class="headerlink" title="支持功能"></a>支持功能</h1><p>1、client与client单聊、群聊</p><p>2、client连接负载均衡、跨节点聊天</p><p>3、心跳检测</p><p>4、断线重连</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://gitee.com/zzy888888/skill-test/tree/master/S-T-ChatDemo&quot;&gt;https://gitee.com/zzy888888/skill-test/tree/master/S-T-ChatDemo</summary>
      
    
    
    
    <category term="项目" scheme="https://zzyong24.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="https://zzyong24.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>狂野架构师04源码-Spring</title>
    <link href="https://zzyong24.github.io/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/"/>
    <id>https://zzyong24.github.io/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/</id>
    <published>2024-05-14T04:25:37.000Z</published>
    <updated>2024-05-18T06:03:57.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring源码"><a href="#Spring源码" class="headerlink" title="Spring源码"></a>Spring源码</h1><p><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/1715660816418.png" alt="六大模块"></p><h2 id="1-核心组件介绍"><a href="#1-核心组件介绍" class="headerlink" title="1. 核心组件介绍"></a>1. 核心组件介绍</h2><h3 id="1-1-Bean组件"><a href="#1-1-Bean组件" class="headerlink" title="1.1 Bean组件"></a>1.1 Bean组件</h3><p><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/1715669594622.png" alt="Bean组件"></p><h3 id="1-2-Context组件"><a href="#1-2-Context组件" class="headerlink" title="1.2 Context组件"></a>1.2 Context组件</h3><p><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/1715670072002.png" alt="Context组件"></p><h2 id="2-处理器"><a href="#2-处理器" class="headerlink" title="2 处理器"></a>2 处理器</h2><h3 id="2-1-BeanFactory后置处理器"><a href="#2-1-BeanFactory后置处理器" class="headerlink" title="2.1  BeanFactory后置处理器"></a>2.1  BeanFactory后置处理器</h3><p><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/1715670814031.png" alt="BeanFactory后置处理器"></p><h3 id="2-2-Bean后置处理器"><a href="#2-2-Bean后置处理器" class="headerlink" title="2.2 Bean后置处理器"></a>2.2 Bean后置处理器</h3><h2 id="3-IOC流程图"><a href="#3-IOC流程图" class="headerlink" title="3 IOC流程图***"></a><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/1715670771650.png" alt="Bean后置处理器">3 IOC流程图***</h2><p>AbstractApplicationContext.refresh（）方法</p><p><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/1715673486159.png" alt="IOC流程图"></p><p><strong>什么是Aware接口</strong></p><blockquote><p>Aware接口是在Bean设置相关属性时会自动调用，即对Set属性时会有回调，以BeanNameAware接口为例，实现接口后需要重新setBeanName方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanName</span> <span class="token keyword">implements</span> <span class="token class-name">BeanNameAware</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanName</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Bean生命周期"><a href="#4-Bean生命周期" class="headerlink" title="4 Bean生命周期"></a>4 Bean生命周期</h2><p><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/v2-8787f1b3800b71f6234e996d432e0a0c_r.jpg" alt="Bean生命周期"></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><strong>题目1：</strong><br>问答题：在Spring框架中，Bean的定义对象（BeanDefinition）是如何根据配置文件中的标签进行封装的？<br><strong>答案及解析：</strong><br>答案：在Spring框架中，当解析标签时，Spring容器会读取标签中的各个配置项（如id、class、scope等），并将这些配置项的值封装到BeanDefinition对象的各个属性中。BeanDefinition是Spring内部用来描述Bean的元数据信息的对象，它包含了Bean的类信息、作用域、依赖关系、初始化方法、销毁方法等各种属性。<br>解析：这个问题考查了Spring框架中Bean定义对象的创建和封装过程。在Spring的启动过程中，它会加载配置文件，并解析其中的标签。解析过程中，Spring会根据标签中的属性信息创建BeanDefinition对象，并将这些属性信息封装到BeanDefinition中。这样，Spring就通过BeanDefinition对象持有了Bean的元数据信息，为后续创建和管理Bean提供了基础。<br><strong>题目2：</strong><br>问答题：请简述Spring框架中BeanPostProcessor的作用及其执行时机。<br><strong>答案及解析：</strong><br>答案：BeanPostProcessor是Spring框架提供的一个扩展接口，它允许在Bean的初始化方法前后添加一些处理逻辑。BeanPostProcessor有两个主要方法：postProcessBeforeInitialization和postProcessAfterInitialization。前者在Bean的初始化方法执行前被调用，后者在Bean的初始化方法执行后被调用。BeanPostProcessor的执行时机是在Spring容器实例化Bean之后，但在Bean的初始化方法（如构造函数、@PostConstruct注解的方法等）执行前后。<br>解析：这个问题考查了Spring框架中BeanPostProcessor的作用和执行时机。BeanPostProcessor是Spring提供的一个强大的扩展点，它允许开发者在Bean的生命周期中的关键节点添加自定义逻辑。通过实现BeanPostProcessor接口，开发者可以在Bean的初始化方法前后执行自定义操作，如修改Bean的属性、添加AOP代理等。BeanPostProcessor的执行时机是在Bean实例化之后、初始化方法执行前后，这使得它成为Spring框架中非常灵活和强大的一个功能。<br><strong>题目3：</strong><br>问答题：在Spring中，如何配置多个BeanPostProcessor，并且它们的执行顺序是如何确定的？<br><strong>答案及解析：</strong><br>答案：在Spring中，可以通过在配置文件中定义多个BeanPostProcessor的Bean来配置多个BeanPostProcessor。它们的执行顺序可以通过实现Ordered接口或标注@Order注解来指定优先级，也可以通过在配置文件中指定order属性来设置顺序。如果没有显式指定优先级或顺序，Spring会根据BeanPostProcessor的注册顺序来执行它们。<br>解析：这个问题考查了Spring中多个BeanPostProcessor的配置和执行顺序的确定方式。在Spring中，可以配置多个BeanPostProcessor来处理Bean的生命周期事件。为了控制它们的执行顺序，Spring提供了几种方式：实现Ordered接口并指定getOrder方法的返回值、使用@Order注解标注BeanPostProcessor的类、在配置文件中设置order属性等。通过这些方式，开发者可以精确地控制BeanPostProcessor的执行顺序，以满足特定的业务需求。<br><strong>题目4：</strong><br>问答题：请描述Spring中Bean的完整生命周期，并指出在哪个阶段BeanPostProcessor的postProcessAfterInitialization方法会被调用。<br><strong>答案及解析：</strong><br>答案：Spring中Bean的完整生命周期包括实例化、属性填充、初始化前处理、初始化方法执行、初始化后处理、销毁等阶段。其中，BeanPostProcessor的postProcessAfterInitialization方法会在Bean的初始化方法执行后被调用，即在Bean的初始化后处理阶段。<br>解析：这个问题考查了Spring中Bean的生命周期以及BeanPostProcessor的postProcessAfterInitialization方法的调用时机。在Spring中，Bean的生命周期包括多个阶段，其中初始化后处理阶段是一个重要的扩展点。在这个阶段，Spring会调用所有注册的BeanPostProcessor的postProcessAfterInitialization方法，允许开发者在Bean初始化完成后执行自定义操作。因此，了解Bean的生命周期和BeanPostProcessor的执行时机对于理解和使用Spring框架非常重要。<br><strong>题目5：</strong><br>问答题：请解释Spring中代理对象的生成时机，以及它与BeanPostProcessor的关系。<br><strong>答案及解析：</strong><br>答案：在Spring中，代理对象的生成时机通常是在BeanPostProcessor的postProcessBeforeInitialization或postProcessAfterInitialization方法中。具体生成时机取决于代理对象的创建方式和使用的BeanPostProcessor实现。例如，在使用AOP时，Spring会通过AOP相关的BeanPostProcessor（如AspectJAwareAdvisorAutoProxyCreator）在Bean初始化前后创建代理对象。<br>解析：这个问题考查了Spring中代理对象的生成时机以及它与BeanPostProcessor的关系。在Spring中，代理对象通常用于实现AOP等高级功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring源码&quot;&gt;&lt;a href=&quot;#Spring源码&quot; class=&quot;headerlink&quot; title=&quot;Spring源码&quot;&gt;&lt;/a&gt;Spring源码&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2024/05/14/ke-cheng/kuang-ye-jia-go</summary>
      
    
    
    
    <category term="Spring" scheme="https://zzyong24.github.io/categories/Spring/"/>
    
    
    <category term="Spring" scheme="https://zzyong24.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>微服务多级限流方案</title>
    <link href="https://zzyong24.github.io/2024/04/23/yun-wei/wei-fu-wu-duo-ji-xian-liu-fang-an/"/>
    <id>https://zzyong24.github.io/2024/04/23/yun-wei/wei-fu-wu-duo-ji-xian-liu-fang-an/</id>
    <published>2024-04-23T03:25:10.000Z</published>
    <updated>2024-05-14T15:29:11.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务多级限流方案"><a href="#微服务多级限流方案" class="headerlink" title="微服务多级限流方案"></a>微服务多级限流方案</h1><p><img src="/2024/04/23/yun-wei/wei-fu-wu-duo-ji-xian-liu-fang-an/1713842740324.png" alt="分级限流"></p><p>微服务场景中，其实各级限流都需要做，主要以下几个方面：</p><ol><li>客户端发送请求到Nginx需要进行限流 </li><li>通过Nginx负载均衡请求到网关 , 网关也需要限流</li><li>网关路由请求到微服务 , 微服务也需要限流</li></ol><h2 id="1-nginx限流"><a href="#1-nginx限流" class="headerlink" title="1. nginx限流"></a>1. nginx限流</h2><p>nginx限流主要是对请求的IP进行限流 , 使用的是<code>limit_req_zone</code>和<code>limit_req</code>配置 , 底层使用的是<strong>漏桶算法</strong>实现的 , nginx层限流主要是对下游的网关起到保护作用</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">http</span> <span class="token punctuation">{</span>  limit_req_zone $binary_remote_addr zone<span class="token operator">=</span>iplimit<span class="token punctuation">:</span>10m rate<span class="token operator">=</span>1r<span class="token operator">/</span>s<span class="token punctuation">;</span>  limit_req_zone $server_name zone<span class="token operator">=</span>iplimit<span class="token punctuation">:</span>10m rate<span class="token operator">=</span>1r<span class="token operator">/</span>s<span class="token punctuation">;</span>  <span class="token function">server</span> <span class="token punctuation">{</span>    server_name  www<span class="token punctuation">.</span>nginx<span class="token operator">-</span>lyntest<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    listen       <span class="token number">80</span><span class="token punctuation">;</span>    location <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">/</span>my<span class="token operator">-</span>api<span class="token operator">/</span> <span class="token punctuation">{</span>      proxy_pass   http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">9999</span><span class="token operator">/</span><span class="token punctuation">;</span>      limit_req zone<span class="token operator">=</span>iplimit burst<span class="token operator">=</span><span class="token number">20</span> nodelay<span class="token punctuation">;</span>      limit_req_status <span class="token number">429</span><span class="token punctuation">;</span> <span class="token operator">#</span> 默认返回 http <span class="token number">503</span>状态码      limit_req_log_level warn<span class="token punctuation">;</span> <span class="token operator">#</span> 默认为 error级别    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-网关限流"><a href="#2-网关限流" class="headerlink" title="2. 网关限流"></a>2. 网关限流</h2><p>网关层限流主要使用的是Spring Cloud Gateway提供<code>Request Rate Limiting</code>过滤器实现的 , 底层使用Redis基于<strong>令牌桶</strong>算法实现限流 , 网关限流主要是对下游的微服务系统起到保护作用</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"> <span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>limiter  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> limit_route        <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//httpbin.org<span class="token punctuation">:</span>80/get        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> After=2017<span class="token punctuation">-</span>01<span class="token punctuation">-</span>20T17<span class="token punctuation">:</span>42<span class="token punctuation">:</span>47.789<span class="token punctuation">-</span>07<span class="token punctuation">:</span>00<span class="token punctuation">[</span>America/Denver<span class="token punctuation">]</span>        <span class="token key atrule">filters</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> RequestRateLimiter           <span class="token key atrule">args</span><span class="token punctuation">:</span>             <span class="token comment"># key-resolver，用于限流的键的解析器的 Bean 对象的名字</span>             <span class="token key atrule">key-resolver</span><span class="token punctuation">:</span> <span class="token string">"#{@hostAddrKeyResolver}"</span>              <span class="token key atrule">redis-rate-limiter.replenishRate</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 令牌桶填充的速率 秒为单位</span>             <span class="token key atrule">redis-rate-limiter.burstCapacity</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 令牌桶总容量</span>             <span class="token key atrule">redis-rate-limiter.requestedTokens</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 每次请求获取的令牌数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HostAddrKeyResolver</span> <span class="token keyword">implements</span> <span class="token class-name">KeyResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-微服务限流"><a href="#3-微服务限流" class="headerlink" title="3. 微服务限流"></a>3. 微服务限流</h2><p>微服务限流的目的主要是为了保护微服务本身不被大流量冲垮 , 可以使用Hystrix和Sentinel进行限流 , 底层使用的是信号量和线程隔离实现的 , 当请求达到限制或者失败频率较高会自动熔断 , 执行降级逻辑</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微服务多级限流方案&quot;&gt;&lt;a href=&quot;#微服务多级限流方案&quot; class=&quot;headerlink&quot; title=&quot;微服务多级限流方案&quot;&gt;&lt;/a&gt;微服务多级限流方案&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2024/04/23/yun-wei/wei-fu-wu-du</summary>
      
    
    
    
    <category term="限流" scheme="https://zzyong24.github.io/categories/%E9%99%90%E6%B5%81/"/>
    
    
    <category term="部署" scheme="https://zzyong24.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud微服务组件概览</title>
    <link href="https://zzyong24.github.io/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/"/>
    <id>https://zzyong24.github.io/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/</id>
    <published>2024-04-22T07:26:49.000Z</published>
    <updated>2024-05-14T15:29:10.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h2><ul><li>注册与发现</li><li>服务调用</li><li>服务熔断</li><li>负载均衡</li><li>服务降级</li><li>服务消息队列</li><li>配置中心管理</li><li>服务网关</li><li>服务监控</li><li>全链路追踪</li><li>自动化构建部署</li><li>服务定时任务调度操作</li></ul><h2 id="springcloud"><a href="#springcloud" class="headerlink" title="springcloud"></a>springcloud</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p> 分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶。</p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image.png" alt="img"></p><h3 id="版本定义"><a href="#版本定义" class="headerlink" title="版本定义"></a>版本定义</h3><p>springcloud最初使用英国伦敦地铁站命名</p><table><thead><tr><th>Cloud代号</th><th>Boot版本(train)</th><th>Boot版本(tested)</th><th>lifecycle</th></tr></thead><tbody><tr><td>Angle</td><td>1.2.x</td><td>incompatible with 1.3</td><td>EOL in July 2017</td></tr><tr><td>Brixton</td><td>1.3.x</td><td>1.4.x</td><td>2017-07卒</td></tr><tr><td>Camden</td><td>1.4.x</td><td>1.5.x</td><td>-</td></tr><tr><td>Dalston</td><td>1.5.x</td><td>not expected 2.x</td><td>-</td></tr><tr><td>Edgware</td><td>1.5.x</td><td>not expected 2.x</td><td>-</td></tr><tr><td>Finchley</td><td>2.x</td><td>not expected 1.5.x</td><td>-</td></tr></tbody></table><p>由A - &gt; H</p><p><strong>小版本区分为</strong></p><p>SNAPSHOT： 快照版本，随时可能修改</p><p>M： MileStone，M1表示第1个里程碑版本，一般同时标注PRE，表示预览版版。</p><p>SR： Service Release，SR1表示第1个正式版本，一般同时标注GA：(GenerallyAvailable),表示稳定版本。</p><p><strong>与SpringBoot兼容性</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/22792222/1672922050321-3999fa76-e0cf-4924-bf26-a1e129777dbe.png" alt="img"></p><p><a href="https://spring.io/projects/spring-cloud#overview">https://spring.io/projects/spring-cloud#overview</a> 官网</p><p><a href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a> spring boot 以及 spring cloud版本建议</p><p>推荐版本</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/22792222/1672922348996-db661dc1-39cd-42ca-97df-8f41e21b659e.png" alt="img"></p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/22792222/1672925283430-c729200b-4960-4af6-9fc5-4470e1b9200d.png" alt="img"></p><h1 id="工程搭建"><a href="#工程搭建" class="headerlink" title="工程搭建"></a>工程搭建</h1><ol><li>New Project</li><li>聚合总总工程名称</li><li>Maven版本仓库</li><li>工程名称</li><li>字符编码</li><li>注解生效激活</li><li>java编译版本选择8</li><li>File Type过滤</li><li>删除src文件夹</li><li>.gitignore</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Compiled class file</span><span class="token important">*.class</span><span class="token comment"># Log file</span><span class="token important">*.log</span><span class="token comment"># BlueJ files</span><span class="token important">*.ctxt</span><span class="token comment"># Mobile Tools for Java (J2ME)</span>.mtj.tmp/<span class="token comment"># Package Files #</span><span class="token important">*.jar</span><span class="token important">*.war</span><span class="token important">*.nar</span><span class="token important">*.ear</span><span class="token important">*.zip</span><span class="token important">*.tar.gz</span><span class="token important">*.rar</span><span class="token comment"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span>hs_err_pid*<span class="token important">*.iml</span><span class="token important">*.class</span><span class="token important">*.idea/*</span><span class="token important">*\target</span><span class="token important">*.MF</span><span class="token important">*\out</span>.flattened<span class="token punctuation">-</span>pom.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>父pom统一管理版本</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">1. 定义参数  &lt;properties<span class="token punctuation">&gt;</span>    &lt;rversion<span class="token punctuation">&gt;</span>1.0<span class="token punctuation">-</span>SNAPSHOT&lt;/rversion<span class="token punctuation">&gt;</span>  &lt;/properties<span class="token punctuation">&gt;</span>2. 指定版本&lt;version<span class="token punctuation">&gt;</span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span>&lt;/version<span class="token punctuation">&gt;</span>3.添加插件&lt;plugin<span class="token punctuation">&gt;</span>  &lt;groupId<span class="token punctuation">&gt;</span>org.codehaus.mojo&lt;/groupId<span class="token punctuation">&gt;</span>  &lt;artifactId<span class="token punctuation">&gt;</span>flatten<span class="token punctuation">-</span>maven<span class="token punctuation">-</span>plugin&lt;/artifactId<span class="token punctuation">&gt;</span>  &lt;version<span class="token punctuation">&gt;</span>1.1.0&lt;/version<span class="token punctuation">&gt;</span>  &lt;configuration<span class="token punctuation">&gt;</span>    &lt;updatePomFile<span class="token punctuation">&gt;</span>true&lt;/updatePomFile<span class="token punctuation">&gt;</span>    &lt;flattenMode<span class="token punctuation">&gt;</span>resolveCiFriendliesOnly&lt;/flattenMode<span class="token punctuation">&gt;</span>  &lt;/configuration<span class="token punctuation">&gt;</span>  &lt;executions<span class="token punctuation">&gt;</span>    &lt;execution<span class="token punctuation">&gt;</span>      &lt;id<span class="token punctuation">&gt;</span>flatten&lt;/id<span class="token punctuation">&gt;</span>      &lt;phase<span class="token punctuation">&gt;</span>process<span class="token punctuation">-</span>resources&lt;/phase<span class="token punctuation">&gt;</span>      &lt;goals<span class="token punctuation">&gt;</span>        &lt;goal<span class="token punctuation">&gt;</span>flatten&lt;/goal<span class="token punctuation">&gt;</span>      &lt;/goals<span class="token punctuation">&gt;</span>    &lt;/execution<span class="token punctuation">&gt;</span>    &lt;execution<span class="token punctuation">&gt;</span>      &lt;id<span class="token punctuation">&gt;</span>flatten.clean&lt;/id<span class="token punctuation">&gt;</span>      &lt;phase<span class="token punctuation">&gt;</span>clean&lt;/phase<span class="token punctuation">&gt;</span>      &lt;goals<span class="token punctuation">&gt;</span>        &lt;goal<span class="token punctuation">&gt;</span>clean&lt;/goal<span class="token punctuation">&gt;</span>      &lt;/goals<span class="token punctuation">&gt;</span>    &lt;/execution<span class="token punctuation">&gt;</span>  &lt;/executions<span class="token punctuation">&gt;</span>&lt;/plugin<span class="token punctuation">&gt;</span>4. 子组件使用版本&lt;parent<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>sc2023&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.atguigu.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;version<span class="token punctuation">&gt;</span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span>&lt;/version<span class="token punctuation">&gt;</span>&lt;/parent<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816240.png" alt="img"></li><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816251.png" alt="img"></li><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816266.png" alt="img"></li><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816275.png" alt="img"></li><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816284.png" alt="img"></li><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816286.png" alt="img"></li><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816300.png" alt="img"></li></ol><h2 id="父工程配置"><a href="#父工程配置" class="headerlink" title="父工程配置"></a>父工程配置</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sc2023<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--  统一版本管理--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>8.0.31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">&gt;</span></span>1.2.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--子模块继承后，锁定版本，不用再写groupId和version--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--spring boot--&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--spring cloud--&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>Hoxton.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--spring cloud alibaba--&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mybatis.spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子工程配置"><a href="#子工程配置" class="headerlink" title="子工程配置"></a>子工程配置</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sc2023<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//43.140.208.71<span class="token punctuation">:</span>6099/cloud<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.atguigu.springcloud.entitys <span class="token comment"># 所有entity所在包名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><ol><li>添加依赖</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>devtools&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;scope<span class="token punctuation">&gt;</span>runtime&lt;/scope<span class="token punctuation">&gt;</span>    &lt;optional<span class="token punctuation">&gt;</span>true&lt;/optional<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>添加插件</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;plugin<span class="token punctuation">&gt;</span>  &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>  &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>maven<span class="token punctuation">-</span>plugin&lt;/artifactId<span class="token punctuation">&gt;</span>  &lt;configuration<span class="token punctuation">&gt;</span>    &lt;fork<span class="token punctuation">&gt;</span>true&lt;/fork<span class="token punctuation">&gt;</span>    &lt;addResources<span class="token punctuation">&gt;</span>true&lt;/addResources<span class="token punctuation">&gt;</span>  &lt;/configuration<span class="token punctuation">&gt;</span>&lt;/plugin<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>自动编译</li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816306.png" alt="img"></p><ol><li>勾选配置（ctrl + shift + alt + /)</li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816310.png" alt="img"></p><ol><li>重启idea</li></ol><h2 id="微服务dashboard"><a href="#微服务dashboard" class="headerlink" title="微服务dashboard"></a>微服务dashboard</h2><p>打开service</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816318.png" alt="img"></p><p>添加springboot</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816324.png" alt="img"></p><h1 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h1><h2 id="Eureka与Dubbo"><a href="#Eureka与Dubbo" class="headerlink" title="Eureka与Dubbo"></a>Eureka与Dubbo</h2><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816333.png" alt="img"></p><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p><a href="https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/#service-discovery-eureka-clients">https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/#service-discovery-eureka-clients</a></p><h3 id="两大组件"><a href="#两大组件" class="headerlink" title="两大组件"></a>两大组件</h3><ul><li>Eureka Server 提供服务注册</li></ul><p>也是一个或多个java服务，需要特殊配置当前服务为server端</p><ul><li>Eureka Client 通过注册中心进行访问</li></ul><p>即为多个微服务模块</p><h3 id="Server-搭建"><a href="#Server-搭建" class="headerlink" title="Server 搭建"></a>Server 搭建</h3><ol><li>添加依赖 <code>spring-cloud-starter-netflix-eureka-server</code></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;<span class="token punctuation">?</span>xml version="1.0" encoding="UTF<span class="token punctuation">-</span>8"<span class="token punctuation">?</span><span class="token punctuation">&gt;</span>&lt;project xmlns="http<span class="token punctuation">:</span>//maven.apache.org/POM/4.0.0"         xmlns<span class="token punctuation">:</span>xsi="http<span class="token punctuation">:</span>//www.w3.org/2001/XMLSchema<span class="token punctuation">-</span>instance"         xsi<span class="token punctuation">:</span>schemaLocation="http<span class="token punctuation">:</span>//maven.apache.org/POM/4.0.0 http<span class="token punctuation">:</span>//maven.apache.org/xsd/maven<span class="token punctuation">-</span>4.0.0.xsd"<span class="token punctuation">&gt;</span>    &lt;parent<span class="token punctuation">&gt;</span>        &lt;artifactId<span class="token punctuation">&gt;</span>sc2023&lt;/artifactId<span class="token punctuation">&gt;</span>        &lt;groupId<span class="token punctuation">&gt;</span>com.atguigu.cloud&lt;/groupId<span class="token punctuation">&gt;</span>        &lt;version<span class="token punctuation">&gt;</span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span>&lt;/version<span class="token punctuation">&gt;</span>    &lt;/parent<span class="token punctuation">&gt;</span>    &lt;modelVersion<span class="token punctuation">&gt;</span>4.0.0&lt;/modelVersion<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>cloud<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>server7001&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;properties<span class="token punctuation">&gt;</span>        &lt;maven.compiler.source<span class="token punctuation">&gt;</span>8&lt;/maven.compiler.source<span class="token punctuation">&gt;</span>        &lt;maven.compiler.target<span class="token punctuation">&gt;</span>8&lt;/maven.compiler.target<span class="token punctuation">&gt;</span>    &lt;/properties<span class="token punctuation">&gt;</span>    &lt;dependencies<span class="token punctuation">&gt;</span>        &lt;dependency<span class="token punctuation">&gt;</span>            &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.cloud&lt;/groupId<span class="token punctuation">&gt;</span>            &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>netflix<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>server&lt;/artifactId<span class="token punctuation">&gt;</span>        &lt;/dependency<span class="token punctuation">&gt;</span>        &lt;dependency<span class="token punctuation">&gt;</span>            &lt;groupId<span class="token punctuation">&gt;</span>com.atguigu.cloud&lt;/groupId<span class="token punctuation">&gt;</span>            &lt;artifactId<span class="token punctuation">&gt;</span>cloud<span class="token punctuation">-</span>api<span class="token punctuation">-</span>commons&lt;/artifactId<span class="token punctuation">&gt;</span>            &lt;version<span class="token punctuation">&gt;</span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span>&lt;/version<span class="token punctuation">&gt;</span>        &lt;/dependency<span class="token punctuation">&gt;</span>        &lt;dependency<span class="token punctuation">&gt;</span>            &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>            &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>web&lt;/artifactId<span class="token punctuation">&gt;</span>        &lt;/dependency<span class="token punctuation">&gt;</span>        &lt;dependency<span class="token punctuation">&gt;</span>            &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>            &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>actuator&lt;/artifactId<span class="token punctuation">&gt;</span>        &lt;/dependency<span class="token punctuation">&gt;</span>        &lt;dependency<span class="token punctuation">&gt;</span>            &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>            &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>devtools&lt;/artifactId<span class="token punctuation">&gt;</span>            &lt;scope<span class="token punctuation">&gt;</span>runtime&lt;/scope<span class="token punctuation">&gt;</span>            &lt;optional<span class="token punctuation">&gt;</span>true&lt;/optional<span class="token punctuation">&gt;</span>        &lt;/dependency<span class="token punctuation">&gt;</span>    &lt;/dependencies<span class="token punctuation">&gt;</span>&lt;/project<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>编写配置文件<code>application.yaml</code></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost <span class="token comment"># eureka 服务端实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 自己不注册到eureka</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 自己就是注册中心，不需要检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/ <span class="token comment"># 设置与Eureka交互的地址查询服务和注册服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>springboot 启动类</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">@SpringBootApplication@EnableEurekaServerpublic class Eureka7001Application <span class="token punctuation">{</span>    public static void main(String<span class="token punctuation">[</span><span class="token punctuation">]</span> args) <span class="token punctuation">{</span>        SpringApplication.run(Eureka7001Application.class<span class="token punctuation">,</span> args);    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务访问地址：<a href="http://localhost:7001/">http://localhost:7001/</a></p><h3 id="client连接"><a href="#client连接" class="headerlink" title="client连接"></a>client连接</h3><ol><li>pom依赖添加</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>application配置添加</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 注册到eureka</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka/ <span class="token comment"># 设置与Eureka交互的地址查询服务和注册服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>启动类注解添加</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableEurekaClient</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="服务调用流程"><a href="#服务调用流程" class="headerlink" title="服务调用流程"></a>服务调用流程</h3><ol><li>eureka注册中心启动</li><li>服务启动</li><li>服务提供者注册进注册中心，服务调用者注册进注册中心</li><li>调用者调用服务提供者提供服务时，去注册中心基于服务别名获取实际rpc远程调用地址</li><li>基于HtppClient远程调用</li><li>服务地址会缓存到本地jvm中，默认每间隔30秒更新一次服务调用地址</li></ol><h3 id="Eureka-Server集群"><a href="#Eureka-Server集群" class="headerlink" title="Eureka Server集群"></a>Eureka Server集群</h3><p>关键：互相注册、相互守望</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816340.png" alt="img"></p><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><p>其他配置均一致，关键，eureka server相互注册</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">7001</span> <span class="token comment"># eureka 服务端实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># false表示不向注册中心注册自己</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 自己就是注册中心，不需要检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7002/eureka/ <span class="token comment"># 设置与Eureka交互的地址查询服务和注册服务 集群版相互注册</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，7001的server注册到7002， 7002的server注册到7001</p><h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><p>都不用动，增加注册地址即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 注册到eureka</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7002/eureka/ <span class="token comment"># 设置与Eureka交互的地址查询服务和注册服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Eureka-Client集群后服务调用"><a href="#Eureka-Client集群后服务调用" class="headerlink" title="Eureka Client集群后服务调用"></a>Eureka Client集群后服务调用</h3><h4 id="单工程复用为多服务"><a href="#单工程复用为多服务" class="headerlink" title="单工程复用为多服务"></a>单工程复用为多服务</h4><p>相同服务可以通过配置两组配置文件完成多服务搭建，例如：</p><ol><li>指定两个配置文件</li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816349.png" alt="img"></p><p>主配置文件写正常配置信息，除端口以外</p><p>8001/8002配置文件只用配置server.port</p><ol><li>设置启动参数</li></ol><ul><li>方式1：Idea</li></ul><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816377.png" alt="img"></p><ul><li>方式2：启动参数</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">java <span class="token punctuation">-</span>jar order<span class="token punctuation">-</span>service<span class="token punctuation">-</span>v1.0.jar <span class="token punctuation">-</span><span class="token punctuation">-</span>spring.profiles.active=8002<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>优先级</p><p>命令行方式 &gt; Java系统属性方式 &gt; 系统变量方式 &gt; 配置文件方式</p><h4 id="调用多服务"><a href="#调用多服务" class="headerlink" title="调用多服务"></a>调用多服务</h4><ol><li>调整点1：resttemplate固定ip调用改成eureka注册名</li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816387.png" alt="img"></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816388.png" alt="img"></p><ol><li>启用resttemplate负载均衡loadbalance</li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816396.png" alt="img"></p><h3 id="Eureka-Client注册名称以及IP"><a href="#Eureka-Client注册名称以及IP" class="headerlink" title="Eureka Client注册名称以及IP"></a>Eureka Client注册名称以及IP</h3><p>两个配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> payment8001   <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816402.png" alt="img"></p><h3 id="Eureka-api级服务信息获取"><a href="#Eureka-api级服务信息获取" class="headerlink" title="Eureka api级服务信息获取"></a>Eureka api级服务信息获取</h3><ol><li>启动类添加注解<code>@EnableDiscoveryClient</code></li><li>注入<code>DiscoverClient</code></li><li>接口编写</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/discovery"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> services <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> element <span class="token operator">:</span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"******element: {}"</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"CLOUD-PAYMENT-PROVIDER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span> instance <span class="token operator">:</span> instances<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> discoveryClient<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">{</span>    <span class="token string">"services"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"cloud-payment-provider"</span><span class="token punctuation">,</span><span class="token string">"cloud-order-consumer"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\ <span class="token string">"order"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token number">8002</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.0</span><span class="token number">.149</span><span class="token operator">:</span><span class="token number">8002</span><span class="token number">8001</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.0</span><span class="token number">.149</span><span class="token operator">:</span><span class="token number">8001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自我保护机制"><a href="#自我保护机制" class="headerlink" title="自我保护机制"></a>自我保护机制</h3><p>Eureka服务端会检查最近15分钟内所有Eureka 实例正常心跳占比，如果低于85%就会触发自我保护机制。触发了保护机制，Eureka将暂时把这些失效的服务保护起来，不让其过期，但这些服务也并不是永远不会过期。Eureka在启动完成后，每隔60秒会检查一次服务健康状态，如果这些被保护起来失效的服务过一段时间后（默认90秒）还是没有恢复，就会把这些服务剔除。如果在此期间服务恢复了并且实例心跳占比高于85%时，就会自动关闭自我保护机制。</p><pre class="line-numbers language-none"><code class="language-none">保障了CAP中的AP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>关闭自我保护机制</strong></p><ol><li><strong>设置客户端心跳发送间隔以及非健康实例判断时间</strong></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span><span class="token comment"># eureka client 超过多少时间未发送心跳，则判断该client不可用</span><span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">90</span>   <span class="token comment"># eureka client 向 server 发送心跳间隔</span>  <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">30</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上两个配置可以设置的小一些，让client不可用</p><ol><li><strong>设置服务端关闭自我保护机制，及时剔除不可用client</strong></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span>      <span class="token comment"># 关闭自我保护</span>      <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 失效服务超过90秒即删除该可用实例</span>      <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">90000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><p><a href="https://zookeeper.apache.org/">https://zookeeper.apache.org/</a></p><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">docker pull zookeeperdocker run  <span class="token punctuation">-</span>p 2181<span class="token punctuation">:</span>2181 <span class="token punctuation">-</span><span class="token punctuation">-</span>privileged=true  <span class="token punctuation">-</span><span class="token punctuation">-</span>name zookeeper  <span class="token punctuation">-</span>d  zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>引入pom</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-zookeeper-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8004</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>payment8004  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">zookeeper</span><span class="token punctuation">:</span>      <span class="token key atrule">connect-string</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">2181</span> <span class="token comment"># zk注册地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816413.png" alt="img"></p><p>服务提供者注册成功</p><h3 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816424.png" alt="img"></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816434.png" alt="img"></p><h3 id="zk其他操作"><a href="#zk其他操作" class="headerlink" title="zk其他操作"></a>zk其他操作</h3><p>动态监听服务状态（利用Curator 作为zk客户端）</p><p>详细见代码</p><p>核心类</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">ZookeeperConfigZooKeeperPropertyZooKeeperUtils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h2><p><a href="https://www.consul.io/">https://www.consul.io/</a></p><p><a href="https://www.cnblogs.com/myitnews/p/13655000.html">https://www.cnblogs.com/myitnews/p/13655000.html</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">wget</span> -O- https://apt.releases.hashicorp.com/gpg <span class="token operator">|</span> gpg --dearmor <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /usr/share/keyrings/hashicorp-archive-keyring.gpg<span class="token builtin class-name">echo</span> <span class="token string">"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> main"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/hashicorp.list<span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> consul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>启动consul</p><p><code>consul agent -dev</code>（本地启动）</p><p><code>consul agent -dev -client 0.0.0.0 -ui</code>（非本地启动）</p><p>访问页面</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816451.png" alt="img"></p><h3 id="服务注册-1"><a href="#服务注册-1" class="headerlink" title="服务注册"></a>服务注册</h3><ol><li>pom引入</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.cloud<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-cloud-starter-consul-discovery<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置文件</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">server:  port: <span class="token number">8006</span>spring:  application:    name: cloud-payment-8006  cloud:    consul:      discovery:        service-name: <span class="token variable">${spring.application.name}</span> <span class="token comment"># 服务名</span>        heartbeat:          enabled: <span class="token boolean">true</span> <span class="token comment"># 服务健康检测(不开启会有红叉)</span><span class="token comment">#        prefer-ip-address: true # 服务名使用ip地址</span><span class="token comment">#        ip-address: localhost # 服务名ip地址</span>      host: <span class="token number">43.140</span>.208.71 <span class="token comment"># consul服务地址</span>      port: <span class="token number">8500</span> <span class="token comment"># consul服务端口</span><span class="token comment"># 暴露所有端点健康检查</span>management:  endpoints:    web:      exposure:        include: all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>启动类添加注解<code>@EnableDiscoveryClient</code></li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816456.png" alt="img"></p><h2 id="注册中心对比"><a href="#注册中心对比" class="headerlink" title="注册中心对比"></a>注册中心对比</h2><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816474.png" alt="img"></p><p><a href="https://blog.csdn.net/fly910905/article/details/100023415">https://blog.csdn.net/fly910905/article/details/100023415</a></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816485.png" alt="img"></p><p><a href="https://bbs.huaweicloud.com/blogs/361018">https://bbs.huaweicloud.com/blogs/361018</a></p><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.cloud<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>eureka客户端默认集成了ribbon，不需要重复引入依赖</p><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816497.png" alt="img"></p><table><thead><tr><th><strong>策略</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>round</td><td>轮询（<strong>默认</strong>）</td></tr><tr><td>random</td><td>随机</td></tr><tr><td>retry</td><td>先轮询，如果失败会重试</td></tr><tr><td>weighted</td><td>对轮询的拓展，响应越快权重越高</td></tr><tr><td>bestAviliable</td><td>先过滤多次失败而跳闸的服务，选择并发小的服务</td></tr><tr><td>availableFilter</td><td>先过滤故障实例，再选择并发较小的实例</td></tr></tbody></table><h3 id="指定服务切换负载均衡算法"><a href="#指定服务切换负载均衡算法" class="headerlink" title="指定服务切换负载均衡算法"></a>指定服务切换负载均衡算法</h3><ol><li>新建负载均衡类（IRule实现类注入spring)</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>loadbalancerule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">IRule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">RandomRule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token comment">/*** @author zhuzy* @version 1.0* @description MyRandomRule* @create 2023/1/18 16:22*/</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRandomRule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">randomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p>实现类不可以被<code>@ComponentScan</code> 扫描到，否则便是全局的了。</p><ol><li>添加启动参数<code>@RibbonClient</code></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"CLOUD-PAYMENT-PROVIDER"</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">MyRandomRule</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><p>name为需要切换负载均衡算法的服务名，configuration为具体负载均衡算法实现类</p><h1 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h1><h2 id="Ribbion"><a href="#Ribbion" class="headerlink" title="Ribbion"></a>Ribbion</h2><p>结合restTemplate使用</p><h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><p>涉及模块：</p><p>cloud-eureka-server7001</p><p>cloud-eureka-server7002</p><p>cloud-provider-payment8001</p><p>cloud-consumeropenfeign-order80</p><p>有了ribbon + resttemplate为什么还需要feign？</p><p><strong>方便复用：</strong>在使用ribbon+resttemplate时，每个地方要调用接口都得自己去写一套对接口的调用。使用feign之后，只需要声明一次接口，后序需要使用到接口调用引入这个接口即可。</p><p>feign如何实现负载均衡？</p><p><strong>集成了ribbon</strong></p><h3 id="与Feign区别"><a href="#与Feign区别" class="headerlink" title="与Feign区别"></a>与Feign区别</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816504.png" alt="img"></p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>依赖添加</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>注解添加<code>@EnableFeignClients</code></li><li>声明服务提供者接口路径</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PAYMENT-PROVIDER"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">"/payment"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentFeignClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/selectByPrimaryId/{id}"</span><span class="token punctuation">)</span>    <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaymentEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPrimaryId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h3><p>Openfeign默认超时时间是一秒钟，调用接口超时则会报错</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816523.png" alt="img"></p><p>可以通过ribbon设置超时时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># 设置feign客户端超时时间ribbon<span class="token operator">:</span>  <span class="token class-name">ReadTimeout</span><span class="token operator">:</span> <span class="token number">5000</span> # 指的是建立连接所用时间，适用于网络正常的情况下，两端连接所占用时间  <span class="token class-name">ConnectTimeout</span><span class="token operator">:</span> <span class="token number">5000</span> # 指的是建立连接后从服务器读到可用资源的时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志打印"><a href="#日志打印" class="headerlink" title="日志打印"></a>日志打印</h3><p><strong>日志级别</strong></p><ul><li>NONE 默认，不显示任何级别</li><li>BASIC 记录请求方法/URL/响应状态码/执行时间</li><li>HEADERS 除了BASIC定义的信息外，还有请求和响应头信息</li><li>FULL 除了HEADERS中的，还有请求以及响应正文以及元数据</li></ul><p><strong>设置日志级别</strong></p><ol><li>日志配置Bean（设置Feign日志级别）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>yml配置文件（设置接口日志级别：Debug/Info/Warn/Error)</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">logging<span class="token operator">:</span>  level<span class="token operator">:</span>    # feign日志以什么级别监控什么接口    <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>feign<span class="token punctuation">.</span></span>PaymentFeignClient</span><span class="token operator">:</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h1><p><a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a></p><p><strong>微服务服务调用面临的问题</strong></p><ol><li>服务雪崩</li></ol><p>多个微服务之间调用的时候，假如微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他微服务，这就是所谓的<strong>扇出</strong>。如果扇出的链路上某个微服务调用时间过长或者服务不可用，则会导致A服务长时间阻塞，占用越来越多的系统资源，进而造成系统崩溃。也就是所谓的雪崩效应。</p><h2 id="降级、熔断、限流"><a href="#降级、熔断、限流" class="headerlink" title="降级、熔断、限流"></a>降级、熔断、限流</h2><table><thead><tr><th>类型</th><th>含义</th><th>适用场景</th></tr></thead><tbody><tr><td>服务降级</td><td>服务不可用时，给一个兜底的响应（友好的提示fallback）</td><td>1.程序异常 2.超时 3.服务熔断 4.线程池/信号量打满</td></tr><tr><td>服务熔断</td><td>保险丝，服务濒临崩溃时保证服务不会崩溃而是以服务降级方式响应给调用方</td><td>保险丝</td></tr><tr><td>服务限流</td><td>高并发场景，服务并发量过高，将服务进行排队处理，有序进行</td><td>并发较高</td></tr></tbody></table><h2 id="Hystrix（豪猪哥）"><a href="#Hystrix（豪猪哥）" class="headerlink" title="Hystrix（豪猪哥）"></a>Hystrix（豪猪哥）</h2><p>对应工程</p><p>cloud-provider-hystrix-payment8001</p><p>cloud-eureka-server7001</p><p>cloud-consumerhystrix-order80</p><p>cloud-consumerhystrix-dashboard9001</p><p><strong>介绍</strong></p><p>处理分布式系统延迟和容错的开源库，类似于熔断保险丝。服务不可用或者长时间调用无响应超时时，向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方法无法处理的异常。</p><p><strong>jmeter并发压力测试</strong></p><p>2w并发请求timeout接口，再调用ok接口会发现ok也会被阻塞住，这是因为tomcat线程池资源被占尽。</p><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><ol><li>引入pom</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>hystrix<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>服务提供者自我容错配置</li></ol><p>@HystrixCommand 配置兜底方法以及失败触发条件</p><p>设置兜底处理api method， 并配置失败认定条件。即超时时间达到了2000毫秒</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"payment_timeoutHandler"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"2000"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"payment_timeoutHandler"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"2000"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_timeout</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> timeout <span class="token operator">=</span> <span class="token number">3000L</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"线程池： "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" payment_timeout, id: "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"^_^"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_timeoutHandler</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"线程池： "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" payment_timeoutHandler, id: "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"o(╥﹏╥)o"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主启动类激活</strong></p><p>添加注解： <code>@EnableCircuitBreaker</code></p><p>不仅仅系统超时才会降级，系统报错后也会被拦截走降级的逻辑。</p><ol><li>服务调用者fallback配置</li></ol><ul><li>配置feign开启降级(yaml)</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>启动类添加注解<code>@EnableHystrix</code></li><li>配置降级command</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/timeout/{id}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"payment_timeoutHandler"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"800"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_timeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> res <span class="token operator">=</span> paymentFeignClient<span class="token punctuation">.</span><span class="token function">payment_timeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"payment_timeout响应结果, {}"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_timeoutHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"我是消费者80， 对方支付系统繁忙请十秒后重试或者自己运行出错请检查自己o(╥﹏╥)o"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="全局fallback-解决冗余问题"><a href="#全局fallback-解决冗余问题" class="headerlink" title="全局fallback(解决冗余问题)"></a>全局fallback(解决冗余问题)</h4><p>类似于全局异常处理器，避免代码冗余。除了个别业务需要特殊设置降级，其他服务可以使用全局的降级处理器。</p><ol><li>声明当前类全局fallback</li><li>增加注解@HystrixCommand</li><li>定义全局fallback</li></ol><p><strong>case：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">"payment_Global_FallbackMethod"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">PaymentFeignClient</span> paymentFeignClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/ok/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_ok</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> res <span class="token operator">=</span> paymentFeignClient<span class="token punctuation">.</span><span class="token function">payment_ok</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"payment_ok响应结果： {}"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/timeout/{id}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@HystrixCommand</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_timeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> res <span class="token operator">=</span> paymentFeignClient<span class="token punctuation">.</span><span class="token function">payment_timeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"payment_timeout响应结果, {}"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_Global_FallbackMethod</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是消费者80， 对方支付系统繁忙请十秒后重试或者自己运行出错请检查自己o(╥﹏╥)o"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单一Feign接口的统一fallback-解决混乱问题"><a href="#单一Feign接口的统一fallback-解决混乱问题" class="headerlink" title="单一Feign接口的统一fallback(解决混乱问题)"></a>单一Feign接口的统一fallback(解决混乱问题)</h4><p>消费者在处理接口异常fallback时，如果接口较多，那么fallback处理逻辑将会很冗余且繁杂，可以通过统一的方式处理fallback</p><ol><li>feignclient增加fallback处理类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">"/payment"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token class-name">PaymentFeignHystrixFallback</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentFeignClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/ok/{id}"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">payment_ok</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/timeout/{id}"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">payment_timeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>fallback处理类实现feignclient</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentFeignHystrixFallback</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentFeignClient</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_ok</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是消费者80， 对方支付系统繁忙请十秒后重试或者自己运行出错请检查自己o(╥﹏╥)o"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_timeout</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是消费者80， 对方支付系统繁忙请十秒后重试或者自己运行出错请检查自己o(╥﹏╥)o"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务熔断-1"><a href="#服务熔断-1" class="headerlink" title="服务熔断"></a>服务熔断</h3><p><a href="https://martinfowler.com/bliki/CircuitBreaker.html">https://martinfowler.com/bliki/CircuitBreaker.html</a></p><p>熔断机制是应对雪崩效应的一种链路保护机制。当扇出链路某个微服务出错或者不可用以及响应时间太长时，会进行服务降级，进而熔断该服务的调用。快速响应错误信息。<strong>当检测到该服务可正常进行调用时，则恢复调用链路。</strong></p><p>Hystrix会<strong>监控微服务调用链路，当失败达到一定阈值是，默认是（五秒钟20次）</strong>则会启用熔断机制。熔断机制的注解是@HystrixCommand</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816526.png" alt="img"></p><p>熔断的核心概念在于：</p><p>并不是完全认定该服务不可用，而是一个半断开阶段。仍有少量的请求会尝试该服务是否恢复，一旦恢复，则仍可以提供服务。</p><p><strong>测试</strong></p><p>Hystrix可配置属性：<code>HystrixCommandProperties</code></p><p><strong>服务提供者熔断配置</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 服务熔断</span><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"payment_circuitBreaker_fallback"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment">// 以下配置解释：在10秒内，请求超过十次且失败百分比超过百分之六十，则启用熔断机制</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span> value<span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 请求次数</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 时间窗口大小</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 失败百分比</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_circuitBreaker</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"*****id 不能为负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 调用成功， 流水号"</span> <span class="token operator">+</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_circuitBreaker_fallback</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"id 不能为负数o(╥﹏╥)o"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dashboard搭建"><a href="#dashboard搭建" class="headerlink" title="dashboard搭建"></a>dashboard搭建</h3><h4 id="dashborad"><a href="#dashborad" class="headerlink" title="dashborad"></a>dashborad</h4><ol><li>新建工程dashboard</li><li>pom</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span>         xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>         xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>parent<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>sc2023<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>modelVersion<span class="token punctuation">&gt;</span></span><span class="token number">4.0</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>cloud<span class="token operator">-</span>consumerhystrix<span class="token operator">-</span>dashboard<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>properties<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token punctuation">&gt;</span></span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token punctuation">&gt;</span></span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>hystrix<span class="token operator">-</span>dashboard<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">&gt;</span></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>optional<span class="token punctuation">&gt;</span></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>cloud<span class="token operator">-</span>api<span class="token operator">-</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>application</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">server<span class="token operator">:</span>  port<span class="token operator">:</span> <span class="token number">9001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>启动类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableHystrixDashboard</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixDashboardApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HystrixDashboardApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816527.png" alt="img"></p><h4 id="注册进入dashboard"><a href="#注册进入dashboard" class="headerlink" title="注册进入dashboard"></a>注册进入dashboard</h4><ol><li>pom</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>增加bean</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableCircuitBreaker</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentHystrix8001Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentHystrix8001Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HystrixMetricsStreamServlet</span> streamServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServletRegistrationBean</span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>streamServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"HystrixMetricsStreamServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h4><p>连接dashborad</p><p>dashboard输入url: <a href="http://localhost:8001/hystrix.stream">http://localhost:8001/hystrix.stream</a></p><p>进行请求</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816533.png" alt="img"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h1><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816546.png" alt="img"></p><h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><ol><li>pom</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud&lt;<span class="token operator">/</span>groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-gateway&lt;<span class="token operator">/</span>artifactId&gt;    &lt;<span class="token operator">/</span>dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot&lt;<span class="token operator">/</span>groupId&gt;        &lt;artifactId&gt;spring-boot-devtools&lt;<span class="token operator">/</span>artifactId&gt;        &lt;scope&gt;runtime&lt;<span class="token operator">/</span>scope&gt;        &lt;optional&gt;true&lt;<span class="token operator">/</span>optional&gt;    &lt;<span class="token operator">/</span>dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>cloud&lt;<span class="token operator">/</span>groupId&gt;        &lt;artifactId&gt;cloud-api-commons&lt;<span class="token operator">/</span>artifactId&gt;        &lt;version&gt;$<span class="token punctuation">{</span>version<span class="token punctuation">}</span>&lt;<span class="token operator">/</span>version&gt;    &lt;<span class="token operator">/</span>dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud&lt;<span class="token operator">/</span>groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;<span class="token operator">/</span>artifactId&gt;    &lt;<span class="token operator">/</span>dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org<span class="token punctuation">.</span>projectlombok&lt;<span class="token operator">/</span>groupId&gt;        &lt;artifactId&gt;lombok&lt;<span class="token operator">/</span>artifactId&gt;    &lt;<span class="token operator">/</span>dependency&gt;&lt;<span class="token operator">/</span>dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置文件</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">spring:  application:    name: cloud-gateway  cloud:    gateway:      routes:        <span class="token operator">-</span> id: payment_route           <span class="token comment"># 路由的id，唯一</span>          uri: http:<span class="token operator">/</span><span class="token operator">/</span>localhost:8011  <span class="token comment"># 匹配后提供服务的路由地址</span>          predicates:            <span class="token operator">-</span> Path=<span class="token operator">/</span>payment/<span class="token operator">*</span><span class="token operator">*</span>    <span class="token comment"># 断言， 匹配的路径会路由到uri（9527/payment... -&gt; 8001)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编码路由配置"><a href="#编码路由配置" class="headerlink" title="编码路由配置"></a>编码路由配置</h3><p>替换yml配置路由断言，改用硬编码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customerRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RouteLocatorBuilder<span class="token punctuation">.</span>Builder</span> routes <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"route_01"</span><span class="token punctuation">,</span>                     r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/guonei"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://news.baidu.com/guonei"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"route_02"</span><span class="token punctuation">,</span>                     r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/guoji"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://news.baidu.com/guoji"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="微服务名动态路由"><a href="#微服务名动态路由" class="headerlink" title="微服务名动态路由"></a>微服务名动态路由</h3><p>通常情况下，路由并不会写死，而是通过注册中心获取服务名并结合ribbon等负载均衡策略进行负载均衡。</p><p>以Eureka为例，服务名取自application-name</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816560.png" alt="img"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启从注册中心动态创建路由的功能， 利用微服务名称进行服务调用</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_route <span class="token comment"># 路由id</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//CLOUD<span class="token punctuation">-</span>PAYMENT<span class="token punctuation">-</span>PROVIDER <span class="token comment"># 匹配后提供服务的路由地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> Path=/payment/<span class="token important">**</span>    <span class="token comment"># 断言， 匹配的路径会路由到uri（9527/payment... -&gt; CLOUD-PAYMENT-PROVIDER)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="predicate"><a href="#predicate" class="headerlink" title="predicate"></a>predicate</h3><p><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#gateway-request-predicates-factories">https://cloud.spring.io/spring-cloud-gateway/reference/html/#gateway-request-predicates-factories</a></p><p>具体参照以上官方文档</p><table><thead><tr><th>名称</th><th>含义</th><th>写法</th></tr></thead><tbody><tr><td>After</td><td>在xxx时间访问后</td><td>predicates: - After=2017-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>在xxx时间访问前</td><td>predicates: - Before=2017-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Between</td><td>在xxx时间之间</td><td>predicates: - Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>两个参数，cookie key以及正则，cookie key的值满足正则则匹配</td><td>predicates: - Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>两个参数，header key以及正则，header key的值满足正则则匹配</td><td>predicates: - Header=X-Request-Id, \d+</td></tr><tr><td>Host</td><td>集合参数，请求头Host包含该主机则匹配路由（支持通配符以及spel表达式）</td><td>predicates: - Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>集合参数，请求方式，Get 或者 Post，符合请求方式的请求则匹配</td><td>predicates: - Method=GET,POST</td></tr><tr><td>Path</td><td>集合参数，请求路径匹配</td><td>predicates: - Path=/red/{segment},/blue/{segment}</td></tr><tr><td>Query</td><td>两个或一个参数，参数名以及参数值的正则表达式，包含该参数并满足正则表达式则匹配；或者一个参数情况下，包含该参数即匹配</td><td>predicates: - Query=red, gree.or predicates: - Query=green</td></tr><tr><td>RemoteAddr</td><td>集合参数，匹配接口调用方ip，支持子网掩码，如有则表示 1~24均可</td><td>predicates: - RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight Route</td><td>权重路由（看官网示例）</td><td><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#the-weight-route-predicate-factory">https://cloud.spring.io/spring-cloud-gateway/reference/html/#the-weight-route-predicate-factory</a></td></tr></tbody></table><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#gatewayfilter-factories">https://cloud.spring.io/spring-cloud-gateway/reference/html/#gatewayfilter-factories</a></p><p><strong>生命周期以及种类</strong></p><ol><li>生命周期：pre/post</li><li>种类：gateway/global</li></ol><p><strong>自定义全局GlobalFilter</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">@Component@Slf4jpublic class MyGlobalFilter implements GlobalFilter<span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    @Override    public Mono&lt;Void<span class="token punctuation">&gt;</span> filter(ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain) <span class="token punctuation">{</span>        log.info("<span class="token important">********************come</span> in my global filter" + new Date());        String username = exchange.getRequest().getQueryParams().getFirst("username");        if (username == null) <span class="token punctuation">{</span>            log.info("<span class="token important">***************用户名为null，</span> 非法用户");            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);            return exchange.getResponse().setComplete();        <span class="token punctuation">}</span>        return chain.filter(exchange);    <span class="token punctuation">}</span>    @Override    public int getOrder() <span class="token punctuation">{</span>        return 0;    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h1><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>对应工程：</p><p>cloud-configcenter-3344</p><p>cloud-configclient-3355</p><p>cloud-configclient-3366</p><p>cloud-eureka-server7001</p><p><a href="https://www.bilibili.com/video/BV18E411x7eT/?p=76&amp;spm_id_from=pageDriver&amp;vd_source=f78aecb21fc43825405b56832e990cd1">https://www.bilibili.com/video/BV18E411x7eT/?p=76&amp;spm_id_from=pageDriver&amp;vd_source=f78aecb21fc43825405b56832e990cd1</a></p><p><a href="https://www.cnblogs.com/fengzheng/p/11242128.html">https://www.cnblogs.com/fengzheng/p/11242128.html</a></p><ul><li>支持git</li><li>支持数据库</li><li>支持svn</li><li>支持本地文件</li></ul><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816564.png" alt="img"></p><p><strong>一次修改，处处发版</strong></p><p>作用：</p><ul><li>集中管理配置文件</li><li>不同环境不同配置，动态化的配置更新</li><li>运行期间动态调整配置，不需要在部署节点上编辑配置，只需要统一编辑</li><li>配置发生变化时，服务不需要重启即可感知到配置变化并应用新的配置</li><li>将配置信息以rest接口形式暴露</li></ul><p>配置路径:</p><ul><li>github（默认）</li><li>svn</li><li>本地文件</li></ul><h3 id="Server搭建"><a href="#Server搭建" class="headerlink" title="Server搭建"></a>Server搭建</h3><ol><li>pom</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${rversion}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>yml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center <span class="token comment"># 注册进Eureka</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token comment"># 配置模式 git</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token comment"># git路径</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/zzy888888/cloud23<span class="token punctuation">-</span>config.git          <span class="token comment"># 配置文件匹配表达式（以config开头）</span>          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span> config          <span class="token comment"># 读取分支</span>          <span class="token key atrule">default-label</span><span class="token punctuation">:</span> master          <span class="token key atrule">username</span><span class="token punctuation">:</span> zzy888888          <span class="token key atrule">password</span><span class="token punctuation">:</span> zwzwxx0711.<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 注册到eureka</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>main class</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">@SpringBootApplication@EnableConfigServer@EnableEurekaClientpublic class ConfigServer3344 <span class="token punctuation">{</span>    public static void main(String<span class="token punctuation">[</span><span class="token punctuation">]</span> args) <span class="token punctuation">{</span>        SpringApplication.run(ConfigServer3344.class<span class="token punctuation">,</span> args);    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>可以选用github/gitte，这里选择gitte</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816581.png" alt="img"></p><p>如果选择私有仓库则需要配置用户名与密码</p><h3 id="Client搭建"><a href="#Client搭建" class="headerlink" title="Client搭建"></a>Client搭建</h3><ol><li>pom</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>web&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>actuator&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>netflix<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>client&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>devtools&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;scope<span class="token punctuation">&gt;</span>runtime&lt;/scope<span class="token punctuation">&gt;</span>    &lt;optional<span class="token punctuation">&gt;</span>true&lt;/optional<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.atguigu.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>cloud<span class="token punctuation">-</span>api<span class="token punctuation">-</span>commons&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;version<span class="token punctuation">&gt;</span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span>&lt;/version<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>yml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client <span class="token comment"># 注册进Eureka</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master <span class="token comment"># 分支名称</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config <span class="token comment"># 配置文件名称</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev <span class="token comment"># 配置文件读取后缀: label+name+profile+uri组合成配置文件路径： http://localhost:3344/master/config-dev.yaml</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span> <span class="token comment"># 配置中心地址</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 注册到eureka</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>main class</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">@SpringBootApplication@EnableEurekaClientpublic class ConfigClient3355 <span class="token punctuation">{</span>    public static void main(String<span class="token punctuation">[</span><span class="token punctuation">]</span> args) <span class="token punctuation">{</span>        SpringApplication.run(ConfigClient3355.class<span class="token punctuation">,</span> args);    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端动态刷新"><a href="#客户端动态刷新" class="headerlink" title="客户端动态刷新"></a>客户端动态刷新</h3><p>我们修改了git中的配置后，服务端是实时获取的，可以进行刷新。但是由于客户端是先进行了本地缓存，因此不能够进行动态刷新。可以通过以下途径进行刷新：</p><ol><li>重启客户端</li><li>调用客户端刷新接口</li></ol><h4 id="动态刷新实战"><a href="#动态刷新实战" class="headerlink" title="动态刷新实战"></a>动态刷新实战</h4><p>目前服务端能够做到自动刷新，客户端不行。通过以上讲解，可以通过调用客户端接口进行自动刷新。配置步骤如下：</p><ol><li>加pom依赖</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>actuator&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>加application.yml配置</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 暴露监控端点</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"refresh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>涉及到配置的类加注解</li></ol><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">@RestController@RefreshScopepublic class ConfigClientController {    @Value("${config.info}")    private String configInfo;    @GetMapping("/config")    public String getConfigInfo() {        return configInfo;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>调用客户端刷新接口</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">curl <span class="token punctuation">-</span>X POST "http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3355/actuator/refresh"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><p>多个客户端，如果需要刷新的话 都得运维手动调用refresh接口，才能实现配置刷新。</p><h2 id="Bus"><a href="#Bus" class="headerlink" title="Bus"></a>Bus</h2><p><a href="https://www.bilibili.com/video/BV18E411x7eT/?p=78&amp;spm_id_from=pageDriver&amp;vd_source=f78aecb21fc43825405b56832e990cd1">https://www.bilibili.com/video/BV18E411x7eT/?p=78&amp;spm_id_from=pageDriver&amp;vd_source=f78aecb21fc43825405b56832e990cd1</a></p><p>配合config实现动态刷新</p><p><strong>定义：</strong>消息总线在微服务架构中，是一种轻量级的消息代理的主题，系统中的所有组件都可以连接进来，该主题的消息会被所有的实例监听和消费，所以称为消息总线。</p><p><strong>基本原理：</strong>ConfigClient实例全部都监听MQ中同一个topic（默认是springcloud bus）。当一个微服务刷新数据的时候，将会把这个信息放入topic中，这样其他监听同一个Topic的服务就能够得到通知，然后去更新自身的配置。</p><p>支持的消息队列：    RabbitMq 以及 Kafka</p><h3 id="rabbit-mq搭建"><a href="#rabbit-mq搭建" class="headerlink" title="rabbit mq搭建"></a>rabbit mq搭建</h3><p><a href="https://developer.aliyun.com/article/846528">https://developer.aliyun.com/article/846528</a></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">docker pull rabbitmq<span class="token punctuation">:</span>3.6.15<span class="token punctuation">-</span>managementdocker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span><span class="token punctuation">-</span>name cloud23rb \<span class="token punctuation">-</span>p 15672<span class="token punctuation">:</span>15672 <span class="token punctuation">-</span>p 5672<span class="token punctuation">:</span>5672 rabbitmq<span class="token punctuation">:</span>3.6.15<span class="token punctuation">-</span>management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>访问：</p><p>用户名：guest    密码：guest</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816586.png" alt="img"></p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816595.png" alt="img"></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816608.png" alt="img"></p><p>刷新配置在Config Server，而不是业务节点</p><h3 id="全局刷新（广播）"><a href="#全局刷新（广播）" class="headerlink" title="全局刷新（广播）"></a>全局刷新（广播）</h3><p>Config配置如果想要实现刷新单独只有Config的情况下，只能通过客户端开启actuator手动发起post请求调用<code>/actuator/refresh</code>接口，如果在客户端节点比较多的情况下，不现实。</p><p>因此迫切需要一种方式，只请求一个节点，并将刷新信息广播到其他的所有节点，另外，这个节点最好是server节点。</p><p><strong>Bus广播刷新配置步骤</strong></p><ol><li>安装rabbit mq</li><li>增加pom依赖（服务端以及客户端）</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>bus<span class="token punctuation">-</span>amqp&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置rabbit mq（服务端以及客户端）</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 43.140.208.71    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>config服务端暴露端点（bus-refresh）</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># rabbit mq 暴露bus刷新配置的端点</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"bus-refresh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>调用服务端端点接口实现刷新</li></ol><pre class="line-numbers language-none"><code class="language-none">**curl -X POST "http://localhost:3344/actuator/bus-refresh"**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="定点刷新"><a href="#定点刷新" class="headerlink" title="定点刷新"></a>定点刷新</h3><p>配置同全局刷新，调用url接口改成</p><pre class="line-numbers language-none"><code class="language-none">**curl -X POST "http://localhost:3344/actuator/bus-refresh/server-name:server-port"**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>例</strong>：</p><p>存在服务：cloud-config-client1:3355</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816612.png" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">curl -X POST "http://localhost:3344/actuator/bus-refresh/cloud-config-client1:3355**"**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="消息总线"><a href="#消息总线" class="headerlink" title="消息总线"></a>消息总线</h1><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>涉及到的模块：</p><p>cloud-eureka-server7001</p><p>cloud-stream-rabbitmq-provider8801</p><p>cloud-stream-rabbitmq-consumer8802</p><p><strong>用途：屏蔽底层消息中间件的差异，降低切换成本，统一消息编程模型。</strong></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816621.png" alt="img"></p><p>代码交互Binder；Binder去绑定MQ</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816637.png" alt="img"></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816640.png" alt="img"></p><p><strong>编码和常用注解</strong></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816646.png" alt="img"></p><h3 id="消息发送与消费"><a href="#消息发送与消费" class="headerlink" title="消息发送与消费"></a>消息发送与消费</h3><p><strong>工程搭建</strong></p><p><strong>生产者工程搭建</strong></p><p><strong>消费者工程搭建</strong></p><p>详见工程：cloud-stream-rabbitmq-provider8801 与 cloud-stream-rabbitmq-consumer8802</p><p><strong>测试</strong></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816660.png" alt="img"></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816662.png" alt="img"></p><h3 id="重复消费"><a href="#重复消费" class="headerlink" title="重复消费"></a>重复消费</h3><p>两个消费者消费同一个生成者的数据时，都会收到生成者的消息，这种情况一般是不被认可的。可以通过配置消费者组来解决这种情况。 （集群部署情况下解决重复消费问题）</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816676.png" alt="img">存在两个group，因此会重复消费。</p><p>可以通过调整配置文件设置分组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>stream<span class="token punctuation">-</span>consumer <span class="token comment"># 注册进Eureka</span>  <span class="token comment"># stream 配置</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">stream</span><span class="token punctuation">:</span>      <span class="token key atrule">binders</span><span class="token punctuation">:</span>        <span class="token key atrule">defaultRabbit</span><span class="token punctuation">:</span> <span class="token comment"># 在此处配置要绑定的rabbitmq的服务消息</span>          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit <span class="token comment"># 消息组件类型</span>          <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment"># 设置rabbitmq的相关环境信息</span>            <span class="token key atrule">spring</span><span class="token punctuation">:</span>              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>                <span class="token key atrule">host</span><span class="token punctuation">:</span> 43.140.208.71                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>                <span class="token key atrule">username</span><span class="token punctuation">:</span> guest                <span class="token key atrule">password</span><span class="token punctuation">:</span> guest      <span class="token key atrule">bindings</span><span class="token punctuation">:</span> <span class="token comment"># 服务整合</span>        <span class="token key atrule">input</span><span class="token punctuation">:</span> <span class="token comment"># 这个名字是通道的名称</span>          <span class="token key atrule">destination</span><span class="token punctuation">:</span> studyExchange <span class="token comment"># 表示要使用的Exchange名称</span>          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json <span class="token comment"># 设置消息类型，文本可以设置为：“text/plain"</span>          <span class="token key atrule">binder</span><span class="token punctuation">:</span> defaultRabbit <span class="token comment"># 设置要绑定消息服务的具体设置</span>          <span class="token key atrule">group</span><span class="token punctuation">:</span> atguiguA   <span class="token comment"># 设置分组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816688.png" alt="img"></p><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><p>配置了group属性后，将会自动开启消息持久化。</p><p>作用：在消费者服务重启后，在这时间如果生产者仍然发送了消息，则能够监控到，并在服务启动后消费该部分消息。不配置的话将会导致重启期间的所有消息遗漏。</p><h1 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h1><h2 id="Sleuth"><a href="#Sleuth" class="headerlink" title="Sleuth"></a>Sleuth</h2><p><strong>涉及工程：</strong></p><p>cloud-eureka-server7001</p><p>cloud-provider-payment8001</p><p>可参考文档：<a href="https://blog.51cto.com/u_15296180/5157222">https://blog.51cto.com/u_15296180/5157222</a></p><p><a href="https://www.cnblogs.com/duanxz/p/7552857.html">https://www.cnblogs.com/duanxz/p/7552857.html</a></p><p>Sleuth负责链路追踪Zpikin负责可视化</p><h3 id="Zipkin搭建（整合了Sleuth）"><a href="#Zipkin搭建（整合了Sleuth）" class="headerlink" title="Zipkin搭建（整合了Sleuth）"></a>Zipkin搭建（整合了Sleuth）</h3><ol><li>下载server jar（zipkin-server-2.19.3-exec.jar）： <a href="https://repo1.maven.org/maven2/io/zipkin/zipkin-server/">https://repo1.maven.org/maven2/io/zipkin/zipkin-server/</a></li><li>jar包启动</li><li>访问页面： localhost:9411/zipkin</li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816689.png" alt="img"></p><h3 id="工程改造"><a href="#工程改造" class="headerlink" title="工程改造"></a>工程改造</h3><p>复用8001以及80</p><p><strong>改造内容：</strong></p><ol><li>pom</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>zipkin&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>application.yaml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">zipkin</span><span class="token punctuation">:</span>    <span class="token comment"># zipkin admin路径</span>    <span class="token key atrule">base-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9411</span>  <span class="token key atrule">sleuth</span><span class="token punctuation">:</span>    <span class="token key atrule">sampler</span><span class="token punctuation">:</span>      <span class="token comment"># 采样率，介于0-1之间，1表示全部采集</span>      <span class="token key atrule">probability</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816706.png" alt="img"></p><h1 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h1><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><p>涉及工程：</p><p>cloudalibaba-provider-payment9001</p><p>cloudalibaba-consumer-order80</p><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/zh-cn/index.html">https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/zh-cn/index.html</a></p><p>Nacos = Dynamic Naming and Configuration Service = Eureka + Config + Bus</p><h3 id="安装以及部署"><a href="#安装以及部署" class="headerlink" title="安装以及部署"></a>安装以及部署</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">docker pull nacos/nacos<span class="token punctuation">-</span>serverdocker run \<span class="token punctuation">-</span><span class="token punctuation">-</span>name nacos \<span class="token punctuation">-</span>e MODE=standalone \<span class="token punctuation">-</span>p 8848<span class="token punctuation">:</span>8848 \<span class="token punctuation">-</span>p 9848<span class="token punctuation">:</span>9848 \<span class="token punctuation">-</span>e JVM_XMS=256m \<span class="token punctuation">-</span>e JVM_XMX=256m \<span class="token punctuation">-</span>d nacos/nacos<span class="token punctuation">-</span>server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登陆控制台：localhost:8848/nacos</p><p>默认用户名：nacos        默认密码：nacos</p><h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><h4 id="服务提供者工程搭建"><a href="#服务提供者工程搭建" class="headerlink" title="服务提供者工程搭建"></a>服务提供者工程搭建</h4><ol><li>父pom定义dependencymanage 管理子pom依赖版本</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;<span class="token tag">!--spring</span> cloud alibaba<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.alibaba.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>alibaba<span class="token punctuation">-</span>dependencies&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;version<span class="token punctuation">&gt;</span>2.1.0.RELEASE&lt;/version<span class="token punctuation">&gt;</span>    &lt;type<span class="token punctuation">&gt;</span>pom&lt;/type<span class="token punctuation">&gt;</span>    &lt;scope<span class="token punctuation">&gt;</span>import&lt;/scope<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>子pom引入discovery</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.alibaba.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>alibaba<span class="token punctuation">-</span>nacos<span class="token punctuation">-</span>discovery&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>web&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>devtools&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;scope<span class="token punctuation">&gt;</span>runtime&lt;/scope<span class="token punctuation">&gt;</span>    &lt;optional<span class="token punctuation">&gt;</span>true&lt;/optional<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>actuator&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.atguigu.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>cloud<span class="token punctuation">-</span>api<span class="token punctuation">-</span>commons&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;version<span class="token punctuation">&gt;</span>1.0<span class="token punctuation">-</span>SNAPSHOT&lt;/version<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>application配置文件定义</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># 服务注册地址</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9002</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>启动类</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">@SpringBootApplication@EnableDiscoveryClientpublic class PaymentNacos9001 <span class="token punctuation">{</span>    public static void main(String<span class="token punctuation">[</span><span class="token punctuation">]</span> args) <span class="token punctuation">{</span>        SpringApplication.run(PaymentNacos9001.class<span class="token punctuation">,</span> args);    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册效果</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816711.png" alt="img"></p><h4 id="服务消费者工程搭建"><a href="#服务消费者工程搭建" class="headerlink" title="服务消费者工程搭建"></a>服务消费者工程搭建</h4><p>基本和服务提供者一致，详见：cloudalibaba-consumer-order80</p><h4 id="Nacos特点"><a href="#Nacos特点" class="headerlink" title="Nacos特点"></a>Nacos特点</h4><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816713.png" alt="img"><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816722.png" alt="img"></p><h4 id="AP-x2F-CP切换"><a href="#AP-x2F-CP切换" class="headerlink" title="AP/CP切换"></a>AP/CP切换</h4><p>默认AP:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">curl <span class="token punctuation">-</span>X PUT '$NACOS_SERVER<span class="token punctuation">:</span>8848/nacos/v1/ns/operator/switches<span class="token punctuation">?</span>entry=serverMode<span class="token important">&amp;value=CP'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置中心-1"><a href="#配置中心-1" class="headerlink" title="配置中心"></a>配置中心</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816729.png" alt="img"></p><p><strong>nacos配置文件Data命名规则</strong></p><p><strong>工程搭建：</strong></p><ol><li>pom引入</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.alibaba.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>alibaba<span class="token punctuation">-</span>nacos<span class="token punctuation">-</span>config&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.alibaba.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>alibaba<span class="token punctuation">-</span>nacos<span class="token punctuation">-</span>discovery&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>web&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>devtools&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;scope<span class="token punctuation">&gt;</span>runtime&lt;/scope<span class="token punctuation">&gt;</span>    &lt;optional<span class="token punctuation">&gt;</span>true&lt;/optional<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>actuator&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.atguigu.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>cloud<span class="token punctuation">-</span>api<span class="token punctuation">-</span>commons&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;version<span class="token punctuation">&gt;</span>1.0<span class="token punctuation">-</span>SNAPSHOT&lt;/version<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>bootstrap.yaml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3377</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># 服务注册地址</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># 配置中心地址</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment"># 指定yaml格式</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置分类管理"><a href="#配置分类管理" class="headerlink" title="配置分类管理"></a>配置分类管理</h4><p>Namespace（命名空间） -&gt; Group (分组) -&gt; DataId（配置文件）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># 服务注册地址</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># 配置中心地址</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment"># 指定yaml格式</span>        <span class="token comment"># namespace:</span>        <span class="token comment"># group: </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集群和持久化配置"><a href="#集群和持久化配置" class="headerlink" title="集群和持久化配置"></a>集群和持久化配置</h3><p>支持的部署模式：</p><ol><li>单机</li><li>集群</li><li>多集群</li></ol><p>nacos默认采用内嵌的数据库（derby）来进行存储，如果需要搭建nacos集群，则至少需要外挂高可用数据库，如mysql。大致架构如下：</p><p>（可参考：<a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p><p><a href="https://www.bilibili.com/video/BV18E411x7eT?p=108&amp;spm_id_from=pageDriver&amp;vd_source=f78aecb21fc43825405b56832e990cd1">https://www.bilibili.com/video/BV18E411x7eT?p=108&amp;spm_id_from=pageDriver&amp;vd_source=f78aecb21fc43825405b56832e990cd1</a>）</p><h4 id="集群部署架构图"><a href="#集群部署架构图" class="headerlink" title="集群部署架构图"></a>集群部署架构图</h4><p>推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p><p><a href="http://ip1/">http://ip1</a>:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。</p><p><a href="http://slb/">http://SLB</a>:port/openAPI 挂载SLB模式(内网SLB，不可暴露到公网，以免带来安全风险)，直连SLB即可，下面挂server真实ip，可读性不好。</p><p><a href="http://nacos.com/">http://nacos.com</a>:port/openAPI 域名 + SLB模式(内网SLB，不可暴露到公网，以免带来安全风险)，可读性好，而且换ip方便，推荐模式。<img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/00FDE252.png" alt="img"></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816747.png" alt="img"></p><h4 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h4><p>Nginx * 1 + Nacos Server * 3 + Mysql * 1</p><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><p>对应工程：</p><p>Nacos Server（docker）</p><p>Sentinel dashboard（jar）</p><p>cloudalibaba-sentinel-service8401</p><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/zh-cn/index.html">https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/zh-cn/index.html</a></p><h3 id="对比Hystrix"><a href="#对比Hystrix" class="headerlink" title="对比Hystrix"></a>对比Hystrix</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816750.png" alt="img"></p><h3 id="主要特征"><a href="#主要特征" class="headerlink" title="主要特征"></a>主要特征</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816761.png" alt="img"></p><h3 id="dashboard安装"><a href="#dashboard安装" class="headerlink" title="dashboard安装"></a>dashboard安装</h3><p><a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p>jar包运行即可，默认端口8080，用户名/密码：sentinel</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816771.png" alt="img"></p><h3 id="客户端搭建"><a href="#客户端搭建" class="headerlink" title="客户端搭建"></a>客户端搭建</h3><p>搭建步骤：</p><ol><li>pom</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        后序做持久化的时候用到--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>application.yaml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8401</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloudalibaba<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># 服务注册地址</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token comment"># 配置sentinel dashboard地址</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>        <span class="token comment"># dashboard交互端口，若被占用则会逐步递增，直到找到未被占用的端口</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>其他内容详见工程</li></ol><p>sentinel懒加载，请求过一次客户端接口后，dashboard才能够检测到</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816772.png" alt="img"></p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><h4 id="流控"><a href="#流控" class="headerlink" title="流控"></a>流控</h4><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816788.png" alt="img"></p><p><strong>流控模式：</strong></p><p>直接：直接请求资源</p><p>关联：可以关联一个资源，关联资源被流控则会影响当前资源</p><p>链路：设置资源入口，入口资源被流控则会影响当前资源</p><p><strong>流控效果：</strong></p><p>快速失败：快速响应请求失败</p><p><strong>warm up</strong>：</p><p>解释：通过设置<strong>请求阈值</strong>以及<strong>预热时间，</strong>结合<strong>冷加载因子（默认3）</strong>，冷启动。例如请求阈值最终为10，则初始请求阈值为（10/3=3），并在预热时间内逐步增加到请求阈值10。（适用于突然大流量打进来直接把系统打挂）</p><p>官方解释：<a href="https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8">https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8</a></p><p>实现类：com.alibaba.csp.sentinel.slots.block.flow.controller.WarmUpController</p><p><strong>排队等待：</strong>超过阈值后排队发起请求，直到达到超时时间则请求失败。</p><h4 id="降级-x2F-熔断"><a href="#降级-x2F-熔断" class="headerlink" title="降级/熔断"></a>降级/熔断</h4><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7">https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7</a></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816789.png" alt="img"></p><h4 id="热点参数"><a href="#热点参数" class="headerlink" title="热点参数"></a>热点参数</h4><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81</a></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816793.png" alt="img"></p><p>高级选项支持参数索引位置的参数如果接收具体值的参数，可以额外控制限流阈值，少于或者超出单机阈值的限制。</p><p><strong>Resource名称以及兜底方法自定义</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"testC/{name}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"testHotKey"</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"deal_testHotKey"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testC</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"---------testC"</span> <span class="token operator">+</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deal_testHotKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"deal_testHotKey"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h4><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81</a></p><p>很少使用，在系统入口处达到条件则进行限流，会影响所有服务接口。</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816802.png" alt="img"></p><h3 id="注解-SentinelResource"><a href="#注解-SentinelResource" class="headerlink" title="注解@SentinelResource"></a>注解@SentinelResource</h3><p>blockHandler 主管配置的限流熔断等错误，返回统一的兜底方法。</p><p>除此之外还支持fallback配置，用于业务出错或系统方面的错误。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Inherited</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SentinelResource</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>     资源名     <span class="token class-name">EntryType</span> <span class="token function">entryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span>OUT<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">resourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">blockHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>配置触发handler method    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">blockHandlerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   配置触发handler <span class="token keyword">class</span>    <span class="token class-name">String</span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>异常handler method    <span class="token class-name">String</span> <span class="token function">defaultFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>                   <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">fallbackClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exceptionsToTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token class-name">Throwable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exceptionsToIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 特定异常handler 忽略    <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结合openFeign"><a href="#结合openFeign" class="headerlink" title="结合openFeign"></a>结合openFeign</h3><p>sentinel能够在服务提供方设置流控、降级以及熔断规则，如果服务提供方挂了呢？熔断降级应该由谁来保证，这个时候只能是服务调用方进行兜底处理了。例如：OpenFeign的兜底fallback。</p><h3 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h3><p>Sentinel控制台配置的规则服务重启后将消失，需要配置持久化，支持<strong>nacos、redis、文件、mysql等</strong></p><ol><li>服务pom引入</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>sentinel<span class="token operator">-</span>datasource<span class="token operator">-</span>nacos<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>application.yaml  （增加sentinel datasouce相关配置）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token operator">:</span>  application<span class="token operator">:</span>    name<span class="token operator">:</span> cloudalibaba<span class="token operator">-</span>sentinel<span class="token operator">-</span>service  cloud<span class="token operator">:</span>    nacos<span class="token operator">:</span>      discovery<span class="token operator">:</span>        server<span class="token operator">-</span>addr<span class="token operator">:</span> <span class="token number">43.140</span><span class="token number">.208</span><span class="token number">.71</span><span class="token operator">:</span><span class="token number">8848</span> # 服务注册地址    sentinel<span class="token operator">:</span>      # 配置sentinel dashboard地址      transport<span class="token operator">:</span>        dashboard<span class="token operator">:</span> localhost<span class="token operator">:</span><span class="token number">8080</span>        # dashboard交互端口，若被占用则会逐步递增，直到找到未被占用的端口        port<span class="token operator">:</span> <span class="token number">8719</span>      datasource<span class="token operator">:</span>        nacos<span class="token operator">:</span>          server<span class="token operator">-</span>addr<span class="token operator">:</span> <span class="token number">43.140</span><span class="token number">.208</span><span class="token number">.71</span><span class="token operator">:</span><span class="token number">8848</span>          dataId<span class="token operator">:</span> cloudalibaba<span class="token operator">-</span>sentinel<span class="token operator">-</span>service          groupId<span class="token operator">:</span> DEFAULT_GROUP          data<span class="token operator">-</span>type<span class="token operator">:</span> json          rule<span class="token operator">-</span>type<span class="token operator">:</span> flow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>nacos default_group 新增对应dataId的配置格式为json</li></ol><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h2><p>定义：</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816804.png" alt="img"></p><p>server下载地址：<a href="http://seata.io/zh-cn/blog/download.html">http://seata.io/zh-cn/blog/download.html</a></p><p>（下载binary）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;构成&quot;&gt;&lt;a href=&quot;#构成&quot; class=&quot;headerlink&quot; title=&quot;构成&quot;&gt;&lt;/a&gt;构成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注册与发现&lt;/li&gt;
&lt;li&gt;服务调用&lt;/li&gt;
&lt;li&gt;服务熔断&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;服务降级&lt;/l</summary>
      
    
    
    
    <category term="微服务组件" scheme="https://zzyong24.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BB%84%E4%BB%B6/"/>
    
    
    <category term="框架" scheme="https://zzyong24.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>定时任务</title>
    <link href="https://zzyong24.github.io/2024/04/22/java/kuang-jia/ding-shi-ren-wu/"/>
    <id>https://zzyong24.github.io/2024/04/22/java/kuang-jia/ding-shi-ren-wu/</id>
    <published>2024-04-22T07:25:31.000Z</published>
    <updated>2024-05-14T15:29:11.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDK自带Timer"><a href="#JDK自带Timer" class="headerlink" title="JDK自带Timer"></a>JDK自带Timer</h1><p>timer位于包<code>java.util.Timer;</code>下，提供了两种定时任务，一种是<code>schedule</code>另外一种是<code>scheduleAtFixedRate</code></p><p><strong>Timer</strong>的特点是单线程执行任务，多个任务依次调度，任务之间存在影响，前面任务失败或者导致系统报错，会导致另外的任务无法执行，基本不会使用这种方式实现定时任务。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkTimerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token function">timerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">timerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">/*Timer 可以指定延迟时间以及执行周期，单线程跑任务，一个任务阻塞下一个任务无法执行，很少使用*/</span>        <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*schedule 保证了任务之间执行的间隔，只有任务A执行完毕后，才开始计时下次任务period*/</span>        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timer-test "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timer<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fixedRateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*scheduleAtFixedRate 保证了单位时间内任务执行次数，下一任务执行开始则计时period*/</span>        timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timer-test "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timer<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="schedule和scheduleAtFixedRate区别"><a href="#schedule和scheduleAtFixedRate区别" class="headerlink" title="schedule和scheduleAtFixedRate区别"></a>schedule和scheduleAtFixedRate区别</h2><ul><li>schedule是任务A结束后间隔period执行任务B，保证了任务之间的执行时间间隔</li><li>scheduleAtFixedRate是任务A开始执行则间隔period执行任务B，保证了单位时间内任务执行的次数</li></ul><h1 id="JUC包ScheduleExecutor"><a href="#JUC包ScheduleExecutor" class="headerlink" title="JUC包ScheduleExecutor"></a>JUC包ScheduleExecutor</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JucSchedule</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token function">jucScheduleFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">jucScheduleTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">ScheduledExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run shedule"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">jucFixedRateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ScheduledExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行时间超过执行周期</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run scheduleAtFixedRate "</span><span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token number">500</span><span class="token punctuation">,</span>            <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 每隔多久执行</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// waiting to process(sleep to mock)</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// stop</span>        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">jucScheduleFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ScheduledExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行时间超过执行周期</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run scheduleWithFixedDelay "</span> <span class="token operator">+</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token number">500</span><span class="token punctuation">,</span>            <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 上次执行完成后，延迟多久执行</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// waiting to process(sleep to mock)</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// stop</span>        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="schedule、scheduleAtFixedRate以及scheduleWithFixedDelay区别"><a href="#schedule、scheduleAtFixedRate以及scheduleWithFixedDelay区别" class="headerlink" title="schedule、scheduleAtFixedRate以及scheduleWithFixedDelay区别"></a>schedule、scheduleAtFixedRate以及scheduleWithFixedDelay区别</h2><ul><li><strong>schedule</strong>：延迟执行单个任务</li><li><strong>scheduleAtFixedRate：</strong>执行上一个任务起间隔period执行下一个任务，保证了总时间内任务执行次数</li><li><strong>scheduleAtFixedDelay：</strong>执行完上一个任务后，间隔period执行下一个任务，保证了任务之间执行的间隔</li></ul><h1 id="Netty时间轮"><a href="#Netty时间轮" class="headerlink" title="Netty时间轮"></a>Netty时间轮</h1><p><code>Timer</code>以及<code>ScheduleExecutorService</code>是JDK内置的定时任务实现方案，业内还有一个经典的定时任务实现方式是时间轮（<code>Timer Whell</code>）Netty内部基于时间轮实现了一个HashedWheelTimer来优化百万量级I/O超时的检测，它是一个高性能，低消耗的数据结构，它适合用非准实时，延迟的短平快任务，例如心跳检测。</p><p><img src="/2024/04/22/java/kuang-jia/ding-shi-ren-wu/image.png" alt="img"></p><p>以上述在论文中的图片例子，这里一个轮子包含8个格子（Tick), 每个tick是一秒钟；</p><p><strong>任务的添加</strong>：如果一个任务要在17秒后执行，那么它需要转2轮，最终加到Tick=1位置的链表中。</p><p><strong>任务的执行</strong>：在时钟转2Round到Tick=1的位置，开始执行这个位置指向的链表中的这个任务。（# 这里表示剩余需要转几轮再执行这个任务）</p><p><img src="/2024/04/22/java/kuang-jia/ding-shi-ren-wu/image.png" alt="img"></p><ul><li>Worker：worker工作线程主要负责任务调度触发，单线程运行。</li><li>HashedWheelBucket： 时间轮上面的格子，内部持有HashedWheelTimeout组成的链表结构的头尾节点，多个格子组成的时间轮形成一圈又一圈的任务环</li><li>HashedWheelTimeout： 往时间轮里面提交的任务会被封装成HashedWheelTimeout</li></ul><h2 id="多级时间轮"><a href="#多级时间轮" class="headerlink" title="多级时间轮"></a>多级时间轮</h2><p>多级的时间轮是比较好理解的，时钟是有小时，分钟，秒的，秒转一圈(Round)分钟就转一个格（Tick）, 分钟转一圈(Round)小时就转一格（Tick）。</p><p><img src="/2024/04/22/java/kuang-jia/ding-shi-ren-wu/image.png" alt="img"></p><p>PS：显然HashedWheelTimer是一层时间轮</p><h1 id="SpringBoot定时任务"><a href="#SpringBoot定时任务" class="headerlink" title="SpringBoot定时任务"></a>SpringBoot定时任务</h1><ol><li>导入依赖</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>parent<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.3</span><span class="token number">.8</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>relativePath<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>启动类加注解</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>测试</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SprintSchedule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oneMinRun1T</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"一分钟运行一次,  {}"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 */1 * * * ?"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cronMinRun1T</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"一分钟运行一次,  {}"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delay10SecRun1T</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"每隔十秒运行一次,  {}"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数解释：</p><p><strong>@Scheduled所支持的参数</strong>：</p><ol><li>cron：cron表达式，指定任务在特定时间执行；</li><li>fixedDelay：表示上一次任务执行完成后多久再次执行，参数类型为long，单位ms；</li><li>fixedDelayString：与fixedDelay含义一样，只是参数类型变为String；</li><li>fixedRate：表示按一定的频率执行任务，参数类型为long，单位ms；</li><li>fixedRateString: 与fixedRate的含义一样，只是将参数类型变为String；</li><li>initialDelay：表示延迟多久再第一次执行任务，参数类型为long，单位ms；</li><li>initialDelayString：与initialDelay的含义一样，只是将参数类型变为String；</li><li>zone：时区，默认为当前时区，一般没有用到。</li></ol><hr><h2 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h2><ul><li><strong>关于异常处理</strong></li></ul><p>建议自行处理异常</p><ul><li><strong>关于超时处理</strong></li></ul><p>在实际的开发中，这个问题经常会出现，比如执行一段时间后定时任务不再执行了； 这种情况会发生在，比如你调用一个第三方接口，没有设置调用超时，继而引发异常，这时候当前任务便阻塞了。</p><h1 id="SpringBoot集成基础Quartz"><a href="#SpringBoot集成基础Quartz" class="headerlink" title="SpringBoot集成基础Quartz"></a>SpringBoot集成基础Quartz</h1><h2 id="什么是Quartz"><a href="#什么是Quartz" class="headerlink" title="什么是Quartz"></a>什么是Quartz</h2><p>Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，它可以与J2EE与J2SE应用程序相结合也可以单独使用。Quartz可以用来创建简单或为运行十个，百个，甚至是好几万个Jobs这样复杂的程序。Jobs可以做成标准的Java组件或 EJBs。</p><p><strong>它的特点如下</strong></p><ul><li>纯java实现，可以作为独立的应用程序，也可以嵌入在另一个独立式应用程序运行</li><li>强大的调度功能，Spring默认的调度框架，灵活可配置；</li><li>作业持久化，调度环境持久化机制，可以保存并恢复调度现场。系统关闭数据不会丢失；灵活的应用方式，可以任意定义触发器的调度时间表，支持任务和调度各种组合，组件式监听器、各种插件、线程池等功能，多种存储方式等；</li><li>分布式和集群能力，可以被实例化，一个Quartz集群中的每个节点作为一个独立的Quartz使用，通过相同的数据库表来感知到另一个Quartz应用</li></ul><h2 id="Quartz的体系结构"><a href="#Quartz的体系结构" class="headerlink" title="Quartz的体系结构"></a>Quartz的体系结构</h2><p><img src="/2024/04/22/java/kuang-jia/ding-shi-ren-wu/image-1713770742995.png" alt="img"></p><ul><li><strong>Job</strong> 表示一个工作，要执行的具体内容。</li><li><strong>JobDetail</strong> 表示一个具体的可执行的调度程序，Job 是这个可执行程调度程序所要执行的内容，另外 JobDetail 还包含了这个任务调度的方案和策略。</li><li><strong>Trigger</strong> 代表一个调度参数的配置，什么时候去调。</li><li><strong>Scheduler</strong> 代表一个调度容器，一个调度容器中可以注册多个 JobDetail 和 Trigger。当 Trigger 与 JobDetail 组合，就可以被 Scheduler 容器调度了。</li></ul><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>引入依赖</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>quartz<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>定义job</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span>        <span class="token comment">// get parameters</span>        context<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"param, key:{}, value:{}"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// your logics</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello Job执行时间: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置job</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"helloJob"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">JobDetail</span> <span class="token function">helloJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"DateTimeJob"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"Hello Quartz"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">storeDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//即使没有Trigger关联时，也不需要删除该JobDetail</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Trigger</span> <span class="token function">printTimeJobTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 每秒执行一次</span>        <span class="token class-name">CronScheduleBuilder</span> cronScheduleBuilder <span class="token operator">=</span> <span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/1 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token function">helloJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"quartzTaskService"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>cronScheduleBuilder<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="分布式定时任务-quartz"><a href="#分布式定时任务-quartz" class="headerlink" title="分布式定时任务-quartz"></a>分布式定时任务-quartz</h1><h2 id="什么是Quartz持久化"><a href="#什么是Quartz持久化" class="headerlink" title="什么是Quartz持久化"></a>什么是Quartz持久化</h2><ul><li><strong>为什么要持久化</strong>？</li></ul><p>当程序突然被中断时，如断电，内存超出时，很有可能造成任务的丢失。 可以将调度信息存储到数据库里面，进行持久化，当程序被中断后，再次启动，仍然会保留中断之前的数据，继续执行，而并不是重新开始。</p><ul><li><strong>Quartz提供了两种持久化方式</strong></li></ul><p>Quartz提供两种基本作业存储类型:</p><ol><li><strong>RAMJobStore</strong></li></ol><p>在默认情况下Quartz将任务调度的运行信息保存在内存中，这种方法提供了最佳的性能，因为内存中数据访问最快。不足之处是缺乏数据的持久性，当程序路途停止或系统崩溃时，所有运行的信息都会丢失。</p><ol><li><strong>JobStoreTX</strong></li></ol><p>所有的任务信息都会保存到数据库中，可以控制事物，还有就是如果应用服务器关闭或者重启，任务信息都不会丢失，并且可以恢复因服务器关闭或者重启而导致执行失败的任务</p><p>代码地址</p><p><a href="https://gitee.com/zzy888888/skill-test/tree/master">https://gitee.com/zzy888888/skill-test/tree/master</a></p><pre class="line-numbers language-none"><code class="language-none">S-T-TimingTask-QuartzCluster<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Elastic-job集成"><a href="#Elastic-job集成" class="headerlink" title="Elastic-job集成"></a>Elastic-job集成</h1><p><a href="https://www.pdai.tech/md/spring/springboot/springboot-x-task-elastic-job-timer.html">https://www.pdai.tech/md/spring/springboot/springboot-x-task-elastic-job-timer.html</a></p><h1 id="XXL-job集成"><a href="#XXL-job集成" class="headerlink" title="XXL-job集成"></a>XXL-job集成</h1><p><a href="https://www.pdai.tech/md/spring/springboot/springboot-x-task-xxl-job-timer.html">https://www.pdai.tech/md/spring/springboot/springboot-x-task-xxl-job-timer.html</a></p><p><a href="https://www.xuxueli.com/xxl-job/#%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0XXL-JOB%E3%80%8B">https://www.xuxueli.com/xxl-job/#%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0XXL-JOB%E3%80%8B</a></p><h1 id="Kafak死信队列"><a href="#Kafak死信队列" class="headerlink" title="Kafak死信队列"></a>Kafak死信队列</h1><h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><h1 id="hutool定时任务"><a href="#hutool定时任务" class="headerlink" title="hutool定时任务"></a>hutool定时任务</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JDK自带Timer&quot;&gt;&lt;a href=&quot;#JDK自带Timer&quot; class=&quot;headerlink&quot; title=&quot;JDK自带Timer&quot;&gt;&lt;/a&gt;JDK自带Timer&lt;/h1&gt;&lt;p&gt;timer位于包&lt;code&gt;java.util.Timer;&lt;/code&gt;下</summary>
      
    
    
    
    <category term="定时任务" scheme="https://zzyong24.github.io/categories/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
    
    <category term="框架" scheme="https://zzyong24.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>netty学习</title>
    <link href="https://zzyong24.github.io/2024/04/22/java/kuang-jia/netty-xue-xi/"/>
    <id>https://zzyong24.github.io/2024/04/22/java/kuang-jia/netty-xue-xi/</id>
    <published>2024-04-22T07:22:02.000Z</published>
    <updated>2024-05-14T15:29:11.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、三大组件简介"><a href="#一、三大组件简介" class="headerlink" title="一、三大组件简介"></a>一、三大组件简介</h1><p>Channel与Buffer</p><p>Java NIO系统的<strong>核心</strong>在于：<strong>通道(Channel)和缓冲区(Buffer)<strong>。通道表示打开到 IO 设备(例如：文件、套接字)的连接。若需要使用 NIO 系统，需要获取用于</strong>连接 IO 设备的通道</strong>以及用于<strong>容纳数据的缓冲区</strong>。然后操作缓冲区，对数据进行处理</p><p>简而言之，<strong>通道负责传输，缓冲区负责存储</strong></p><p><strong>常见的Channel有以下四种</strong>，其中FileChannel主要用于文件传输，其余三种用于网络通信</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p><strong>Buffer有以下几种</strong>，其中使用较多的是ByteBuffer</p><ul><li><p><strong>ByteBuffer</strong></p></li><li><ul><li>MappedByteBuffer</li><li>DirectByteBuffer</li><li>HeapByteBuffer</li></ul></li><li><p>ShortBuffer</p></li><li><p>IntBuffer</p></li><li><p>LongBuffer</p></li><li><p>FloatBuffer</p></li><li><p>DoubleBuffer</p></li><li><p>CharBuffer</p></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210412135510.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image.png" alt="img"></a></p><h2 id="1、Selector"><a href="#1、Selector" class="headerlink" title="1、Selector"></a>1、Selector</h2><p>在使用Selector之前，处理socket连接还有以下两种方法</p><p><strong>使用多线程技术</strong></p><p>为每个连接分别开辟一个线程，分别去处理对应的socke连接</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418181918.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image.png" alt="img"></a></p><p>这种方法存在以下几个问题</p><ul><li><p>内存占用高</p></li><li><ul><li>每个线程都需要占用一定的内存，当连接较多时，会开辟大量线程，导致占用大量内存</li></ul></li><li><p>线程上下文切换成本高</p></li><li><p>只适合连接数少的场景</p></li><li><ul><li>连接数过多，会导致创建很多线程，从而出现问题</li></ul></li></ul><p><strong>使用线程池技术</strong></p><p>使用线程池，让线程池中的线程去处理连接</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418181933.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image.png" alt="img"></a></p><p>这种方法存在以下几个问题</p><ul><li><p>阻塞模式下，线程仅能处理一个连接</p></li><li><ul><li>线程池中的线程获取任务（task）后，<strong>只有当其执行完任务之后（断开连接后），才会去获取并执行下一个任务</strong></li><li>若socke连接一直未断开，则其对应的线程无法处理其他socke连接</li></ul></li><li><p>仅适合<strong>短连接</strong>场景</p></li><li><ul><li>短连接即建立连接发送请求并响应后就立即断开，使得线程池中的线程可以快速处理其他连接</li></ul></li></ul><p><strong>使用选择器</strong></p><p><strong>selector 的作用就是配合一个线程来管理多个 channel（fileChannel因为是阻塞式的，所以无法使用selector）</strong>，获取这些 channel 上发生的<strong>事件</strong>，这些 channel 工作在<strong>非阻塞模式</strong>下，当一个channel中没有执行任务时，可以去执行其他channel中的任务。<strong>适合连接数多，但流量较少的场景</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418181947.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image.png" alt="img"></a></p><p>若事件未就绪，调用 selector 的 select() 方法会阻塞线程，直到 channel 发生了就绪事件。这些事件就绪后，select 方法就会返回这些事件交给 thread 来处理</p><h2 id="2、ByteBuffer"><a href="#2、ByteBuffer" class="headerlink" title="2、ByteBuffer"></a>2、ByteBuffer</h2><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ul><li><p>向 buffer 写入数据，例如调用 channel.read(buffer)</p></li><li><p>调用 flip() 切换至<strong>读模式</strong></p></li><li><ul><li><strong>flip会使得buffer中的limit变为position，position变为0</strong></li></ul></li><li><p>从 buffer 读取数据，例如调用 buffer.get()</p></li><li><p>调用 clear() 或者compact()切换至<strong>写模式</strong></p></li><li><ul><li>调用clear()方法时<strong>position=0，limit变为capacity</strong></li><li>调用compact()方法时，<strong>会将缓冲区中的未读数据压缩到缓冲区前面</strong></li></ul></li><li><p>重复以上步骤</p></li></ul><p><strong>使用ByteBuffer读取文件中的内容</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestByteBuffer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获得FileChannel</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"stu.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 获得缓冲区</span>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> hasNext <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hasNext <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 切换模式 limit=position, position=0</span>                buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 当buffer中还有数据时，获取其中的数据</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 切换模式 position=0, limit=capacity</span>                buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="核心属性"><a href="#核心属性" class="headerlink" title="核心属性"></a>核心属性</h3><p>字节缓冲区的父类Buffer中有几个核心属性，如下</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">// Invariants: mark &lt;= position &lt;= limit &lt;= capacityprivate int mark = -1;private int position = 0;private int limit;private int capacity;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>capacity</strong>：缓冲区的容量。通过构造函数赋予，一旦设置，无法更改</li><li><strong>limit</strong>：缓冲区的界限。位于limit 后的数据不可读写。缓冲区的限制不能为负，并且<strong>不能大于其容量</strong></li><li><strong>position</strong>：<strong>下一个</strong>读写位置的索引（类似PC）。缓冲区的位置不能为负，并且<strong>不能大于limit</strong></li><li><strong>mark</strong>：记录当前position的值。<strong>position被改变后，可以通过调用reset() 方法恢复到mark的位置。</strong></li></ul><p>以上四个属性必须满足以下要求</p><p><strong>mark &lt;= position &lt;= limit &lt;= capacity</strong></p><h3 id="bytebuffer字符串相互转换"><a href="#bytebuffer字符串相互转换" class="headerlink" title="bytebuffer字符串相互转换"></a>bytebuffer字符串相互转换</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteBufferByStringTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1. 转为字节数组</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugAll</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. charset 会自动切换到读模式</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugAll</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. standardCharset 会自动切换到读模式</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"my"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugAll</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4. wrap 会自动切换到读模式</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">"nb"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugAll</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// bytebuffer 转字符串</span>        <span class="token comment">// 需要切换到读模式在使用</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="粘包与半包"><a href="#粘包与半包" class="headerlink" title="粘包与半包"></a>粘包与半包</h3><h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h4><p>网络上有多条数据发送给服务端，数据之间使用 \n 进行分隔<br>但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为</p><ul><li>Hello,world\n</li><li>I’m Nyima\n</li><li>How are you?\n</li></ul><p>变成了下面的两个 byteBuffer (粘包，半包)</p><ul><li>Hello,world\nI’m Nyima\nHo</li><li>w are you?\n</li></ul><h4 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h4><p><strong>粘包</strong></p><p>发送方在发送数据时，并不是一条一条地发送数据，而是<strong>将数据整合在一起</strong>，当数据达到一定的数量后再一起发送。这就会导致多条信息被放在一个缓冲区中被一起发送出去</p><p><strong>半包</strong></p><p>接收方的缓冲区的大小是有限的，当接收方的缓冲区满了以后，就需要<strong>将信息截断</strong>，等缓冲区空了以后再继续放入数据。这就会发生一段完整的数据最后被截断的现象</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ul><li><p>通过get(index)方法遍历ByteBuffer，遇到分隔符时进行处理。<strong>注意</strong>：get(index)不会改变position的值</p></li><li><ul><li>记录该段数据长度，以便于申请对应大小的缓冲区</li><li>将缓冲区的数据通过get()方法写入到target中</li></ul></li><li><p>调用<strong>compact方法</strong>切换模式，因为缓冲区中可能还有未读的数据</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteBufferDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 模拟粘包+半包</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Hello,world\nI'm Nyima\nHo"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用split函数处理</span>        <span class="token function">split</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"w are you?\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">split</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 切换为读模式</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 遍历寻找分隔符</span>            <span class="token comment">// get(i)不会移动position</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 缓冲区长度</span>                <span class="token keyword">int</span> length <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ByteBuffer</span> target <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 将前面的内容写入target缓冲区</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 将buffer中的数据写入target中</span>                    target<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 打印查看结果</span>                <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugAll</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 切换为写模式，但是缓冲区可能未读完，这里需要使用compact</span>        buffer<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、文件编程"><a href="#二、文件编程" class="headerlink" title="二、文件编程"></a>二、文件编程</h1><h2 id="1、FileChannel"><a href="#1、FileChannel" class="headerlink" title="1、FileChannel"></a>1、FileChannel</h2><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p>FileChannel<strong>只能在阻塞模式下工作</strong>，所以无法搭配Selector</p><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p>不能直接打开 FileChannel，<strong>必须</strong>通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法</p><ul><li>通过 FileInputStream 获取的 channel <strong>只能读</strong></li><li>通过 FileOutputStream 获取的 channel <strong>只能写</strong></li><li>通过 RandomAccessFile 是否能读写<strong>根据构造 RandomAccessFile 时的读写模式决定</strong></li></ul><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>通过 FileInputStream 获取channel，通过read方法将数据写入到ByteBuffer中</p><p>read方法的返回值表示读到了多少字节，若读到了文件末尾则返回-1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> readBytes <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>可根据返回值判断是否读取完毕</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 进行对应操作     ... }</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p>因为channel也是有大小的，所以 write 方法并不能保证一次将 buffer 中的内容全部写入 channel。必须<strong>需要按照以下规则进行写入</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过hasRemaining()方法查看缓冲区中是否还有数据未写入到通道中</span><span class="token keyword">while</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><p>通道需要close，一般情况通过try-with-resource进行关闭，<strong>最好使用以下方法获取strea以及channel，避免某些原因使得资源未被关闭</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestChannel</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"stu.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"student.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileChannel</span> inputChannel <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileChannel</span> outputChannel <span class="token operator">=</span> fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 执行对应操作</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p><strong>position</strong></p><p>channel也拥有一个保存读取数据位置的属性，即position</p><p><strong>long pos = channel.position();</strong></p><p>可以通过position(int pos)设置channel中position的值</p><p><strong>long newPos = …;</strong> </p><p><strong>channel.position(newPos);</strong></p><p>设置当前位置时，如果设置为文件的末尾</p><ul><li>这时读取会返回 -1</li><li>这时写入，会追加内容，但要注意如果 position 超过了文件末尾，再写入时在新内容和原末尾之间会有空洞（00）</li></ul><h3 id="强制写入"><a href="#强制写入" class="headerlink" title="强制写入"></a>强制写入</h3><p>操作系统出于性能的考虑，会将数据缓存，不是立刻写入磁盘，而是等到缓存满了以后将所有数据一次性的写入磁盘。可以调用 <strong>force(true)</strong> 方法将文件内容和元数据（文件的权限等信息）立刻写入磁盘</p><h2 id="2、两个Channel传输数据"><a href="#2、两个Channel传输数据" class="headerlink" title="2、两个Channel传输数据"></a>2、两个Channel传输数据</h2><h3 id="transferTo方法"><a href="#transferTo方法" class="headerlink" title="transferTo方法"></a>transferTo方法</h3><p>使用transferTo方法可以快速、高效地将一个channel中的数据传输到另一个channel中，但<strong>一次只能传输2G的内容</strong></p><p>transferTo底层使用了零拷贝技术</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestChannel</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"stu.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"student.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileChannel</span> inputChannel <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileChannel</span> outputChannel <span class="token operator">=</span> fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 参数：inputChannel的起始位置，传输数据的大小，目的channel</span>            <span class="token comment">// 返回值为传输的数据的字节数</span>            <span class="token comment">// transferTo一次只能传输2G的数据</span>            inputChannel<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> inputChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> outputChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>当传输的文件大于<span class="token number">2</span>G时，需要使用以下方法进行多次传输<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestChannel</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"stu.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"student.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileChannel</span> inputChannel <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileChannel</span> outputChannel <span class="token operator">=</span> fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> size <span class="token operator">=</span> inputChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> capacity <span class="token operator">=</span> inputChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 分多次传输</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>capacity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// transferTo返回值为传输了的字节数</span>                capacity <span class="token operator">-=</span> inputChannel<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>size<span class="token operator">-</span>capacity<span class="token punctuation">,</span> capacity<span class="token punctuation">,</span> outputChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、Path与Paths"><a href="#3、Path与Paths" class="headerlink" title="3、Path与Paths"></a>3、Path与Paths</h2><ul><li>Path 用来表示文件路径</li><li>Paths 是工具类，用来获取 Path 实例</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对路径 不带盘符 使用 user.dir 环境变量来定位 1.txt</span><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绝对路径 代表了  d:\1.txt 反斜杠需要转义</span><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:/1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绝对路径 同样代表了  d:\1.txt</span><span class="token class-name">Path</span> projects <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\data"</span><span class="token punctuation">,</span> <span class="token string">"projects"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 代表了  d:\data\projects</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>. 代表了当前路径</li><li>.. 代表了上一级路径</li></ul><p>例如目录结构如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">d<span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span> data<span class="token operator">|</span><span class="token operator">-</span> projects<span class="token operator">|</span><span class="token operator">-</span> a<span class="token operator">|</span><span class="token operator">-</span> b<span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\data\\projects\\a\\..\\b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常化路径 会去除 . 以及 ..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、Files"><a href="#4、Files" class="headerlink" title="4、Files"></a>4、Files</h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>检查文件是否存在</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>创建<strong>一级目录</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果目录已存在，会抛异常 FileAlreadyExistsException</li><li>不能一次创建多级目录，否则会抛异常 NoSuchFileException</li></ul><p>创建<strong>多级目录用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/d1/d2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createDirectories</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="拷贝及移动"><a href="#拷贝及移动" class="headerlink" title="拷贝及移动"></a>拷贝及移动</h3><p><strong>拷贝文件</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/target.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果文件已存在，会抛异常 FileAlreadyExistsException</li></ul><p>如果希望用 source <strong>覆盖</strong>掉 target，需要用 StandardCopyOption 来控制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token class-name">StandardCopyOption</span><span class="token punctuation">.</span>REPLACE_EXISTING<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移动文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token class-name">StandardCopyOption</span><span class="token punctuation">.</span>ATOMIC_MOVE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性</strong></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/target.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果文件不存在，会抛异常 NoSuchFileException</li></ul><p>删除目录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果<strong>目录还有内容</strong>，会抛异常 DirectoryNotEmptyException</li></ul><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>可以<strong>使用Files工具类中的walkFileTree(Path, FileVisitor)方法</strong>，其中需要传入两个参数</p><ul><li><p>Path：文件起始路径</p></li><li><p>FileVisitor：文件访问器，<strong>使用访问者模式</strong></p></li><li><ul><li>接口的实现类<strong>SimpleFileVisitor</strong>有四个方法</li></ul></li><li><ul><li><ul><li>preVisitDirectory：访问目录前的操作</li><li>visitFile：访问文件的操作</li><li>visitFileFailed：访问文件失败时的操作</li><li>postVisitDirectory：访问目录后的操作</li></ul></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestWalkFileTree</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\JDK 8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 文件目录数目</span>        <span class="token class-name">AtomicInteger</span> dirCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 文件数目</span>        <span class="token class-name">AtomicInteger</span> fileCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">walkFileTree</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleFileVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">preVisitDirectory</span><span class="token punctuation">(</span><span class="token class-name">Path</span> dir<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===&gt;"</span><span class="token operator">+</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 增加文件目录数</span>                dirCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">preVisitDirectory</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">visitFile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 增加文件数</span>                fileCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打印数目</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件目录数:"</span><span class="token operator">+</span>dirCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件数:"</span><span class="token operator">+</span>fileCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、网络编程"><a href="#三、网络编程" class="headerlink" title="三、网络编程"></a>三、网络编程</h1><h2 id="1、阻塞"><a href="#1、阻塞" class="headerlink" title="1、阻塞"></a>1、阻塞</h2><ul><li><p>阻塞模式下，相关方法都会导致线程暂停</p></li><li><ul><li>ServerSocketChannel.accept 会在<strong>没有连接建立时</strong>让线程暂停</li><li>SocketChannel.read 会在<strong>通道中没有数据可读时</strong>让线程暂停</li><li>阻塞的表现其实就是线程暂停了，暂停期间不会占用 cpu，但线程相当于闲置</li></ul></li><li><p>单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持</p></li><li><p>但多线程下，有新的问题，体现在以下方面</p></li><li><ul><li>32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1671629101002-17f01bef-e012-4aed-af87-72269c37c338.png" alt="img"></p><ul><li><ul><li>可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1671629101057-234aa568-cbcb-4764-a33e-99f47bc648d2.png" alt="img"></p><p><strong>服务端代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建缓冲区</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得服务器通道</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 为服务器通道绑定端口</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 用户存放连接的集合</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span> channels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 循环接收连接</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before connecting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 没有连接时，会阻塞线程</span>                <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after connecting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                channels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 循环遍历集合中的连接</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> channel <span class="token operator">:</span> channels<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before reading"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 处理通道中的数据</span>                    <span class="token comment">// 当通道中没有数据可读时，会阻塞线程</span>                    channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugRead</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after reading"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 建立连接</span>            socketChannel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"waiting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><ul><li>客户端-服务器建立连接前：服务器端因accept阻塞</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210413213318.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image.png" alt="img"></a></p><ul><li>客户端-服务器建立连接后，客户端发送消息前：服务器端因通道为空被阻塞</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210413213446.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530929.png" alt="img"></a></p><ul><li>客户端发送数据后，服务器处理通道中的数据。再次进入循环时，再次被accept阻塞</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210413214109.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530929.png" alt="img"></a></p><ul><li>之前的客户端再次发送消息<strong>，服务器端因为被accept阻塞</strong>，无法处理之前客户端发送到通道中的信息</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210413214505.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530935.png" alt="img"></a></p><h2 id="2、非阻塞"><a href="#2、非阻塞" class="headerlink" title="2、非阻塞"></a>2、非阻塞</h2><ul><li>可以通过ServerSocketChannel的configureBlocking(<strong>false</strong>)方法将<strong>获得连接设置为非阻塞的</strong>。此时若没有连接，accept会返回null</li><li>可以通过SocketChannel的configureBlocking(<strong>false</strong>)方法将从通道中<strong>读取数据设置为非阻塞的</strong>。若此时通道中没有数据可读，read会返回-1</li></ul><p>服务器代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建缓冲区</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得服务器通道</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 为服务器通道绑定端口</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 用户存放连接的集合</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span> channels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 循环接收连接</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 设置为非阻塞模式，没有连接时返回null，不会阻塞线程</span>                server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 通道不为空时才将连接放入到集合中</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>socketChannel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after connecting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    channels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 循环遍历集合中的连接</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> channel <span class="token operator">:</span> channels<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 处理通道中的数据</span>                    <span class="token comment">// 设置为非阻塞模式，若通道中没有数据，会返回0，不会阻塞线程</span>                    channel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> read <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>read <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugRead</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after reading"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样写存在一个问题，因为设置为了非阻塞，会一直执行while(true)中的代码，CPU一直处于忙碌状态，会使得性能变低，所以实际情况中不使用这种方法处理请求</p><h2 id="3、Selector"><a href="#3、Selector" class="headerlink" title="3、Selector"></a>3、Selector</h2><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3><p>单线程可以配合 Selector 完成对多个 Channel 可读写事件的监控，这称之为多路复用</p><ul><li><p><strong>多路复用仅针对网络 IO</strong>，普通文件 IO <strong>无法</strong>利用多路复用</p></li><li><p>如果不用 Selector 的非阻塞模式，线程大部分时间都在做无用功，而 Selector 能够保证</p></li><li><ul><li>有可连接事件时才去连接</li><li>有可读事件才去读取</li><li>有可写事件才去写入</li></ul></li><li><ul><li><ul><li>限于网络传输能力，Channel 未必时时可写，一旦 Channel 可写，会触发 Selector 的可写事件</li></ul></li></ul></li></ul><h2 id="4、使用及Accpet事件"><a href="#4、使用及Accpet事件" class="headerlink" title="4、使用及Accpet事件"></a>4、使用及Accpet事件</h2><p>要使用Selector实现多路复用，服务端代码如下改进</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得服务器通道</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建选择器</span>            <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 通道必须设置为非阻塞模式</span>            server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将通道注册到选择器中，并设置感兴趣的事件</span>            server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 若没有事件就绪，线程会被阻塞，反之不会被阻塞。从而避免了CPU空转</span>                <span class="token comment">// 返回值为就绪的事件个数</span>                <span class="token keyword">int</span> ready <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"selector ready counts : "</span> <span class="token operator">+</span> ready<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 获取所有事件</span>                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 使用迭代器遍历事件</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment">// 判断key的类型</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 获得key对应的channel</span>                        <span class="token class-name">ServerSocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before accepting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 获取连接并处理，而且是必须处理，否则需要取消</span>                        <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after accepting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment">// 处理完毕后移除</span>                        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤解析</strong></p><ul><li>获得选择器Selector</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>将<strong>通道设置为非阻塞模式</strong>，并注册到选择器中，并设置感兴趣的事件</p></li><li><ul><li>channel 必须工作在非阻塞模式</li><li>FileChannel 没有非阻塞模式，因此不能配合 selector 一起使用</li><li>绑定的<strong>事件类型</strong>可以有</li></ul></li><li><ul><li><ul><li>connect - 客户端连接成功时触发</li><li>accept - 服务器端成功接受连接时触发</li><li>read - 数据可读入时触发，有因为接收能力弱，数据暂不能读入的情况</li><li>write - 数据可写出时触发，有因为发送能力弱，数据暂不能写出的情况</li></ul></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通道必须设置为非阻塞模式</span>server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将通道注册到选择器中，并设置感兴趣的实践</span>server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过Selector监听事件，并获得就绪的通道个数，若没有通道就绪，线程会被阻塞</p><ul><li>阻塞直到绑定事件发生</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>阻塞直到绑定事件发生，<strong>或是超时</strong>（时间单位为 ms）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>不会阻塞</strong>，也就是不管有没有事件，立刻返回，自己根据返回值检查是否有事件</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取就绪事件并<strong>得到对应的通道</strong>，然后进行处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取所有事件</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 使用迭代器遍历事件</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 判断key的类型，此处为Accept类型</span><span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获得key对应的channel</span>        <span class="token class-name">ServerSocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取连接并处理，而且是必须处理，否则需要取消</span>        <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 处理完毕后移除</span>        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>事件发生后能否不处理</strong></p><p>事件发生后，<strong>要么处理，要么取消（cancel）</strong>，不能什么都不做，<strong>否则下次该事件仍会触发</strong>，这是因为 nio 底层使用的是水平触发</p><h2 id="5、Read事件"><a href="#5、Read事件" class="headerlink" title="5、Read事件"></a>5、Read事件</h2><ul><li>在Accept事件中，若有客户端与服务器端建立了连接，<strong>需要将其对应的SocketChannel设置为非阻塞，并注册到选择其中</strong></li><li>添加Read事件，触发后进行读取操作</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得服务器通道</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建选择器</span>            <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 通道必须设置为非阻塞模式</span>            server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将通道注册到选择器中，并设置感兴趣的实践</span>            server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 为serverKey设置感兴趣的事件</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 若没有事件就绪，线程会被阻塞，反之不会被阻塞。从而避免了CPU空转</span>                <span class="token comment">// 返回值为就绪的事件个数</span>                <span class="token keyword">int</span> ready <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"selector ready counts : "</span> <span class="token operator">+</span> ready<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取所有事件</span>                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 使用迭代器遍历事件</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 判断key的类型</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 获得key对应的channel</span>                        <span class="token class-name">ServerSocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before accepting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 获取连接</span>                        <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after accepting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 设置为非阻塞模式，同时将连接的通道也注册到选择其中</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 处理完毕后移除</span>                        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before reading..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after reading..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugRead</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 处理完毕后移除</span>                        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除事件</strong></p><p><strong>当处理完一个事件后，一定要调用迭代器的remove方法移除对应事件，否则会出现错误</strong>。原因如下</p><p>以我们上面的 <strong>Read事件</strong> 的代码为例</p><ul><li>当调用了 server.register(selector, SelectionKey.OP_ACCEPT)后，Selector中维护了一个集合，<strong>用于存放SelectionKey以及其对应的通道</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// WindowsSelectorImpl 中的 SelectionKeyImpl数组</span><span class="token keyword">private</span> <span class="token class-name">SelectionKeyImpl</span><span class="token punctuation">[</span><span class="token punctuation">]</span> channelArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectionKeyImpl</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionKeyImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSelectionKey</span> <span class="token punctuation">{</span>    <span class="token comment">// Key对应的通道</span>    <span class="token keyword">final</span> <span class="token class-name">SelChImpl</span> channel<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210414192429.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530940.png" alt="img"></a></li><li>当<strong>选择器中的通道对应的事件发生后</strong>，selecionKey会被放到另一个集合中，但是<strong>selecionKey不会自动移除</strong>，所以需要我们在处理完一个事件后，通过迭代器手动移除其中的selecionKey。否则会导致已被处理过的事件再次被处理，就会引发错误<a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210414193143.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530954.png" alt="img"></a></li></ul><h3 id="断开处理"><a href="#断开处理" class="headerlink" title="断开处理"></a>断开处理</h3><p>当客户端与服务器之间的连接<strong>断开时，会给服务器端发送一个读事件</strong>，对异常断开和正常断开需要加以不同的方式进行处理</p><ul><li><p><strong>正常断开</strong></p></li><li><ul><li>正常断开时，服务器端的channel.read(buffer)方法的返回值为-1，<strong>所以当结束到返回值为-1时，需要调用key的cancel方法取消此事件，并在取消后移除该事件</strong></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> read <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 断开连接时，客户端会向服务器发送一个写事件，此时read的返回值为-1</span><span class="token keyword">if</span><span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 取消该事件的处理</span>key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">// 取消或者处理，都需要移除key</span>iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>异常断开</p></li><li><ul><li>异常断开时，会抛出IOException异常， 在try-catch的<strong>catch块中捕获异常并调用key的cancel方法即可</strong></li></ul></li></ul><h3 id="消息边界"><a href="#消息边界" class="headerlink" title="消息边界"></a>消息边界</h3><p><strong>不处理消息边界存在的问题</strong></p><p>将缓冲区的大小设置为4个字节，发送2个汉字（你好），通过decode解码并打印时，会出现乱码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解码并打印</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>你���<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为UTF-8字符集下，1个汉字占用3个字节，此时缓冲区大小为4个字节，<strong>一次读时间无法处理完通道中的所有数据，所以一共会触发两次读事件</strong>。这就导致 你好 的 好 字被拆分为了前半部分和后半部分发送，解码时就会出现问题</p><p><strong>处理消息边界</strong></p><p>传输的文本可能有以下三种情况</p><ul><li><p>文本大于缓冲区大小</p></li><li><ul><li>此时需要将缓冲区进行扩容</li></ul></li><li><p>发生半包现象</p></li><li><p>发生粘包现象</p></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210415103442.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530959.png" alt="img"></a></p><p>解决思路大致有以下三种</p><ul><li><p><strong>固定消息长度</strong>，数据包大小一样，服务器按预定长度读取，当发送的数据较少时，需要将数据进行填充，直到长度与消息规定长度一致。缺点是浪费带宽</p></li><li><p>另一种思路是按分隔符拆分，缺点是效率低，需要一个一个字符地去匹配分隔符</p></li><li><p><strong>TLV 格式，即 Type 类型、Length 长度、Value 数据</strong>（也就是在消息开头<strong>用一些空间存放后面数据的长度</strong>），如HTTP请求头中的Content-Type与<strong>Content-Length</strong>。类型和长度已知的情况下，就可以方便获取消息大小，分配合适的 buffer，缺点是 buffer 需要提前分配，如果内容过大，则影响 server 吞吐量</p></li><li><ul><li>Http 1.1 是 TLV 格式</li><li>Http 2.0 是 LTV 格式<a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210415103926.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530989.png" alt="img"></a></li></ul></li></ul><p>下文的消息边界处理方式为<strong>第二种：按分隔符拆分</strong></p><p><strong>附件与扩容</strong></p><p>Channel的register方法还有<strong>第三个参数</strong>：附件，可以向其中放入一个Object类型的对象，该对象会与登记的Channel以及其对应的SelectionKey绑定，可以从SelectionKey获取到对应通道的附件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">SelectionKey</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Selector</span> sel<span class="token punctuation">,</span> <span class="token keyword">int</span> ops<span class="token punctuation">,</span> <span class="token class-name">Object</span> att<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可通过SelectionKey的<strong>attachment()方法获得附件</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们需要在Accept事件发生后，将通道注册到Selector中时，<strong>对每个通道添加一个ByteBuffer附件</strong>，让每个通道发生读事件时都使用自己的通道，避免与其他通道发生冲突而导致问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置为非阻塞模式，同时将连接的通道也注册到选择其中，同时设置附件</span>socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加通道对应的Buffer附件</span>socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当Channel中的数据大于缓冲区时，需要对缓冲区进行<strong>扩容</strong>操作。此代码中的扩容的判定方法：<strong>Channel调用compact方法后的position与limit相等，说明缓冲区中的数据并未被读取（容量太小），此时创建新的缓冲区，其大小扩大为两倍。同时还要将旧缓冲区中的数据拷贝到新的缓冲区中，同时调用SelectionKey的attach方法将新的缓冲区作为新的附件放入SelectionKey中</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果缓冲区太小，就进行扩容</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ByteBuffer</span> newBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将旧buffer中的内容放入新的buffer中</span>    ewBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将新buffer作为附件放到key中</span>    key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>newBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>改造后的服务器代码如下</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获得服务器通道</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建选择器</span>            <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 通道必须设置为非阻塞模式</span>            server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将通道注册到选择器中，并设置感兴趣的事件</span>            server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 为serverKey设置感兴趣的事件</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 若没有事件就绪，线程会被阻塞，反之不会被阻塞。从而避免了CPU空转</span>                <span class="token comment">// 返回值为就绪的事件个数</span>                <span class="token keyword">int</span> ready <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"selector ready counts : "</span> <span class="token operator">+</span> ready<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取所有事件</span>                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 使用迭代器遍历事件</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 判断key的类型</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 获得key对应的channel</span>                        <span class="token class-name">ServerSocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before accepting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 获取连接</span>                        <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after accepting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 设置为非阻塞模式，同时将连接的通道也注册到选择其中，同时设置附件</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 处理完毕后移除</span>                        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before reading..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 通过key获得附件（buffer）</span>                        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> read <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token comment">// 通过分隔符来分隔buffer中的数据</span>                            <span class="token function">split</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// 如果缓冲区太小，就进行扩容</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token class-name">ByteBuffer</span> newBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 将旧buffer中的内容放入新的buffer中</span>                                buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                newBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 将新buffer放到key中作为附件</span>                                key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>newBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after reading..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 处理完毕后移除</span>                        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 遍历寻找分隔符</span>            <span class="token comment">// get(i)不会移动position</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 缓冲区长度</span>                <span class="token keyword">int</span> length <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ByteBuffer</span> target <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 将前面的内容写入target缓冲区</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 将buffer中的数据写入target中</span>                    target<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 打印结果</span>                <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugAll</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 切换为写模式，但是缓冲区可能未读完，这里需要使用compact</span>        buffer<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ByteBuffer的大小分配"><a href="#ByteBuffer的大小分配" class="headerlink" title="ByteBuffer的大小分配"></a>ByteBuffer的大小分配</h3><ul><li><p>每个 channel 都需要记录可能被切分的消息，因为 <strong>ByteBuffer 不能被多个 channel 共同使用</strong>，因此需要为每个 channel 维护一个独立的 ByteBuffer</p></li><li><p>ByteBuffer 不能太大，比如一个 ByteBuffer 1Mb 的话，要支持百万连接就要 1Tb 内存，因此需要设计大小可变的 ByteBuffer</p></li><li><p>分配思路可以参考</p></li><li><ul><li>一种思路是首先分配一个较小的 buffer，例如 4k，如果发现数据不够，再分配 8k 的 buffer，将 4k buffer 内容拷贝至 8k buffer，优点是消息连续容易处理，缺点是数据拷贝耗费性能</li></ul></li><li><ul><li><ul><li>参考实现 <a href="http://tutorials.jenkov.com/java-performance/resizable-array.html">http://tutorials.jenkov.com/java-performance/resizable-array.html</a></li></ul></li></ul></li><li><ul><li>另一种思路是用多个数组组成 buffer，一个数组不够，把多出来的内容写入新的数组，与前面的区别是消息存储不连续解析复杂，优点是避免了拷贝引起的性能损耗</li></ul></li></ul><h2 id="6、Write事件"><a href="#6、Write事件" class="headerlink" title="6、Write事件"></a>6、Write事件</h2><p>服务器通过Buffer向通道中写入数据时，<strong>可能因为通道容量小于Buffer中的数据大小，导致无法一次性将Buffer中的数据全部写入到Channel中，这时便需要分多次写入</strong>，具体步骤如下</p><ul><li>执行一次写操作，向将buffer中的内容写入到SocketChannel中，然后判断Buffer中是否还有数据</li><li>若Buffer中还有数据，则<strong>需要将SockerChannel注册到Seletor中，并关注写事件，同时将未写完的Buffer作为附件一起放入到SelectionKey中</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">int</span> write <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通道中可能无法放入缓冲区中的所有数据</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 注册到Selector中，关注可写事件，并将buffer添加到key的附件中</span>    socket<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加写事件的相关操作key.isWritable()，对Buffer再次进行写操作</p><ul><li>每次写后需要判断Buffer中是否还有数据（是否写完）。<strong>若写完，需要移除SelecionKey中的Buffer附件，避免其占用过多内存，同时还需移除对写事件的关注</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SocketChannel</span> socket <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获得buffer</span><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行写操作</span><span class="token keyword">int</span> write <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果已经完成了写操作，需要移除key中的附件，同时不再对写事件感兴趣</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>整体代码如下</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 处理后就移除事件</span>                    iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 获得客户端的通道</span>                        <span class="token class-name">SocketChannel</span> socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 写入数据</span>                        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 先执行一次Buffer-&gt;Channel的写入，如果未写完，就添加一个可写事件</span>                        <span class="token keyword">int</span> write <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 通道中可能无法放入缓冲区中的所有数据</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment">// 注册到Selector中，关注可写事件，并将buffer添加到key的附件中</span>                            socket<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            socket<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">SocketChannel</span> socket <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 获得buffer</span>                        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 执行写操作</span>                        <span class="token keyword">int</span> write <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 如果已经完成了写操作，需要移除key中的附件，同时不再对写事件感兴趣</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、优化"><a href="#7、优化" class="headerlink" title="7、优化"></a>7、优化</h2><h3 id="多线程优化"><a href="#多线程优化" class="headerlink" title="多线程优化"></a>多线程优化</h3><p>充分利用多核CPU，分两组选择器</p><ul><li>单线程配一个选择器（Boss），<strong>专门处理 accept 事件</strong></li><li>创建 cpu 核心数的线程（Worker），<strong>每个线程配一个选择器，轮流处理 read 事件</strong></li></ul><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><ul><li><p>创建<strong>一个</strong>负责处理Accept事件的Boss线程，与<strong>多个</strong>负责处理Read事件的Worker线程</p></li><li><p><strong>Boss线程</strong>执行的操作</p></li><li><ul><li>接受并处理Accepet事件，当Accept事件发生后，调用Worker的register(SocketChannel socket)方法，让Worker去处理Read事件，其中需要<strong>根据标识robin去判断将任务分配给哪个Worker</strong></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiThreadNetworkServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">AcceptBossServer</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcceptBossServer</span><span class="token punctuation">(</span><span class="token string">"boss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">accepting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">class</span> <span class="token class-name">AcceptBossServer</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 服务器套接字通道     */</span>    <span class="token keyword">private</span> <span class="token class-name">ServerSocketChannel</span> serverSocketChannel<span class="token punctuation">;</span>    <span class="token comment">/**     * 选择器     */</span>    <span class="token keyword">private</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>    <span class="token comment">/**     * 端口     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 事件侦听     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> LISTENER_EVENT <span class="token operator">=</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">;</span>    <span class="token comment">/**     * 名字     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 工人,获取的核心线程数在docker容器环境中存在问题，获取的是宿主机的核心线程数，直到jdk10才解决     */</span>    <span class="token keyword">private</span> <span class="token class-name">RWWorkerServer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RWWorkerServer</span><span class="token punctuation">[</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 次序     */</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> turns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AcceptBossServer</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> port<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">AcceptBossServer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocketChannel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> LISTENER_EVENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> workers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            workers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RWWorkerServer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"worker-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accepting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 阻塞，等待连接</span>            selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keyIterator <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>keyIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"boss 监听到accept事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> keyIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                keyIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> serverSocketChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    channel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 将channel关联到worker的selector</span>                    <span class="token class-name">RWWorkerServer</span> worker <span class="token operator">=</span> workers<span class="token punctuation">[</span>turns<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> workers<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"boss 监听到accept事件, 远程地址{}, 并绑定到{}"</span><span class="token punctuation">,</span>                            channel<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> worker<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    worker<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 给worker绑定事件</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">class</span> <span class="token class-name">RWWorkerServer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 线程     */</span>    <span class="token keyword">private</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>    <span class="token comment">/**     * 选择器     */</span>    <span class="token keyword">public</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>    <span class="token comment">/**     * 回复消息     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> responseStr<span class="token punctuation">;</span>    <span class="token comment">/**     * 名字     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 事件侦听器, 仅仅监听可读可写事件     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> LISTENER_EVENT <span class="token operator">=</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ <span class="token operator">|</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">;</span>    <span class="token comment">/**     * 已经初始化     */</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> hasInit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过队列在boss线程和worker线程中传递任务，保证添加监听的事件和唤醒事件先后执行     */</span>    <span class="token keyword">private</span> <span class="token class-name">ConcurrentLinkedDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentLinkedDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RWWorkerServer</span><span class="token punctuation">(</span><span class="token class-name">String</span> responseStr<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>responseStr <span class="token operator">=</span> responseStr<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> sc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hasInit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                sc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">RWWorkerServer</span><span class="token punctuation">.</span>LISTENER_EVENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClosedChannelException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        selector<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒select方法</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// select不能无限等待，如果无限等待阻塞的话，将无法捕获到boss下达的监听指令</span>                selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tasks<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeyIterator <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>selectionKeyIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> selectionKeyIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    selectionKeyIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"触发读事件..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 可读事件</span>                        <span class="token comment">// 检查是否一次没读完，需要二次读甚至多次读</span>                        <span class="token class-name">ByteBuffer</span> attachByteBuffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        attachByteBuffer <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>attachByteBuffer <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">:</span> attachByteBuffer<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 没读完，需要读第二次</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>attachByteBuffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> attachByteBuffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"需要二次读..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">notReadAllAndAttach</span><span class="token punctuation">(</span>attachByteBuffer<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment">// 读完了，打印数据</span>                        <span class="token function">debugAll</span><span class="token punctuation">(</span>attachByteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notReadAllAndAttach</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> attachByteBuffer<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> newByteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>attachByteBuffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        attachByteBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newByteBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>attachByteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//newByteBuffer.compact();</span>        key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>newByteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">ByteBuffer</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> buffer<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> closeInExp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            read <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 判断客户端是否异常断开连接</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            closeInExp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 判断客户端是否断开连接</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> closeInExp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、NIO与BIO"><a href="#四、NIO与BIO" class="headerlink" title="四、NIO与BIO"></a>四、NIO与BIO</h1><h2 id="1、Stream与Channel"><a href="#1、Stream与Channel" class="headerlink" title="1、Stream与Channel"></a>1、Stream与Channel</h2><ul><li><p>stream 不会自动缓冲数据，channel 会利用系统提供的发送缓冲区、接收缓冲区（更为底层）</p></li><li><p>stream 仅支持阻塞 API，channel 同时支持阻塞、非阻塞 API，<strong>网络 channel 可配合 selector 实现多路复用</strong></p></li><li><p>二者<strong>均为全双工</strong>，即读写可以同时进行</p></li><li><ul><li>虽然Stream是单向流动的，但是它也是全双工的</li></ul></li></ul><h2 id="2、IO模型"><a href="#2、IO模型" class="headerlink" title="2、IO模型"></a>2、IO模型</h2><ul><li><p><strong>同步</strong>：线程自己去获取结果（一个线程）</p></li><li><ul><li>例如：线程调用一个方法后，需要等待方法返回结果</li></ul></li><li><p><strong>异步</strong>：线程自己不去获取结果，而是由其它线程返回结果（至少两个线程）</p></li><li><ul><li>例如：线程A调用一个方法后，继续向下运行，运行结果由线程B返回</li></ul></li></ul><p>当调用一次 channel.<strong>read</strong> 或 stream.<strong>read</strong> 后，会由用户态切换至操作系统内核态来完成真正数据读取，而读取又分为两个阶段，分别为：</p><ul><li>等待数据阶段</li><li>复制数据阶段<a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418151243.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530971.png" alt="img"></a></li></ul><p>根据UNIX 网络编程 - 卷 I，IO模型主要有以下几种</p><h3 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418151605.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530984.png" alt="img"></a></p><ul><li>用户线程进行read操作时，<strong>需要等待操作系统执行实际的read操作</strong>，此期间用户线程是被阻塞的，无法执行其他操作</li></ul><h3 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418152137.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531008.png" alt="img"></a></p><ul><li><p>用户线程<strong>在一个循环中一直调用read方法</strong>，若内核空间中还没有数据可读，立即返回</p></li><li><ul><li><strong>只是在等待阶段非阻塞</strong></li></ul></li><li><p>用户线程发现内核空间中有数据后，等待内核空间执行复制数据，待复制结束后返回结果</p></li></ul><h3 id="多路复用-1"><a href="#多路复用-1" class="headerlink" title="多路复用"></a>多路复用</h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418154208.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531008.png" alt="img"></a></p><p><strong>Java中通过Selector实现多路复用</strong></p><ul><li>当没有事件是，调用select方法会被阻塞住</li><li>一旦有一个或多个事件发生后，就会处理对应的事件，从而实现多路复用</li></ul><p><strong>多路复用与阻塞IO的区别</strong></p><ul><li>阻塞IO模式下，<strong>若线程因accept事件被阻塞，发生read事件后，仍需等待accept事件执行完成后</strong>，才能去处理read事件</li><li>多路复用模式下，一个事件发生后，若另一个事件处于阻塞状态，不会影响该事件的执行</li></ul><h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418160106.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531009.png" alt="img"></a></p><ul><li>线程1调用方法后理解返回，<strong>不会被阻塞也不需要立即获取结果</strong></li><li>当方法的运行结果出来以后，由线程2将结果返回给线程1</li></ul><h2 id="3、零拷贝"><a href="#3、零拷贝" class="headerlink" title="3、零拷贝"></a>3、零拷贝</h2><p><strong>零拷贝指的是数据无需拷贝到 JVM 内存中</strong>，同时具有以下三个优点</p><ul><li>更少的用户态与内核态的切换</li><li>不利用 cpu 计算，减少 cpu 缓存伪共享</li><li>零拷贝适合小文件传输</li></ul><h3 id="传统-IO-问题"><a href="#传统-IO-问题" class="headerlink" title="传统 IO 问题"></a>传统 IO 问题</h3><p>传统的 IO 将一个文件通过 socket 写出</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">File</span> <span class="token attr-value">f = new File("helloword/data.txt");</span><span class="token attr-name">RandomAccessFile</span> <span class="token attr-value">file = new RandomAccessFile(file, "r");</span><span class="token attr-name">byte[]</span> <span class="token attr-value">buf = new byte[(int)f.length()];</span>file.read(buf);<span class="token attr-name">Socket</span> <span class="token attr-value">socket = ...;</span>socket.getOutputStream().write(buf);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内部工作流如下</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162306.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531009.png" alt="img"></a></p><ul><li>Java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 Java 程序的<strong>用户态切换至内核态</strong>，去调用操作系统（Kernel）的读能力，将数据读入<strong>内核缓冲区</strong>。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 CPUDMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO</li><li>从<strong>内核态</strong>切换回<strong>用户态</strong>，将数据从<strong>内核缓冲区</strong>读入<strong>用户缓冲区</strong>（即 byte[] buf），这期间 <strong>CPU 会参与拷贝</strong>，无法利用 DMA</li><li>调用 write 方法，这时将数据从<strong>用户缓冲区</strong>（byte[] buf）写入 <strong>socket 缓冲区，CPU 会参与拷贝</strong></li><li>接下来要向网卡写数据，这项能力 Java 又不具备，因此又得从<strong>用户态</strong>切换至<strong>内核态</strong>，调用操作系统的写能力，使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 CPU</li></ul><p>可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的</p><ul><li>用户态与内核态的切换发生了 3 次，这个操作比较重量级</li><li>数据拷贝了共 4 次</li></ul><h3 id="NIO-优化"><a href="#NIO-优化" class="headerlink" title="NIO 优化"></a>NIO 优化</h3><p>通过 <strong>DirectByteBuf</strong></p><ul><li><p>ByteBuffer.allocate(10)</p></li><li><ul><li>底层对应 HeapByteBuffer，使用的还是 Java 内存</li></ul></li><li><p>ByteBuffer.<strong>allocateDirect</strong>(10)</p></li><li><ul><li>底层对应DirectByteBuffer，<strong>使用的是操作系统内存</strong></li></ul></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162410.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531022.png" alt="img"></a></p><p>大部分步骤与优化前相同，唯有一点：<strong>Java 可以使用 DirectByteBuffer 将堆外内存映射到 JVM 内存中来直接访问使用</strong></p><ul><li><p>这块内存不受 JVM 垃圾回收的影响，因此内存地址固定，有助于 IO 读写</p></li><li><p>Java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步</p></li><li><ul><li>DirectByteBuffer 对象被垃圾回收，将虚引用加入引用队列</li></ul></li><li><ul><li><ul><li>当引用的对象ByteBuffer被垃圾回收以后，虚引用对象Cleaner就会被放入引用队列中，然后调用Cleaner的clean方法来释放直接内存</li><li>DirectByteBuffer 的释放底层调用的是 Unsafe 的 freeMemory 方法</li></ul></li></ul></li><li><ul><li>通过专门线程访问引用队列，根据虚引用释放堆外内存</li></ul></li><li><p><strong>减少了一次数据拷贝，用户态与内核态的切换次数没有减少</strong></p></li></ul><h3 id="进一步优化1"><a href="#进一步优化1" class="headerlink" title="进一步优化1"></a>进一步优化1</h3><p><strong>以下两种方式都是零拷贝</strong>，即无需将数据拷贝到用户缓冲区中（JVM内存中）</p><p>底层采用了 <strong>linux 2.1</strong> 后提供的 <strong>sendFile</strong> 方法，Java 中对应着两个 channel 调用 <strong>transferTo/transferFrom</strong> 方法拷贝数据</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162750.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531029.png" alt="img"></a></p><ul><li>Java 调用 transferTo 方法后，要从 Java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 CPU</li><li>数据从<strong>内核缓冲区</strong>传输到 <strong>socket 缓冲区</strong>，CPU 会参与拷贝</li><li>最后使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 CPU</li></ul><p>这种方法下</p><ul><li>只发生了1次用户态与内核态的切换</li><li>数据拷贝了 3 次</li></ul><h3 id="进一步优化2"><a href="#进一步优化2" class="headerlink" title="进一步优化2"></a>进一步优化2</h3><p><strong>linux 2.4</strong> 对上述方法再次进行了优化</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418163033.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531029.png" alt="img"></a></p><ul><li>Java 调用 transferTo 方法后，要从 Java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 CPU</li><li>只会将一些 offset 和 length 信息拷入 <strong>socket 缓冲区</strong>，几乎无消耗</li><li>使用 DMA 将 <strong>内核缓冲区</strong>的数据写入网卡，不会使用 CPU</li></ul><p><strong>整个过程仅只发生了1次用户态与内核态的切换，数据拷贝了 2 次</strong></p><h2 id="4、AIO"><a href="#4、AIO" class="headerlink" title="4、AIO"></a>4、AIO</h2><p>AIO 用来解决数据复制阶段的阻塞问题</p><ul><li>同步意味着，在进行读写操作时，线程需要等待结果，还是相当于闲置</li><li>异步意味着，在进行读写操作时，线程不必等待结果，而是将来由操作系统来通过回调方式由另外的线程来获得结果</li></ul><p>异步模型需要底层操作系统（Kernel）提供支持</p><ul><li>Windows 系统通过 IOCP <strong>实现了真正的异步 IO</strong></li><li>Linux 系统异步 IO 在 2.6 版本引入，但其<strong>底层实现还是用多路复用模拟了异步 IO，性能没有优势</strong></li></ul><h1 id="五、Netty"><a href="#五、Netty" class="headerlink" title="五、Netty"></a>五、Netty</h1><h2 id="核心组件及作用"><a href="#核心组件及作用" class="headerlink" title="核心组件及作用"></a>核心组件及作用</h2><p>Netty是一个基于Java的异步事件驱动网络应用程序框架，旨在帮助开发者轻松构建高性能、可伸缩、易于维护的网络应用。它提供了一组强大的网络编程工具和组件，适用于各种网络协议和应用场景。下面是Netty中一些重要组件的介绍及其作用：</p><ol><li>Channel和ChannelHandler：</li></ol><ul><li><ul><li>Channel：表示网络连接的通道，可以理解为传统Java I/O中的Socket。它可以代表客户端与服务器之间的双向通信通道。</li><li>ChannelHandler：用于处理入站和出站数据事件的组件。它可以拦截、处理、转换和生成数据，实现各种网络协议和逻辑的处理。</li></ul></li></ul><ol><li>EventLoop和EventLoopGroup：</li></ol><ul><li><ul><li>EventLoop：一个用于处理Channel的I/O事件、任务和定时任务的循环。它会监听事件并调用相应的ChannelHandler处理数据。</li><li>EventLoopGroup：包含一组EventLoop，用于管理它们的生命周期。在Netty中，通常会有两个EventLoopGroup，一个用于处理客户端的连接，一个用于处理已连接的Channel的I/O。</li></ul></li></ul><ol><li>Bootstrap和ServerBootstrap：</li></ol><ul><li><ul><li>Bootstrap：用于客户端的启动引导类，用于配置和创建客户端Channel。</li><li>ServerBootstrap：用于服务器端的启动引导类，用于配置和创建服务器端Channel。</li></ul></li></ul><ol><li>ChannelPipeline：</li></ol><ul><li><ul><li>通道管道是一系列的ChannelHandler组成的管道，用于处理进出的数据。数据在管道中依次经过不同的处理器进行处理。</li></ul></li></ul><ol><li>Codec：</li></ol><ul><li><ul><li>编解码器，用于将字节流和Java对象进行互相转换。Netty提供了许多内置的编解码器，例如基于长度的帧解码器、字符串编解码器等。</li></ul></li></ul><ol><li>ByteBuf：</li></ol><ul><li><ul><li>Netty的字节容器，类似于Java的ByteBuffer，但提供了更多的功能和更灵活的API。</li></ul></li></ul><ol><li>ChannelFuture：</li></ol><ul><li><ul><li>代表一个异步操作的结果，可以用来获取操作的状态和结果。在Netty中，几乎所有的操作都是异步的，因此ChannelFuture被广泛使用。</li></ul></li></ul><ol><li>Promise：</li></ol><ul><li><ul><li>一种更高级的Future，用于表示异步操作的结果，同时还可以手动设置结果，以满足某些特定的需求。</li></ul></li></ul><ol><li>IdleStateHandler：</li></ol><ul><li><ul><li>用于检测连接的空闲状态，当连接一段时间内没有读取或写入数据时，可以触发特定的事件。</li></ul></li></ul><ol><li>WebSocket：</li></ol><ul><li><ul><li><p>Netty提供了用于处理WebSocket协议的相关组件，使得构建WebSocket应用变得更加简单。</p><pre><code>     ![img](netty学习/image-1713770531034.png)</code></pre></li></ul></li></ul><h2 id="1、HelloWrold"><a href="#1、HelloWrold" class="headerlink" title="1、HelloWrold"></a>1、HelloWrold</h2><ol><li>引入依赖</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.1.87.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>开发Server</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>nt<span class="token punctuation">.</span>aHello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span></span><span class="token class-name">ServerBootstrap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInboundHandlerAdapter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInitializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span></span><span class="token class-name">StringDecoder</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. 启动器，组装netty组件，启动服务器</span>        <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 2. group 组</span>            <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 3. 选择服务器的server socket channel实现方式，包括OIO/BIO</span>            <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token comment">// 4. 配置child能够处理那些操作</span>            <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span>                <span class="token comment">// 5. 和客户端读写通道的初始化，添加其他的handler</span>                <span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                        <span class="token comment">// 添加具体的handler</span>                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将ByteBuf转换为字符串</span>                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInboundHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 自定义handler，定义触发读事件要做的事情</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>开发Client</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>nt<span class="token punctuation">.</span>aHello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span></span><span class="token class-name">Bootstrap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInitializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span></span><span class="token class-name">StringEncoder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. 启动类</span>        <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 2. 添加eventGroup</span>                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 3. 选择客户端channel实现</span>                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token comment">// 4. 添加处理器</span>                <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 阻塞方法，直到连接建立</span>                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 代表连接对象</span>                <span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>整体流程</li></ol><p><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531048.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、三大组件简介&quot;&gt;&lt;a href=&quot;#一、三大组件简介&quot; class=&quot;headerlink&quot; title=&quot;一、三大组件简介&quot;&gt;&lt;/a&gt;一、三大组件简介&lt;/h1&gt;&lt;p&gt;Channel与Buffer&lt;/p&gt;
&lt;p&gt;Java NIO系统的&lt;strong&gt;核心&lt;/s</summary>
      
    
    
    
    <category term="Netty" scheme="https://zzyong24.github.io/categories/Netty/"/>
    
    
    <category term="框架" scheme="https://zzyong24.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>线上问题排查</title>
    <link href="https://zzyong24.github.io/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/"/>
    <id>https://zzyong24.github.io/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/</id>
    <published>2024-04-22T03:18:09.000Z</published>
    <updated>2024-05-14T15:29:11.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线上问题排查"><a href="#线上问题排查" class="headerlink" title="线上问题排查"></a>线上问题排查</h1><h2 id="1-Cpu飚高"><a href="#1-Cpu飚高" class="headerlink" title="1. Cpu飚高"></a>1. Cpu飚高</h2><ol><li><p>使用top命令查看cpu占用情况</p><p><img src="/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/image.png" alt="top"></p></li><li><p>通过top命令查看后，可以查看是哪一个进程占用cpu较高，上图所示的进程为：30978</p></li><li><p>查询进程中的线程信息<br>pid：进程pid<br>tid：线程id<br>%：cpu占用率<br><img src="/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/image-1713757255775.png" alt="image.png"></p></li><li><p>通过上面分析，在进程(30978)中哪一个线程(30979)占用的cpu较高</p></li><li><p>把线程号转换为16进制 , 记住这个16进制的线程号</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">printf "%x\n" 30979 , 30979为10进制进程id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行<code>jstack 30978</code>可以根据线程 id 找到有问题的线程，进一步定位到问题代码的源码行号<br><img src="/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/image-1713757297193.png" alt="jstack查看"></p></li><li><p>代码修复</p></li></ol><h2 id="2-JVM调优"><a href="#2-JVM调优" class="headerlink" title="2. JVM调优"></a>2. JVM调优</h2><p>要想调优首先就要确定问题 , 目前系统哪些地方出现了问题 , 哪些地方没有达到设计目标 , 需要进行调优</p><p>确定了问题之后 , 首先应该思考是否能够从<strong>架构方面</strong>, <strong>代码优化方面</strong>或者<strong>数据库优化</strong>方面解决问题</p><p>从其他方面着手能不能解决问题 <strong>,<strong>才需要进行</strong>JVM调优</strong>应该是Java性能优化的最后手段。</p><p> 我认为JVM调优应该是系统优化的最后手段 , JVM本身就有自动内存管理机制 , 一般的项目调整一下初始堆内存(<code>-Xms</code>)大小, 和最大堆内存(<code>-Xmx</code>)大小也就行了 </p><p><strong>如果确实要进行JVM调优, 首先要确认系统有没有出现如下的问题 :</strong> </p><ul><li>Heap内存（老年代）持续上涨达到设置的最大内存值</li><li>Full GC 次数频繁</li><li>GC 停顿时间过长（超过1秒）</li><li>应用出现OutOfMemory 等内存异常</li><li>应用中有使用本地缓存且占用大量内存空间</li></ul><p>如果存在上述问题 , 能不能通过架构调整和逻辑代码调整进行解决</p><ul><li>我们编写的代码中有没有出现内存泄露 , 死循环 , 无限递归这样的问题</li><li>程序在执行的时候有没有在循环中创建大量的对象, 是否有必要 , 是否可以优化</li><li>是否存在大量的全局变量和大对象</li><li>本地缓存中有大量的数据存储, 是否可以切换到外部缓存中间件中</li><li>数据库SQL执行效率是否达到预期 , 是否还有优化空间 , 有没有查询大量数据到内存 , 是否有必要</li><li>服务器JVM参数有没有设置到最优</li></ul><p>如果确定要进行JVM调优 , 我们可以从以下方面进行着手 : </p><ol><li>分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点</li><li>确定JVM调优量化目标</li><li>确定JVM调优参数（根据历史JVM参数来调整）</li><li>依次调优内存、延迟、吞吐量等指标</li><li>对比观察调优前后的差异</li><li>不断的分析和调整，直到找到合适的JVM参数配置</li></ol><p>整个过程也不是一下就能完成的 , 要不断的测试和优化</p><p><strong>常见的JVM调优参数设置 :</strong> </p><p><code>-Xms</code>：初始化堆内存大小，默认为物理内存的1/64(小于1GB)。</p><p><code>-Xmx</code>：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。</p><p><code>-Xmn</code>：新生代大小，包括Eden区与2个Survivor区。</p><p><code>-XX:SurvivorRatio=8</code>：Eden区与一个Survivor区比值 , 默认值Eden:S0:S1为 8:1:1  , 如果是4 那么就是4:1:1</p><p><code>-XX:NewRatio=4</code>：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5</p><p><code>-Xss512k</code>：设置每个线程的堆栈大小。每个线程堆栈大小为1MB , 应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。</p><p><code>-XX:PermSize=100m</code>：设置初始化永久代大小为100MB。</p><p><code>-XX:MaxPermSize=256m</code>：设置持久代大小为256MB。</p><p><code>-XX:MaxDirectMemorySize=1G</code>：设置直接内存大小。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。</p><p><code>-XX:ConcGCThreads=4</code>：CMS垃圾回收器并行线程线，推荐值为CPU核心数。</p><p><code>-XX:ParallelGCThreads=8</code>：新生代并行收集器的线程数。</p><p>还有很多参数 , 太多了记不住 , 之前整理了一个文档 , 需要用的时候可以查询</p><p>一般我们调整参数的比例 : </p><p><img src="/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/image-1713757339564.png" alt="参数调整"></p><p>具体参数要根据情况设置</p><h2 id="3-JVM调优工具"><a href="#3-JVM调优工具" class="headerlink" title="3. JVM调优工具"></a>3. JVM调优工具</h2><p><img src="/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/image-1713757370830.png" alt="调优工具"></p><p>也可以使用Arthas</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线上问题排查&quot;&gt;&lt;a href=&quot;#线上问题排查&quot; class=&quot;headerlink&quot; title=&quot;线上问题排查&quot;&gt;&lt;/a&gt;线上问题排查&lt;/h1&gt;&lt;h2 id=&quot;1-Cpu飚高&quot;&gt;&lt;a href=&quot;#1-Cpu飚高&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="线上问题排查" scheme="https://zzyong24.github.io/categories/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
    
    <category term="运维" scheme="https://zzyong24.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>redis常用业务场景下Lua脚本</title>
    <link href="https://zzyong24.github.io/2024/04/21/java/kuang-jia/redis-chang-yong-ye-wu-chang-jing-xia-lua-jiao-ben/"/>
    <id>https://zzyong24.github.io/2024/04/21/java/kuang-jia/redis-chang-yong-ye-wu-chang-jing-xia-lua-jiao-ben/</id>
    <published>2024-04-21T05:32:44.000Z</published>
    <updated>2024-05-14T15:29:11.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis常用业务场景下的lua脚本及其解释"><a href="#Redis常用业务场景下的lua脚本及其解释" class="headerlink" title="Redis常用业务场景下的lua脚本及其解释"></a>Redis常用业务场景下的lua脚本及其解释</h1><h2 id="1、-限流场景"><a href="#1、-限流场景" class="headerlink" title="1、 限流场景"></a>1、 限流场景</h2><h3 id="1-1-滑动窗口限流"><a href="#1-1-滑动窗口限流" class="headerlink" title="1.1 滑动窗口限流"></a>1.1 滑动窗口限流</h3><p><strong>使用到的数据结构以及命令解释</strong></p><pre class="line-numbers language-none"><code class="language-none">Sorted Set：Redis有序集合是一组按相关分数排序的唯一字符串（成员）的集合。它类似于集合和哈希的混合体。有序集合通常用于排行榜和速率限制器。它们可以高效地更新和查询。ZREMRANGEBYSCORE:`ZREMRANGEBYSCORE key min max`移除掉zset中分数位于min以及max之间的元素ZCARD:`ZCARD key`返回key的元素个数ZADD:`ZADD key [NX | XX] [GT | LT] [CH] [INCR] score member [score member   ...]`将所有指定的成员及其指定的分数添加到存储在键中的排序集合中。可以指定多个分数/成员对。如果指定的成员已经是排序集合的成员，则更新分数，并重新插入元素以确保正确排序。如果键不存在，则将创建一个具有指定成员作为唯一成员的新排序集合，就好像排序集合为空一样。如果键存在但不包含排序集合，则会返回错误。分数值应为双精度浮点数的字符串表示。+inf和-inf值也是有效值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>lua脚本解释</strong></p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">参数解释：<span class="token number">1</span>、 timeWindowSize： 滑动窗口时间范围<span class="token number">2</span>、 allowRequestSize： 滑动窗口允许访问的次数<span class="token number">3</span>、 key： 资源key<span class="token comment">-- 计算窗口起始时间</span><span class="token keyword">local</span> window_start <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> timeWindowSize<span class="token comment">-- 删除掉 【负无穷，窗口起始时间】的元素（获取当前时间窗口，删除历史元素）</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'ZREMRANGEBYSCORE'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'-INF'</span><span class="token punctuation">,</span> window_start<span class="token punctuation">)</span><span class="token comment">-- 计算当前窗口剩余元素数量</span><span class="token keyword">local</span> current_window_size <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'ZCARD'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">-- 判断当前窗口元素数量是否大于窗口最大允许访问次数</span><span class="token keyword">if</span> current_window_size <span class="token operator">&lt;</span> allowRequestSize <span class="token keyword">then</span>    <span class="token comment">-- 允许访问，将当前元素添加进去</span>    redis<span class="token punctuation">.</span><span class="token function">cal</span><span class="token punctuation">(</span><span class="token string">'ZADD'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>lua调用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>lua<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span> allowRequestSize<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Java应用实例参考</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlidingWindowLimitUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">JedisPool</span> jedisPool<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SlidingWindowLimitUtil</span><span class="token punctuation">(</span><span class="token class-name">JedisPool</span> jedisPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jedisPool <span class="token operator">=</span> jedisPool<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *  滑动窗口限流算法     * @param key 限流key     * @param timeRange 时间范围     * @param windowRange 窗口范围     * @return boolean     * @date 2024/03/25     * @version 1.0.0     * @author zhuzy     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> timeRange<span class="token punctuation">,</span> <span class="token class-name">String</span> windowRange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取连接</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> res <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// timeRange配置的是秒，转换为毫秒</span>            <span class="token class-name">Long</span> timeRangeL <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>timeRange<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> lua <span class="token operator">=</span> <span class="token string">"local window_start = ARGV[1] - "</span> <span class="token operator">+</span> timeRangeL <span class="token operator">+</span> <span class="token string">"\n "</span> <span class="token operator">+</span>                    <span class="token string">"redis.call('ZREMRANGEBYSCORE', KEYS[1], '-INF', window_start)\n"</span> <span class="token operator">+</span>                    <span class="token string">"local current_request = redis.call('ZCARD', KEYS[1])\n"</span> <span class="token operator">+</span>                    <span class="token string">"if current_request &lt; tonumber(ARGV[2]) then\n"</span> <span class="token operator">+</span>                    <span class="token string">"   redis.call('ZADD', KEYS[1], ARGV[1], ARGV[1])\n"</span> <span class="token operator">+</span>                    <span class="token string">"   return 1\n"</span> <span class="token operator">+</span>                    <span class="token string">"else\n"</span> <span class="token operator">+</span>                    <span class="token string">"   return 0\n"</span> <span class="token operator">+</span>                    <span class="token string">"end"</span><span class="token punctuation">;</span>            <span class="token comment">// 参数顺序： lua脚本，key个数， key， 参数1， 参数2</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>lua<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span> windowRange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res <span class="token operator">==</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-令牌桶限流"><a href="#1-2-令牌桶限流" class="headerlink" title="1.2 令牌桶限流"></a>1.2 令牌桶限流</h3><p><strong>使用到的数据结果及命令解释</strong></p><pre class="line-numbers language-none"><code class="language-none">String:基本数据类型。在令牌桶场景中，剩余令牌数量以及上次获取令牌的时间均是基于string实现的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>lua脚本解释</strong></p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">参数解释：<span class="token number">1</span>、key：限流资源标识<span class="token number">2</span>、interval：令牌添加速率<span class="token number">3</span>、capacity：令牌桶容量<span class="token number">4</span>、now：当前时间<span class="token number">5</span>、cost_token_num<span class="token punctuation">:</span> 消耗令牌数量（当前操作<span class="token punctuation">)</span><span class="token comment">-- 参数获取</span><span class="token keyword">local</span> key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> interval <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> capacity <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">local</span> now <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">local</span> cost_token_num <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">local</span> last_req_time_key <span class="token operator">=</span> <span class="token string">'last_time:'</span> <span class="token operator">..</span> key<span class="token comment">-- 获取当前key剩余令牌数量, 如果为空，则初始化为桶容量</span><span class="token keyword">local</span> remain_tokens <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token keyword">or</span> capacity<span class="token punctuation">)</span><span class="token comment">-- 获取当前key上次获取令牌的时间, 如果为空，则初始化为当前时间</span><span class="token keyword">local</span> last_time <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> last_req_time_key<span class="token punctuation">)</span> <span class="token keyword">or</span> now<span class="token punctuation">)</span><span class="token comment">-- 计算新生成的token数量</span><span class="token keyword">local</span> new_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>now <span class="token operator">-</span> last_time<span class="token punctuation">)</span> <span class="token operator">/</span> interval<span class="token punctuation">)</span><span class="token comment">-- 新生成的token + 剩余的token 不能大于桶容量</span><span class="token keyword">local</span> detal_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>remain_tokens <span class="token operator">+</span> delta_tokens<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token keyword">if</span> detal_tokens <span class="token operator">&gt;=</span> cost_token_num <span class="token keyword">then</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> detal_tokens <span class="token operator">-</span> cost_token_num<span class="token punctuation">)</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span> last_req_time_key<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>lua调用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>lua<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> capacity<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>，costTokenNum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis常用业务场景下的lua脚本及其解释&quot;&gt;&lt;a href=&quot;#Redis常用业务场景下的lua脚本及其解释&quot; class=&quot;headerlink&quot; title=&quot;Redis常用业务场景下的lua脚本及其解释&quot;&gt;&lt;/a&gt;Redis常用业务场景下的lua脚本及其</summary>
      
    
    
    
    
    <category term="Redis" scheme="https://zzyong24.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>黑马点评</title>
    <link href="https://zzyong24.github.io/2024/04/18/xiang-mu/hei-ma-dian-ping/"/>
    <id>https://zzyong24.github.io/2024/04/18/xiang-mu/hei-ma-dian-ping/</id>
    <published>2024-04-18T15:18:16.000Z</published>
    <updated>2024-06-02T08:21:02.424Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713691863632.png" alt="Redis官网"></p><p><a href="https://redis.io/docs/latest/commands/">Commands | Docs (redis.io)</a></p><h1 id="黑马点评"><a href="#黑马点评" class="headerlink" title="黑马点评"></a>黑马点评</h1><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713453578683.png" alt="1713453578683"></p><h2 id="1-验证码登录"><a href="#1-验证码登录" class="headerlink" title="1. 验证码登录"></a>1. 验证码登录</h2><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713454025294.png" alt="1713454025294"></p><blockquote><p>生成的token作为redis的key， value存储用户的具体信息</p></blockquote><h2 id="2-两层拦截器"><a href="#2-两层拦截器" class="headerlink" title="2. 两层拦截器"></a>2. 两层拦截器</h2><blockquote><p>刷新token有效期</p></blockquote><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713454333387.png" alt="1713454333387"></p><h2 id="3-缓存更新策略"><a href="#3-缓存更新策略" class="headerlink" title="3. 缓存更新策略"></a>3. 缓存更新策略</h2><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713454551095.png" alt="1713454551095"></p><h2 id="4-缓存穿透、雪崩、击穿"><a href="#4-缓存穿透、雪崩、击穿" class="headerlink" title="4. 缓存穿透、雪崩、击穿"></a>4. 缓存穿透、雪崩、击穿</h2><h3 id="4-1-缓存穿透"><a href="#4-1-缓存穿透" class="headerlink" title="4.1 缓存穿透"></a>4.1 缓存穿透</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713454830339.png" alt="1713454830339"></p><h3 id="4-2-缓存雪崩"><a href="#4-2-缓存雪崩" class="headerlink" title="4.2 缓存雪崩"></a>4.2 缓存雪崩</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713454846336.png" alt="1713454846336"></p><h3 id="4-3-缓存击穿"><a href="#4-3-缓存击穿" class="headerlink" title="4.3 缓存击穿"></a>4.3 缓存击穿</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713454865946.png" alt="1713454865946"></p><h2 id="5-秒杀业务"><a href="#5-秒杀业务" class="headerlink" title="5. 秒杀业务"></a>5. 秒杀业务</h2><h3 id="5-1-发号器（全局ID）"><a href="#5-1-发号器（全局ID）" class="headerlink" title="5.1 发号器（全局ID）"></a>5.1 发号器（全局ID）</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713531629403.png" alt="1713531629403"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisIdWorker</span> <span class="token punctuation">{</span>    <span class="token comment">//开始时间戳</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> BEGIN_TIMESTAMP <span class="token operator">=</span> <span class="token number">1674086400L</span><span class="token punctuation">;</span>    <span class="token comment">//序列号位数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_BITS <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RedisIdWorker</span><span class="token punctuation">(</span><span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stringRedisTemplate <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyPrefix<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//1.生成时间戳</span>        <span class="token class-name">LocalDateTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> nowSecond <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span>UTC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> nowSecond <span class="token operator">-</span> BEGIN_TIMESTAMP<span class="token punctuation">;</span>        <span class="token comment">//2.生成序列号,redis自增长,redis单个key自增长有上限，2的64次方</span>        <span class="token comment">//2.1获取当前日期，精确到天</span>        <span class="token class-name">String</span> date <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy:MM:dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string">"icr:"</span> <span class="token operator">+</span> keyPrefix <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.拼接并返回,不能使用字符串方式拼接</span>        <span class="token keyword">return</span> timestamp <span class="token operator">&lt;&lt;</span> COUNT_BITS <span class="token operator">|</span> count<span class="token punctuation">;</span><span class="token comment">//先向左移32位，那么低32位全为0，跟序列号进行或操作</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 生成开始时间戳     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LocalDateTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> second <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span>UTC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2乐观锁防止超卖"><a href="#5-2乐观锁防止超卖" class="headerlink" title="5.2乐观锁防止超卖"></a>5.2乐观锁防止超卖</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713537654445.png" alt="1713537654445"></p><blockquote><p>弊端，比较浪费性能，在查询时并发较大情况下，很多线程会判断stock不等于查询的stock，导致秒杀失败。</p></blockquote><h4 id="5-2-1-优化：提高成功率"><a href="#5-2-1-优化：提高成功率" class="headerlink" title="5.2.1 优化：提高成功率"></a>5.2.1 优化：提高成功率</h4><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713537718210.png" alt="1713537718210"></p><h3 id="5-3-一人一单"><a href="#5-3-一人一单" class="headerlink" title="5.3 一人一单"></a>5.3 一人一单</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713537851447.png" alt="1713537851447"></p><h4 id="5-3-1-分布式环境锁"><a href="#5-3-1-分布式环境锁" class="headerlink" title="5.3.1 分布式环境锁"></a>5.3.1 分布式环境锁</h4><p>使用分布式锁解决</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713538141860.png" alt="1713538141860"></p><h4 id="5-3-2-redis锁避免被他人解锁"><a href="#5-3-2-redis锁避免被他人解锁" class="headerlink" title="5.3.2 redis锁避免被他人解锁"></a>5.3.2 redis锁避免被他人解锁</h4><p>使用lua脚本在解锁前是否由当前线程持有锁</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 这里的 KEYS[1] 就是锁的 key，这里的 ARGV[1] 就是当前线程标识</span><span class="token comment">-- 获取锁中的线程标识 get key</span><span class="token keyword">local</span> id <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 比较线程标识与锁中的标识是否一致</span><span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token comment">-- 释放锁 del key</span>    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-3-Redission分布式锁"><a href="#5-3-3-Redission分布式锁" class="headerlink" title="5.3.3 Redission分布式锁"></a>5.3.3 Redission分布式锁</h4><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713538395179.png" alt="1713538395179"></p><blockquote><p>Redission分布式锁原理：</p><ol><li><strong>可重入</strong>：利用hash结构记录线程id和重入次数</li><li><strong>可重试</strong>：利用信号量和Publish功能实现等待、唤醒，获取锁的重试机制（并不是无脑自旋）</li><li><strong>超时续约</strong>：利用Watch dog，每隔一段时间（release time / 3 )自动续期</li></ol></blockquote><h3 id="5-4-秒杀业务优化"><a href="#5-4-秒杀业务优化" class="headerlink" title="5.4 秒杀业务优化"></a>5.4 秒杀业务优化</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713611973434.png" alt="秒杀优化"></p><blockquote><p>优化思路如下，之前的流程中，步骤如下：</p><ol><li>查询优惠券</li><li>判断秒杀库存</li><li>查询订单</li><li>校验一人一单</li><li>减库存</li><li>创建订单</li></ol><p>可以发现，以上操作很多操作是需要操作mysql数据库的，而且如下单的操作需要调用其他服务的接口，存在时延较长的问题。压测情况下，1000tps情况下，最低时延和最高时延分别为100ms和800ms性能差距较大。</p></blockquote><p>整体上优化思路如下：</p><ol><li>将判断逻辑在主线程完成，如果能够下单（满足库存、一人一单的要求），则通过异步线程完成减库存以及创建订单的操作。</li><li>通过lua脚本在redis中 完成能够下单的校验操作</li></ol><h4 id="5-4-1-优化后整体流程"><a href="#5-4-1-优化后整体流程" class="headerlink" title="5.4.1 优化后整体流程"></a>5.4.1 优化后整体流程</h4><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713623713572.png" alt="lua校验逻辑"></p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 1.参数列表</span><span class="token comment">-- 1.1 优惠券id</span><span class="token keyword">local</span> voucherId <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">-- 1.2 用户id</span><span class="token keyword">local</span> userId <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">-- 2.数据key</span><span class="token comment">-- 2.1 库存key   key 是优惠的业务名称加优惠券id  value 是优惠券的库存数</span><span class="token keyword">local</span> stockKey <span class="token operator">=</span> <span class="token string">'seckill:stock:'</span> <span class="token operator">..</span> voucherId<span class="token comment">-- 2.2 订单key   key 也是拼接的业务名称加优惠权id  而value是用户id， 这是一个set集合，凡购买该优惠券的用户都会将其id存入集合中</span><span class="token keyword">local</span> orderKey <span class="token operator">=</span> <span class="token string">'seckill:order:'</span> <span class="token operator">..</span> voucherId<span class="token comment">-- 3.脚本业务</span><span class="token comment">-- 3.1 判断库存是否充足 get stockKey</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> stockKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">then</span>  <span class="token comment">--将get的value先转为数字类型才能判断比较</span>    <span class="token comment">-- 3.2 库存不足，返回1</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">end</span><span class="token comment">-- 3.3 判断用户是否下单 sismember orderKey userId命令，判断当前key集合中，是否存在该value；返回1存在，0不存在</span><span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'sismember'</span><span class="token punctuation">,</span> orderKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token comment">--3.4 存在说明是重复下单，返回2</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token keyword">end</span><span class="token comment">-- 3.5 扣库存</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'incrby'</span><span class="token punctuation">,</span> stockKey<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">-- 3.6 下单（保存用户）</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'sadd'</span><span class="token punctuation">,</span> orderKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码逻辑步骤</strong></p><ol><li><p>lua 注入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">IVoucherOrderService</span> proxy<span class="token punctuation">;</span><span class="token comment">//定义代理对象，提前定义后面会用到</span><span class="token comment">//注入脚本</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> SECKILL_SCRIPT<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    SECKILL_SCRIPT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SECKILL_SCRIPT<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"seckill.lua"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SECKILL_SCRIPT<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>脚本运行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">seckillVoucher</span><span class="token punctuation">(</span><span class="token class-name">Long</span> voucherId<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//使用lua脚本</span>    <span class="token comment">//获取用户</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1.执行lua脚本</span>    <span class="token class-name">Long</span> result <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>            SECKILL_SCRIPT<span class="token punctuation">,</span>            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//这里是key数组，没有key，就传的一个空集合</span>            voucherId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.判断结果是0</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Long型转为int型，便于下面比较</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//2.1 不为0，代表没有购买资格</span>        <span class="token keyword">return</span>  <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">?</span><span class="token string">"优惠券已售罄"</span><span class="token operator">:</span><span class="token string">"不能重复购买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>满足下单的元素添加至阻塞队列</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建阻塞队列  这个阻塞队列特点：当一个线程尝试从队列获取元素的时候，如果没有元素该线程阻塞，直到队列中有元素才会被唤醒获取</span><span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">VoucherOrder</span><span class="token punctuation">&gt;</span></span> orderTasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化阻塞队列的大小</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>下单代码逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">//2.2 为0，有购买资格，把下单信息保存到阻塞队列中</span>    <span class="token comment">//7.创建订单   向订单表新增一条数据，除默认字段，其他字段的值需要set</span>    <span class="token class-name">VoucherOrder</span> voucherOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VoucherOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.1订单id</span>    <span class="token keyword">long</span> orderId <span class="token operator">=</span> redisIdWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.2用户id</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.3代金券id</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setVoucherId</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//放入阻塞对列中</span>    orderTasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>voucherOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取代理对象</span>    proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IVoucherOrderService</span><span class="token punctuation">)</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.返回订单id</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>异步线程持续消费延迟队列消息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建线程池</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> SECKILL_ORDER_EXECUTOR <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//利用spring提供的注解，在类初始化完毕后立即执行线程任务</span><span class="token annotation punctuation">@PostConstruct</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SECKILL_ORDER_EXECUTOR<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoucherOrderHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment">//创建线程任务，内部类方式</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">VoucherOrderHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>       <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1.获取队列中的订单信息</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">VoucherOrder</span> voucherOrder <span class="token operator">=</span> orderTasks<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.创建订单，这是调之前那个创建订单的方法，需要稍作改动</span>            <span class="token function">handleVoucherOrder</span><span class="token punctuation">(</span>voucherOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"异常信息:"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建订单与减少库存</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleVoucherOrder</span><span class="token punctuation">(</span><span class="token class-name">VoucherOrder</span> voucherOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> voucherOrder<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建锁对象</span>    <span class="token class-name">SimpleRedisLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRedisLock</span><span class="token punctuation">(</span><span class="token string">"order:"</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span> stringRedisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取锁</span>    <span class="token keyword">boolean</span> isLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断是否获取锁成功</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isLock<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"您已购买过该商品，不能重复购买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        proxy<span class="token punctuation">.</span><span class="token function">createVoucherOrder</span><span class="token punctuation">(</span>voucherOrder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用代理对象，最后用于提交事务</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放锁</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-总结"><a href="#5-5-总结" class="headerlink" title="5.5 总结"></a>5.5 总结</h3><blockquote><p>①编写lua脚本，对于超卖问题和一人一单进行解决处理，超卖用CAS方法判断库存是否大于0，一人一单用redis的set集合的sismenber判读该优惠券（key）下的用户id（value）是否唯一</p><p>②Java代码中注入脚本，并执行脚本判断脚本返回结果，若不为脚本结果0，直接返回错误提示</p><p>③若脚本结果为0，代表有购买优惠券资格，将new VoucherOrder创建订单对象，并set orderId，userId，voucherId。再把订单对象放入阻塞队列中，返回订单id给用户</p><p>④创建线程池，并定义线程任务，但注意，线程任务必须在方法执行前执行，使用到spring提供的注解在类初始化完成后执行线程任务</p><p>⑤线程任务中获取阻塞队列的订单对象，然后调用handleVoucherOrder方法传入voucherOrder</p><p>⑥handleVoucherOrder方法其实是再次获取锁，这个就是个纯兜底，作用不大。并在获取锁成功后调用createVoucherOrder方法扣减库存创建订单，由于都是对数据库的操作，因此要提交事务</p></blockquote><h3 id="5-6-目前方案存在的缺陷"><a href="#5-6-目前方案存在的缺陷" class="headerlink" title="5.6 目前方案存在的缺陷"></a>5.6 目前方案存在的缺陷</h3><blockquote><p>队列满了怎么办 ？</p><p>子线程下单失败怎么办？</p><p>订单太多了超过阻塞队列大小了怎么办？</p><p>拒绝策略怎么设计？</p><p>待消费的消息是否应该持久化，不然宕机了消息不就丢失了？</p><p>还有如何确保消息确实被消费成功了，不然消费失败了无法重试</p></blockquote><h3 id="5-7-Redis消息队列解决持久化"><a href="#5-7-Redis消息队列解决持久化" class="headerlink" title="5.7 Redis消息队列解决持久化"></a>5.7 Redis消息队列解决持久化</h3><h4 id="5-7-1-基于List实现"><a href="#5-7-1-基于List实现" class="headerlink" title="5.7.1 基于List实现"></a>5.7.1 基于List实现</h4><p>Redis 的 list 数据结构是一个双向链表<br>队列是入口和出口不在一边，因此我们可以利用：LPUSH 结合 RPOP、或者 RPUSH 结合 LPOP 来实现。</p><p>不过要注意的是，当队列中没有消息时 RPOP 或 LPOP 操作会返回 null，并不像 JVM 的阻塞队列那样会阻塞并等待消息。</p><p>因此这里应该使用 BRPOP 或者 BLPOP 来实现阻塞效果。</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713627065321.png" alt="List实现消息队列"></p><p><strong>基于 List 的消息队列有哪些优缺点</strong></p><p>优点<br>利用 Redis 存储，不受限于 JVM 内存上限<br>基于 Redis 的持久化机制，数据安全性有保证<br>可以满足消息有序性</p><p>缺点<br>无法避免消息丢失<br>只支持单消费者</p><h4 id="5-7-2-基于Publish实现"><a href="#5-7-2-基于Publish实现" class="headerlink" title="5.7.2 基于Publish实现"></a>5.7.2 基于Publish实现</h4><p>PubSub（发布订阅） 是 Redis 2.0 版本引入的消息传递模型。</p><p>顾名思义，消费者可以订阅一个或多个channel，生产者向对应 channel 发送消息后，所有订阅者都能收到相关消息。</p><p>SUBSCRIBE channel [channel] ：订阅一个或多个频道<br>PUBLISH channel msg ：向一个频道发送消息<br>PSUBSCRIBE pattern[pattern] ：订阅与 pattern 格式匹配的所有频道<br>pattern – 通配符方式<br>?：匹配一个字符<br>*：匹配多个字符<br>ae：匹配括号内存在的字符</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713627730106.png" alt="publish实现"></p><p><strong>基于 PubSub 的消息队列有哪些优缺点</strong></p><p>优点：采用发布订阅模型，支持多生产、多消费<br>缺点：<br>不支持数据持久化<br>无法避免消息丢失<br>消息堆积有上限，超出时数据丢失</p><h4 id="5-7-3-基于Stream实现"><a href="#5-7-3-基于Stream实现" class="headerlink" title="5.7.3 基于Stream实现"></a>5.7.3 基于Stream实现</h4><h5 id="5-7-3-1-单消费模式"><a href="#5-7-3-1-单消费模式" class="headerlink" title="5.7.3.1 单消费模式"></a>5.7.3.1 单消费模式</h5><p><strong>创建命令</strong></p><pre class="line-numbers language-none"><code class="language-none">XADD key [NOMKSTREAM] [MAXLEN|MINID [=|~] threshold [LIMIT count]] *|ID field value [field value …]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>key：队列名称</p><p>[NOMKSTREAM]：如果队列不存在时，确定是否自动创建队列，默认自动创建</p><p>[MAXLEN|MINID [=|~] threshold [LIMIT count]]：设置消息队列的最大消息数量</p><p>|ID：消息的唯一 ID， 代表由 Redis 自动生成，格式是 ”时间戳-递增数字“，例如：”1666161469358-0“</p><p>field value [field value …]：发送到队列中的消息，称为 Entry。格式为多个 Key-Value 键值对。</p><p>例如：创建名为 users 的队列，并向其中发送一个消息，内容是：{name=jack,age=21}，并且使用 Redis 自动生成 ID</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; XADD users * name jack age 21 “1644805700523-0”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713627832760.png" alt="命令参数"></p><p><strong>读取命令</strong></p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713627895106.png" alt="读取命令"></p><p>读取消息的方式之一：XREAD</p><p>[COUNT count]：每次读取消息的最大数量；</p><p>[BLOCK milliseconds]：当没有消息时，确定是否阻塞，阻塞则添加具体的 milliseconds （阻塞时长）</p><p>STREAMS key [key …]：从哪个队列读取消息，Key 就是队列名；</p><p>ID [ID …]：起始 ID，只返回大于该 ID 的消息；0 代表从第一个消息开始，$ 代表从最新的消息开始。</p><p>例如，使用 XREAD 读取第一个消息</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; XREAD COUNT 1 STREAMS users 01) 1) "queue"   2) 1) 1) "1666169070359-0"         2) 1) "name"            2) "jack"            3) "age"            4) 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XREAD 阻塞方式，读取最新的消息</p><pre class="line-numbers language-none"><code class="language-none">XREAD COUNT 1 BLOCK STREAMS queue $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：<br>当我们指定起始 ID 为 $ 时，代表读取最新的消息<br>如果我们处理一条消息的过程中，又有超过 1 条以上的消息到达队列，则下次获取时也只能获取到最新的一条<br>如此便会出现漏读消息的问题</p><p>STREAM 类型消息队列的 XREAD 命令特点：</p><p>1.消息可回溯（消息永久的保存在消息队列中）<br>2.一个消息可以被多个消费者读取<br>3.可以阻塞读取<br>4.有消息漏读的风险（缺点）</p><h5 id="5-7-3-2-消费者组模式"><a href="#5-7-3-2-消费者组模式" class="headerlink" title="5.7.3.2 消费者组模式"></a>5.7.3.2 消费者组模式</h5><p>消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列。</p><p>其具备下列特点：</p><p>消息分流：队列中的 消息会分流给组内不同的消费者，而不是重复消费，从而加快消息处理的速度。</p><p>消息标示：消费者组会维护一个标示，记录最后一个被处理的消息，即使消费者宕机重启，还会从标示之后读取消息，确保每一个消息都会被消费。（解决漏读问题）</p><p>消息确认：消费者获取消息后，消息处于 pending 状态，并存入一个 pending-list。</p><p>当处理完成后需要通过 XACK 命令来确认消息，标记消息为已处理，才会从 pending-list 中移除。（解决消息丢失问题)</p><p>创建消费者组</p><pre class="line-numbers language-none"><code class="language-none">XGROUP CREATE key groupName ID [MKSTREAM]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>key：队列名称</p><p>groupName：消费者组名称</p><p>ID：起始 ID 标示，$ 代表队列中最后一个消息，0 则代表队列中第一个消息</p><p>MKSTREAM：队列不存在时自动创建队列</p><p><strong>删除指定的消费者组</strong></p><pre class="line-numbers language-none"><code class="language-none">XGROUP DESTORY key groupName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>给指定的消费者组添加消费者</strong></p><pre class="line-numbers language-none"><code class="language-none">XGROUP CREATECONSUMER key groupname consumername<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>删除消费者组中的指定消费者</strong></p><pre class="line-numbers language-none"><code class="language-none">XGROUP DELCONSUMER key groupname consumername<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>从消费者组读取消息</strong></p><pre class="line-numbers language-none"><code class="language-none">XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key …] ID [ID …]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>group：消费组名称</p><p>consumer：消费者名称，如果消费者不存在，会自动创建一个消费者</p><p>count：本次查询的最大数量</p><p>BLOCK milliseconds：当没有消息时最长等待时间</p><p>NOACK：无需手动 ACK，获取到消息后自动确认</p><p>STREAMS key：指定队列名称</p><p>ID：获取消息的起始 ID</p><p>“&gt;”：从下一个未消费的消息开始</p><p>其它：根据指定 id 从 pending-list 中获取已消费但未确认的消息。</p><p>例如 0，是从 pending-list 中的第一个消息开始</p><p><strong>STREAM 类型消息队列的 XREADGROUP 命令特点</strong></p><p>消息可回溯<br>可以多消费者争抢消息，加快消费速度<br>可以阻塞读取<br>没有消息漏读的风险<br>有消息确认机制，保证消息至少被消费一次</p><h4 id="5-7-4-三种消息队列的对比"><a href="#5-7-4-三种消息队列的对比" class="headerlink" title="5.7.4 三种消息队列的对比"></a>5.7.4 三种消息队列的对比</h4><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713628199993.png" alt="三种消息队列的对比"></p><h3 id="5-8-通过Stream消息队列解决延迟队列持久化问题"><a href="#5-8-通过Stream消息队列解决延迟队列持久化问题" class="headerlink" title="5.8 通过Stream消息队列解决延迟队列持久化问题"></a>5.8 通过Stream消息队列解决延迟队列持久化问题</h3><blockquote><p>需求：</p><p>①创建一个 Stream 类型的消息队列，名为 stream.orders</p><p>②修改之前的秒杀下单 Lua 脚本，在认定有抢购资格后，直接向 stream.orders 中添加消息，内容包含 voucherId、userId、orderId</p><p>③项目启动时，开启一个线程任务，尝试获取 stream.orders 中的消息，完成下单</p></blockquote><p>redis客户端命令行执行如下命令，创建消息队列以及消费者组</p><p>ps：MKSTREAM 在消息队列不存在时自动创建</p><pre class="line-numbers language-none"><code class="language-none">XGROUP CREATE stream.orders g1 0 MKSTREAM<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Lua脚本调整</strong></p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 1.参数列表</span><span class="token comment">-- 1.1.优惠券 id</span><span class="token keyword">local</span> voucherId <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">-- 1.2.用户 id</span><span class="token keyword">local</span> userId <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">-- 1.3.订单 id</span><span class="token keyword">local</span> orderId <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">-- 2.数据 key</span><span class="token comment">-- 2.1.库存 key</span><span class="token keyword">local</span> stockKey <span class="token operator">=</span> <span class="token string">'seckill:stock:'</span> <span class="token operator">..</span> voucherId<span class="token comment">-- 2.2.订单 key</span><span class="token keyword">local</span> orderKey <span class="token operator">=</span> <span class="token string">'seckill:order:'</span> <span class="token operator">..</span> voucherId<span class="token keyword">local</span> stockKey_value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> stockKey<span class="token punctuation">)</span><span class="token comment">-- 3.脚本业务</span><span class="token comment">-- 3.1.判断库存是否充足 get stockKey</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tonumber</span><span class="token punctuation">(</span>stockKey_value<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token comment">-- 3.2.库存不足，返回 1</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">end</span><span class="token comment">-- 3.2.判断用户是否下单 SISMEMBER orderKey userId</span><span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'sismember'</span><span class="token punctuation">,</span> orderKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token comment">-- 3.3.存在，则说明该用户是重复下单（这是不允许的），则返回 2</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token keyword">end</span><span class="token comment">-- 3.4.扣库存 incrby stockKey -1</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'incrby'</span><span class="token punctuation">,</span> stockKey<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">-- 3.5.下单（保存用户） sadd orderKey userId</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'sadd'</span><span class="token punctuation">,</span> orderKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token comment">-- 3.6.发送消息到队列中：XADD stream.orders * k1 v1 k2 v2 ...</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'xadd'</span><span class="token punctuation">,</span> <span class="token string">'stream.orders'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'userId'</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> <span class="token string">'voucherId'</span><span class="token punctuation">,</span> voucherId<span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-点赞业务"><a href="#6-点赞业务" class="headerlink" title="6. 点赞业务"></a>6. 点赞业务</h2><blockquote><p>业务中需要达到排行榜的功能，先点赞的五名同学要显示在前面，因此可以选择使用Sorted Set数据结构，value的值存储点赞的userId，而score的值可以存储点赞的时间戳。</p></blockquote><p>在Mysql in语句中有一个小坑，例如 SELECT * FROM USER WHERE ID IN (5, 1)；</p><p>查询结果会是1在前，5在后，如果要强制将5在前1在后，可以使用<code>order by field</code> 语句，示例如下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> ID <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> FIELD<span class="token punctuation">(</span>ID<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>代码逻辑如下</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 根据博客id查询点赞排行榜 * @param id * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">queryBlogLikes</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> BLOG_LIKED_KEY <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token comment">//1.查询top5的点赞用户 zrange key 0 4</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> top5 <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>top5 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> top5<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//2.解析除其中的用户id</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> top5<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> idStr <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.根据用户id查询用户  将user处理为userDTO对象    where id (5 , 1)   order by field(id, 5, 1)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> userDTOS <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"order by field(id,"</span> <span class="token operator">+</span> idStr <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token class-name">UserDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.返回</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>userDTOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-好友关注业务"><a href="#7-好友关注业务" class="headerlink" title="7. 好友关注业务"></a>7. 好友关注业务</h2><h3 id="7-1-关注与取关"><a href="#7-1-关注与取关" class="headerlink" title="7.1 关注与取关"></a>7.1 关注与取关</h3><p><strong>业务逻辑：</strong></p><blockquote><p>①关注用户功能的实现，根据前端传递的isFollow的值判断，用户是否已关注该博主，若未关注，传过来的是true，则有关注资格，new出follow对象，将userId和userFollowId都set到follow对象里，再将follow对象save到数据库表中</p><p>②查看博客详情页的另一个请求，判断用户是否关注了博主，根据ThreadLocal中获取的userId和传递过来的userFollowId查询count是否大于0，结果返回true或false</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token comment">//关注取关功能</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">follow</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userFollowId<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isFollow<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFollow<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Follow</span> follow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Follow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        follow<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        follow<span class="token punctuation">.</span><span class="token function">setFollowUserId</span><span class="token punctuation">(</span>userFollowId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">save</span><span class="token punctuation">(</span>follow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//取关，删除  delete from tb_follow where user_id = ? and follow_user_id = ?</span>        <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Follow</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"follow_user_id"</span><span class="token punctuation">,</span> userFollowId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span>  <span class="token comment">//用户是否关注了博主</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">isFolow</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userFollowId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//查询是否关注  select count(*) from tb_follow where user_id = ? and follow_user_id = ?</span>    <span class="token class-name">Integer</span> count <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"follow_user_id"</span><span class="token punctuation">,</span> userFollowId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-共同关注"><a href="#7-2-共同关注" class="headerlink" title="7.2 共同关注"></a>7.2 共同关注</h3><p><strong>业务逻辑：</strong></p><blockquote><p>①关注与取关操作同步存储在redis的set数据结构中</p><p>②通过指令，<code>SINTER</code> 获取两个set的交集部分</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">SINTER key [key ...]-- 举例key1 = {a,b,c,d}key2 = {c}key3 = {a,c,e}SINTER key1 key2 key3 = {c}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">followCommons</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> key1 <span class="token operator">=</span> FOLLOW_USER_ID <span class="token operator">+</span> userId<span class="token punctuation">;</span>  <span class="token comment">//当前登录用户的关注列表集合</span>    <span class="token class-name">String</span> key2 <span class="token operator">=</span> FOLLOW_USER_ID <span class="token operator">+</span> id<span class="token punctuation">;</span>  <span class="token comment">//点击查看的用户的关注列表集合</span>    <span class="token comment">//求交集</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> intersect <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intersect</span><span class="token punctuation">(</span>key1<span class="token punctuation">,</span> key2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>intersect <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> intersect<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//无交集</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//解析id集合</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> intersect<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//批量查询用户并转换为userDTO对象</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> userDTOList <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">listByIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span>                    <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token class-name">UserDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>userDTOList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-关注推送（Feed）"><a href="#7-3-关注推送（Feed）" class="headerlink" title="7.3 关注推送（Feed）"></a>7.3 关注推送（Feed）</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713685487863.png" alt="Feed流模式"></p><blockquote><p>Feed 流产品有两种常见模式：</p><p>Timeline：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。</p><p>例如朋友圈</p><p>优点：信息全面，不会有缺失。并且实现也相对简单<br>缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低</p><p>智能排序：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户</p><p>例如抖音，快手</p><p>优点：投喂用户感兴趣信息，用户粘度很高，容易沉迷<br>缺点：如果算法不精准，可能起到反作用</p><p><strong>本例中的个人页面，是基于关注的好友来做 Feed 流，因此采用 Timeline 的模式。</strong></p></blockquote><h4 id="7-3-1-拉取模式（读扩散）"><a href="#7-3-1-拉取模式（读扩散）" class="headerlink" title="7.3.1 拉取模式（读扩散）"></a>7.3.1 拉取模式（读扩散）</h4><p>每次读的时候获取消息，内存消耗小，但读操作过于频繁，若用户关注了许多博主，一次要读的消息也是十分多，造成延迟较高</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/a492bd69a0c344edac54f38856c53f13.png" alt="拉取模式"></p><h4 id="7-3-2-推送模式（写扩散）"><a href="#7-3-2-推送模式（写扩散）" class="headerlink" title="7.3.2 推送模式（写扩散）"></a>7.3.2 推送模式（写扩散）</h4><p>发消息时写入粉丝收件箱，内存占用更高，写操作频繁，若博主有许多粉丝，写操作更加繁重</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713685593398.png" alt="写扩散"></p><h4 id="7-3-3-推拉结合模式（读写混合）"><a href="#7-3-3-推拉结合模式（读写混合）" class="headerlink" title="7.3.3 推拉结合模式（读写混合）"></a>7.3.3 推拉结合模式（读写混合）</h4><p>普通博主，粉丝少，可以采用推模式，写操作并不是很繁重</p><p>大v博主，粉丝多；分两种粉丝，活跃粉，普通粉；活跃粉，数量少，可以采用推模式；</p><p>​                                            普通粉，数量多，但上线查看少，采用拉模式，什么时候看什么时候拉取。</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/84049ddd45a94dddbde89fddeda0d2ba.png" alt="推拉结合"></p><h4 id="7-3-4-三种模式对比"><a href="#7-3-4-三种模式对比" class="headerlink" title="7.3.4 三种模式对比"></a>7.3.4 三种模式对比</h4><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/d6cc0c5ded2e4e5093aa6ea69e94bed0.png" alt="推、拉、推拉结合"></p><h4 id="7-3-5-Feed模式下的分页查询"><a href="#7-3-5-Feed模式下的分页查询" class="headerlink" title="7.3.5 Feed模式下的分页查询"></a>7.3.5 Feed模式下的分页查询</h4><blockquote><p>由于feed模式下，数据会实时进行新增，如果按照传统分页，会查询到重复的数据</p></blockquote><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/f3f8948f9ba34c9d960e4de50eaf92b8.png" alt="feed分页"></p><p><strong>滚动分页模式</strong></p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/9d8c420c31c8466d86ac410f48d5cbc8.png" alt="滚动分页模式"></p><blockquote><p>在redis中对收件箱内的博客进行分页时，常用的是ZRANGE命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ZRANGE key start stop [BYSCORE | BYLEX] [REV] [LIMIT offset count]   [WITHSCORES]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是很明显，如果新增了元素，会导致角标混乱问题，就会查询出重复的数据。</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713689260747.png" alt="普通分页出现了重复数据"></p></blockquote><p><strong>滚动分页</strong></p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713689404930.png" alt="现有元素"></p><p>通过zrevrangebysocre完成滚动排序</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">参数含义：max：分数最大值min：分数最小值WITHSCORES: 是否显示分数offset: 偏移量（匹配后跳过元素数量）count：显示条数ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>按照三条来分页，只查询分数最高的三条</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713689787807.png" alt="前三条"></p></li><li><p>新增两条元素</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713689819024.png" alt="新增两条元素"></p></li><li><p>滚动分页</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713689998743.png" alt="滚动分页"></p></li></ol><blockquote><p>整体思路如下：</p><ol><li><p>第一次查询，不设置最大值，最小值为0，不设置偏移量，查询3条记录分别为</p><p>7/6/5</p></li><li><p>新增两条元素8/9，如果按照传统分页，这次应该查询角标为4 和 5的数据，即5,4,3存在数据重复问题，因此采用滚动分页</p></li><li><p>第二次查询，设置最大值（因为是倒序排序，所以上次查询的最小值，就是这次查询的最大值），不设置最小值，偏移量设置为1,（因为最大值是上次查询的最小值，<strong>已查询过，因此需要跳过最大值</strong>，还是同样的查询三条记录</p></li></ol><p>需要注意一点：<strong>offset的值不是固定为1，而是上一次查询的最小值的元素个数</strong></p></blockquote><p><strong>代码逻辑</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 滚动查询，展示博主推送的笔记， 新发布的滚动查询查不到，但是往上滚，前端做了处理，就是刷新重新查询，开始位置在当前最新位置 * @param max * @param offset * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">queryBlogOfFollow</span><span class="token punctuation">(</span><span class="token class-name">Long</span> max<span class="token punctuation">,</span> <span class="token class-name">Integer</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//获取当前用户</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//查询收件箱 ZREVRANGEBYSCORE key Max Min LIMIT offset count    limit是小于等于的意思，小于等于查询的最后时间戳</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"feed:"</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ZSetOperations<span class="token punctuation">.</span>TypedTuple</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> typedTuples <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">reverseRangeByScoreWithScores</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//非空判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>typedTuples <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> typedTuples<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//解析数据： blogId，minTime（时间戳）， offset</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>typedTuples<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> minTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//这个minTime是上次查询的最小时间戳，作为当次查询的最大时间戳来开始查</span>    <span class="token keyword">int</span> os <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ZSetOperations<span class="token punctuation">.</span>TypedTuple</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> typedTuple <span class="token operator">:</span> typedTuples<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取博客id转换为Long型并存入ids数组中</span>        ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>typedTuple<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取分数      判读得到最后一次的时间戳，以及偏移量</span>        <span class="token keyword">long</span> time <span class="token operator">=</span> typedTuple<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">==</span> minTime<span class="token punctuation">)</span><span class="token punctuation">{</span>            os<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            minTime <span class="token operator">=</span> time<span class="token punctuation">;</span>            os <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//根据id查询blog，先把前面保存id的ids数组转为字符串</span>    <span class="token class-name">String</span> idStr <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//由于用mp提供的listByIds是用in方法查，不能保证顺序</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">&gt;</span></span> blogs <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"order by field(id,"</span> <span class="token operator">+</span> idStr <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Blog</span> blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//查询blog有关用户信息</span>        <span class="token function">queryBlogUser</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//查询blog是否已被点赞</span>        <span class="token function">isBlogLinked</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//封装并返回</span>    <span class="token class-name">ScrollResult</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScrollResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>blogs<span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">setOffset</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">setMinTime</span><span class="token punctuation">(</span>minTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-附近商户业务"><a href="#8-附近商户业务" class="headerlink" title="8. 附近商户业务"></a>8. 附近商户业务</h2><h3 id="8-1-Geo"><a href="#8-1-Geo" class="headerlink" title="8.1 Geo"></a>8.1 Geo</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/23985f4ad39142e4a27345f58bdc0624.png" alt="GEO基本使用"></p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713692228374.png" alt="半径内北京站距离"></p><h3 id="8-2-商户距离"><a href="#8-2-商户距离" class="headerlink" title="8.2 商户距离"></a>8.2 商户距离</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/87e3a309ed1542418d5bbd8f6b26aca7.png" alt="导入商户geo坐标"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">loadShopData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//查询店铺信息</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shop</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> shopService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把店铺分组，按照typeId分组，typeId一致的放到一个集合</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Shop</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Shop</span><span class="token operator">::</span><span class="token function">getTypeId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//分批完成写入Redis</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Shop</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取类型id</span>        <span class="token class-name">Long</span> typeId <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"shop:geo"</span> <span class="token operator">+</span> typeId<span class="token punctuation">;</span>        <span class="token comment">//获取同类型的店铺的集合</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shop</span><span class="token punctuation">&gt;</span></span> value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoLocation</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> locations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//写入redis  GEOADD key 经度 纬度 member</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Shop</span> shop <span class="token operator">:</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//stringRedisTemplate.opsForGeo().add(key, new Point(shop.getX(), shop.getY()), shop.getId().toString());</span>            locations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoLocation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>                    shop<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>shop<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>shop<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-签到业务"><a href="#9-签到业务" class="headerlink" title="9. 签到业务"></a>9. 签到业务</h2><p><strong>bitmap位图</strong></p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713692659065.png" alt="通过位图存储签到信息"></p><p><strong>代码实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//获取登录用户</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取当前日期</span>    <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//拼接key</span>    <span class="token class-name">String</span> format <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">":yyyyMM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"sign:"</span><span class="token operator">+</span> userId <span class="token operator">+</span> format<span class="token punctuation">;</span>    <span class="token comment">//获取今天是本月的第几天</span>    <span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//写入redis select key offset 1</span>    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBit</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dayOfMonth <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true代表 1为签到，0为未签到</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>实现逻辑：</p><ol><li>计算key：key=sign + userId + yyyyMM</li><li>计算当前天代表的bit位（正好每个月31天，一共有31个比特位）</li><li>对应位设置为1，表示已签到</li></ol></blockquote><h3 id="9-1-签到统计"><a href="#9-1-签到统计" class="headerlink" title="9.1 签到统计"></a>9.1 签到统计</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/3df03cb214374c448a9eecca8a96b0b3.png" alt="签到统计"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/** * 统计签到次数 * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">signCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//获取登录用户</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取当前日期</span>    <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//拼接key</span>    <span class="token class-name">String</span> format <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">":yyyyMM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"sign:"</span><span class="token operator">+</span> userId <span class="token operator">+</span> format<span class="token punctuation">;</span>    <span class="token comment">//获取今天是本月的第几天</span>    <span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取本月截至今天为止的所有签到记录，返回的是一个十进制的数字 BITFIELD sign：5：202203 GET u14 0</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bitField</span><span class="token punctuation">(</span>            key<span class="token punctuation">,</span>            <span class="token class-name">BitFieldSubCommands</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">BitFieldSubCommands<span class="token punctuation">.</span>BitFieldType</span><span class="token punctuation">.</span><span class="token function">unsigned</span><span class="token punctuation">(</span>dayOfMonth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//没有任何签到结果</span>        <span class="token keyword">return</span>  <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Long</span> num <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//循环遍历</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//让这个数字与1做与运算，得到数字的最后一个bit位   //判读这个bit位是否为0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//如果为0，说明未签到，结束</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//如果不为0，说明已签到，计数器加1</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//把数字右移一位，抛弃最后一个bit位，继续下一个bit位</span>        num <span class="token operator">&gt;&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-连续签到天数算法"><a href="#9-3-连续签到天数算法" class="headerlink" title="9.3 连续签到天数算法"></a>9.3 连续签到天数算法</h3><blockquote><p>计算当前一个月内，连续签到的最大天数</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongestContinuousSignIn</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">longestContinuousSignIn</span><span class="token punctuation">(</span><span class="token keyword">long</span> bitmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxContinuous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> currentContinuous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>bitmap <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bitmap <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                currentContinuous<span class="token operator">++</span><span class="token punctuation">;</span>                maxContinuous <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxContinuous<span class="token punctuation">,</span> currentContinuous<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                currentContinuous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bitmap <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 右移一位</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxContinuous<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 示例的位图，假设1表示签到，0表示未签到</span>        <span class="token keyword">long</span> bitmap <span class="token operator">=</span> <span class="token number">0b1110000111000001110000000111111L</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxContinuousSignIn <span class="token operator">=</span> <span class="token function">longestContinuousSignIn</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最长连续签到天数: "</span> <span class="token operator">+</span> maxContinuousSignIn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-UV统计"><a href="#10-UV统计" class="headerlink" title="10. UV统计"></a>10. UV统计</h2><p>Redis的HyperLogLog的统计功能</p><hr><p>UV：全称 Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1 天内同一个用户多次访问该网站，只记录1次。</p><p>PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录 1 次PV，用户多次打开页面，则记录多次PV。</p><p>往往用来衡量网站的流量。</p><hr><p>Hyperloglog（HLL）是从 Loglog 算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。</p><p>相关算法原理大家可以参考：<a href="https://juejin.cn/post/6844903785744056333#heading-0">https://juejin.cn/post/6844903785744056333#heading-0</a></p><p>Redis 中的 HLL 是基于 string 结构实现的，单个 HLL 的内存永远小于 16 kb，内存占用低，但相对的其测量结果是概率性的，有小于 0.81％ 的误差。不过对于 UV 统计的庞大数量来说，这完全可以忽略。</p><p>127.0.0.1:6379&gt; PFADD hl1 e1 e2 e3 e4 e5<br>(integer) 1<br>127.0.0.1:6379&gt; pfcount hl1<br>(integer) 5<br>127.0.0.1:6379&gt; PFADD hl1 e1 e2 e3 e4 e5<br>(integer) 0<br>127.0.0.1:6379&gt; pfcount hl1<br>(integer) 5</p><p><strong>由上可以看出，Hyperloglog天生就适合做UV统计，相同元素只能统计一次</strong></p><p>通过单元测试，向 HyperLogLog 中添加 100 万条数据，看看内存占用和统计效果如何</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        j <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>        values<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"user_"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 发送到 Redis</span>            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hl2"</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//  统计数量</span>    <span class="token class-name">Long</span> count <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token string">"hl2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count = "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：</p><p>HyperLogLog 的作用：做海量数据的统计工作</p><p>HyperLogLog 的优点：内存占用极低、性能非常好</p><p>HyperLogLog 的缺点：有一定的误差</p></blockquote><h2 id="11-Redis锁对比"><a href="#11-Redis锁对比" class="headerlink" title="11. Redis锁对比"></a>11. Redis锁对比</h2><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713609469752.png" alt="锁的对比"></p><p>参考文献：</p><p><a href="https://blog.csdn.net/giveupgivedown/article/details/128723748">黑马点评项目全部功能实现及详细笔记–Redis练手项目-CSDN博客</a></p><p>&nbsp;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2024/04/18/xiang-mu/hei-ma-dian-ping/1713691863632.png&quot; alt=&quot;Redis官网&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://redis.io/docs/latest/commands/&quot;</summary>
      
    
    
    
    <category term="项目" scheme="https://zzyong24.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="https://zzyong24.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>元蜂WMS</title>
    <link href="https://zzyong24.github.io/2024/04/17/xiang-mu/yuan-feng-wms/"/>
    <id>https://zzyong24.github.io/2024/04/17/xiang-mu/yuan-feng-wms/</id>
    <published>2024-04-17T06:33:37.000Z</published>
    <updated>2024-05-14T15:29:11.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="元蜂WMS"><a href="#元蜂WMS" class="headerlink" title="元蜂WMS"></a>元蜂WMS</h1><p>项目原型地址： <a href="https://app.mockplus.cn/p/50CCEEmA7m?%E8%AF%B7%E6%9F%A5%E7%9C%8B%E3%80%8AWMS%E5%90%8E%E5%8F%B0%E3%80%8B">https://app.mockplus.cn/p/50CCEEmA7m?请查看《WMS后台》</a></p><h1 id="仓库-库区-库位"><a href="#仓库-库区-库位" class="headerlink" title="仓库-库区-库位"></a>仓库-库区-库位</h1><p><img src="/2024/04/17/xiang-mu/yuan-feng-wms/1713404964685.png" alt="1713404964685"></p><h1 id="库存盘点"><a href="#库存盘点" class="headerlink" title="库存盘点"></a>库存盘点</h1><p><img src="/2024/04/17/xiang-mu/yuan-feng-wms/u1.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;元蜂WMS&quot;&gt;&lt;a href=&quot;#元蜂WMS&quot; class=&quot;headerlink&quot; title=&quot;元蜂WMS&quot;&gt;&lt;/a&gt;元蜂WMS&lt;/h1&gt;&lt;p&gt;项目原型地址： &lt;a href=&quot;https://app.mockplus.cn/p/50CCEEmA7m?%E8%</summary>
      
    
    
    
    <category term="项目" scheme="https://zzyong24.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="https://zzyong24.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>wms波次策略</title>
    <link href="https://zzyong24.github.io/2024/04/17/ye-wu/gong-ying-lian/wms-bo-ci-ce-lue/"/>
    <id>https://zzyong24.github.io/2024/04/17/ye-wu/gong-ying-lian/wms-bo-ci-ce-lue/</id>
    <published>2024-04-17T02:21:55.000Z</published>
    <updated>2024-05-14T15:29:11.114Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个仓库的运营效率，最核心的部分是出库，如何有序的处理订单，高效的拣货，准确的复核，都是关键的步骤。尤其对于出库订单量比较大的企业，其中的出库的相关策略的设置变得尤为重要。其中波次策略，为效率的提升提供一个切实可行的办法。</p></blockquote><h1 id="什么是波次"><a href="#什么是波次" class="headerlink" title="什么是波次"></a>什么是波次</h1><p>波次是指对仓库集中性管理方法，通常是将多笔订单或者任务集中在一起处理和执行，以提高操作效率和资源利用率，通常在出库时应用最为广泛，也可用于补库、盘点等。</p><p>波次在拣货的场景中很重要，考虑一种极端情况，比如有100笔对A货物的出库需求，传统拣货可能采取摘果法，需要拣货100次，但是使用波次拣货后，可以将这100笔订单合并，形成一笔拣货单，只需要拣货一次，后序再通过播种法将其分发到各个包裹中，能极大的提升仓库拣货人员的作业效率。</p><h1 id="业务系统流程与对应单据"><a href="#业务系统流程与对应单据" class="headerlink" title="业务系统流程与对应单据"></a>业务系统流程与对应单据</h1><p><img src="/2024/04/17/ye-wu/gong-ying-lian/wms-bo-ci-ce-lue/1713322515015.png" alt="1713322515015"></p><h2 id="各业务流程具体规则策略应用场景"><a href="#各业务流程具体规则策略应用场景" class="headerlink" title="各业务流程具体规则策略应用场景"></a>各业务流程具体规则策略应用场景</h2><p><img src="/2024/04/17/ye-wu/gong-ying-lian/wms-bo-ci-ce-lue/1713322560660.png" alt="1713322560660"></p><blockquote><p>入库上架策略：多种上架策略可以单一配置，也可以按照一定优先级进行组合生效。当相关货物到达仓库后，WMS系统首先会判断货物所在仓库，然后基于商品分类，货主信息，然后按顺序执行货物的上架操作，以期最大程度满足业务的作业效率或者业务目标（比如库位利用率管控，库内作业时间最短）</p></blockquote><p>具体常见配置规则如下：</p><ol><li><strong>ABC原则</strong>：基于帕累托分析方法，可以按照销量金额或销售数量等特征，将商品进行品类划分为A（下单数量或金额多、流动快），C类（流通慢，价值低廉），B类介于两者中间。假设货架总共六层，基于人体工学特征，将货架定义为A区（取货容易），一般对应货架的3-4层；B区（取货比较容易），一般对应货架的2-5层；C区（取货比较困难），一般对应货架的1-6层。基于货架的分层取货特征，可以对应将ABC品类放置在对应的ABC区层位上。</li><li><strong>最短路径原则</strong>：假设系统内已经维护各个货位对应的通道，货架和XY坐标数据，可以计算得到上架到对应库位，预计需要的行走路径。一般结合商品库存周转率使用，库存周转率高的SKU，上架时，优先分配靠近进出口的货位；而库存周转率较低的SKU，上架时优先分配远离进出口的货位。</li><li><strong>产品属性原则</strong>（重量、体积、正常品、残损品等不同维度）：结合产品维护的档案信息，比如重物（单件重量超过一定数值），优先分配至容易搬运区域；泡货（体积大，重量小）可以选择分配至高位货架区域等，入库时正常品和残次品可以分配至对应不同的货区，用以做好仓库现场的质量把控。</li><li><strong>产品相对集中原则</strong>：属于同一种品类的产品，在仓库上架环节，优先分配至同一固定区域的对应货位，比如电子产品区、生鲜区、日用品区，用以针对不同的商品品类做好分区管理。</li><li><strong>包装规则</strong>：根据货物的包装形态（托盘，箱，散件）进行区分，将相同包装形态的商品，尽量放在相邻货位。</li><li><strong>订单类型规则</strong>（采购入库 调拨入库 生产入库 退货入库）：基于不同的入库订单类型，将商品上架到不同的库区，比如销退商品，由于质量状态待判定，一般不会直接存入存储区或者拣货区；调拨商品一般为整托商品，常常直接存入存储区，用以补货拆零出库时使用。一般订单类型规则，需要和其他上架策略规则组合使用，基于优先级控制生效顺序。</li><li><strong>库存合并规则</strong>：将相同供应商、相同产品、相同批次优先存储在同一货位或邻近货位。假设仓内允许商品一品多位，或一位多品，产品进入仓库后，优先检查固定仓位存储类型中的固定货位（或者历史已存入库存的货位）是否可用，若该库位已被占用或放满时，优先将产品存储到靠近分配到该产品的固定货位的预留存储区域（如靠近固定仓位的空仓）。</li></ol><p>综上，上架策略在配置环节，可以限定生效的货主、订单类型（采购订单、调拨订单、退货订单、库内订单等）、商品形态（良品、不良品）、指定区域。如果需要多种上架策略组合生效，也可以针对对应的上架策略设置对应的优先级。</p><blockquote><p>波次策略：订单进入WMS系统后，审单通过后，系统对订单进行数据结构分析，将订单按照一定的优先原则汇总分类，批量下发。</p><p>波次管理的目的主要是为了进行集约化拣货，而集约化拣货主要有以下两个主要优势：1） 提高拣货效率，减少拣货行走路线；2） 归类拣货，如相同客户的订单归类、相同出货方向的进行归类，降低拣货后的后续的理货二次分拣工作。</p></blockquote><p>具体常见配置规则如下：</p><ol><li><strong>定时规则</strong>：按照一个固定的时间周期（比如下单时间、期望到货时间等）将订单进行合并。</li><li><strong>路线规则</strong>：按照收货人所在的路线进行订单合并（对于同一条送货路线（或同一个收货地区）的货物，安排在一个波次分拣，且合并生成集货任务时也进行集货点的集中摆放，便于简化交接装车工作，缩短装车时间）。</li><li><strong>订单数量规则</strong>：每个波次合并的订单总量控制（比如，系统中下发100张订单，波次限制每次只能合并下发50张，此时至少会生成两个波次）。</li><li><strong>订单行数规则</strong>：每个波次合并的订单行总量控制。</li><li><strong>产品数量规则</strong>：每个波次合并的产品总量控制。</li><li><strong>产品重合率分析规则</strong>：在筛选订单时，按照产品在各个订单中出现的频次优化选择，以提高合并拣货的效率。</li><li><strong>包装筛选规则</strong>：波次筛选订单时，需要考虑包装的类型(件/箱/托盘）。</li></ol><p>基于上述规则的组合生效，波次策略可以在下述方面协助业务提升作业效率：缩短拣货路径，减少重复行走，作业面积减少，订单SKU集中度提高。</p><blockquote><p>分配策略：WMS系统可以将仓内的物理库区，划分为一个或多个不同的逻辑拣货作业区，也可以将多个物理库区合并为一个逻辑拣货作业区。此时在分配库存下发时，可以针对货主或者订单类型等条件，限制对应单据的库存分配指定逻辑库位类型（存储库位、缓存库位、拣货库位、差异库位等）、指定逻辑拣货区域，指定逻辑库位等。有的特殊场景下，允许通过分配规则设定是否允许订单部分分配的清空下，进行下发。</p></blockquote><p>具体常见配置规则如下：</p><ol><li><strong>指定逻辑库位类型</strong>：限制仅能获取存储库位、缓存库位、拣货库位、或差异库位等类型的库位上，获取可用库存。</li><li><strong>指定逻辑拣货区域</strong>：限制仅能在系统划定的对应逻辑拣货区域进行库存分配。</li><li><strong>指定逻辑库位</strong>：仅能在指定库位进行库存分配占用。</li></ol><p>综上，分配规则直接定义了拣货作业人员的作业范围（拣货库位、存储库位等），最终的拣货动线合理性将极大程度依赖于分配规则的设置逻辑。</p><blockquote><p>库存周转策略：通过系统分配库存的逻辑，实现对库内商品的库龄、库内库位的流通使用等具体业务指标的优化控制。</p></blockquote><p>具体常见配置规则如下：</p><ol><li><strong>先进先出</strong>：可以设定某个商品，在本仓库进出时必须遵循先进先出策略，这样每次出库，系统需要自动检查商品在库的批次，指定最先入库的批次作为本次出库的批次，并将对应的库位写入对应的出库任务中。</li><li><strong>先到期先出货</strong>：上架时必须采集对应商品的生效时间信息，优先指定生效结束时间靠前的产品出库。</li><li><strong>指定批次出货</strong>：指定某个或多个批次分配库存出库。</li><li><strong>库位利用率优先</strong>：优先清空货位上库存少的货位，再寻找库存多的货位。</li></ol><blockquote><p>拣货策略：波次下发后，拣货策略直接定义拣货单中商品的数量和拣货顺序，拣货数量，拣货方式等。直接影响拣货作业人员的拣货动线效率以及拣货时效等业务指标。相对复杂的应用场景下，还可以约定拣货动线（库位升序/降序）、约定分播方式（先拣后分、边拣变分等）、分区拣货、整散分离、路线分离（按收货路线）分离、下单平台分离、配送方式分离（快递、自营快递、上门自提等拆分）。</p><p>举例：系统中，一定时间段内流入20个客户的100张订单，满足一定的条件创建了波次后，分配库存成功后，需要基于拣货规则生成对应的拣货单据。若基于订单视角拆分时系统直接生成100张拣货单，若基于同客户订单混拣时，此时将按收货人（客户）拆分生成20张拣货单。</p></blockquote><p>具体常见配置规则如下：</p><ol><li><strong>定义拣货动线</strong>（库位升序/降序）：设定拣货动线后，拣货人员按照动线规则执行拣货。</li><li><strong>定义分播方式</strong>（先拣后分、边拣变分等）：一般订单中的商品重合度较高时，一般采用先拣后分方案，若订单中的商品种类多且重合度较低，若先拣后分，会造成二次分拣环节工作量爬升，此时一般采用边拣边分方案，将不同订单的商品放在移动笼车中的不同容器内。</li><li><strong>定义拣货单中包含的订单数量、商品数量、商品体积、重量上限</strong>等：相对好理解，不予以赘述。</li><li><strong>包装整散分离规则</strong>：整/零分开，非标准包装规则，需要前置维护商品档案中的包装数据，上架时标记本次入库的商品的包装形态，在生成拣货任务时，整托或者整箱可以优先派单给拥有叉车的作业人员，整件则分配给无作业工具的拣货人员。</li><li><strong>分区拣货（基于拣货库区围栏进行划分）</strong>：一般来说，拣货作业人员的作业范围并不是越大越好，拣货区域过大需要了解熟悉的商品特性越多，且行走路径过长也会拉长拣货时效，所以衍生了分区拣货设定规则，需要系统中前置将逻辑库位维护上对应的逻辑拣货区域（不一定和物理库区对应），控制作业范围和管控的产品范围。</li><li><strong>路线分离（按收货路线）</strong>：同一个收货路线上的订单，合并成一个拣货单，便于装车交接时，降低二次分拣的作业难度和处理时效。</li><li><strong>下单平台分离</strong>：相对好理解，不予以赘述。</li><li><strong>配送方式分离</strong>（快递、自营快递、上门自提等拆分）：不同配送方式的订单，拆分成不同的拣货单，对应分配到不同的集货点，便于后续控制发车时的交接难度。</li></ol><p>在上述几种常见的业务策略和规则的共同生效下，一般可以覆盖大部分电商行业的出入库的场景。</p><p>不过对于简易的WMS系统，在前期可以先按照一定写死的规则进行运转，然后在和业务磨合过程中，抓取其对不同作业环节的多策略的真实痛点诉求，没必要在前期0-1环节就全部拟定好，业务策略是锦上添花类型的系统功能，可徐徐图之。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一个仓库的运营效率，最核心的部分是出库，如何有序的处理订单，高效的拣货，准确的复核，都是关键的步骤。尤其对于出库订单量比较大的企业，其中的出库的相关策略的设置变得尤为重要。其中波次策略，为效率的提升提供一个切实可行的办法。&lt;/p&gt;
&lt;/blockq</summary>
      
    
    
    
    <category term="WMS" scheme="https://zzyong24.github.io/categories/WMS/"/>
    
    
    <category term="WMS" scheme="https://zzyong24.github.io/tags/WMS/"/>
    
  </entry>
  
  <entry>
    <title>债务与一体化系统融合</title>
    <link href="https://zzyong24.github.io/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/"/>
    <id>https://zzyong24.github.io/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/</id>
    <published>2022-12-12T09:21:00.000Z</published>
    <updated>2024-05-14T15:29:11.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="债务与一体化系统融合"><a href="#债务与一体化系统融合" class="headerlink" title="债务与一体化系统融合"></a>债务与一体化系统融合</h1><h2 id="一、债务模块需融合"><a href="#一、债务模块需融合" class="headerlink" title="一、债务模块需融合"></a>一、债务模块需融合</h2><table><thead><tr><th>模块</th><th>内容</th><th>可能需要做的事情</th></tr></thead><tbody><tr><td>基础数据</td><td>融合包括<code>区划</code>、<code>单位</code>以及各种<code>下拉框</code>等信息</td><td><code>数据拉取</code></td></tr><tr><td>限额</td><td>限额<code>接收</code>（财政部）、限额<code>推送</code></td><td><code>数据推送</code></td></tr><tr><td>项目录入</td><td>项目编码生成（<code>拉取</code>）、项目<code>推送</code></td><td><code>数据拉取与推送</code></td></tr><tr><td>债券发行</td><td><code>上报</code>财政部、批复结果<code>接收</code></td><td><code>数据拉取与推送</code></td></tr><tr><td>收支、还本付息</td><td>如非税收入缴款通知推送，缴款通知回单接收、还本付息回单<code>接收</code>等</td><td><code>数据拉取与推送</code></td></tr><tr><td>……</td><td></td><td></td></tr></tbody></table><p>整体上来说，与一体化整合的很大一部分核心在于：</p><p><strong>数据同步，即<code>接收</code>其他一体化厂商的数据以及<code>推送</code>债务系统的数据到一体化</strong></p><blockquote><p>​    接收： 一体化 -&gt; 债务<br>​    推送：债务 -&gt; 一体化</p></blockquote><h2 id="二、数据交互现存模式"><a href="#二、数据交互现存模式" class="headerlink" title="二、数据交互现存模式"></a>二、数据交互现存模式</h2><ol><li><p>功能页面：如项目数据推送功能，通过点击<code>推送按钮</code>后，将数据进行推送。</p></li><li><p>数据同步组件：</p><p>平台组件数据同步配置，通过平台提供的<code>数据同步</code>组件，可以配置简单数据结构的<code>数据拉取入库</code>功能。</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669620920934.png" alt="简单数据入库"></p><blockquote><p>​    特点：适用于简单<code>表对表</code>的入库情况，数据行是<code>一对一</code>的。</p></blockquote></li><li><p>定时任务<code>手动入库</code>，适用于平台基础数据入库无法解决情况，可能需要代码对数据进行解析，并入库。</p><blockquote><p>​    例如项目绩效指标：一体化接口响应为树状结构，且字段名对应不上。需要代码将树状结构进行展开并调整字段名。<code>PerfTemplatePullServiceImpl</code></p></blockquote></li></ol><h2 id="三、个性化兼容"><a href="#三、个性化兼容" class="headerlink" title="三、个性化兼容"></a>三、个性化兼容</h2><p>债务标准版实现了一整套数据交互的标准方案，为了解决各地复杂多变的数据交互模式，债务模块采用以下方式实现个性化兼容：</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669623611797.png" alt="个性化兼容"></p><p>整体原则是：<strong>隔离变化与不变，封装变化</strong></p><blockquote><p>​    以推送为例：无论是前台功能推送，还是定时任务推送；不变点在于<code>数据推送</code>，变化点在于<code>数据推送的内容、数据推送的数据结构等</code>。</p><p>​    因此，整体而言目前存在两种途径去封装变化点：</p><ol><li>通过数据库视图封装（工作量最小）</li><li>通过个性化接口封装（工作量较大）</li></ol></blockquote><h3 id="3-1-视图封装变化点"><a href="#3-1-视图封装变化点" class="headerlink" title="3.1 视图封装变化点"></a>3.1 视图封装变化点</h3><p>某些数据推送场景中，如项目推送：</p><p>对于项目基本信息陕西省推送数据字段均为小写，而湖北省推送数据字段均为大写。并且陕西湖北存在部分字段差异。对于这种细微的差异，可以通过视图来封装变化点。</p><p>​    <code>视图封装变化点场景中：和代码强耦合的应该是不变的内容，通过不变的外部视图**GD_V_PRO_PUSH**封装内部视图来处理变化</code></p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669632503708.png" alt="外层视图"></p><pre class="line-numbers language-none"><code class="language-none"># 外部视图内部实际可能是create view GD_V_PRO_PUSH asSELECT * FROM GD_V_PRO_PUSH_AD42;# 也可能是create view GD_V_PRO_PUSH asSELECT * FROM GD_V_PRO_PUSH_AD61;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>处理查询条件</strong></p><p>在某些情况，可能与代码强耦合的外部视图需要加上查询条件，如上图<code>PRO_ID</code>。但是这个字段在不同的内部视图可能不是一致的：如42<code>PRO_CODE</code> 61<code>pro_code</code>。尽管仅仅只是大小写的区分，但是在代码中也可能报错。</p><p>​    因此选择采用<code>冗余查询字段</code>来处理这种情况。即：<code>在所有个性化内部视图中，均冗余**查询条件字段**</code>。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 举例说明，61均为小写字段的内部视图可能为</span><span class="token keyword">select</span> PRO_ID <span class="token keyword">as</span> C_PRO_ID<span class="token punctuation">,</span>   PRO_ID <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">`</span>pro_id<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-接口封装变化点"><a href="#3-2-接口封装变化点" class="headerlink" title="3.2 接口封装变化点"></a>3.2 接口封装变化点</h3><p>对于数据结构有较大差异无法通过视图封装实现的场景，可以通过个性化接口来封装这种变化。</p><p>可见个性化接口配置文件：<code>trunk/dsy-cloud-bgd/dsy-cloud-bgd-starter/src/main/resources/application-service.yml</code></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">yth-service</span><span class="token punctuation">:</span> <span class="token comment">#一体化接口服务</span>  <span class="token key atrule">token</span><span class="token punctuation">:</span> <span class="token comment">#token配置</span>    <span class="token key atrule">service-bean-name</span><span class="token punctuation">:</span> <span class="token string">'tokenCommonServiceImpl_AD61'</span> <span class="token comment">#token实现类配置</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span> <span class="token comment">#接口配置</span>    <span class="token comment">#项目信息推送接口</span>    <span class="token key atrule">pro_push</span><span class="token punctuation">:</span>      <span class="token key atrule">busi-type</span><span class="token punctuation">:</span> pro_push <span class="token comment">#业务类型。可不配置，不配置默认取代码中的（和DSY_T_YTH_INTERFACE表中busi_type必须对应） </span>      <span class="token key atrule">deploy-mode</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment">#部署模式。可不配置，不配置默认为0，0集中部署（默认），1分级部署</span>      <span class="token key atrule">field-name</span><span class="token punctuation">:</span> mofDivCode <span class="token comment">#分级部署根据字段分堆名称。当部署模式为1时，必须配置此项</span>      <span class="token key atrule">service-bean-name</span><span class="token punctuation">:</span> <span class="token string">'proSendServiceImpl_AD61'</span> <span class="token comment">#service层实现类名称。可不配置，当有多个实现类时必须配置，与ConditionalOnProperty注解一起使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    以上配置片段为<code>项目推送</code>，核心需要关注<code>service-bean-name</code>配置，通过该配置项的值，结合注解<code>ConditionalOnproperty</code>注解，能够保证在代码环境中，只加载一个<code>ProSendService</code>接口的实现类，且该类为该配置文件中的<code>bean</code></p></blockquote><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669634135204.png" alt="实际接口"></p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669634099189.png" alt="个性化实现类"></p><p>通过注解结合配置，只会加载独一个的<code>ProSendService</code>接口的实现类。对于个性化开发，可以通过CV标准实现类再自定义实现类的方式实现。能够解决视图无法封装的场景。</p><h3 id="3-3-开发原则"><a href="#3-3-开发原则" class="headerlink" title="3.3 开发原则"></a>3.3 开发原则</h3><p>​    优先使用视图开发个性化内容，如果视图不能满足，再考虑通过个性化接口实现类的方式去实现。</p><blockquote><p>​    整体而言，所有的这种推送/拉取接口底层数据库视图都是只与<code>外层视图</code>存在耦合，因此个性化需求优先求证能否通过替换<code>外层视图</code>实现。</p><p>​    如果数据结构上有较大差异，不能够通过外部视图来实现，再考虑去通过<code>个性化接口</code>实现。在开发个性化接口时，可以先将现有的标准版或其他省市个性化版本<code>CV</code>过来，求同存异，可能工作量要小很多。</p><p>​    主要的工作量应该存在于：找字段、对字段、测字段阶段。</p></blockquote><h3 id="3-4-配置项解释"><a href="#3-4-配置项解释" class="headerlink" title="3.4 配置项解释"></a>3.4 配置项解释</h3><p>​    个性化接口配置文件：<code>application-service.yml</code>存在很多配置项，现逐一对其进行解释：</p><ol><li><p><code>token</code>: 数据推送或拉取获取token的实现类</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669635133010.png" alt="token"></p></li><li><p><code>busi-type</code>：业务类型</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669635277865.png" alt="busi-type"></p><blockquote><p>​    数据推送时，基于该字段配置的内容，查询<code>DSY_T_YTH_INTERFACE</code>表中，该业务推送的接口类型（包括HTTP或者WebService等）、请求方式、接口地址等等信息。</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669635514960.png" alt="busi-type"></p></blockquote></li><li><p><code>deploy-mode</code>与<code>field-name</code>：推送模式以及分堆字段</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669635707454.png" alt="分堆"></p><blockquote><p>​    在推送模式为<code>1</code>，且配置了分堆字段<code>field-name</code>时；在推送时会对数据进行分组推送，避免对方接口扛不住压力或数据包过大请求超时。</p></blockquote></li><li><p><code>service-bean-name</code>：个性化接口具体实现类<code>bean名称</code></p></li><li><p><code>token</code>：是否需要传递token</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669636091973.png" alt="1669636091973"></p></li><li><p><code>token-tag</code>：传递token时token的key是什么</p></li><li><p><code>page-config</code>：数据拉取时，分页拉取配置</p></li></ol><h2 id="四、接口列表"><a href="#四、接口列表" class="headerlink" title="四、接口列表"></a>四、接口列表</h2><table><thead><tr><th><strong>业务域</strong></th><th><strong>接口名称</strong></th><th><strong>数据需求方</strong></th><th><strong>数据提供方</strong></th><th><strong>数据内容</strong></th><th><strong>接口服务地址</strong></th><th><strong>接口业务类型</strong></th></tr></thead><tbody><tr><td><strong>基础数据</strong></td><td>债务限额接收接口</td><td>预算一体化系统</td><td>债务系统</td><td>债务限额信息</td><td>–</td><td>limit_push</td></tr><tr><td></td><td>资产卡片查询接口</td><td>债务系统</td><td>预算一体化系统</td><td>债务资产卡片信息</td><td>–</td><td>asset_pull</td></tr><tr><td></td><td>绩效指标查询接口</td><td>债务系统</td><td>预算一体化系统</td><td>绩效指标信息</td><td>–</td><td>perf_temp_pull</td></tr><tr><td><strong>项目库</strong></td><td>项目编码生成接口</td><td>债务系统</td><td>预算一体化系统</td><td>项目编码信息</td><td>–</td><td>pro_code_pull</td></tr><tr><td></td><td>项目入库接口</td><td>预算一体化系统</td><td>债务系统</td><td>项目入库信息</td><td>–</td><td>pro_push</td></tr><tr><td></td><td>项目绩效信息查询接口</td><td>债务系统</td><td>预算一体化系统</td><td>项目绩效信息</td><td>–</td><td>perf_pull</td></tr><tr><td></td><td>项目查询接口</td><td>债务系统</td><td>预算一体化系统</td><td>所有债务相关项目，包括债务还本、付息、手续费项目、转贷项目</td><td>–</td><td>pro_pull</td></tr><tr><td><strong>预算调整调剂</strong></td><td>债券发行计划接收接口</td><td>预算一体化系统</td><td>债务系统</td><td>债券项目发行计划信息</td><td>–</td><td>bond_pro_budget_push</td></tr><tr><td></td><td>债务资金相关预算指标信息查询接口</td><td>债务系统</td><td>预算一体化系统</td><td>预算指标信息</td><td>–</td><td>budget_pull</td></tr><tr><td></td><td>支付申请单据接收接口</td><td>预算一体化系统</td><td>债务系统</td><td>债券还本付息、手续费支付申请信息</td><td>–</td><td>bond_payment_push</td></tr><tr><td></td><td>支付结果查询接口</td><td>债务系统</td><td>预算一体化系统</td><td>支付结果信息，包括新增债券支付、还本付息、手续费</td><td>–</td><td>bond_payment_pull</td></tr><tr><td><strong>非税衔接</strong></td><td>非税缴款通知单生成接口</td><td>非税系统</td><td>债务系统</td><td>非税收缴通知书</td><td>–</td><td>nontax_push</td></tr><tr><td></td><td>非税缴款情况查询接口</td><td>债务系统</td><td>非税系统</td><td>非税缴款情况</td><td>–</td><td>nontax_pull</td></tr><tr><td><strong>汇总库数据</strong></td><td>汇总数据推送接口</td><td>预算一体化系统</td><td>债务系统</td><td>需上传财政部的债务相关数据表数据</td><td>–</td><td>table_push</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;债务与一体化系统融合&quot;&gt;&lt;a href=&quot;#债务与一体化系统融合&quot; class=&quot;headerlink&quot; title=&quot;债务与一体化系统融合&quot;&gt;&lt;/a&gt;债务与一体化系统融合&lt;/h1&gt;&lt;h2 id=&quot;一、债务模块需融合&quot;&gt;&lt;a href=&quot;#一、债务模块需融合&quot; c</summary>
      
    
    
    
    <category term="地方政府债务" scheme="https://zzyong24.github.io/categories/%E5%9C%B0%E6%96%B9%E6%94%BF%E5%BA%9C%E5%80%BA%E5%8A%A1/"/>
    
    
    <category term="工作" scheme="https://zzyong24.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>web容器之tomcat/jetty</title>
    <link href="https://zzyong24.github.io/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/"/>
    <id>https://zzyong24.github.io/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/</id>
    <published>2022-11-01T05:45:15.000Z</published>
    <updated>2024-05-14T15:29:11.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web容器之tomcat-x2F-jetty"><a href="#web容器之tomcat-x2F-jetty" class="headerlink" title="web容器之tomcat/jetty"></a>web容器之tomcat/jetty</h1><h2 id="1-web容器始末"><a href="#1-web容器始末" class="headerlink" title="1. web容器始末"></a>1. web容器始末</h2><ol><li>早期web应用主要是静态页面，HTTP服务器（如Apache、Nginx）负责返回静态HTML，浏览器负责解析HTML。</li><li>由于<code>早期web</code>无法与服务器进行交互，因此SUN公司推出Servlet技术（运行在服务端的Java小程序），Servlet无Main方法，只能运行在Web容器之中。</li></ol><p>Tomcat/Jetty本质上就是一个<code>web容器</code></p><blockquote><p>​    其他应用服务器包括：JBOSS或者WebLogic，不仅仅拥有Servlet功能，也包括EJB容器，是完整的Java EE应用服务器。</p><p>​    从这个角度来看，Tomcat/jetty是一个轻量级的应用服务器。</p></blockquote><p>EJB:  是基于分布式事务处理的企业级应用程序的组件。Sun公司发布的文档中对EJB的定义是：EJB是用于开发和部署多层结构的、<code>分布式的</code>、面向对象的Java应用系统的<code>跨平台</code>的构件体系结构。</p><h2 id="2-HTTP协议"><a href="#2-HTTP协议" class="headerlink" title="2. HTTP协议"></a>2. HTTP协议</h2><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667283420936.png" alt="通信流程"></p><p>HTTP: 约定了客户端（浏览器）与服务器端通信的格式。</p><p><strong>请求与响应</strong></p><p>​    Web服务器的核心工作便是：接收连接、解析请求、处理请求和发送响应四步，在此之上，并发能力是服务器的核心。</p><p><strong>请求数据包</strong></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667283628840.png" alt="请求包"></p><p><strong>响应数据包</strong></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667283646527.png" alt="响应包"></p><blockquote><p>​    Web服务器（Tomcat）将HTTP请求数据包封装为一个<code>Request</code>对象，将Request对象交给Web应用处理，并将处理结果封装为一个<code>Response</code>对象。</p></blockquote><p><strong>Cookie和Session</strong></p><ol><li><p>为什么需要？：<code>HTTP无状态</code>，并不知道当前访问浏览器的是谁。例如：你正在访问购物车，并添加了几件商品，正准备付款，不小心刷新了一下页面，由于HTTP无状态，服务器并不知道你是谁，因此也无法找到你刚才添加的商品。</p></li><li><p>是什么？：</p><ul><li><p>cookie： cookie是HTTP的一个请求头，存储在浏览器端，每次发送请求给服务器时，会携带上cookie信息。可以用于存储信息。</p></li><li><p>session：<code>cookie以明文存储，且存储在浏览器端（用户端）因此相当不安全</code>，session存储在<code>服务器端</code>。用户信息不在存储在cookie中，而是存储在session中。通过在cookie中设置<code>Session ID字段</code>，标注服务器中对应的Session，便可以标注当前访问用户的真实身份。</p><p>优点包括：安全，节省网络流量</p></li><li><p>Tomcat Session管理器支持多种持久化方案存储session，包括redis集群，同时通过后台轮询线程定时删除过期session。</p></li></ul></li></ol><p>HTTP1.1基于1.0升级了长连接，通过配置：Connection：keep-alive。（未配置每次发送都会建立新的连接，重复三次握手）</p><h2 id="3-Servlet规范"><a href="#3-Servlet规范" class="headerlink" title="3. Servlet规范"></a>3. Servlet规范</h2><p>两个问题：</p><ol><li><p>HTTP服务器接收到请求，如何知道调用哪个类哪个方法来处理？</p></li><li><p>HTTP服务器如何知道哪个Servlet来处理。</p><blockquote><p>​    要回答第二个问题，先得回答第一个问题。</p><p>​    显而易见，HTPP发送请求时，会携带请求资源路径，那么HTTP服务器收到请求资源路径后，怎么找到对应能够处理的类以及方法呢？通过if-else嘛，虽然可行，但是服务器和业务逻辑完全耦合了，因此不满足。</p><p>​    解决方法便是：<code>通过定义Servlet接口，让所有能处理业务逻辑的类都实现Servlet接口，需要调用资源便调用Servlet接口实现类</code></p><p>​    </p><p>​    针对第二个问题，本质上是如何找到能处理该资源请求的Servlet接口，这个是<code>Servlet容器完成的</code></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667286186824.png" alt="资源请求与接口调用"></p></blockquote></li></ol><p><strong>Servlet规范：</strong>以上这一套业务处理Servlet实现类以及Servlet容器便是Servlet规范。</p><p>帮助开发人员更关心如何实现业务逻辑，而不需要了解其中的细节。</p><p><strong>Servlet接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span>    <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> var1<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心方法便是service，用于处理业务逻辑</p><p><strong>Servlet抽象类</strong></p><p>GenericServlet</p><p><strong>Servlet容器</strong></p><blockquote><p>​    Servlet容器收到请求后，负责调用对应的Servlet，若Servlet并未加载，则会基于<code>web.xml</code>配置文件加载对应的Servlet，加载完毕后，会将其放置在<code>ServletContext</code>全局环境之中。</p></blockquote><p><strong>拓展机制</strong></p><ul><li>Filter：请求进入时，会调用filter，并通过多个filter组成filter chain，串行调用filter</li><li>Listener：监听如web应用启停、用户请求到达等</li></ul><p><strong>容器之间的关系</strong></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/20190503213508577.png" alt="servlet容器、spring容器、springmvc容器"></p><p>web容器中有servlet容器，spring项目部署后存在spring容器。其中spring控制service层和dao层的bean对象以及controller层bean对象。servlet容器控制servlet对象。项目启动时，首先 servlet初始化，初始化过程中通过web.xml中spring的配置加载spring配置，初始化spring容器。待容器加载完成。servlet初始化完成，则完成启动。springmvc是viewAndModie的请求传递和结果解析。本身并没有容器管理，都是交给spring管理。<br>HTTP请求到达web容器后，会到达Servlet容器，容器通过分发器分发到具体的spring的Controller层。执行业务操作后返回结果。</p><p><strong>核心类</strong></p><p>Servlet接口、GenericServlet抽象类、HttpServlet</p><h2 id="4-手写Servlet"><a href="#4-手写Servlet" class="headerlink" title="4. 手写Servlet"></a>4. 手写Servlet</h2><blockquote><p>​    日常开发中我们可能都习惯与使用spring 以及 spring mvc等框架完成web开发，本章便使用纯手写继承HttpServlet的方式完成Web应用。</p></blockquote><p>开发步骤：</p><ol><li><p>下载并安装Tomcat（<a href="https://mirrors.cnnic.cn/apache/tomcat/tomcat-8/v8.5.83/bin/%EF%BC%89">https://mirrors.cnnic.cn/apache/tomcat/tomcat-8/v8.5.83/bin/）</a></p></li><li><p>写Servlet</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloTomcat</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//设置流的默认编码 ISO-8859-1 设置为GDK</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//告诉浏览器, 服务器发送的消息体数据的编码. 建议浏览器使用该编码解码</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1. 获取字符输出流</span>        <span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 输出数据</span>        pw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;hello tomcat&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编译java文件（需要用到tomcat lib目录下的servlet-api.jar jar包）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">javac <span class="token operator">-</span>cp <span class="token punctuation">.</span>/servlet<span class="token operator">-</span>api<span class="token punctuation">.</span>jar <span class="token class-name">HelloTomcat</span><span class="token punctuation">.</span>java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>建立Web应用目录</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667292247696.png" alt="web应用目录"></p></li><li><p>编写web.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee                http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>helloTomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>HelloTomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>helloTomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整文件讲解：<a href="https://www.cnblogs.com/mytJava/p/13143449.html">https://www.cnblogs.com/mytJava/p/13143449.html</a></p></li><li><p>拷贝完整项目（4中图示MyWebApp）到tomcat webapps下</p></li><li><p>启动tomcat（./bin/startup.sh)</p></li><li><p>访问资源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:8080/MyWebApp/hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>疑问：Servlet和HttpServlet什么关系，难道可以支持除Http之外的协议吗？</p><p>解答：Tomcat支持HTTP/1.1、AJP（用于和web服务器集成如nginx）、HTTP/2.0等。（<a href="https://www.cnblogs.com/alimayun/p/10604532.html%EF%BC%89">https://www.cnblogs.com/alimayun/p/10604532.html）</a></p><p><strong>基于注解配置Servlet</strong></p><ol><li>删除上面配置的<code>web.xml</code>文件</li><li>使用注解<code>@WebServlet（【urlMapping】）</code></li></ol><p><strong>tomcat日志</strong></p><ul><li><code>catalina.*.out</code>: tomcat启动日志，启动过程中的配置错误都会在这里。</li><li><code>localhost.*.out</code>: web在初始化过程中未处理的异常。</li><li><code>localhost_access_log.*.out</code>: 请求日志，包括IP、请求路径、时间、请求协议、状态码等。</li><li><code>manager.*.log</code>：存放tomcat自带的manager日志。</li></ul><h2 id="5-系统架构之连接器"><a href="#5-系统架构之连接器" class="headerlink" title="5. 系统架构之连接器"></a>5. 系统架构之连接器</h2><p><strong>Tomcat核心功能</strong>：</p><ol><li>处理socket连接，负责网络字节流Request和Response对象的转化。（<code>连接器</code>）</li><li>加载和管理Servlet，以及具体的Request请求。（<code>容器</code>）</li></ol><p><strong>Tomcat支持的I/O模型</strong>：</p><ol><li>NIO：非阻塞I/O，采用Java NIO类库实现</li><li>NIO.2：异步I/O，采用JDK7最新NIO.2类库实现</li><li>APR：采用Apache可移植运行库实现，是C/C++编写的本地库</li></ol><p><strong>Tomcat支持的应用层协议</strong>：</p><ol><li><p>HTTP/1.1：目前大部分的Web应用使用的协议</p></li><li><p>AJP：用于和Web服务器如Apache、Nginx集成</p></li><li><p>HTTP/2.0：HTTP2.0相较于1.0大幅度提升了性能</p><blockquote><p>​    什么是Web服务器，和Tomcat有什么区别。一直说Apache和Nginx是Web服务器，其实Web服务器即静态资源服务器，而Tomcat是Java服务器，支持JSP以及Servlet。</p><p>​    <strong>Apache</strong>：</p><p>​    1、主要用于解析静态文本，并发性能高，侧重于HTTP服务；</p><p>​    2、支持静态页（HTML），不支持动态请求如：CGI、Servlet/JSP、PHP、ASP等；</p><p>​    3、具有很强的可扩展性，可以通过插件支持PHP，还可以单向Apache连接Tomcat实现连通；</p><p>​    4、Apache是世界使用排名第一的Web服务器。</p><p>​    <strong>Tomcat</strong>：</p><p>​    特性：免费的Java应用服务器</p><p>​    1、主要用于解析JSP/Servlet，侧重于Servlet引擎；</p><p>​    2、支持静态页，但效率没有Apache高；支持Servlet、JSP请求；</p><p>​    3、Tomcat本身也内置了一个HTTP服务器用于支持静态内容，可以通过Tomcat的配置管理工具实现与Apache整合。</p><p>​    两者整合后优点：如果请求是静态网页则由Apache处理，并将结果返回；如果是动态请求，Apache会将解析工作转发给Tomcat处理，Tomcat处理后将结果通过Apache返回。这样可以达到分工合作，实现负载远衡，提高系统的性能。</p></blockquote></li></ol><p><strong>Tomcat、Service、连接器、容器</strong></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667353115418.png" alt="tomcat组件关系"></p><ul><li><p>tomcat中包含多个service。（service只是对连接器以及容器的封装，每个service独占端口，可以理解为一个service对应一个web应用）</p></li><li><p>一个service中包含一个容器和多个连接器，连接器与容器之间使用标准ServletRequest以及ServletResponse通信。（多个连接器是为了适配多种网络协议以及I/O模型的搭配）</p><blockquote><p>​    连接器核心工作：</p><p>​        对Servlet容器屏蔽协议以及I/O模型的差异，无论是HTTP还是AJP，在容器中获取的都是标准的ServletRequest对象。</p><p>​    细化：</p><ol><li>监听网络端口</li><li>接收网络请求</li><li>读取网络字节流</li><li>根据具体的网络协议解析字节流（HTTP/AJP），并封装为统一的Tomat Request对象</li><li>将Tomcat Request对象转换为标准的ServletRequest</li><li>调用Servlet容器业务接口，得到Servlet Response</li><li>将Servlet Response转换为Tomcat Response对象</li><li>将Tomcat Response转换为网络字节流</li><li>将响应字节流写回给浏览器端</li></ol></blockquote></li></ul><p><strong>连接器核心功能</strong></p><ol><li>网络通信</li><li>应用层协议解析</li><li>Tomcat Request/Response 与 Servlet Request/Response的转化</li></ol><p>因此Tomcat设计了三个组件（<code>接口</code>）来实现这三个功能：Endpoint、Processor、Adapter</p><ul><li><p><code>Endpoint</code>：负责网络通信，将接受到的请求字节流提供给<code>Processor</code></p></li><li><p><code>Processor</code>：负责解析<code>Endpoint</code>传送的字节流，并将其封装为<code>Tomcat Request</code>对象给<code>Adapter</code></p></li><li><p><code>Adapter</code>：负责解析<code>Processor</code>传送的<code>Tomcat Request</code>对象，并封装为<code>Servlet request</code>提供给<code>容器</code></p><blockquote><p>​    分别需要考虑的变化点包括：</p><ol><li>Endpoint： 需要支持不同的I/O模型，包括<code>NIO、NIO.2、APR</code></li><li>Processor：需要支持解析不同的<code>网络协议</code>，并基于协议将字节流封装为<code>Tomcat Request</code>对象，协议包括：<code>HTTP1.1、HTTP2.0、JAP</code></li></ol></blockquote></li></ul><p>如果需要实现<code>NIO Endpoint</code>，则只需要实现接口<code>Endpoint</code>，其他同理。若以后出现了I/O模型或者网络协议，只需要新的实现即可。</p><p><strong>适配Endpoint和Processor的多种组合</strong></p><p>​    前面提到，Endpoint以及Processor接口需要适配多种I/O模型或者网络协议，因此为了任意搭配Endpoint以及Processor，Tomcat设计者使用了ProtocalHandler接口用来组合Endpoint以及Processor。例如：<code>HTTP11NioProtocal</code>和<code>AJPNioProtocal</code></p><p>​    除了这些变化点（Endpoint以及Processor），系统中也存在一些相对稳定的部分，因此使用抽象类用来封装稳定的部分。整体类图如下：</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667356824430.png" alt="Protocal类图"></p><p><strong>连接器整体架构</strong></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667357524300.png" alt="连接器架构"></p><p><strong>ProtocolHandler组件</strong></p><ol><li><p>Endpoint</p><blockquote><p>​    功能：实现TCP/IP协议，Socket接收和发送处理器</p><p>​    继承关系：Endpoint（接口）-&gt; AbstractEndpoint（抽象类）-&gt; NioEndpoint等（实现类）</p><p>​    子组件：</p><ul><li>Acceptor：监听Socket请求</li><li>SocketProcessor：处理接受到的Socket请求（实现了Runnable接口）</li></ul></blockquote></li><li><p>Processor</p><blockquote><p>​    功能：实现HTTP协议，负责转换Socket字节流为Tomcat Request对象，通过Adapter交给容器进行处理</p><p>​    继承关系：Processor（接口）-&gt; AbstractProcessor（抽象类）-&gt; HTTP11Processor(实现类)</p></blockquote></li></ol><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667463275286.png" alt="连接器组件图"></p><p><strong>Adapter</strong></p><p>Adapter组件核心功能是将Processor传输过来的Tomcat Request对象，转换为Servlet Request对象，并交给容器。（<code>设计模式：适配器模式</code>）</p><p>具体实现是：<code>CoyoteAdater</code></p><p><strong>架构设计原则</strong></p><p><code>根据高内聚、低耦合原则确定子模块，找出模块中的变化点和不变点，用接口封装变化点（子类实现自己的）、抽象类定义模板方法实现变化点。</code></p><h2 id="6-系统架构之容器"><a href="#6-系统架构之容器" class="headerlink" title="6. 系统架构之容器"></a>6. 系统架构之容器</h2><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667465739525.png" alt="容器层级关系"></p><blockquote><p>​    tomcat设计了四层容器，彼此之间是<code>包含关系</code>。</p><ul><li>Wrapper：Servlet接口（写的Controller接口）</li><li>Context：一个Web应用程序（webapps模块下一个应用）</li><li>Host：一个虚拟主机或一个站点</li><li>Engine：引擎</li></ul><p>其中Host以及Engine的概念比较陌生，一个Tomcat容器只存在一个Engine引擎，而一个Engine引擎存在多个Host虚拟主机</p></blockquote><p>tomcat配置文件server.xml</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667466252039.png" alt="server.xml"></p><p><strong>容器管理</strong></p><p>Tomcat中存在四层容器，容器之间有着明显的父子关系，通过组合模式，以及父子节点的设计，并抽象统一接口，能够一致看待外层容器（父容器）和内层容器（子容器）。容器接口如下：</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667467503397.png" alt="容器接口"></p><p><strong>资源映射</strong></p><p>上文提到，一个Tomcat Engine包含多个Host<code>（IP+端口 - 域名）</code>，一个Host包含多个Context<code>（web应用）</code>，一个Context包含多个Wrapper<code>（Servlet）</code></p><p>这些是一个树状的层级结构，Tomcat提供了<code>Mapper</code>组件来保存这些映射关系（Map）。</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667468212754.png" alt="Mapper"></p><p><strong>资源定位步骤</strong></p><ol><li><p>根据协议和端口号选择Service和Engine</p><blockquote><p>Service中存在一个Connector和一个Engine，每个连接器监听的端口号都不一致。如HTTP连接器默认监听8080端口，而AJP连接器默认监听8009端口。因此协议和端口已经确定好了Service，而Service确定好了也就确定好了Engine。</p></blockquote></li><li><p>根据域名选择Host</p></li><li><p>根据URL选择Context以及Wrapper</p></li></ol><p><strong>Pipeline - Value</strong></p><p>请求的处理有一定的顺序，如从Connector -&gt; Engine -&gt; Host -&gt; Context -&gt; Wrapper</p><p>而容器之间又是分层的，因此这一系列的处理需要通过一个<code>链路串起来</code>，Tomcat使用到了<code>责任链模式</code></p><p><code>Value</code>表示其中一个处理节点，<code>Pipeline</code>负责将多个<code>Value</code>节点串起来。</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667470030847.png" alt="value"></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667470041619.png" alt="Pipeline"></p><p>跨容器的链条通过Basic串通</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667470086082.png" alt="pipeline - value调用关系"></p><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667476837683.png" alt="架构"></p><p>其中红色箭头虚线表示请求在Tomcat中流转的过程。</p><h2 id="7-一键式启停"><a href="#7-一键式启停" class="headerlink" title="7. 一键式启停"></a>7. 一键式启停</h2><p>上图整体架构静态的描述了组件之间的关系，一个完整的系统需要创建并组装这些组件；在服务停止的时候，还需要关闭并停止这些组件。这是一个动态的过程。而如何优雅的管理组件的创建、初始化、启动、停止和销毁？是我们需要思考的问题。</p><p>从静态结构图分析来看，有两点：</p><ol><li>组件之间有大有小，大的组件管理小的组件，比如Server管理Servise，Service又管理连接器和容器。</li><li>组件有内有外，外层组件控制内层组件，比如连接器是外层组件，外层组件调用内层组件完成业务功能。也就是说，<strong>请求的处理过程是由外层组件来驱动的</strong></li></ol><p>根据这两个特点来总结，决定了系统再创建组件时需要遵循一定的原则：</p><ol><li>原则1：先创建子组件，再创建父组件。子组件需要被注入到父组件当中。</li><li>原则2：先创建内层组件，再创建外层组件，内层组件需要被注入到外层组件当中。</li></ol><p><strong>尝试1：按照先小再大，先内再外顺序创建</strong><br>    很直观的做法就是按照小-&gt;大，内-&gt;外的顺序原则创建组件，但是这样处理会导致代码逻辑的混乱，也容易造成组件的遗漏，因此不太合适。</p><p><strong>一键式启停：Lifecycle</strong></p><p><code>设计的原则便在于：找到系统的变化点和不变点。这里的不变点便是：每个组件都要经历创建、初始化和启动这几个过程，变化的是初始化做的具体的事情不一样</code></p><p>因此，可以抽象出一个接口，用于声明这些不变的点</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667479316839.png" alt="Lifecycle"></p><p>理所当然，在父组件中调用 init方法，子组件中也会执行。其他同理，我们可以调用最顶层组件的接口，来启动完整的所有的组件。</p><p><strong>可拓展的LifeCycle</strong></p><p>上面说到父组件的LifeCycle API被执行，子组件的也会被执行。那如果我们想要拓展子组件方法的内容呢，是不是可能得改动现有的组件API。因此，<code>上述说明的父组件调用init方法，子组件也会执行，并不是父组件调用子组件，而是通过设计模式：观察者模式，给子组件注册监听器，自动调用子组件的API</code></p><p><strong>可重用的LifeCycleBase</strong></p><p>LifeCycleBase抽象类抽象了一些公共的逻辑，包括初始化、启动、停止以及销毁。LifeCycleBase实现了LifeCycle接口，并抽象了一些共用方法，这边是典型的<code>设计模式：模板方法模式</code></p><p>示例（LifeCycleBase）：</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667479753752.png" alt="init监听器的触发"></p><p><strong>何时注册监听器</strong></p><p>分为两种情况：</p><ul><li><p>Tomcat 自定义了一些监听器，这些监听器是父组件在创建子组件的过程中注册到子组件的。比如 MemoryLeakTrackingListener 监听器，用来检测 Context 容器中的内存泄漏，这个监听器是 Host 容器在创建 Context 容器时注册到 Context 中的。</p></li><li><p>我们还可以在server.xml中定义自己的监听器，Tomcat 在启动时会解析server.xml，创建监听器并注册到容器组件。生周期管理总体类图</p></li></ul><p><strong>类图</strong></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667479900598.png" alt="类图"></p><h2 id="可参考文章"><a href="#可参考文章" class="headerlink" title="可参考文章"></a>可参考文章</h2><ol><li>Tomcat源码分析：<a href="https://www.cnblogs.com/tanshaoshenghao/p/10932306.html">https://www.cnblogs.com/tanshaoshenghao/p/10932306.html</a></li><li>Tomcat内嵌式启动：<a href="https://github.com/heroku/devcenter-embedded-tomcat">https://github.com/heroku/devcenter-embedded-tomcat</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web容器之tomcat-x2F-jetty&quot;&gt;&lt;a href=&quot;#web容器之tomcat-x2F-jetty&quot; class=&quot;headerlink&quot; title=&quot;web容器之tomcat/jetty&quot;&gt;&lt;/a&gt;web容器之tomcat/jetty&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="web容器" scheme="https://zzyong24.github.io/categories/web%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="web容器" scheme="https://zzyong24.github.io/tags/web%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>java爬虫</title>
    <link href="https://zzyong24.github.io/2022/11/01/java/ji-chu/java-pa-chong/"/>
    <id>https://zzyong24.github.io/2022/11/01/java/ji-chu/java-pa-chong/</id>
    <published>2022-11-01T03:23:03.000Z</published>
    <updated>2024-05-14T15:29:10.939Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>​    Java爬虫</p><ul><li>爬虫：HTTPUrlConnection</li><li>html解析：XPATH</li><li>文件保存：FileWriter</li><li>线程池：ThreadPoolExecutor</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span></span><span class="token class-name">SAXException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span></span><span class="token class-name">DocumentBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span></span><span class="token class-name">DocumentBuilderFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span></span><span class="token class-name">ParserConfigurationException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span></span><span class="token class-name">XPath</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span></span><span class="token class-name">XPathConstants</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span></span><span class="token class-name">XPathExpressionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span></span><span class="token class-name">XPathFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">LinkedBlockingDeque</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * @author zhuzy * @version 1.0 * @description Main * @create 2022/10/31 9:49 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IP <span class="token operator">=</span> <span class="token string">"http://47.119.191.225:8092/"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> BOOKS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            <span class="token string">"DDD"</span><span class="token punctuation">,</span>            <span class="token string">"Kafka/"</span><span class="token punctuation">,</span>            <span class="token string">"Redis/"</span><span class="token punctuation">,</span>            <span class="token string">"java bf/"</span><span class="token punctuation">,</span>            <span class="token string">"java core 36/"</span><span class="token punctuation">,</span>            <span class="token string">"mq/"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> TITLES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            <span class="token string">"DDD实战课"</span><span class="token punctuation">,</span>            <span class="token string">"Kafka核心技术与实战"</span><span class="token punctuation">,</span>            <span class="token string">"Redis核心技术与实战"</span><span class="token punctuation">,</span>            <span class="token string">"Java并发编程与实战"</span><span class="token punctuation">,</span>            <span class="token string">"Java核心技术36讲"</span><span class="token punctuation">,</span>            <span class="token string">"消息队列高手课"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> THREADS_POOL <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">XPathExpressionException</span><span class="token punctuation">,</span> <span class="token class-name">ParserConfigurationException</span><span class="token punctuation">,</span> <span class="token class-name">SAXException</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BOOKS<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> articles <span class="token operator">=</span> <span class="token function">getInnerArticle</span><span class="token punctuation">(</span><span class="token function">getHtml</span><span class="token punctuation">(</span><span class="token function">getConnect</span><span class="token punctuation">(</span>IP <span class="token operator">+</span> BOOKS<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">crawlArticle</span><span class="token punctuation">(</span>BOOKS<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> TITLES<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> articles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取连接</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpURLConnection</span> <span class="token function">getConnect</span><span class="token punctuation">(</span><span class="token class-name">String</span> urlStr<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>urlStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpURLConnection</span> con <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> con<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取文本html</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getHtml</span><span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span> con<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>                    <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取所有内链文章</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInnerArticle</span><span class="token punctuation">(</span><span class="token class-name">String</span> html<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParserConfigurationException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">SAXException</span><span class="token punctuation">,</span> <span class="token class-name">XPathExpressionException</span> <span class="token punctuation">{</span>        <span class="token comment">// html字符串转document</span>        <span class="token class-name">DocumentBuilderFactory</span> factory <span class="token operator">=</span> <span class="token class-name">DocumentBuilderFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DocumentBuilder</span> builder <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        html <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"&lt;hr&gt;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayInputStream</span> bytes <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Document</span> document <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">XPath</span> xPath <span class="token operator">=</span> <span class="token class-name">XPathFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newXPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> expression <span class="token operator">=</span> <span class="token string">"//pre/a"</span><span class="token punctuation">;</span>        <span class="token class-name">NodeList</span> nodeList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NodeList</span><span class="token punctuation">)</span> xPath<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token class-name">XPathConstants</span><span class="token punctuation">.</span>NODESET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodeList<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Node</span> node <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>ELEMENT_NODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Element</span> eElement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">)</span> node<span class="token punctuation">;</span>            <span class="token class-name">String</span> href <span class="token operator">=</span> eElement<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"../"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 并发爬取内链文章并保存</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">crawlArticle</span><span class="token punctuation">(</span><span class="token class-name">String</span> book<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> articlesHrefs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">"./"</span> <span class="token operator">+</span> title<span class="token punctuation">;</span>        <span class="token comment">// 创建目录</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前爬取书籍： "</span> <span class="token operator">+</span> book <span class="token operator">+</span> <span class="token string">"， 保存位置: "</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> articleHref <span class="token operator">:</span> articlesHrefs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            THREADS_POOL<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 解码</span>                    <span class="token class-name">String</span> articleTitle <span class="token operator">=</span> articleHref<span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment">//articleTitle = URLEncoder.encode(articleHref, String.valueOf(StandardCharsets.UTF_8));</span>                        articleTitle <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>articleTitle<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token function">getHtml</span><span class="token punctuation">(</span><span class="token function">getConnect</span><span class="token punctuation">(</span>IP <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> book <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> articleHref<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 保存</span>                        <span class="token class-name">File</span> articleFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> articleTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>                        articleFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>articleFile<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>                        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book <span class="token operator">+</span> <span class="token string">"---爬取文章完成： "</span> <span class="token operator">+</span> articleTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;​    Java爬虫&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;爬虫：HTTPUrlConnection&lt;/li&gt;
&lt;li&gt;html解析：XPATH&lt;/li&gt;
&lt;li&gt;文件保存：FileWriter&lt;/li&gt;
&lt;li&gt;线程池：ThreadPoolExecutor</summary>
      
    
    
    
    <category term="爬虫" scheme="https://zzyong24.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://zzyong24.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>springBoot之servlet工具类</title>
    <link href="https://zzyong24.github.io/2022/10/25/java/ji-chu/springboot-zhi-servlet-gong-ju-lei/"/>
    <id>https://zzyong24.github.io/2022/10/25/java/ji-chu/springboot-zhi-servlet-gong-ju-lei/</id>
    <published>2022-10-25T03:07:51.000Z</published>
    <updated>2024-05-14T15:29:10.940Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开发springboot程序时，可能需要用到原生的Tomcat Servlet，并基于Servlet Request获取如IP、Agent等信息。本文便记录可能用到的一些模块功能。</p></blockquote><h1 id="springBoot之servlet工具类"><a href="#springBoot之servlet工具类" class="headerlink" title="springBoot之servlet工具类"></a>springBoot之servlet工具类</h1><h2 id="1-Servlet-工具类"><a href="#1-Servlet-工具类" class="headerlink" title="1. Servlet 工具类"></a>1. Servlet 工具类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletUtils</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 获取ServletRequest     *     * @return {@link HttpServletRequest }     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpServletRequest</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取参数     *     * @param name 参数名     * @return {@link String }     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 将字符串响应给客户端     *     * @param response     响应     * @param string 字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">renderString</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ServletRequestAttributes</span> <span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RequestAttributes</span> attributes <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> attributes<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-获取真实IP"><a href="#2-获取真实IP" class="headerlink" title="2. 获取真实IP"></a>2. 获取真实IP</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IpUtils</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 获取客户端IP     *     * @param request 请求对象     * @return IP地址     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getIpAddr</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-Forwarded-For"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"WL-Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-Real-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"0:0:0:0:0:0:0:1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"127.0.0.1"</span> <span class="token operator">:</span> <span class="token function">getMultistageReverseProxyIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 检查是否为内部IP地址     *     * @param ip IP地址     * @return 结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">internalIp</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> addr <span class="token operator">=</span> <span class="token function">textToNumericFormatV4</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">internalIp</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 检查是否为内部IP地址     *     * @param addr byte地址     * @return 结果     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">internalIp</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> addr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> b0 <span class="token operator">=</span> addr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> b1 <span class="token operator">=</span> addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 10.x.x.x/8</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> SECTION_1 <span class="token operator">=</span> <span class="token number">0x0A</span><span class="token punctuation">;</span>        <span class="token comment">// 172.16.x.x/12</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> SECTION_2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xAC</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> SECTION_3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x10</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> SECTION_4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x1F</span><span class="token punctuation">;</span>        <span class="token comment">// 192.168.x.x/16</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> SECTION_5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xC0</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> SECTION_6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xA8</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>b0<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> SECTION_1<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> SECTION_2<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>b1 <span class="token operator">&gt;=</span> SECTION_3 <span class="token operator">&amp;&amp;</span> b1 <span class="token operator">&lt;=</span> SECTION_4<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">case</span> SECTION_5<span class="token operator">:</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>b1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> SECTION_6<span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 将IPv4地址转换成字节     *     * @param text IPv4地址     * @return byte 字节     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">textToNumericFormatV4</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> l<span class="token punctuation">;</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                    l <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token number">4294967295L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">24</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">16</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                    l <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token number">255L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    l <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token number">16777215L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">16</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        l <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token number">255L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    l <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token number">65535L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        l <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token number">255L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取IP地址     *     * @return 本地IP地址     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getHostIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取主机名     *     * @return 本地主机名     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"未知"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 从多级反向代理中获得第一个非unknown IP地址     *     * @param ip 获得的IP地址     * @return 第一个非unknown IP地址     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getMultistageReverseProxyIp</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 多级反向代理检测</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ip<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ips <span class="token operator">=</span> ip<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> subIp <span class="token operator">:</span> ips<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token function">isUnknown</span><span class="token punctuation">(</span>subIp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ip <span class="token operator">=</span> subIp<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 检测给定字符串是否为未知，多用于检测HTTP请求相关     *     * @param checkString 被检测的字符串     * @return 是否未知     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isUnknown</span><span class="token punctuation">(</span><span class="token class-name">String</span> checkString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>checkString<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>checkString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-获取真实地理位置"><a href="#3-获取真实地理位置" class="headerlink" title="3. 获取真实地理位置"></a>3. 获取真实地理位置</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">AddressUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// IP地址查询</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IP_SEARCH_URL <span class="token operator">=</span> <span class="token string">"http://whois.pconline.com.cn/ipJson.jsp"</span><span class="token punctuation">;</span>    <span class="token comment">// 位置地址</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> KNOWN_ADDRESS <span class="token operator">=</span> <span class="token string">"XX XX"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getRealAddressByIp</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">IpUtils</span><span class="token punctuation">.</span><span class="token function">internalIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"内网IP"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> rspStr <span class="token operator">=</span> <span class="token class-name">HttpUtils</span><span class="token punctuation">.</span><span class="token function">sendGet</span><span class="token punctuation">(</span>IP_SEARCH_URL<span class="token punctuation">,</span> <span class="token string">"ip="</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">"&amp;json=true"</span><span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>GBK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>rspStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取地理位置异常 {}"</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> KNOWN_ADDRESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">JSONObject</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>rspStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> region <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"pro"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 省份</span>            <span class="token class-name">String</span> city <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 城市</span>            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span> region<span class="token punctuation">,</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取地理位置异常 {}"</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> KNOWN_ADDRESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-发起HTTP请求"><a href="#4-发起HTTP请求" class="headerlink" title="4. 发起HTTP请求"></a>4. 发起HTTP请求</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">HttpUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 向指定URL发送GET请求     *     * @param url url     * @return {@link String }     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">sendGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">sendGet</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span>EMPTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">sendGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">sendGet</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> param<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 向指定URL发送get请求     *     * @param url         url     * @param param       参数，格式：?name=value1&amp;pass=value2     * @param contentType 编码类型     * @return {@link String }     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">sendGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> param<span class="token punctuation">,</span> <span class="token class-name">String</span> contentType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 拼接param</span>            <span class="token class-name">String</span> urlString <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">?</span> url <span class="token operator">:</span> url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> param<span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"sendGet: {}"</span><span class="token punctuation">,</span> urlString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">URL</span> realUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>urlString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">URLConnection</span> urlConnection <span class="token operator">=</span> realUrl<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            urlConnection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">,</span> <span class="token string">"*/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            urlConnection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token string">"Keep-Alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            urlConnection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 发起连接</span>            urlConnection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>urlConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> line<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"recv -&gt; {}"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ConnectException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"调用HttpUtils.sendGet ConnectException, url="</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">",param="</span> <span class="token operator">+</span> param<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketTimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"调用HttpUtils.sendGet SocketTimeoutException, url="</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">",param="</span> <span class="token operator">+</span> param<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"调用HttpUtils.sendGet IOException, url="</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">",param="</span> <span class="token operator">+</span> param<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"调用HttpsUtil.sendGet Exception, url="</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">",param="</span> <span class="token operator">+</span> param<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"调用in.close Exception, url="</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">",param="</span> <span class="token operator">+</span> param<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;开发springboot程序时，可能需要用到原生的Tomcat Servlet，并基于Servlet Request获取如IP、Agent等信息。本文便记录可能用到的一些模块功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;springB</summary>
      
    
    
    
    <category term="servlet" scheme="https://zzyong24.github.io/categories/servlet/"/>
    
    
    <category term="servlet" scheme="https://zzyong24.github.io/tags/servlet/"/>
    
  </entry>
  
</feed>
