<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>240529-xfg大营销</title>
      <link href="/2024/05/29/xiang-mu/240529-xfg-da-ying-xiao/"/>
      <url>/2024/05/29/xiang-mu/240529-xfg-da-ying-xiao/</url>
      
        <content type="html"><![CDATA[<h1 id="大营销项目"><a href="#大营销项目" class="headerlink" title="大营销项目"></a>大营销项目</h1><p><img src="/2024/05/29/xiang-mu/240529-xfg-da-ying-xiao/FneS159mh275DXpKFwFuvHQ8AO_t" alt="抽奖奖盘"></p><p>gitee地址：<a href="https://gitee.com/zzy888888/big-marketing">项目-大营销: 大营销项目 (gitee.com)</a></p><h2 id="1-DDD脚手架"><a href="#1-DDD脚手架" class="headerlink" title="1. DDD脚手架"></a>1. DDD脚手架</h2><p>脚手架地址标准版：<a href="https://gitcode.net/KnowledgePlanet/road-map/xfg-frame-archetype-std.git">https://gitcode.net/KnowledgePlanet/road-map/xfg-frame-archetype-std.git</a></p><p>脚手架地址轻量版：<a href="https://gitcode.net/KnowledgePlanet/road-map/xfg-frame-archetype-lite">KnowledgePlanet / road-map / xfg-frame-archetype-lite · GitCode</a></p><p>使用步骤：<a href="https://bugstack.cn/md/road-map/ddd-archetype.html">DDD 脚手架【Maven 本地版】 | 小傅哥 bugstack 虫洞栈</a></p><h2 id="2-环境部署"><a href="#2-环境部署" class="headerlink" title="2. 环境部署"></a>2. 环境部署</h2><p><strong>linux下docker以及dockercompose安装</strong></p><p><a href="https://bugstack.cn/md/devops/2023-04-18-docker.html">Docker | 小傅哥 bugstack 虫洞栈</a></p><p><strong>docker-compose配置文件</strong></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># 命令执行 docker-compose -f docker-compose-environment.yml up -d</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.9'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>8.0.32    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>default<span class="token punctuation">-</span>authentication<span class="token punctuation">-</span>plugin=mysql_native_password    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> my<span class="token punctuation">-</span>network    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql<span class="token punctuation">-</span>job<span class="token punctuation">-</span>dbdata    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"13306:3306"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./mysql/sql<span class="token punctuation">:</span>/docker<span class="token punctuation">-</span>entrypoint<span class="token punctuation">-</span>initdb.d    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"mysqladmin"</span> <span class="token punctuation">,</span><span class="token string">"ping"</span><span class="token punctuation">,</span> <span class="token string">"-h"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span> <span class="token punctuation">]</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 5s      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">start_period</span><span class="token punctuation">:</span> 15s    <span class="token key atrule">volumes_from</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql<span class="token punctuation">-</span>job<span class="token punctuation">-</span>dbdata  <span class="token comment"># 自动加载数据</span>  <span class="token key atrule">mysql-job-dbdata</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> alpine<span class="token punctuation">:</span>3.18.2    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>job<span class="token punctuation">-</span>dbdata    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /var/lib/mysql  <span class="token comment"># phpmyadmin https://hub.docker.com/_/phpmyadmin</span>  <span class="token key atrule">phpmyadmin</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> phpmyadmin<span class="token punctuation">:</span>5.2.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> phpmyadmin    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> phpmyadmin    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8899<span class="token punctuation">:</span><span class="token number">80</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> PMA_HOST=mysql      <span class="token punctuation">-</span> PMA_PORT=3306      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=123456    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token key atrule">mysql</span><span class="token punctuation">:</span>        <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_healthy    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> my<span class="token punctuation">-</span>network  <span class="token comment"># Redis</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span><span class="token number">6.2</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> redis    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 16379<span class="token punctuation">:</span><span class="token number">6379</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./redis/redis.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> my<span class="token punctuation">-</span>network    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"redis-cli"</span><span class="token punctuation">,</span> <span class="token string">"ping"</span> <span class="token punctuation">]</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 10s      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token comment"># RedisAdmin https://github.com/joeferner/redis-commander</span>  <span class="token key atrule">redis-admin</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> spryker/redis<span class="token punctuation">-</span>commander<span class="token punctuation">:</span>0.8.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>admin    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>commander    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8081<span class="token punctuation">:</span><span class="token number">8081</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> REDIS_HOSTS=local<span class="token punctuation">:</span>redis<span class="token punctuation">:</span><span class="token number">6379</span>      <span class="token punctuation">-</span> HTTP_USER=admin      <span class="token punctuation">-</span> HTTP_PASSWORD=admin      <span class="token punctuation">-</span> LANG=C.UTF<span class="token punctuation">-</span><span class="token number">8</span>      <span class="token punctuation">-</span> LANGUAGE=C.UTF<span class="token punctuation">-</span><span class="token number">8</span>      <span class="token punctuation">-</span> LC_ALL=C.UTF<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> my<span class="token punctuation">-</span>network    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token key atrule">redis</span><span class="token punctuation">:</span>        <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_healthy<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">my-network</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-phpmyadmin"><a href="#2-1-phpmyadmin" class="headerlink" title="2.1 phpmyadmin"></a>2.1 phpmyadmin</h3><p>地址：<a href="http://8.140.192.82:8899/index.php?route=/&amp;route=/">8.140.192.82:8899 / mysql | phpMyAdmin 5.2.1</a></p><p>用户名：root</p><p>密码：123456</p><h3 id="2-2-spryker"><a href="#2-2-spryker" class="headerlink" title="2.2 spryker"></a>2.2 spryker</h3><p>地址：<a href="http://8.140.192.82:8081/">Redis Commander: Home</a></p><p>用户名：admin</p><p>密码：admin</p><h3 id="2-3-mysql"><a href="#2-3-mysql" class="headerlink" title="2.3 mysql"></a>2.3 mysql</h3><p>地址：8.140.192.82:13006</p><p>用户名：root</p><p>密码：123456</p><p>数据库：big_macket</p><h3 id="2-4-redis"><a href="#2-4-redis" class="headerlink" title="2.4 redis"></a>2.4 redis</h3><p>地址：8.140.192.82:16379</p><p>用户名：</p><p>密码：</p><h2 id="3-抽奖"><a href="#3-抽奖" class="headerlink" title="3. 抽奖"></a>3. 抽奖</h2><p><img src="/2024/05/29/xiang-mu/240529-xfg-da-ying-xiao/1717213664326.png" alt="抽奖流程"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/05/28/shu-ju-ku/mysql-fu-xi/"/>
      <url>/2024/05/28/shu-ju-ku/mysql-fu-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1 基础"></a>1 基础</h2><h3 id="1-1-DDL、DML、DCL、TCL"><a href="#1-1-DDL、DML、DCL、TCL" class="headerlink" title="1.1 DDL、DML、DCL、TCL"></a>1.1 DDL、DML、DCL、TCL</h3><blockquote><p><strong>DDL（Data Definition Languages）语句</strong>：即数据库定义语句，用来创建数据库中的表、索引、视图、存储过程、触发器等，常用的语句关键字有：CREATE,ALTER,DROP,TRUNCATE,COMMENT,RENAME。</p><p><strong>DML（Data Manipulation Language）语句</strong>：即数据操纵语句，用来查询、添加、更新、删除等，常用的语句关键字有：SELECT,INSERT,UPDATE,DELETE,MERGE,CALL,EXPLAIN PLAN,LOCK TABLE,包括通用性的增删改查。</p><p><strong>DCL（Data Control Language）语句</strong>：即数据控制语句，用于授权/撤销数据库及其字段的权限（DCL is short name of Data Control Language which includes commands such as GRANT and mostly concerned with rights, permissions and other controls of the database system.）。常用的语句关键字有：GRANT,REVOKE。</p><p><strong>TCL（Transaction Control Language）语句</strong>：事务控制语句，用于控制事务，常用的语句关键字有：COMMIT,ROLLBACK,SAVEPOINT,SET TRANSACTION。</p></blockquote><h3 id="1-2-数据库范式"><a href="#1-2-数据库范式" class="headerlink" title="1.2 数据库范式"></a>1.2 数据库范式</h3><blockquote><ul><li><p>第一范式： 所有列都是不可分割的原子</p></li><li><p>第二范式： 消除部分函数依赖(第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）)</p><p>例如：</p><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/1716427033769.png" alt="第二范式"></p></li><li><p>第三范式： 消除传递函数依赖(每一列数据都和主键直接相关，而不能间接相关)</p><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/1716427177963.png" alt="第三范式"></p></li></ul></blockquote><h3 id="1-3-多表关联"><a href="#1-3-多表关联" class="headerlink" title="1.3 多表关联"></a>1.3 多表关联</h3><h4 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">join</span> t2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>​    笛卡尔积实际上将表1所有数据与表2 一一匹配进行展示</p><p>例如：</p><p>因此t1 join t2</p><p>​    a            d                                 a         d</p><p>​    b            e                                 a         e    </p><p>​    c            f                                  a          f</p><p>​                                                     b         d</p><p>​                                                    …</p></blockquote><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">left</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319142752582?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><blockquote><p>表t1 与 表t2 进行关联, 关联上的中间部分 t2 表字段展示为实际数据</p><p>关联不上的左边部分, t2 表字段展示为null</p></blockquote><h4 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">right</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token comment">#等价于</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">left</span> <span class="token keyword">join</span> t1 <span class="token keyword">on</span> t2<span class="token punctuation">.</span>id <span class="token operator">=</span> t1<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319143202765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">inner</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319143445607?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><blockquote><p>内连接展示的是两表完全能匹配的部分</p></blockquote><h4 id="左表独有"><a href="#左表独有" class="headerlink" title="左表独有"></a>左表独有</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">left</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id <span class="token keyword">where</span> t2<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319143724064?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><blockquote><p>单独查询表1独有数据, 将表2存在数据的部分筛除出去即可</p></blockquote><h4 id="右表独有"><a href="#右表独有" class="headerlink" title="右表独有"></a>右表独有</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">right</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id <span class="token keyword">where</span> t1<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319143933426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="全连接FULL-OUTER-JOIN"><a href="#全连接FULL-OUTER-JOIN" class="headerlink" title="全连接FULL OUTER JOIN"></a>全连接FULL OUTER JOIN</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#在Mysql中不支持全连接,oracle中支持,在Mysql中可以使用合并结果集达到全连接的效果</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">union</span> <span class="token punctuation">(</span><span class="token keyword">all</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意点：</p><pre><code> 1. 多个select 语句union 时, 结果集列数必须相同, 同时列名也得一致, 以第一个select 列为标准 2. union 与 union all 的区别在于union all 对于完全重复数据不会去重, 而union会进行去重, 很影响性能, 因此尽量使用union all</code></pre><p>示例：</p><p>t1                                            t2                            t1 union t2                t1 union all t2 与 t1 union t2 区别仅在于 1 a 会出现两次,未</p><p>id    name                             id    name              id    name             进行去重。</p><p>1    a                                      1     a                      1     a</p><p>2    b                                     4     e                       2    b</p><p>3    c                                      5     f                       3    c</p><p>​                                                                             4     e</p><p>​                                                                             5     f</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#在上述场景中,若需要求得二表关联后的全连接数据,实际上是将表1 和 表2 左关联的数据与表2 和 表1左关联的数据合并,这里会发现中间数据会重复,而union自带去重,解决了这个问题</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">left</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id uniom <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">left</span> <span class="token keyword">join</span> t1 <span class="token keyword">on</span> t2<span class="token punctuation">.</span>id <span class="token operator">=</span> t1<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319142752582?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><blockquote><p>加上</p></blockquote><p><img src="https://img-blog.csdn.net/20170319143202765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><blockquote><p>使用union 自带去重后</p></blockquote><p><img src="https://img-blog.csdn.net/20170319144159774?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="并集去交集"><a href="#并集去交集" class="headerlink" title="并集去交集"></a>并集去交集</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">left</span> <span class="token keyword">join</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>id <span class="token operator">=</span> t2<span class="token punctuation">.</span>id <span class="token keyword">where</span> t2<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">left</span> <span class="token keyword">join</span> t1 <span class="token keyword">on</span> t2<span class="token punctuation">.</span>id <span class="token operator">=</span> t1<span class="token punctuation">.</span>id <span class="token keyword">where</span> t1<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdn.net/20170319144515693?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQxMDczMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><blockquote><p>取到表1的独有关联表2的独有即为并集去交集</p></blockquote><h2 id="2-内核"><a href="#2-内核" class="headerlink" title="2 内核"></a>2 内核</h2><h3 id="2-1-MySQL-基本构造"><a href="#2-1-MySQL-基本构造" class="headerlink" title="2.1 MySQL 基本构造"></a>2.1 MySQL 基本构造</h3><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/1713491999502.png" alt="1713491999502"></p><h4 id="存储层"><a href="#存储层" class="headerlink" title="存储层"></a>存储层</h4><blockquote><p>​    存储层架构模式是插件式, 支持InnoDB、MyISAM、Memory等多个存储引擎,最常用的是InnoDB, 在MySql5.5.5 版本成为了默认存储引擎。同时,无论选用什么存储引擎, Server层是共用的。</p></blockquote><h5 id="MyISAM与InnoDB区别"><a href="#MyISAM与InnoDB区别" class="headerlink" title="MyISAM与InnoDB区别"></a>MyISAM与InnoDB区别</h5><blockquote><ol><li><p><strong>InnoDB支持事务，MyISAM不支持</strong></p></li><li><p><strong>InnoDB支持外键，而MyISAM不支持</strong></p></li><li><p><strong>InnoDB的B+树主键索引的叶子节点就是数据文件</strong>，辅助索引的叶子节点是主键的值；而MyISAM的B+树主键索引和辅助索引的叶子节点都是数据文件的<strong>地址指针</strong>。</p></li><li><p><strong>InnoDB不保存表的具体行数，执行select count(*) from table时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快（注意不能加有任何WHERE条件）；</strong></p></li><li><p><strong>InnoDB支持表、行(默认)级锁，而MyISAM支持表级锁</strong></p></li><li><p><strong>InnoDB表必须有唯一索引（如主键），而Myisam可以没有</strong></p></li><li><p><strong>Innodb存储文件有frm、ibd，而Myisam是frm、MYD、MYI</strong></p><p>​    <strong>Innodb：frm是表定义文件，ibd是数据文件</strong></p><p>​    <strong>Myisam：frm是表定义文件，myd是数据文件，myi是索引文件</strong></p></li></ol></blockquote><h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4><blockquote><p>​    连接器的创建实际上就是在输入以下命令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>h xxx <span class="token operator">-</span>P xxx <span class="token operator">-</span>u xxx <span class="token operator">-</span>p <span class="token comment">#主机端口  用户   密码(不建议密码直接跟在-p后面, 使用history命令能查看所有执行的命令,可能会泄露数据库连接密码)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>权限问题：</p><p>创建连接的过程中,连接器会读取权限表中当前登录用户所拥有的权限,之后这次连接持续时间内都将拥有创建时所读取到的权限级别。(因此在增减权限时, 被授权用户需要断开连接, 重新建立连接才能获取权限)。</p><p>长连接与短连接：</p><p>长连接指客户端持续有请求,则一直使用同一个连接。</p><p>短连接指每次执行很少几次查询后就断开连接, 下次查询再重新建立。</p><p>由于建立连接过程比较复杂, 所以尽量使用长连接。</p></blockquote><h4 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h4><blockquote><p>查询缓存是以key(SQL)-value(结果)直接存储在内存中的, 如果在查询中能够去查询缓存找到缓存SQL, 那么这个value会直接返回给客户端。</p><p>查询缓存利大于弊, 由于只要对这张表进行了更新,那么针对于这个表的所有查询缓存都会失效, MySQL 也提供了查询缓存的按需使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 通过SQL_CACHE 指定使用查询缓存</span><span class="token keyword">select</span> SQL_CACHE <span class="token operator">*</span> <span class="token keyword">from</span> T <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意,在MySQL 8.0 以上版本已经彻底没有查询缓存这个功能了。</p></blockquote><h4 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h4><blockquote><p>分析器的主要任务是解析一条SQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Select</span> id<span class="token punctuation">,</span> name <span class="token keyword">from</span> student<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主要验证一条SQL写的对不对,</p><p>需要干以下几件事情</p><ol><li>解析语句, 生成解析树</li><li>检查语句中的关键字、表、字段是否存在</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 出现问题后会报错(以下是常见错误之一)</span>ERROR <span class="token number">1064</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><blockquote><p>经过分析器, MySQL已经知道了你要做什么, 接下来是经过优化器的处理。</p><p>优化器主要干以下几件事情</p><ol><li>一条语句有多表关联时, 各个表的连接顺序(原则是尽可能扫描行记录少的表)</li><li>表中有多个索引时, 决定使用哪个索引</li></ol></blockquote><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><blockquote><p>执行器做的工作有以下几点</p><ol><li>检查当前用户是否有查询权限, 若没有, 则会进行报错</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ERROR <span class="token number">1142</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: <span class="token keyword">SELECT</span> command denied <span class="token keyword">to</span> <span class="token keyword">user</span> <span class="token string">'b'</span><span class="token variable">@'localhost'</span> <span class="token keyword">for</span> <span class="token keyword">table</span> <span class="token string">'T'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   2.检查完执行权限之后, 执行器会调用底层数据库引擎接口, 执行查询语句</p></blockquote><h3 id="2-2-WAL、redo-log、undo-log、binlog"><a href="#2-2-WAL、redo-log、undo-log、binlog" class="headerlink" title="2.2 WAL、redo log、undo log、binlog"></a>2.2 WAL、redo log、undo log、binlog</h3><blockquote><p>redo log(引擎层日志,仅存在于InnoDB)：</p><p>​    WAL(Write-Ahead Logging) 关键在于先写日志, 再写磁盘。 在执行更新操作SQL语句时, 会先将更新写入至redo log日志中,本质上redo log日志也是写磁盘操作, 但因为写日志可以追加写,而更新操作需要找到要更新的存储位置, 再进行更新操作, 涉及到寻址过程,随机写会比较耗时。</p><p>​    但由于redo log只有一份, 写满后再写会覆盖掉前面的redo log日志, 因此redo log满了之后, 就必须要进行落盘了。(系统空闲时, 也会推进check point的位置, 慢慢落盘更新操作)</p></blockquote><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/1713494917083.png" alt="1713494917083"></p><blockquote><p>undo log：</p><p>​    undo log有两个作用：提供回滚和多个行版本控制(MVCC)。</p><p>​    在数据修改的时候，不仅记录了redo，还记录了相对应的undo，如果因为某些原因导致事务失败或回滚了，可以借助该undo进行回滚。</p><p>​    undo log和redo log记录物理日志不一样，它是逻辑日志。<strong>可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。</strong></p><p>crash-safe：</p><p>​    redo log 是InnoDB所独有的, InnoDB正是由于拥有了redo log 所以才具备crash-safe的能力(即使MySQL宕机, 也不会丢失数据的能力。)</p></blockquote><blockquote><p>binlog(Server层日志)：</p><p>​    binlog主要记录的是执行update这个语句的原始逻辑, 属于逻辑日志, 而redo log属于物理日志, 记录的是“在某个数据页上做了那些修改”。仅仅存在binlog日志无法实现crash-safe能力。</p><p>​    主要用于数据库的备份。</p></blockquote><blockquote><p>​    在update操作中, 我们可以看到在写redo log过程中, 进行了一次<strong>二阶段提交</strong>(写入redo log时, 首先进行了prepare操作, 待得binlog写入完毕, 才进行redo log 写操作commit, 有点类似于事务)。</p><p>​    需要二阶段提交主要是<strong>保证redo log和binlog的一致性</strong>,如果二者不一致, 那么通过redo log恢复的数据库和使用binlog恢复的数据库将会不一致。</p><p>redo log和binlog具有关联性，在恢复数据时，redo log用于恢复主机故障时的未更新的物理数据，binlog用于备份操作。每个阶段的log操作都是记录在磁盘的，在恢复数据时，redo log 状态为commit则说明binlog也成功，直接恢复数据；如果redo log是prepare，则需要查询对应的binlog事务是否成功，决定是回滚还是执行。</p></blockquote><h4 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h4><p><img src="https://static001.geekbang.org/resource/image/2e/be/2e5bff4910ec189fe1ee6e2ecc7b4bbe.png" alt="img"></p><blockquote><p>在上述提交事务的时候，innodb先更新数据行，然后写入redolog，再处于prepare阶段，最后写入binlog并提交事务。</p><p>在写入redolog以及binlog这两个日志的过程中，便是处于两阶段体检，prepare -&gt; commit;</p><p>能够避免由于事务提交失败，导致的redolog和binlog二者不一致问题。</p></blockquote><h4 id="redolog和binlog的区别"><a href="#redolog和binlog的区别" class="headerlink" title="redolog和binlog的区别"></a>redolog和binlog的区别</h4><blockquote><p>redo log是InnoDB引擎特有的，只记录该引擎中表的修改记录。binlog是MySQL的Server层实现的，会记录所有引擎对数据库的修改。 </p><p> redo log是物理日志，记录的是在具体某个数据页上做了什么修改；binlog是逻辑日志，记录的是这个语句的原始逻辑。 </p><p> redo log是循环写的，空间固定会用完；binlog是可以追加写入的，binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p></blockquote><h3 id="2-3-事务"><a href="#2-3-事务" class="headerlink" title="2.3 事务"></a>2.3 事务</h3><blockquote><p>​    简单来说, 事务就是保证一组数据库操作,要么全部成功,要么全部失败。在MySQL中, 事务是基于引擎层实现的, 而并不是所有的引擎都支持事务操作, 比如MySQL原生引擎, MyISAM引擎就不支持事务。这也是MyISAM会被InnoDB替代的重要原因之一。</p></blockquote><h4 id="隔离性与隔离级别"><a href="#隔离性与隔离级别" class="headerlink" title="隔离性与隔离级别"></a>隔离性与隔离级别</h4><h5 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h5><blockquote><p>事务的四个特征,ACID分别为原子性、一致性、隔离性、持久性</p><p>原子性(Atomicity)：一个事务中的所有操作要么全部执行,要么全部不执行。</p><p>一致性(Consistency)：在事务的开始之前和事务的结束以后,数据库完整性未被破坏。(写入的数据满足约束、触发器等)</p><p>隔离性(Isolation)：数据库允许多个并发事务同时对数据进行读写和修改的能力,隔离性防止事务交叉执行导致数据不一致。</p><p>持久性(Durability)：事务处理结束后,对数据的修改就是持久的。</p></blockquote><h5 id="什么是隔离级别"><a href="#什么是隔离级别" class="headerlink" title="什么是隔离级别"></a>什么是隔离级别</h5><blockquote><p>​    当数据库上同时有多个事务同时执行时, 就可能出现以下问题：</p><p>脏读(dirty read)： 读到了其他事物未提交的数据</p><p>不可重复读(non-repeatable read)：前后读取的记录内容不一致, 简单来说就是在自己的事务中, 两次读结果不一样, 因为能看到其他事务的修改(偏向于更新操作)</p><p>幻读(phantom read)：幻读侧重的方面是某一次的 select 操作得到的结果所表征的数据状态无法支撑后续的业务操作。更为具体一些：select 某记录是否存在，不存在，准备插入此记录，但执行 insert 时发现此记录已存在，无法插入，此时就发生了幻读。(偏向于增删)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">step1 T1: <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>step2 T2: <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'big cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>step3 T1: <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'big cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>step4 T1: <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>T1 ：主事务，检测表中是否有 id 为 <span class="token number">1</span> 的记录，没有则插入，这是我们期望的正常业务逻辑。T2 ：干扰事务，目的在于扰乱 T1 的正常的事务执行。在 RR 隔离级别下，step1、step2 是会正常执行的，step3 则会报错主键冲突，对于 T1 的业务来说是执行失败的，这里 T1 就是发生了幻读，因为 T1 在 step1 中读取的数据状态并不能支撑后续的业务操作，T1：“见鬼了，我刚才读到的结果应该可以支持我这样操作才对啊，为什么现在不可以”。T1 不敢相信的又执行了 step4，发现和 setp1 读取的结果是一样的（RR下的 MVCC机制）。此时，幻读无疑已经发生，T1 无论读取多少次，都查不到 id <span class="token operator">=</span> <span class="token number">1</span> 的记录，但它的确无法插入这条他通过读取来认定不存在的记录（此数据已被T2插入），对于 T1 来说，它幻读了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps：对于不可重复度和幻读可以这样理解, </p><p>​    因为不可重复读的会出现是在读已提交隔离级别下, 而在读已提交隔离级别下, read view 是在每一次查询SQL的执行时创建的, 因此在这之间如果有其他事物对数据进行了修改且完成提交, 那么同一个事务的两次Select read view 可能不一致, 因此导致了不可重复读。</p><p>​    而针对于幻读, 简单来说就是其他事物的增删操作对当前事务会起到影响。 </p></blockquote><p>由于以上问题的出现, 因此需要使用隔离级别来解决</p><blockquote><p>首先需要明确的一点是,隔离的越严格, 效率就会越低。事务的隔离级别包括：</p><p>读未提交(read uncommitted)：一个事务还没提交时,它做的变更其他事务就能够看到。</p><p>读提交(read committed)：一个事务提交之后, 它做的变更其他事务才能看到。</p><p>可重复读(repeatable read)：一个事务在执行中所看到的数据, 和这个事务在启动时看到的是一致的,中间其他事务的修改该事务是读不到的。</p><p>串行化(serializable)：对于同一行记录, 在前一个事务为提交之前, 后一个事务无法对其进行操作。(通过加锁完成)</p></blockquote><p><img src="https://static001.geekbang.org/resource/image/7d/f8/7dea45932a6b722eb069d2264d0066f8.png" alt="img"></p><blockquote><p>以上图片是一个实际并行事务的例子, 在不同的隔离级别下, V1、V2、V3读到的数据都是不一致的</p><p>读未提交： 由于时序图中, 事务B修改值操作再事务A读值操作之前, 而且当前处于读未提交隔离级别, 尽管事务B尚未提交修改操作, 但这对于事务A来说仍然是可读的, 因此V1、V2、V3的值分别为2、2、2。        <strong>2,2,2</strong></p><p>读已提交：在读已提交事务隔离级别中, 事务A读取到的V1仍然是1, 因为事务B尚未提交, 待得事务B提交完成之后, 事务A读取到的数值V2、V3就是事务B提交完成修改后的2了。                <strong>1,2,2</strong></p><p>可重复读：不可重复读简单理解就是一个事务对于一行数据只会读取一次, 因此在事务A启动时, 读取到的值就是1, 无论后序事务B对其进行了怎样的修改, 事务A都不会再去读, 因此V1、V2的值都是最开始读取到的1, 待得事务A提交之后,V3 才能读取到事务B修改到的值2。                            <strong>1,1,2</strong></p><p>串行化：在串行化中, 事务A首先开启, 事务A拿到读锁, 读取数值, 因此事务B便被阻塞了, 只有事务A提交之后释放读锁, 事务B才可能拿到写锁对事务A进行修改。因此V1、V2的值是1, 事务A提交之后, 事务B拿到写锁, 进行数值的修改, V3的便是1了2了。    <strong>1,1,2</strong></p></blockquote><h5 id="隔离级别实现原理"><a href="#隔离级别实现原理" class="headerlink" title="隔离级别实现原理"></a>隔离级别实现原理</h5><p><img src="https://static001.geekbang.org/resource/image/d9/ee/d9c313809e5ac148fc39feff532f0fee.png" alt="img"></p><blockquote><p>在MySQL中, 每条更新操作除了记载redo log 之外还会记载undo log, undo log是用来将这个操作反向回滚, 比如操作时将1改成2, 在redo log便会记载这个操作, 同时在undo log也会记载将2改成1, 用于后序事务回滚。</p><p>因此我们可以发现尽管是一条记录, 在数据库中可能会存在多个版本, 这实际上就是数据库的<strong>多版本并发控制(MVCC)</strong></p></blockquote><blockquote><p>事务隔离级别实际上是基于一致性视图read view实现的,</p><p>读未提交直接返回记录上的最新值, 没有视图概念。</p><p>读提交视图是在每次读请求的时候创建的(自己每读一次可能拿到的视图都不一致)。</p><p>可重复读视图是在事务启动的时候(第一条执行的sql)创建的, 之后都使用这个视图。</p><p>串行化直接加锁避免并行访问, 不存在视图概念。</p></blockquote><h5 id="什么是MVCC"><a href="#什么是MVCC" class="headerlink" title="什么是MVCC"></a>什么是MVCC</h5><blockquote><p>多版本并发控制： 读取数据时通过一种类似快照的方式将数据保存下来, 这样读锁和写锁就不冲突了, 不同事务session会看到自己特定版本的数据, 版本链。</p><p>MVCC只在RC和RR两个隔离级别下工作。</p><p>聚族索引记录中有两个必要的隐藏列：</p><p>trx_id: 用来存储每次对某条聚族索引记录进行修改时的事务id</p><p>roll_pointer: 每次对哪条聚族索引记录有修改的时候, 都会将老版本写入undo log中, 这个roll_pointer就是存了一个指针, 用来指向这条聚族索引记录的上一个版本位置, 通过它来获取上一个版本的记录信息；</p></blockquote><h5 id="修改事务的隔离级别"><a href="#修改事务的隔离级别" class="headerlink" title="修改事务的隔离级别"></a>修改事务的隔离级别</h5><blockquote><p>在oracle数据库中, 默认隔离级别是读提交。</p><p>MySQL中可以通过以下语句查看当前事务隔离级别。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'transaction_isolation'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以使用以下SQL来设置隔离级别</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> transaction_isolation <span class="token operator">=</span> <span class="token string">'read-committed'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="InnoDB如何保证事务的原子性、持久性和一致性"><a href="#InnoDB如何保证事务的原子性、持久性和一致性" class="headerlink" title="InnoDB如何保证事务的原子性、持久性和一致性"></a>InnoDB如何保证事务的原子性、持久性和一致性</h4><blockquote><p>利用undo log保障原子性。该log保存了事务发生之前的数据的一个版本，可以用于回滚，从而保证事务原子性。 </p><p> 利用redo log保证事务的持久性，该log关注于事务的恢复.在重启mysql服务的时候，根据redo log进行重做，从而使事务有持久性。 </p><p> 利用undo log+redo log保障一致性。事务中的执行需要redo log，如果执行失败，需要undo log 回滚。</p></blockquote><h4 id="事务的开启方式"><a href="#事务的开启方式" class="headerlink" title="事务的开启方式"></a>事务的开启方式</h4><blockquote><p>在MySQL中, 事务既可以手动提交, 也可以交给系统自动提交</p><ol><li>显式启动事务语句， begin 或 start transaction。配套的提交语句是 commit，回滚语句是 rollback。</li><li>set autocommit=0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。(默认autocommit=1, 表示系统自动提交事务)</li></ol></blockquote><h4 id="长事务的弊端"><a href="#长事务的弊端" class="headerlink" title="长事务的弊端"></a>长事务的弊端</h4><blockquote><p>长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数 据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占 用存储空间。 </p><p>在MySQL 5.5及以前的版本，回滚日志是跟数据字典一起放在ibdata文件里的，即使长事务最终提交，回滚被清理，文件也不会变小。我见过数据只有20GB，而回滚段有200GB的库。最终 </p><p>只好为了清理回滚段，重建整个库。 除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库。</p></blockquote><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">查询长事务超过60S的select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="场景题1"><a href="#场景题1" class="headerlink" title="场景题1"></a>场景题1</h4><blockquote><p>如何避免长事务对业务的影响？</p><p><strong>首先，从应用开发端来看：</strong></p><ol><li>确认是否使用了 set autocommit=0。这个确认工作可以在测试环境中开展，把 MySQL 的 general_log 开起来，然后随便跑一个业务逻辑，通过 general_log 的日志来确认。一般框架如果会设置这个值，也就会提供参数来控制行为，你的目标就是把它改成 1。</li><li>确认是否有不必要的只读事务。有些框架会习惯不管什么语句先用 begin/commit 框起来。我见过有些是业务并没有这个需要，但是也把好几个 select 语句放到了事务中。这种只读事务可以去掉。</li><li>业务连接数据库的时候，根据业务本身的预估，通过 SET MAX_EXECUTION_TIME 命令，来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。</li></ol><p><strong>其次，从数据库端来看：</strong></p><ol><li>监控 information_schema.Innodb_trx 表，设置长事务阈值，超过就报警 / 或者 kill；</li><li>Percona 的 pt-kill 这个工具不错，推荐使用；</li><li>在业务功能测试阶段要求输出所有的 general_log，分析日志行为提前发现问题；</li><li>如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2（或更大的值）。如果真的出现大事务导致回滚段过大，这样设置后清理起来更方便。</li></ol></blockquote><h3 id="2-4-索引"><a href="#2-4-索引" class="headerlink" title="2.4 索引"></a>2.4 索引</h3><blockquote><p>索引本质上是一种数据结构, 简略来说 <strong>索引是帮助MySQL快速检索数据的一种排好序的数据结构</strong></p></blockquote><h4 id="创建索引的三种方法"><a href="#创建索引的三种方法" class="headerlink" title="创建索引的三种方法"></a>创建索引的三种方法</h4><blockquote><ol><li><p>创建表的时候创建索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_dept<span class="token punctuation">(</span>    <span class="token keyword">no</span> <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    info <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">index</span> index_no<span class="token punctuation">(</span><span class="token keyword">no</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>已建表中添加索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> index_name <span class="token keyword">on</span> t_dept<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改表创建索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> t_dept <span class="token keyword">add</span> <span class="token keyword">index</span> index_name<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></blockquote><h4 id="索引的三种实现模型"><a href="#索引的三种实现模型" class="headerlink" title="索引的三种实现模型"></a>索引的三种实现模型</h4><h5 id="基于哈希表"><a href="#基于哈希表" class="headerlink" title="基于哈希表"></a>基于哈希表</h5><blockquote><p>基于哈希表的索引缺点很明显, 容易造成哈希冲突, 造成哈希冲突之后链表的检索速度不够快, 而且哈希算法的选择也是需要深思熟虑的一个点, 基于<strong>哈希表的索引适合应用于做等值查询</strong></p><p>只有 Memory 引擎显式支持哈希索引。</p><p>Hash索引不支持范围查询，无法用于排序, 也不支持部分索引列匹配查找。</p></blockquote><h5 id="基于有序数组"><a href="#基于有序数组" class="headerlink" title="基于有序数组"></a>基于有序数组</h5><blockquote><p>基于有序数组的索引优点在于<strong>做等值检索与范围检索时性能都十分优秀</strong>(二分查找), 但是一旦需要更新数据就比较麻烦了, 由于需要维系数组的有序, 插入需要挪动后面所有元素。因此<strong>有序数组索引只适合于静态存储引擎</strong></p></blockquote><h5 id="基于多叉树"><a href="#基于多叉树" class="headerlink" title="基于多叉树"></a>基于多叉树</h5><p><img src="https://static001.geekbang.org/resource/image/04/68/04fb9d24065635a6a637c25ba9ddde68.png" alt="img"></p><blockquote><p>树的层数过高会导致需要访问的数据块过多</p></blockquote><h6 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h6><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/.%5CMySql%E5%A4%8D%E4%B9%A0%5Cimage-20211016163825186.png" alt="image-20211016163825186"></p><blockquote><p>在B树中， 每一个结点(磁盘块)都存储了索引以及数据，</p><p>模拟下查找key为29的data的过程：</p><p>1、根据根结点指针读取文件目录的根磁盘块1。【磁盘IO操作<strong>1次</strong>】</p><p>2、磁盘块1存储17，35和三个指针数据。我们发现17&lt;29&lt;35，因此我们找到指针p2。</p><p>3、根据p2指针，我们定位并读取磁盘块3。【磁盘IO操作<strong>2次</strong>】</p><p>4、磁盘块3存储26，30和三个指针数据。我们发现26&lt;29&lt;30，因此我们找到指针p2。</p><p>5、根据p2指针，我们定位并读取磁盘块8。【磁盘IO操作<strong>3次</strong>】</p><p>6、磁盘块8中存储28，29。我们找到29，获取29所对应的数据data。</p><p><strong>因此， B树索引使每次磁盘I/O读取到内存的数据都发挥了作用， 从而提高了查询效率。</strong></p></blockquote><h6 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h6><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/.%5CMySql%E5%A4%8D%E4%B9%A0%5Cimage-20211016164358084.png" alt="image-20211016164358084"></p><blockquote><p>与B树最大的不同在于：</p><p>​        数据只存储于叶子节点，而非叶子节点只存储键值信息， 因此B+树的高度比B树低得多</p><p>而我们知道， 每一个结点都代表一次磁盘I/O， 非叶子节点不存储数据之后， 就可以存储更多的索引信息， 因此在检索时， 可以通过更低的代价(更少的磁盘I/O)找到最终索引数据存储于哪一个磁盘块。</p><p>另外， B+树和B树的不同在于在B+Tree上通常有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构。所以我们除了可以对B+Tree进行主键的范围查找和分页查找，还可以从根节点开始，进行随机查找。</p></blockquote><h4 id="聚族索引与二级索引"><a href="#聚族索引与二级索引" class="headerlink" title="聚族索引与二级索引"></a>聚族索引与二级索引</h4><p><strong>主键索引树为B+树，普通索引也有一颗索引树，普通索引命中时，先基于普通索引查询普通索引树对应的主键ID,在基于主键ID查询主键索引的B+树</strong></p><blockquote><p>在InnoDB中, 主键索引称为聚族索引, 而非主键索引称为普通(二级)索引。</p><p>在主键索引中, 叶子节点内容存储的是整行数据, 而在二级索引中, 存储的值是主键的值。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">create</span> <span class="token keyword">table</span> T<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> k <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">index</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下图片便是上述建表中索引存储的值的情况, 可以看出ID作为主键索引, 存储的值为这一行完整的数据, 而k作为二级索引, 记录的是主键对应的值。</p></blockquote><p><img src="https://static001.geekbang.org/resource/image/dc/8d/dcda101051f28502bd5c4402b292e38d.png" alt="img"></p><p><strong>那么主键索引和普通索引的区别在于哪里呢</strong></p><blockquote><p>主要区别在于使用普通索引进行查询需要<strong>回表</strong></p><p>什么是回表？我们根据上图主键索引和普通索引存储的东西来看, 很清楚的能够发现主键索引直接存储了这一行记录的所有信息, 因此使用主键查询的时候, 我们直接能够从B+树中获取这行的所有字段信息, 而<strong>使用普通索引进行查询时, 查到的仅仅是主键ID的值, 还需要根据这个ID值去表中查询具体的记录行</strong>, 这个操作便被称为回表。</p></blockquote><h4 id="索引的维护"><a href="#索引的维护" class="headerlink" title="索引的维护"></a>索引的维护</h4><blockquote><p>在使用索引的过程中,插入新的值需要维护B+树索引的有序性, 因此可能造成页分裂与页合并。</p><p>举个例子：</p><p>当前 ID索引如下所示</p><pre class="line-numbers language-none"><code class="language-none">1,2,3,4,6,7,8,9,10 |<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到10已经存满了, 那么这个时候我又插入了一个ID为5的数据会发生什么情况呢, 因为需要保证B+树索引的有序性, 因此必须重新创建数据页存储索引 ,便会造成以下情况</p><pre class="line-numbers language-none"><code class="language-none">1,2,3,4,5,6,7,8,9 | 10 |<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要将原来页的数据挪到新的页, 这个称为<strong>页分裂</strong></p><p><strong>那么如何防止页分裂呢?</strong></p><p>使用自增主键便可以防止页分裂,  使用自增主键之后, 由于新增的主键都是比之前存储的主键数值大, 因此不涉及插入操作, 都是追加操作, 因此也不存在叶子节点的分裂。</p><p>同理, 那什么是页合并呢？</p><p>页合并由于相邻的两个页数据存储利用率过低, 导致两个数据页合并。</p><p><strong>使用逻辑删除替换物理删除能防止页合并。</strong></p></blockquote><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><blockquote><p>前面提到使用二级索引会导致回表, 那么什么情况下会使用覆盖索引而不会导致回表呢,很简单, 使用覆盖索引查询覆盖索引存的东西(即主键), 我们称之为覆盖索引。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> ID <span class="token keyword">from</span> T <span class="token keyword">where</span> k<span class="token operator">=</span><span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>覆盖索引不光适用于查询主键的情况, 在使用普通索引或者联合索引的最左匹配字段时,查询的结果是联合索引的字段或者主键, 不用回表, 直接返回结果。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 联合索引(ID,Name)</span><span class="token keyword">select</span> Name <span class="token keyword">from</span> T <span class="token keyword">where</span> ID<span class="token operator">=</span><span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h4 id="普通索引和唯一索引如何选择-Change-buffer"><a href="#普通索引和唯一索引如何选择-Change-buffer" class="headerlink" title="普通索引和唯一索引如何选择(Change buffer)"></a>普通索引和唯一索引如何选择(Change buffer)</h4><blockquote><p>普通索引允许被索引的数据列包含重复的值。比如说，因为人有可能同名，所以同一个姓名在同一个“员工个人资料”数据表里可能出现两次或更多次。</p><p>唯一索引可以保证数据记录的唯一性。(UNIQUE INDEX)</p></blockquote><h6 id="查找过程中"><a href="#查找过程中" class="headerlink" title="查找过程中"></a>查找过程中</h6><blockquote><p>假设，执行查询的语句是 select id from T where k=5。这个查询语句在索引树上查找的过程，先是通过 B+ 树从树根开始，按层搜索到叶子节点，也就是图中右下角的这个数据页，然后可以认为数据页内部通过二分法来定位记录。</p><ul><li><p>对于普通索引来说，查找到满足条件的第一个记录 (5,500) 后，需要查找下一个记录，直到碰到第一个不满足 k=5 条件的记录。</p></li><li><p>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</p></li></ul><p><strong>在以上场景中,二者性能微乎其微</strong></p></blockquote><blockquote><p>因为在MySQL中是以页为单位将记录从磁盘中读取出来, 在InnoDB中, 默认页大小为16KB</p><p>所以对于普通索引而言, 已经加载出来一页了, 顺序查找第一个不满足条件的记录可太简单了, 只需要移动一次指针即可, 针对最坏情况, 找到的记录刚好是这一页的最后一条, 就需要加载第二个页, 不过这个情况出现的可能性微乎其微, 因为一个数据页可以存放近千个key。</p></blockquote><h6 id="更新过程中"><a href="#更新过程中" class="headerlink" title="更新过程中"></a>更新过程中</h6><blockquote><p><strong>change buffer：</strong></p><p>​    当需要更新一条数据时, 如果这条数据(包含数据的数据页)在内存中则直接对其进行更新, 如果不在的话, InnoDB会将更新操作缓存在change buffer 中, 这样就不需要从磁盘中加载这个数据页了, <strong>在下次查询这个数据页时, 会先执行change buffer 和这个数据页的 merge操作, 将更新实际写入, 再完成查询操作。</strong></p><p>​    虽然名字叫做change buffer , 但是实际上是可以进行持久化的。</p><p>​    merge操作除了加载数据页到内存中会执行, 系统后台也会有线程定期执行merge ,在数据库正常关闭（shutdown）的过程中，也会执行 merge 操作。</p><p><strong>优点：</strong></p><p>​    显然，如果能够将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用 buffer pool 的，所以这种方式还能够避免占用内存，提高内存利用率。</p><p><strong>change buffer内存大小的设置(0即为关闭)：</strong></p><p>​    change buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数 innodb_change_buffer_max_size 来动态设置。这个参数设置为 50 的时候，表示 change buffer 的大小最多只能占用 buffer pool 的 50%。</p></blockquote><blockquote><p>对于唯一索引, 更新过程中需要检查是否满足了唯一性约束, 比如要插入(4,400)这条记录, 就必须判断当前表中是否有k=4的记录, 而判断这个记录是否存在必须<strong>将其读入到内存中</strong>。既然已经读到内存中了, 也就没change buffer什么事情了, 所以对于唯一索引的更新, 读到内存中更新是最快的方法, 所以读到内存也是必不可少的开支。</p><p>而对于普通索引, 如果待更新页在内存中, 那么和唯一索引一样, 直接更新即可。</p><p>但是如果待更新页不在内存中, 普通索引是不用加载记录页到内存的, 直接将更新操作记录在change buffer里面就好了, 而唯一索引还要傻乎乎的去加载数据页到内存。</p></blockquote><h4 id="Change-Buffer的使用场景"><a href="#Change-Buffer的使用场景" class="headerlink" title="Change Buffer的使用场景"></a>Change Buffer的使用场景</h4><blockquote><p>上面已经分析了Change Buffer适用于普通索引的更新操作</p><p>但是是不是所有场景都可以用Change Buffer呢？</p><p>​    其实不是的, Change Buffer和数据页Merge之前, Change Buffer记录的变更越多, 收益就越大。但是反过来来说, 如果一个业务都是更新之后就查找, 那么Change Buffer既不会起到加速的作用, 甚至还会起到相反的作用, 因为要维护Change Buffer和数据页的merge 还要维护Change Buffer本身。</p><p>​    这种情况下应该关闭掉Change Buffer</p></blockquote><h4 id="Change-Buffer和Redo-log区别"><a href="#Change-Buffer和Redo-log区别" class="headerlink" title="Change Buffer和Redo log区别"></a>Change Buffer和Redo log区别</h4><blockquote><p>数据页在内存，那就修改数据页，写redo log，如果数据页不在内存，修改的也不是唯一索引，而是普通索引，那就写change buffer。并把这个change buffer写入到redo log，防止更新丢失。</p><p>如果要简单地对比这两个机制在提升更新性能上的收益的话，<strong>redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。</strong></p></blockquote><h4 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h4><blockquote><p>使用索引的过程中, 对于字符串索引可以匹配到最左N个字符, 对于联合索引可以匹配到最左N个字段。</p><p>比如联合索引(id, name)</p><p>针对查询 id=1 and name=“xxx” 可以使用到索引</p><p>​        查询id=1  可以使用到索引</p><p>​        查询id=1 and name=“xx%” 可以使用到索引</p><p>​        查询name=“xxx” 无法使用到索引</p></blockquote><h4 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h4><blockquote><p>针对联合索引(name, age), 需求查询姓张,年龄为10岁的所有男孩</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tuser <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'张%'</span> <span class="token operator">and</span> age<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> ismale<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们已经知道通过最左匹配原则, 可以使用到联合索引</p><p>在MySQL 5.6 之前, 使用了联合索引之后, 只能够通过联合索引找到的主键ID, 回表一一查询</p><p>而在MySQL 5.6 引入了<strong>索引下推</strong>优化, 可以在索引遍历过程中, 对索引包含的字段先做判断, 直接过滤掉不满足条件的记录, 减少回表次数。</p><p>上述案例中, 因为age是联合索引的一部分, 因此可以使用到age=10这个条件针对age做一次筛除, 减少回表次数</p></blockquote><p><img src="https://static001.geekbang.org/resource/image/76/1b/76e385f3df5a694cc4238c7b65acfe1b.jpg" alt="img"></p><p>如上图所示, 实际回表次数只有两次, 因为ID3 和 ID6 在使用联合索引筛查时已经由于不满足联合索引age部分的判定条件而被筛除出去了。</p><h4 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h4><blockquote><ol><li>使用or</li><li>复合索引未使用最左字段</li><li>like以%开头</li><li>需要进行类型转换</li><li>where中索引列有计算</li><li>where中索引列使用了函数</li><li>如果MySQL觉得全表扫描更快时(数据量少)</li></ol></blockquote><h4 id="explain执行计划"><a href="#explain执行计划" class="headerlink" title="explain执行计划"></a>explain执行计划</h4><blockquote><p>explain关键字用于分析sql语句的执行情况，可以通过他进行sql语句的性能分析。 </p><p> type：表示连接类型，从好到差的类型排序为 </p><ul><li>system：系统表，数据已经加载到内存里。 </li><li>const：常量连接，通过索引一次就找到。 </li><li>eq_ref：唯一性索引扫描，返回所有匹配某个单独值的行。 </li><li>ref：非主键非唯一索引等值扫描，const或eq_ref改为普通非唯一索引。 </li><li>range：范围扫描，在索引上扫码特定范围内的值。 </li><li>index：索引树扫描，扫描索引上的全部数据。 </li><li>all：全表扫描。</li></ul><p> key：显示MySQL实际决定使用的键。 </p><p> key_len：显示MySQL决定使用的键长度，长度越短越好 </p><p> Extra：额外信息 </p><ul><li>Using filesort：MySQL使用外部的索引排序，很慢需要优化。 </li><li>Using temporary：使用了临时表保存中间结果，很慢需要优化。 </li><li>Using index：使用了覆盖索引。 </li><li>Using where：使用了where。</li></ul></blockquote><h4 id="SQL优化过程"><a href="#SQL优化过程" class="headerlink" title="SQL优化过程"></a>SQL优化过程</h4><blockquote><ol><li>通过慢日志定位执行较慢的SQL语句</li><li>利用explain对这些关键字段进行分析</li><li>根据分析结果进行优化</li></ol></blockquote><h4 id="场景题1-1"><a href="#场景题1-1" class="headerlink" title="场景题1"></a>场景题1</h4><blockquote><p>question：</p><p>​    <strong>分析一下哪些场景下应该使用自增主键，而哪些场景下不应该。</strong></p><p>比如使用身份证作为主键还是使用自增主键呢？</p><p>​    使用身份证等业务字段作为主键有以下几个问题</p><ol><li><p>主键不自增, 可能导致页分裂</p></li><li><p>二级索引存储的是主键的值, 会导致存储的数据量很大</p></li></ol><p><strong>什么时候可以使用业务字段作为主键呢？</strong></p><ol><li>只有一个索引</li><li>该索引是唯一索引(如果确定某个数据列只包含彼此各不相同的值，在为这个数据列创建索引的时候，就应该用关键字UNIQUE把它定义为一个唯一索引。)</li></ol></blockquote><h4 id="场景题2"><a href="#场景题2" class="headerlink" title="场景题2"></a>场景题2</h4><blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>geek<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>b<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>c<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>d<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>b<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>c<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>c<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>ca<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>c<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>cb<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>c<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>b<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有上述一个表, 请问以上联合索引ca、cb是必须的吗？</p><p>答： cb 是必须的, ca可以去掉</p><p>因为主键索引是复合索引【a,b】</p><p>遵循最左匹配原则【a,b】 可以覆盖到 【a】, 【a,b】</p><p>而还有一个普通索引【c】</p><p>根据覆盖索引, 使用普通索引【c】查询到的实际上是主键【a,b】</p><p>可以建立这样一条映射【c,a,b】</p><p>因此可以认为当前存在这样一个复合索引【c,a,b】</p><p>根据最左匹配原则, 复合索引【c,a,b】可以覆盖到【c,a】, 但是无法覆盖到【c,b】</p><p><strong>因此添加的索引【c,a】是多余的, 而索引【c,b】是有必要的</strong></p></blockquote><h3 id="2-5-锁"><a href="#2-5-锁" class="headerlink" title="2.5 锁"></a>2.5 锁</h3><p>可参考文章：<a href="https://www.cnblogs.com/qdhxhz/p/15587726.html">一文详解MySQL的锁机制 - 雨点的名字 - 博客园 (cnblogs.com)</a></p><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/v2-4c17d8e79c98524c0f5d90d843cea70b_r.jpg" alt="各种锁的描述维度"></p><h4 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h4><blockquote><p>全局锁是对整个数据库实例加锁, 如果需要令整个库处于只读状态时, 可以使用全局锁。使用全局锁之后, 整个库的数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句将会被阻塞。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 添加全局锁的语句</span>Flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>全局锁的常见使用场景是<strong>全库逻辑备份</strong></p><p>然而使用了全局锁会存在很多需要注意的细节</p><ul><li>如果在主库上进行备份使用了全局锁, 那么在备份期间无法进行更新操作, 业务基本得停摆</li><li>如果在从库上进行备份使用了全局锁, 那么备份期间从库将不能执行主库同步过来的binlog。 将会导致主从库延迟</li></ul><p>官方自带的逻辑备份工具mysqldump，当mysqldump使用参数–single-transaction的时候，会启动一个事务，确保拿到一致性视图。而由于MVCC的支持，这个过程中数据是可以正常更新的。</p></blockquote><h4 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h4><h5 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h5><blockquote><p>表锁时MyISAM仅支持的锁。</p><p>开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低。</p><p>添加表锁、释放表锁的语句是</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">lock</span> <span class="token keyword">tables</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span><span class="token keyword">unlock</span> <span class="token keyword">tables</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对表添加了读锁, 该表对于所有进程(包括加锁者), 都无法修改该表的内容, 只能读</p><p>对表添加了写锁, 在加锁进程完成写操作,释放锁之前, 其他任何进程既无权对该表进行读取, 也无权对该表进行修改 </p><p>简略来讲,读锁所有人只能读, 写锁仅仅加锁者可读写,其他人既不能读也不能写。</p><p>在没有更细粒度的锁时, 表锁是最常见处理并发的方式。InnoDB支持行锁, 因此一般不适用表锁控制并发。</p></blockquote><h5 id="元数据锁-metadata-lock"><a href="#元数据锁-metadata-lock" class="headerlink" title="元数据锁(metadata lock)"></a>元数据锁(metadata lock)</h5><blockquote><p>元数据锁(MDL锁)是server层的锁，表级锁，主要用于隔离DML（Data Manipulation Language，数据操纵语言，如select）和DDL（Data Definition Language，数据定义语言，如改表头新增一列）操作之间的干扰。每执行一条DML、DDL语句时都会申请MDL锁，DML操作需要MDL读锁，DDL操作需要MDL写锁（MDL加锁过程是系统自动控制，无法直接干预，读读共享，读写互斥，写写互斥。</p><p>对表添加了读锁时, 只有需要所有进程只能读, 不可写</p><p>对表结构进行修改时, 会给表添加元数据写锁, 除加锁进程外, 其他所有进程无法对表进行读写。</p><p>给表添加元数据写锁时, 表结构无法修改, 可以CRUD。</p><p>MDL读写锁中，如果存在读锁，那么写锁需要等待读锁释放，而存在写锁时，读锁需要等待写锁释放。</p><p>注意：元数据锁写锁读锁优先级不一致, 写锁的优先级会高于读锁</p><p><img src="https://static001.geekbang.org/resource/image/7c/ce/7cf6a3bf90d72d1f0fc156ececdfb0ce.jpg" alt="img"></p><p>在上述场景中, sessionA sessionB需要的都是读锁, 可以读到数据, 这时session C需求写锁, 由于读锁写锁相互制约, 在读锁为释放之前, 写锁不可能拿得到, 但又因为写锁优先级高于读锁, 因此session D都被session 阻塞了, </p></blockquote><p><img src="https://img-blog.csdnimg.cn/2019071820433258.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3EyODc4OTQ4,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="页锁"><a href="#页锁" class="headerlink" title="页锁"></a>页锁</h4><blockquote><p>开销和加锁速度介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般。</p></blockquote><h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><blockquote><p>顾名思义, 行锁就是针对数据表中行记录的锁。</p><p>开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高。</p><p>在InnoDB事务中, 行锁在事务开启后,需要更新该行数据就会加上, 修改完毕之后并不会马上释放, 而是在事务提交了之后才会释放行锁。这个就是<strong>两阶段锁协议</strong>。(如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。)</p></blockquote><h5 id="给Sql手动加锁"><a href="#给Sql手动加锁" class="headerlink" title="给Sql手动加锁"></a>给Sql手动加锁</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 加共享锁（S）</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token comment">-- 加排它锁（X)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h4><blockquote><p>乐观锁：对于数据冲突保持一种乐观态度，操作数据时不会对操作的数据进行加锁，只有到数据提交的时候才通过一种机制来验证数据是否存在冲突。 </p><p> 悲观锁：对于数据冲突保持一种悲观态度，在修改数据之前把数据锁住，然后再对数据进行读写，在它释放锁之前任何人都不能对其数据进行操作，直到前面一个人把锁释放后下一个人数据加锁才可对数据进行加锁，然后才可以对数据进行操作，一般数据库本身锁的机制都是基于悲观锁的机制实现的。</p></blockquote><h4 id="从粒度上来看-锁的类型"><a href="#从粒度上来看-锁的类型" class="headerlink" title="从粒度上来看, 锁的类型"></a>从粒度上来看, 锁的类型</h4><blockquote><ul><li><p>表锁： 锁整个表</p></li><li><p>页锁： 锁一页</p></li><li><p>行锁： 锁一行或者多行</p></li><li><p>记录锁： 通过唯一索引, 锁一行(一定是一行)</p></li><li><p>间隙锁：属于行锁的一种, 左开右闭, 比如锁(1,4) 则实际锁的是【2, 3, 4】</p><p>​    <img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/MySql%E5%A4%8D%E4%B9%A0%5Cimage-20210820223002859.png" alt="image-20210820223002859"></p><ul><li>间隙锁的存在主要是为了防止幻读</li><li>间隙锁的引入，可能会导致同样的语句锁住更大的范围，这其实是影响了并发度的。</li></ul></li><li><p>临键锁： </p><ul><li>临键锁=记录锁+间隙锁, 加了临键锁之后, 在范围内数据不允许修改和插入</li></ul></li></ul></blockquote><h4 id="各种引擎对于锁的支持"><a href="#各种引擎对于锁的支持" class="headerlink" title="各种引擎对于锁的支持"></a>各种引擎对于锁的支持</h4><p><img src="/2024/05/28/shu-ju-ku/mysql-fu-xi/.%5CMySql%E5%A4%8D%E4%B9%A0%5Cimage-20210817095539354.png" alt="image-20210817095539354"></p><h4 id="死锁与死锁检测"><a href="#死锁与死锁检测" class="headerlink" title="死锁与死锁检测"></a>死锁与死锁检测</h4><p><img src="https://static001.geekbang.org/resource/image/4d/52/4d0eeec7b136371b79248a0aed005a52.jpg" alt="img"></p><blockquote><p>上述场景中, 事务A锁id=1的行, 事务B锁id=2的行, 而事务A执行完id=1的update之后, 需要更新id=2的行, 需要拿到行锁, 而锁被B占用, 恰好由于事务B 也因为id=1 的行锁被事务A占用, 无法完成事务, 无法提交, 造成持续占有锁, 造成了死锁。</p><p>当出现死锁以后，有两种策略：</p><ol><li>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。(默认50s)</li><li>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。(默认开启, 但是需要耗费大量cpu资源)</li></ol><p>两种策略都各有各的劣势</p><p>其他方案是</p><ul><li><p>客户端做并发限制</p></li><li><p>MySQL中间件做并发限制</p></li><li><p>修改数据库源码，排队控制并发</p></li><li><p>业务逻辑上进行优化，将一行数据分解成多行，降低写入压力。</p></li></ul></blockquote><h4 id="锁的总结"><a href="#锁的总结" class="headerlink" title="锁的总结"></a>锁的总结</h4><p>这里对 <strong>记录锁</strong>、<strong>间隙锁</strong>、<strong>临键锁</strong> 做一个总结</p><ul><li><strong>InnoDB</strong> 中的<strong>行锁</strong>的实现依赖于<strong>索引</strong>，一旦某个加锁操作没有使用到索引，那么该锁就会退化为<code>表锁</code>。</li><li><strong>记录锁</strong>存在于包括<strong>主键索引</strong>在内的<strong>唯一索引</strong>中，锁定单条索引记录。</li><li><strong>间隙锁</strong>存在于<strong>非唯一索引</strong>中，锁定<strong>开区间</strong>范围内的一段间隔，它是基于<strong>临键锁</strong>实现的。</li><li><strong>临键锁</strong>存在于<strong>非唯一索引</strong>中，该类型的每条记录的索引上都存在这种锁，它是一种特殊的<strong>间隙锁</strong>，锁定一段<strong>左开右闭</strong>的索引区间。</li></ul><h3 id="2-6-MySQL主从复制"><a href="#2-6-MySQL主从复制" class="headerlink" title="2.6 MySQL主从复制"></a>2.6 MySQL主从复制</h3><blockquote><p>MySQL提供主从复制功能，可以方便的实现数据的多处自动备份，不仅能增加数据库的安全性，还能进行读写分离，提升数据库负载性能。 </p><p> 主从复制流程： </p><ol><li>在事务完成之前，主库在binlog上记录这些改变，完成binlog写入过程后，主库通知存储引擎提交事物 </li><li>从库将主库的binlog复制到对应的中继日志，即开辟一个I/O工作线程，I/O线程在主库上打开一个普通的连接，然后开始binlog dump process，将这些事件写入中继日志。从主库的binlog中读取事件，如果已经读到最新了，线程进入睡眠并等待ma主库产生新的事件。</li></ol><p> 读写分离：即只在MySQL主库上写，只在MySQL从库上读，以减少数据库压力，提高性能。</p></blockquote><h2 id="3-常用函数"><a href="#3-常用函数" class="headerlink" title="3 常用函数"></a>3 常用函数</h2><h3 id="3-1Limit函数"><a href="#3-1Limit函数" class="headerlink" title="3.1Limit函数"></a>3.1Limit函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">limit</span> m<span class="token punctuation">,</span>n<span class="token comment">#m为偏移量（从0开始）， n为显示的行数</span><span class="token keyword">limit</span> m    <span class="token operator">=</span>   <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span>m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-窗口函数"><a href="#3-2-窗口函数" class="headerlink" title="3.2 窗口函数"></a>3.2 窗口函数</h3><p><img src="https://img-blog.csdnimg.cn/2019022312202720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTAxMDc3MA==,size_16,color_FFFFFF,t_70" alt="img"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#基本语法</span>lag<span class="token punctuation">(</span>salary<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> emp_no <span class="token keyword">order</span> <span class="token keyword">by</span> hire_day<span class="token punctuation">)</span> <span class="token keyword">as</span> last_salary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-SQL-优化"><a href="#4-SQL-优化" class="headerlink" title="4    SQL 优化"></a>4    SQL 优化</h2><h3 id="4-1-优化规则"><a href="#4-1-优化规则" class="headerlink" title="4.1    优化规则"></a>4.1    优化规则</h3><h4 id="表连接数"><a href="#表连接数" class="headerlink" title="表连接数"></a>表连接数</h4><blockquote><ul><li>连接的表越多，性能越差</li><li>可能的话，将连接拆分成若干个过程逐一执行</li><li>优先执行可显著减少数据量的连接，既降低了复杂度，也能够容易按照预期执行</li><li>如果不可避免多表连接，很可能是设计缺陷</li><li>外链接效果差，因为必须对左右表进行表扫描</li><li>尽量使用inner join查询</li></ul></blockquote><h4 id="使用临时表"><a href="#使用临时表" class="headerlink" title="使用临时表"></a>使用临时表</h4><blockquote><p>如果不可避免，可以考虑使用临时表或表变量存放中间结果。</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">temporary</span> <span class="token keyword">table</span>TABLENAME<span class="token keyword">as</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>TABLENAME<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="少用子查询"><a href="#少用子查询" class="headerlink" title="少用子查询"></a>少用子查询</h4><h4 id="视图嵌套"><a href="#视图嵌套" class="headerlink" title="视图嵌套"></a>视图嵌套</h4><blockquote><p>不要过深,一般视图嵌套不要超过2个为宜。</p></blockquote><h3 id="4-2-SQL编写注意事项"><a href="#4-2-SQL编写注意事项" class="headerlink" title="4.2    SQL编写注意事项"></a>4.2    SQL编写注意事项</h3><h4 id="NULL列"><a href="#NULL列" class="headerlink" title="NULL列"></a>NULL列</h4><blockquote><p>Null列使用索引没有意义，任何包含null值的列都不会被包含在索引中。因此where语句中的is null或is not null的语句优化器是不允许使用索引的。</p></blockquote><h4 id="concat或"><a href="#concat或" class="headerlink" title="concat或||"></a>concat或||</h4><blockquote><p>concat或||是mysql和oracle的字符串连接操作，如果对列进行该函数操作，那么也开会忽略索引的使用。比较下面的查询语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 忽略索引</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> first_name <span class="token operator">||</span> <span class="token string">''</span> <span class="token operator">||</span> last_name <span class="token operator">=</span> <span class="token string">'bill gates'</span> <span class="token punctuation">;</span><span class="token comment">-- 使用索引</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> first_name <span class="token operator">=</span> <span class="token string">'bill'</span> <span class="token operator">and</span> last_name <span class="token operator">=</span> <span class="token string">'bill gates'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4><blockquote><p>通配符出现在首位，无法使用索引，反之可以。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 无法使用索引</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%t%'</span> <span class="token punctuation">;</span><span class="token comment">-- 可以使用索引</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'t%'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h4><blockquote><p>order by子句中不要使用非索引列或嵌套表达式，这样都会导致性能降低。</p></blockquote><h4 id="Not运算"><a href="#Not运算" class="headerlink" title="Not运算"></a>Not运算</h4><blockquote><p>not运算无法使用索引，可以改成其他能够使用索引的操作。如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 索引无效</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> sal <span class="token operator">!=</span> <span class="token number">3000</span> <span class="token punctuation">;</span><span class="token comment">-- 索引生效</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> sal <span class="token operator">&lt;</span> <span class="token number">3000</span>  <span class="token operator">or</span> sal <span class="token operator">&gt;</span> <span class="token number">3000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="过滤要趁早"><a href="#过滤要趁早" class="headerlink" title="过滤要趁早"></a>过滤要趁早</h4><h4 id="exists替代in"><a href="#exists替代in" class="headerlink" title="exists替代in"></a>exists替代in</h4><blockquote><p>not in是最低效的，因为要对子查询的表进行全表扫描。可以考虑使用外链接或not exists。如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 正确</span><span class="token keyword">SELECT</span>  <span class="token operator">*</span><span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span>  EMPNO <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">AND</span>  <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> ‘X<span class="token string">' FROM DEPT WHERE DEPT.DEPTNO = EMP.DEPTNO AND LOC = ‘MELB'</span><span class="token punctuation">)</span><span class="token comment">-- 错误</span><span class="token keyword">SELECT</span>  <span class="token operator">*</span> <span class="token keyword">FROM</span>  EMP <span class="token keyword">WHERE</span>  EMPNO <span class="token operator">&gt;</span> <span class="token number">0</span>  <span class="token operator">AND</span>  DEPTNO <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> DEPTNO  <span class="token keyword">FROM</span>  DEPT  <span class="token keyword">WHERE</span>  LOC <span class="token operator">=</span> ‘MELB'<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-3-索引"><a href="#4-3-索引" class="headerlink" title="4.3    索引"></a>4.3    索引</h3><h4 id="不要在索引列上使用函数"><a href="#不要在索引列上使用函数" class="headerlink" title="不要在索引列上使用函数"></a>不要在索引列上使用函数</h4><blockquote><p>这样会停止使用索引，进行全表扫描，如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 错误</span><span class="token keyword">SELECT</span> … <span class="token keyword">FROM</span>  DEPT  <span class="token keyword">WHERE</span> SAL <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">&gt;</span> <span class="token number">25000</span><span class="token punctuation">;</span> <span class="token comment">-- 正确</span><span class="token keyword">SELECT</span> … <span class="token keyword">FROM</span>  DEPT  <span class="token keyword">WHERE</span> SAL <span class="token operator">&gt;</span> <span class="token number">25000</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="gt-与-gt-x3D"><a href="#gt-与-gt-x3D" class="headerlink" title=">与>="></a>&gt;与&gt;=</h4><blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 直接定位到4的记录(推荐)</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> SAL <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token punctuation">;</span><span class="token comment">-- 先定位到3，再向后找1个(不推荐)</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> SAL <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="union代替or"><a href="#union代替or" class="headerlink" title="union代替or"></a>union代替or</h4><blockquote><p>在索引列上，可以使用union替换or操作。索引列上的or操作会造成全表扫描。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 高效: </span><span class="token keyword">SELECT</span> LOC_ID <span class="token punctuation">,</span> LOC_DESC <span class="token punctuation">,</span> REGION <span class="token keyword">FROM</span> LOCATION <span class="token keyword">WHERE</span> LOC_ID <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> LOC_ID <span class="token punctuation">,</span> LOC_DESC <span class="token punctuation">,</span> REGION <span class="token keyword">FROM</span> LOCATION <span class="token keyword">WHERE</span> REGION <span class="token operator">=</span> <span class="token string">'MELBOURNE'</span> <span class="token comment">-- 低效: </span><span class="token keyword">SELECT</span> LOC_ID <span class="token punctuation">,</span>LOC_DESC <span class="token punctuation">,</span>REGION <span class="token keyword">FROM</span> LOCATION <span class="token keyword">WHERE</span> LOC_ID<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">OR</span> REGION <span class="token operator">=</span><span class="token string">'MELBOURNE'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="is-null-amp-is-not-null"><a href="#is-null-amp-is-not-null" class="headerlink" title="is null &amp; is not null"></a>is null &amp; is not null</h4><blockquote><p>如果列可空，避免使用索引。对于多个列使用的索引，起码保证至少有个列不为空。对于多列索引，只有访问了第一个列才会启用索引，如果访问后面的列则使用的是全表扫描。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 低效: (索引失效) </span><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span>  DEPARTMENT  <span class="token keyword">WHERE</span>  DEPT_CODE <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span> <span class="token comment">-- 高效: (索引有效) </span><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span>  DEPARTMENT  <span class="token keyword">WHERE</span>  DEPT_CODE <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="union-amp-union-all"><a href="#union-amp-union-all" class="headerlink" title="union &amp; union all"></a>union &amp; union all</h4><blockquote><p>union具有去重的操作，增加了计算时间。union all不需要去重，但会包含相同记录。同样功能下，首选union all操作。</p></blockquote><h3 id="4-4-优化口诀"><a href="#4-4-优化口诀" class="headerlink" title="4.4    优化口诀"></a>4.4    优化口诀</h3><blockquote><p>全值匹配我最爱，最左前缀要遵守；<br>带头大哥不能死，中间兄弟不能断；<br>索引列上少计算，范围之后全失效；<br>Like百分写最右，覆盖索引不写星；<br>不等空值还有or，索引失效要少用；<br>哇恰引号不可丢，SQL高级也不难！</p></blockquote><h2 id="5-SQL题"><a href="#5-SQL题" class="headerlink" title="5 SQL题"></a>5 SQL题</h2><h3 id="5-1-显示排名第二高的员工工资"><a href="#5-1-显示排名第二高的员工工资" class="headerlink" title="5.1 显示排名第二高的员工工资"></a>5.1 显示排名第二高的员工工资</h3><p><a href="https://www.nowcoder.com/practice/c1472daba75d4635b7f8540b837cc719?tpId=82&amp;tqId=29769&amp;rp=1&amp;ru=/ta/sql&amp;qru=/ta/sql/question-ranking">https://www.nowcoder.com/practice/c1472daba75d4635b7f8540b837cc719?tpId=82&amp;tqId=29769&amp;rp=1&amp;ru=%2Fta%2Fsql&amp;qru=%2Fta%2Fsql%2Fquestion-ranking</a></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#方法1： 使用 order by</span><span class="token keyword">select</span> salary <span class="token keyword">from</span> salaries <span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#方法2： 不使用 order by</span><span class="token comment"># 简单方法， max(salary) = max(salary (where salary &lt; max(salary)))</span> <span class="token comment"># 通用方法(求任意第n高的工资)</span><span class="token keyword">select</span> salary<span class="token keyword">from</span>salaries<span class="token keyword">where</span> s<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token punctuation">(</span>     <span class="token keyword">select</span> s1<span class="token punctuation">.</span>salary     <span class="token keyword">from</span>      salaries s1     <span class="token keyword">join</span>     salaries s2 <span class="token keyword">on</span> s1<span class="token punctuation">.</span>salary<span class="token operator">&lt;=</span>s2<span class="token punctuation">.</span>salary      <span class="token keyword">group</span> <span class="token keyword">by</span> s1<span class="token punctuation">.</span>salary     <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> s2<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-查询在职员工自入职以来的薪水涨幅情况"><a href="#5-2-查询在职员工自入职以来的薪水涨幅情况" class="headerlink" title="5.2 查询在职员工自入职以来的薪水涨幅情况"></a>5.2 查询在职员工自入职以来的薪水涨幅情况</h3><p><a href="https://www.nowcoder.com/practice/fc7344ece7294b9e98401826b94c6ea5?tpId=82&amp;&amp;tqId=29773&amp;rp=1&amp;ru=/ta/sql&amp;qru=/ta/sql/question-ranking">https://www.nowcoder.com/practice/fc7344ece7294b9e98401826b94c6ea5?tpId=82&amp;&amp;tqId=29773&amp;rp=1&amp;ru=/ta/sql&amp;qru=/ta/sql/question-ranking</a></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span> <span class="token punctuation">(</span>t2<span class="token punctuation">.</span>salary<span class="token operator">-</span>t1<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> growth<span class="token keyword">from</span> salaries t1<span class="token keyword">inner</span> <span class="token keyword">join</span> salaries t2<span class="token keyword">on</span> t1<span class="token punctuation">.</span>emp_no<span class="token operator">=</span>t2<span class="token punctuation">.</span>emp_no<span class="token keyword">where</span> t1<span class="token punctuation">.</span>from_date <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> hire_date <span class="token keyword">from</span> employees <span class="token keyword">where</span> emp_no<span class="token operator">=</span>t1<span class="token punctuation">.</span>emp_no<span class="token punctuation">)</span><span class="token operator">and</span> t2<span class="token punctuation">.</span>to_date<span class="token operator">=</span><span class="token string">'9999-01-01'</span><span class="token keyword">order</span> <span class="token keyword">by</span> growth <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>240527腾娱面试纪要</title>
      <link href="/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/"/>
      <url>/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/</url>
      
        <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h3 id="1-I-x2F-O模型了解吗，Select-Pool-Epool区别"><a href="#1-I-x2F-O模型了解吗，Select-Pool-Epool区别" class="headerlink" title="1.  I/O模型了解吗，Select Pool Epool区别"></a>1.  I/O模型了解吗，Select Pool Epool区别</h3><blockquote><p>SELECT / POLL / EPOLL 本质上都是I/O多路复用的技术，I/O多路复用本质是通过一种机制，让单个线程可以监视多个描述符，当发现某个描述符就绪以后，能够通知程序进行对应的读写操作。</p><p>三者本质都是同步IO，就是说在读写事件触发之后，需要自己负责读写，而异步IO会将数据从内核空间拷贝到用户空间，不需要自己负责读写。</p><p><strong>和阻塞模式的区别</strong></p><p>​    这三种相较于阻塞模式而言，不需要通过多线程的技术实现同时对多个socket进行监听，这就是多路复用的目的。</p><p><img src="/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/1716877707687.png" alt="EPOLL"></p><p><strong>三者区别</strong></p><ol><li>SELECT: 需要对文件描述符数组fd进行遍历，找到需要处理读写请求的fd，然后对其进行处理，考虑到fd数组用户态和内核态的拷贝，以及遍历的效率，内核对fd集合大小进行了限制</li><li>POLL：POLL相较于SELECT区别其实就是一个基于数组另一个基于链表进行存储fd，因此对fd链表大小没有进行限制，但是遍历还是会很慢</li><li>EPOLL: EPOLL实际是POLL的增强版，他对POLL的优化是在绑定连接描述符时，会给描述符指定一个回调函数，当设备就绪时，回调函数会将自己添加到一个Ready队列中，EPOLL_WAIT实际上只会去这个Ready队列中扫描是否存在被唤醒而加入队列的描述符，不再需要遍历整个被监听的描述符集合。因此能够显著提高程序在大量并发连接中只有少量活跃情况下的CPU利用率</li></ol></blockquote><h3 id="2-进程间通信的方式"><a href="#2-进程间通信的方式" class="headerlink" title="2.  进程间通信的方式"></a>2.  进程间通信的方式</h3><blockquote><p>匿名管道、管道、共享内存、消息队列、信号、信号量、Socket</p></blockquote><h3 id="3-如何做Jvm监控，有没有遇到过full-gc问题"><a href="#3-如何做Jvm监控，有没有遇到过full-gc问题" class="headerlink" title="3.  如何做Jvm监控，有没有遇到过full gc问题"></a>3.  如何做Jvm监控，有没有遇到过full gc问题</h3><blockquote><p><strong>使用 JDK 自带工具</strong></p><ul><li><strong>jconsole</strong>: 一个图形化工具，可以实时监控 JVM 的内存使用、线程活动、GC 活动等。</li><li><strong>jvisualvm</strong>: 提供了更全面的监控和分析功能，包括线程、内存、GC、CPU 性能分析等。</li><li><strong>jstat</strong>: 一个命令行工具，用于监控 JVM 的各种统计数据，如 GC 活动、类加载等。</li></ul><p><strong>第三方监控工具</strong></p><ul><li><strong>Prometheus + Grafana</strong>: 通过 Java Agent（如 jmx_exporter）采集 JVM 指标，并使用 Grafana 进行可视化展示。</li><li><strong>New Relic</strong>: 提供 JVM 监控和应用性能监控（APM）功能，可以集成多种指标和日志进行分析。</li><li><strong>Elasticsearch + Logstash + Kibana (ELK)</strong>: 收集和分析 JVM 日志和 GC 日志。</li></ul><p><strong>GC分析</strong></p><p>启用详细的 GC 日志记录，以便后续分析。使用如下 JVM 参数：</p><pre class="line-numbers language-none"><code class="language-none">-Xlog:gc*:file=gc.log:tags,uptime,time,level<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>a.分析 GC 日志</strong></p><ul><li><strong>使用 GC 日志分析工具</strong>: 如 GCViewer、GCEasy，这些工具可以帮助解析 GC 日志并生成图表，显示 Full GC 发生的频率和原因。</li><li><strong>手动分析</strong>: 查看 GC 日志中的 Full GC 记录，关注发生的时间点、持续时间和回收的内存量。</li></ul><p><strong>b.监控和分析内存使用情况</strong></p><ul><li>通过 jconsole 或 jvisualvm 实时监控堆内存的使用情况，注意是否有老年代（Old Generation）内存占用过高的现象。</li><li>检查内存分配情况，特别是大对象（Large Objects）是否频繁分配导致老年代内存不足。</li></ul></blockquote><h3 id="4-如何做SQL优化，如果性能瓶颈在DB层面，考虑从哪几个方面去排查问题"><a href="#4-如何做SQL优化，如果性能瓶颈在DB层面，考虑从哪几个方面去排查问题" class="headerlink" title="4.  如何做SQL优化，如果性能瓶颈在DB层面，考虑从哪几个方面去排查问题"></a>4.  如何做SQL优化，如果性能瓶颈在DB层面，考虑从哪几个方面去排查问题</h3><blockquote><ol><li>连接数量方面：考虑是否连接数不够，使用连接池</li><li>SQL层面：检查EXPLAIN执行计划，分析索引使用情况，重构复杂查询</li><li>数据库配置：优化数据库配置，如调整数据库参数，buffer_pool_size</li><li>表设计：检查表数据量，对于数据量较大的表，是否需要考虑表的拆分，如水平或垂直拆表</li><li>缓存：对于热点数据缓存，减轻数据库压力</li></ol></blockquote><h3 id="5-输入www-baidu-com，经历了什么流程"><a href="#5-输入www-baidu-com，经历了什么流程" class="headerlink" title="5.  输入www.baidu.com，经历了什么流程"></a>5.  输入<a href="http://www.baidu.com,经历了什么流程/">www.baidu.com，经历了什么流程</a></h3><blockquote><ol><li>浏览器地址栏输入url</li><li>浏览器会先查看浏览器缓存系统缓存路由缓存， 如有存在缓存， 就直接显示。 如果没有， 接着第3步</li><li>域名解析（DNS）获取相应的 IP</li><li>浏览器向服务器发起 tcp 连接， 与浏览器建立 tcp 三次握手</li><li>握手成功， 浏览器向服务器发送 http 请求， 请求数据包</li><li>服务器请求数据， 将数据返回到浏览器</li><li>浏览器接收响应， 读取页面内容， 解析 html 源码， 生成 Dom 树</li><li>解析 css 样式、 浏览器渲染， js交互</li></ol><p><a href="https://cloud.tencent.com/developer/article/1493941">地址栏中输入网址后发生了什么？-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><strong>三次握手与四次挥手</strong></p><p><img src="/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/1716875573112.png" alt="三次握手与四次挥手"></p><p>为什么需要三次握手？：三次握手是为了保证客户端和服务端明确知道双方具备收发消息的能力，第一次握手，客户端发送消息SYN给服务端（<code>第一次握手</code>），服务端收到后，回发SYN+ACK给客户端（<code>第二次握手</code>），证实了服务端具备了收发消息的能力，客户端收到后，知道了服务端是没问题的，但是服务端其实还不知道客户端的接收消息能力是否有问题，所以客户端还需要回一个ACK给服务端（<code>第三次握手</code>）。</p><p><code>握手阶段：两次不安全、四次没必要</code></p><p>为什么需要四次挥手？：四次挥手的原因是因为TCP协议是全双工的，客户端以及服务端均具备主动发送消息的能力，第一次挥手由客户端发起，会发送一个FIN给服务端（<code>第一次挥手</code>），服务端收到回会回一个ACK给客户端（<code>第二次挥手</code>），表示自己不再接受客户端的消息，但是服务端可能存在消息未发送完成（<code>全双工</code>）。因此在自己准备完成后，会接着发送一个FIN个客户端（<code>第三次挥手</code>），客户端接收到FIN之后，就知道服务端也没有消息给自己发送了，为了证明自己已收到，会发送一个ACK给服务端（<code>第四次挥手</code>）。</p></blockquote><h3 id="6-Kafka两个分区，五个消费者，会遇到什么问题"><a href="#6-Kafka两个分区，五个消费者，会遇到什么问题" class="headerlink" title="6.  Kafka两个分区，五个消费者，会遇到什么问题"></a>6.  Kafka两个分区，五个消费者，会遇到什么问题</h3><blockquote><p>会导致消费不均衡的问题，分区数量和消费者数量不匹配</p></blockquote><h3 id="7-有没有使用到缓存，应用场景是什么，为什么没有使用本地缓存，如何保证缓存一致性"><a href="#7-有没有使用到缓存，应用场景是什么，为什么没有使用本地缓存，如何保证缓存一致性" class="headerlink" title="7. 有没有使用到缓存，应用场景是什么，为什么没有使用本地缓存，如何保证缓存一致性"></a>7. 有没有使用到缓存，应用场景是什么，为什么没有使用本地缓存，如何保证缓存一致性</h3><blockquote></blockquote><h3 id="8-HTTPS和HTTP的区别，用到了几次加密，为什么使用对称加密以及非对称加密"><a href="#8-HTTPS和HTTP的区别，用到了几次加密，为什么使用对称加密以及非对称加密" class="headerlink" title="8.  HTTPS和HTTP的区别，用到了几次加密，为什么使用对称加密以及非对称加密"></a>8.  HTTPS和HTTP的区别，用到了几次加密，为什么使用对称加密以及非对称加密</h3><blockquote><p>HTTPS 通过结合非对称加密和对称加密来实现安全的通信：</p><ul><li><strong>非对称加密</strong>: 用于安全地交换对称加密密钥，保证密钥交换的安全性。</li><li><strong>对称加密</strong>: 用于实际的数据传输，加密和解密速度快，保证数据传输的效率。</li></ul><p><strong>流程</strong>:</p><ol><li>客户端向服务器发送连接请求。</li><li>服务器发送公钥证书给客户端，证书中包含服务器的公钥。</li><li>客户端验证证书的有效性（由受信任的证书颁发机构 CA 签名）。</li><li>客户端生成一个对称密钥，用服务器的公钥加密这个对称密钥并发送给服务器。</li><li>服务器用自己的私钥解密，得到对称密钥。</li><li>客户端请求服务端，通过自己生成的对称密钥加密请求数据，服务端通过解密后的对称密钥解密请求数据</li></ol></blockquote><h3 id="9-一体化系统部署的架构是什么，资源部署时服务器什么配置"><a href="#9-一体化系统部署的架构是什么，资源部署时服务器什么配置" class="headerlink" title="9.  一体化系统部署的架构是什么，资源部署时服务器什么配置"></a>9.  一体化系统部署的架构是什么，资源部署时服务器什么配置</h3><blockquote><p>整体上使用前后端分离的微服务架构，前端流量入口通过Nginx做第一层转发，转发到前端静态页面或者后端网关，后端使用SpringCloud Netflix微服务那一套，使用Gateway作为网关，流量到达网关之后会基于路由规则进行转发，转发到后台的如登录鉴权服务、债务服务或者其他平台组件服务。</p><p>部署方式层面，由于我们各个项目现场情况不一致，有的使用云平台，有的使用物理机，以湖南为例，我们是使用的物理机进行的部署，首先我们会申请三台应用服务器，分别在这三台应用服务器上部署三套服务，并注册到同一个注册中心中，在其中挑选一台服务器作为网关，负责路由到这三台服务器中，除此之外，还需要申请数据库服务器，但是数据库基本都是政府负责运维的，只是给我们分配了一个用户，因此数据库的配置我们不是太了解，其他就是针对如redis、sftp这种文件服务器的申请，redis需要申请一台，sftp需要申请一个磁盘空间大一点的 如4TB的服务器。</p></blockquote><h3 id="10-一体化系统系统支不支持弹性伸缩，如何实现的，如果宕机了怎么保证服务调用不会出问题"><a href="#10-一体化系统系统支不支持弹性伸缩，如何实现的，如果宕机了怎么保证服务调用不会出问题" class="headerlink" title="10. 一体化系统系统支不支持弹性伸缩，如何实现的，如果宕机了怎么保证服务调用不会出问题"></a>10. 一体化系统系统支不支持弹性伸缩，如何实现的，如果宕机了怎么保证服务调用不会出问题</h3><blockquote><p>在使用云平台的省份是支持弹性伸缩的，底层应该是通过K8S的自动拓展POD实现的，但是针对于没有上云的省份，我们系统在部署层面没有考虑弹性伸缩的问题，如果服务宕机了，首先我们在Eureka端会有个心跳检测的机制。</p><p><strong>Eureka心跳检测机制</strong></p><p>eureka server和eureka client之间会通过心跳检测的形式进行通信，client默认情况下每间隔5秒会发送心跳包给server，如果server端收到心跳包之后，就知道client是一个存活的状态，如果server在一段时间内（默认情况下90秒）没有收到心跳包，就会从服务列表中剔除该服务，前提是没有开启自我保护机制。</p><p><strong>自我保护机制</strong></p><p>eureka自我保护机制是用于在特殊情况下，比如突然比较多的服务短时间内丢失了心跳，则这个时候会开启自我保护机制，不会剔除服务，这本质上是一种AP的体现，因为有的情况是服务伪宕机了，实际上请求还能够请求的通，如果直接剔除的话，可用服务列表便直接会少一个服务提供者，严重情况下甚至会导致服务不可用。</p><p>但是自我保护机制也可以进行关闭，如果关闭的话其实是一个CP的体现，保证了server 和 client的一致性。</p><p><img src="/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/1716860905411.png" alt="各个注册中心CAP权衡"></p><p><strong>自我保护机制开关以及心跳间隔的配置</strong></p><pre class="line-numbers language-none"><code class="language-none">自我保护：eureka:  server:    # 服务自保机制，默认开启    enable-self-preservation: true    # 每隔多久触发一次服务剔除（单位ms毫秒）    eviction-interval-timer-in-ms: 10000心跳间隔：eureka:  client:    service-url:      defaultZone: http://localhost:20000/eureka/  instance:    # 每间隔5秒钟，向服务中心发送一条续约指令    # 心跳检测与续约时间（开发环境可以将值设小一点，保证服务关闭后注册中心能及时剔除）    lease-expiration-duration-in-seconds: 5    # 如果30秒内，依然没有收到续约请求，判断服务过期    lease-renewal-interval-in-seconds: 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="11-JVM内存分布，如何做的垃圾回收，展开讲讲"><a href="#11-JVM内存分布，如何做的垃圾回收，展开讲讲" class="headerlink" title="11.  JVM内存分布，如何做的垃圾回收，展开讲讲"></a>11.  JVM内存分布，如何做的垃圾回收，展开讲讲</h3><blockquote><p><img src="/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/1716862653125.png" alt="内存分布空间"></p><p>Java内存分布主要有以下五个区域：堆、方法区、虚拟机栈、本地方法栈以及程序计数器。从线程隔离的角度上来讲，堆和方法区是线程共享的，而虚拟机栈、本地方法栈以及程序计数器是线程隔离的，在虚拟机栈中，是由一个个栈帧组成的，每个栈帧中包含局部变量表、操作数栈、动态链接以及方法出口，程序计数器用于记录当前线程正在执行的字节码指令地址，保存线程切换前执行状态。</p><p><strong>垃圾回收</strong></p><p>垃圾回收主要是在堆空间上完成的，垃圾回收的目的是自动回收不再使用的对象，释放内存空间，垃圾回收的算法主要有以下几种：</p><ol><li>标记-清除：分为两个阶段，标记阶段和清除阶段，会导致内存碎片化严重的问题</li><li>复制：将内存划分为两个区域，每次只是用其中一个区域，将存活的对象从当前区域复制到另外一个空的区域，然后清空当前区域</li><li>标记-整理：分为两个阶段，标记阶段和整理阶段，标记阶段会将存活的对象标记，然后整理阶段会将存活的对象移动到一端，最后再进行垃圾的清除</li><li>分代收集：分代手机主要指的是新生代和老年代垃圾收集算法的区别，对于新生代，更多的是使用复制算法，而老年代更多的是使用标记清楚或标记整理算法。</li></ol><p><strong>具体的垃圾回收器</strong></p><p>JVM提供了多种垃圾回收器，每种回收器适用于不同的应用场景：</p><ol><li>Serial GC<br>单线程垃圾回收器，适用于单核处理器和小型应用。<br>年轻代使用复制算法，老年代使用标记-整理算法。</li><li>Parallel GC（吞吐量优先GC）<br>多线程垃圾回收器，适用于多核处理器和高吞吐量应用。<br>年轻代和老年代都使用并行回收。</li><li>CMS（Concurrent Mark-Sweep） GC<br>低暂停垃圾回收器，适用于需要低延迟的应用。<br>年轻代使用并行复制算法，老年代使用并发标记-清除算法。</li><li>G1（Garbage First） GC<br>面向服务端应用，适用于大内存和低延迟需求的应用。<br>将堆分为多个区域，优先回收垃圾最多的区域。</li><li>ZGC（Z Garbage Collector）<br>超低延迟垃圾回收器，适用于对延迟敏感的应用。<br>支持非常大的堆（数TB）。</li></ol></blockquote><h3 id="12-单点登录如何实现的"><a href="#12-单点登录如何实现的" class="headerlink" title="12.  单点登录如何实现的"></a>12.  单点登录如何实现的</h3><blockquote><p><img src="/2024/05/27/mian-shi/240527-teng-yu-mian-shi-ji-yao/049f6492889bd943188b35161c8cdac1.png" alt="SSO单点登录流程"></p><ol><li>用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户未登录，将用户引导至登录页面</li><li>用户输入用户名密码提交登录申请</li><li>sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌</li><li>sso认证中心带着令牌跳转会最初的请求地址（系统1）</li><li>系统1拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统1</li><li>系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源</li><li>用户访问系统2的受保护资源</li><li>系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌</li><li>系统2拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统2</li><li>系统2使用该令牌创建与用户的局部会话，返回受保护资源</li></ol></blockquote><h3 id="13-登录后，浏览器关闭了，能否登录上；如何保证关闭后仍然可以登陆上的，cookie和redis的token失效时间如何设置的，会不会有什么问题"><a href="#13-登录后，浏览器关闭了，能否登录上；如何保证关闭后仍然可以登陆上的，cookie和redis的token失效时间如何设置的，会不会有什么问题" class="headerlink" title="13. 登录后，浏览器关闭了，能否登录上；如何保证关闭后仍然可以登陆上的，cookie和redis的token失效时间如何设置的，会不会有什么问题"></a>13. 登录后，浏览器关闭了，能否登录上；如何保证关闭后仍然可以登陆上的，cookie和redis的token失效时间如何设置的，会不会有什么问题</h3><blockquote><p>能登录上，这个主要是通过会话保持机制实现的，首先在服务端，会通过redis持久化保存用户的token信息，另外再客户端，即浏览器端，会通过cookie持久化保存用户信息。因此浏览器关闭后只要不清楚浏览器缓存，是能够在关闭浏览器后仍然登录上系统的。</p><p>针对cookie和redis的token失效时间，一般情况下是需要保持一致的，如果不一致可能存在会话失效或者安全层面的问题。</p><p>为了更好的保证持久化cookie不会被盗用的问题，需要使用https传输cookie，并设置<code>HTTPONLY</code>和<code>Secure</code> 标识，防止客户端访问到cookie</p></blockquote><h3 id="14-一体化系统有几个模块，几个微服务，服务间怎么调用的"><a href="#14-一体化系统有几个模块，几个微服务，服务间怎么调用的" class="headerlink" title="14. 一体化系统有几个模块，几个微服务，服务间怎么调用的"></a>14. 一体化系统有几个模块，几个微服务，服务间怎么调用的</h3><blockquote><p>一体化系统模块分布如下：</p><p>基础数据管理模块：用于管理基础数据包括单位数据、区划数据、汇率数据、资金投向领域数据、项目类型数据等等。</p><p>项目管理模块：用于管理项目的申报和项目基本信息包括项目类型、项目建设期限、项目收支预算等</p><p>债券发行注册模块：项目申报财政部批复完成之后，需要申请债券，债券的发型以省级财政为单位，会将多个项目打包成一个债券，通过项目申报金额确定债券注册金额，并设置债券的还本方式以及付息方式，在注册后生成债券的还本付息计划</p><p>限额管理模块：债券的发型需要通过限额来管控，限额是财政部根据各个省份的情况进行动态调控的，在债券发型阶段，会校验当前省份的限额是否满足累计申请金额的标准</p><p>债券支出模块：债券支出在一体化系统中需要接入到执行模块，将执行模块的支出回单信息接入到我们的系统，并匹配到债券以及项目上</p><p>债券还本付息模块：债券还本付息计划会在债券注册阶段进行初始化和创建，但是真正的还款是在银行端进行，项目方在进行还款时，会带身我们的还本付息凭证的ID，然后我们通过执行端接收还款单据时，基于这个ID匹配上我们的还款计划，通过这样一个关联关系满足实际还款的情况。</p><p>报表模块、基础数据同步模块、离线数据包导入导出模块、工作流模块</p></blockquote><h3 id="15-一体化系统性能指标有没有评估过，TPS多少，用户量多少，并发多少，数据量多少"><a href="#15-一体化系统性能指标有没有评估过，TPS多少，用户量多少，并发多少，数据量多少" class="headerlink" title="15. 一体化系统性能指标有没有评估过，TPS多少，用户量多少，并发多少，数据量多少"></a>15. 一体化系统性能指标有没有评估过，TPS多少，用户量多少，并发多少，数据量多少</h3><h3 id="16-Kafka的特点，为什么快？"><a href="#16-Kafka的特点，为什么快？" class="headerlink" title="16. Kafka的特点，为什么快？"></a>16. Kafka的特点，为什么快？</h3><blockquote><p>Kafka 的高性能主要来源于其在架构和实现上的设计优势，以下是具体的原因：</p><ol><li><strong>顺序写入磁盘</strong>:<ul><li>Kafka 采用顺序写入磁盘（sequential write），避免了随机写入磁盘带来的高开销。</li><li>顺序写入效率高，减少了磁盘寻道时间，提高了写入速度。</li></ul></li><li><strong>零拷贝技术</strong>:<ul><li>Kafka 利用操作系统的零拷贝（zero-copy）技术，减少了数据在用户态和内核态之间的拷贝次数。</li><li>零拷贝技术使得数据可以直接从磁盘传输到网络，提高了传输效率。</li></ul></li><li><strong>分区机制</strong>:<ul><li>Kafka 通过分区（partition）将数据分布在多个 broker 上，实现并行处理。</li><li>分区机制提高了数据的写入和读取吞吐量。</li></ul></li><li><strong>批量处理</strong>:<ul><li>Kafka 支持批量处理消息，将多条消息打包成一个批次进行处理，减少了网络和 I/O 开销。</li><li>批量处理提高了数据传输和存储的效率。</li></ul></li><li><strong>高效的序列化和反序列化</strong>:<ul><li>Kafka 使用高效的序列化和反序列化机制，如 Avro、Protocol Buffers 等，减少了数据处理的开销。</li><li>高效的序列化和反序列化确保了数据在传输和存储中的高性能。</li></ul></li><li><strong>异步处理</strong>:<ul><li>Kafka 的生产者和消费者可以进行异步处理，提高了系统的吞吐量和响应速度。</li><li>异步处理使得 Kafka 能够高效处理大量的并发请求。</li></ul></li><li><strong>内存映射文件</strong>:<ul><li>Kafka 使用内存映射文件（memory-mapped files）技术，将磁盘文件映射到内存，提高了文件读取的速度。</li><li>内存映射文件技术减少了磁盘 I/O 操作，提高了数据处理的效率。</li></ul></li></ol></blockquote><h3 id="17-springcloud接口调用失败如何考虑？"><a href="#17-springcloud接口调用失败如何考虑？" class="headerlink" title="17. springcloud接口调用失败如何考虑？"></a>17. springcloud接口调用失败如何考虑？</h3><blockquote><p>假设一个订单系统调用库存服务和支付服务，如果支付服务调用失败：</p><ol><li><strong>重试机制</strong>: 自动重试支付服务调用。</li><li><strong>断路器模式</strong>: 如果支付服务持续失败，触发断路器，短时间内不再调用支付服务，避免系统过载。</li><li><strong>降级处理</strong>: 返回支付失败的友好提示，通知用户稍后再试。</li><li><strong>幂等性设计</strong>: 确保订单状态在多次支付调用中保持一致。</li><li><strong>异步处理</strong>: 将订单创建和支付分为异步任务，提升系统响应性能。</li><li><strong>限流和熔断</strong>: 控制支付服务的调用频率，避免因支付服务不稳定导致系统崩溃。</li><li><strong>日志和监控</strong>: 记录支付服务的调用日志，监控支付服务的健康状态。</li><li><strong>回滚和补偿</strong>: 如果支付失败，回滚订单状态或执行补偿逻辑，如退款。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试纪要 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试纪要 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hollis面试提纲</title>
      <link href="/2024/05/27/mian-shi/hollis-mian-shi-ti-gang/"/>
      <url>/2024/05/27/mian-shi/hollis-mian-shi-ti-gang/</url>
      
        <content type="html"><![CDATA[<h1 id="Hollis面试提纲"><a href="#Hollis面试提纲" class="headerlink" title="Hollis面试提纲"></a>Hollis面试提纲</h1><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><p><a href="https://www.yuque.com/hollis666/io9xi1/bit2y4">✅接口和抽象类的区别，如何选择？ (yuque.com)</a></p><blockquote><p>接口方法默认是public的，不允许有实现；抽象类方法可以使public private protected等，允许有实现。</p><p>接口职责更多的是指定规范，而抽象类更多的是为了复用，比较典型的就是模板方法模式。</p></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/bzmvmo4s1l8mig23">✅如何理解Java中的多态？ (yuque.com)</a></p><blockquote><p>多态指的是同一个操作对于不同的对象有不同的表现形式，会产生不同的执行结果。</p><p>有以下三个条件：</p><ol><li>有类继承或接口实现</li><li>子类需要重写或者实现父类/接口的方法</li><li>父类引用指向了子类实现</li></ol></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/hhkgh2nsrlnf2g0g">✅String为什么设计成不可变的？ (yuque.com)</a>    </p><blockquote><ol><li>安全性</li><li>缓存性</li><li>线程安全性</li></ol></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/hqm4f0">✅RPC接口返回中，使用基本类型还是包装类？ (yuque.com)</a></p><blockquote><p>使用包装类，如果使用的基本数据类型，无法区分未返回和0.0，例如对于一个long类型的数字，包装类Long的默认值是null，而long是0.0L，会有歧义。</p></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/dwdzin">✅说几个常见的语法糖？ (yuque.com)</a></p><blockquote><ol><li>switch：case匹配的时候是通过hashcode匹配的，然后在通过equals，但是语法上可以直接写为case “a”</li><li>泛型：泛型都会在编译期进行擦除</li><li>自动装箱与拆箱</li><li>方法的可变参数</li><li>枚举：枚举实际上是一个类，会默认使用final修饰并继承Enum</li><li>断言：断言底层实际就是if判断，如果true则什么都不做程序继续执行，否则如果为false，则会抛出一个AssertError的错误来打断程序的执行</li><li>数字字面量：在定义数字变量时，可以加入任意个_，例如int a = 1_0000，编译后会将 _ 移除掉。</li><li>try-with-resource</li><li>lambda表达式</li></ol></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/eltpur">✅什么是SPI，和API有啥区别 (yuque.com)</a></p><blockquote><p>SPI全名叫Service Provider Interface。<strong>API用于定义调用接口，SPI用于定义和提供可插拔的实现方式。</strong></p><p>SPI开发步骤：</p><ol><li>定义接口A，并写出多个实现A1,A2,A3</li><li>在src/main/resources/下建立/META-INF/services目录，新增一个以接口A全类名命名的文件，内容是需要加载的实现类</li><li>使用ServiceLoader.load(A.class)来加载需要加载的实现</li></ol><p><strong>应用场景：</strong></p><ul><li>数据库驱动：JDBC</li><li>日志门面：SLF4J加载不同的日志实现</li></ul></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/sr19rp">✅什么是反射机制？为什么反射慢？ (yuque.com)</a></p><blockquote><p>反射提供了一种运行时获取类相关属性、方法的方式，能够支持我们在JVM运行时对类的属性进行修改或者对类的方法进行调用。</p><p>反射的缺点：</p><ol><li>代码可读性以及可维护性较低</li><li>性能较低</li><li>破坏了封装性</li></ol><p><strong>反射为什么慢？</strong></p><ol><li>无法进行虚拟机优化，如JIT</li><li>方法调用参数需要进行拆箱和装箱的动作，效率低且容易产生大量的对象，容易造成GC（需要转换为Object[]类型）</li><li>反射调用方法需要从方法数组中遍历查找并检查方法的可见性，并对参数进行检查，这些操作比较耗时</li></ol></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/bw0z5kus5ry1xq0u">✅Java中创建对象有哪些种方式 (yuque.com)</a></p><blockquote><p>1.new关键字<br>2.使用反射<br>3.反序列化构造<br>4.clone<br>5.方法句柄<br>6.使用unsafe，不建议正式环境使用</p></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/ugvfzx">✅Java的动态代理如何实现？ (yuque.com)</a></p><blockquote><p>动态代理有基于JDK的动态代理还有CGLIB的动态代理，二者区别如下：</p><ol><li>JDK动态代理需要实现接口才可以被代理，CGLIB不需要</li><li>JDK动态代理底层是通过实现该接口，而CGLIB是实现被代理类的子类</li></ol><p>JDK动态代理核心逻辑：</p><pre class="line-numbers language-none"><code class="language-none">InvocationHandler： 处理增加的逻辑Proxy.newProxyInstance: 生成代理对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>CGLIB动态代理核心逻辑：</p><pre class="line-numbers language-none"><code class="language-none">实现MethodInterceptor接口：在intercept方法中创建代理类Enhancer： 用于处理父类和代理类的勾稽关系<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p><a href="https://www.yuque.com/hollis666/io9xi1/zelhse">✅Java注解的作用是啥 (yuque.com)</a></p><blockquote><p>注解实际就是给当前类、方法打上一个标识，方便后续使用时区分，常常和AOP结合起来使用。</p><p><strong>元注解</strong>：</p><ol><li>@Target：标识注解可以用于什么地方</li><li>@Rentention：标识在什么级别保存该注解信息</li><li>@Documented：标识是否将注解包含在javadoc中</li><li>@Inherited：标识是否子类继承父类中的注解</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>政府债务发展历史</title>
      <link href="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/"/>
      <url>/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2015年，GWY要求全力清理甄别15年之前的政府性债务以及政府作为担保CT公司作为借债主体的YX债务，并修正自94年分税制改革之后地方财权和事权严重不匹配的局面。同时，旧的预算法对于债务这块存在几个比较大的问题，包括：1、从举债权限来看，地方政府没有被赋予自主发债的权利;2、从预算管理来看，有大量的债务游离在预算体制之外;3、从规模控制来看，地方政府没能建立起适合中国国情的规模控制机制:4、从风险管理来看，没有健全的风险预警机制;5、从信息披露来看，没有完全公开地方政府举债情况。</p><p>为了解决以上问题，财预10号文《地方政府专项债券项目穿透式监测工作方案》明确指出，要建立地方政府债务管理制度框架，包括：发行限额管理、落实预算管理、风险评估管理、应急处置管理、常态化监督管理、信息公开管理。因此，预算管理一体化系统前身-穿透式监测系统应运而生。</p><p>随着财政体系建设的发展，各个信息系统的丰富和完善，也为了打破信息孤岛，打通财政体系下的数据，避免存在底层基础数据业务架构重复搭建且各个业务系统之间数据各统计各的导致上层数据不一致的严重问题，在2022年，财预1号文《CZB关于印发地方政府法定债务全面纳入预算管理一体化工作方案的通知》明确指出，债务必须完全纳入一体化范围。</p><p>CZB为此制定统一的业务规范和技术标准，以实现预算管理一体化系统的全面推进。预算管理一体化涵盖了基础信息管理、项目库管理、预算编制、预算批复、预算调整与调剂、预算执行、会计核算、决算和报告等八大顶层业务活动，并在各省独立部署。主要用户包括：省端/市端/区县端/单位端经办岗以及审核岗用户，参与整合模块包括：门户（如华为、新华三、科创）、预算（中科、博思）、债务（大数元）、汇总系统（大数元）、穿透式系统（大数元）、执行（中科、博思）等。</p></blockquote><blockquote><p><strong>背景介绍：</strong></p><p>2015年，中央政府要求全面清理和甄别2015年之前的政府性债务，以及政府作为担保主体的城投公司（CT公司）所负担的YX债务。这项任务的目的在于修正自1994年分税制改革后地方财权与事权严重不匹配的局面。旧预算法在债务管理方面存在以下几个主要问题：</p><ol><li><strong>举债权限</strong>：地方政府没有自主发债的权利。</li><li><strong>预算管理</strong>：大量债务游离在预算体制之外。</li><li><strong>规模控制</strong>：没有建立适合中国国情的债务规模控制机制。</li><li><strong>风险管理</strong>：缺乏健全的风险预警机制。</li><li><strong>信息披露</strong>：地方政府举债情况没有完全公开。</li></ol><p>为解决上述问题，财预10号文《地方政府专项债券项目穿透式监测工作方案》明确提出要建立地方政府债务管理制度框架，包括发行限额管理、预算管理、风险评估管理、应急处置管理、常态化监督管理以及信息公开管理。基于此背景，预算管理一体化系统的前身——穿透式监测系统应运而生。</p><p><strong>系统演变与发展：</strong></p><p>随着财政体系建设的发展，各信息系统的丰富和完善，为了打破信息孤岛，打通财政体系下的数据，避免底层基础数据和业务架构重复搭建以及各业务系统之间数据统计不一致的问题，2022年，财预1号文《CZB关于印发地方政府法定债务全面纳入预算管理一体化工作方案的通知》明确指出，地方政府债务必须完全纳入预算管理一体化范围。</p><p><strong>项目实施：</strong></p><p>为此，财政部制定了统一的业务规范和技术标准，以实现预算管理一体化系统的全面推进。预算管理一体化系统涵盖了八大顶层业务活动，包括基础信息管理、项目库管理、预算编制、预算批复、预算调整与调剂、预算执行、会计核算、决算和报告，并在各省独立部署。主要用户包括省、市、区县及单位的经办岗和审核岗用户。整合的系统模块包括：</p><ul><li>门户（如华为、新华三、科创）</li><li>预算（中科、博思）</li><li>债务（大数元）</li><li>汇总系统（大数元）</li><li>穿透式系统（大数元）</li><li>执行（中科、博思）</li></ul><p>这些系统模块的整合旨在实现数据的共享与协同，确保各层级业务活动的数据一致性和系统高效性。通过这些措施，预算管理一体化系统不仅提升了财政管理的效率，还大大增强了债务管理的透明度和风险控制能力。</p></blockquote><h1 id="一、债务是什么"><a href="#一、债务是什么" class="headerlink" title="一、债务是什么"></a>一、债务是什么</h1><p>经济的正常运行以及发展离不开债务，地方政府债务由以下债务构成：</p><p>​    包括2015年之前需要清理甄别锁定的债务即：政府债务（政府债务又分为一般债务和专项债务）、或有债务（或有债务可以细化为政府富有担保责任的债务以及政府可能承担一定救助责任的债务）</p><p>​    还有2015年之后省级代发政府债券所允许的一些债券，即：新增债券、置换债券、再融资债券。</p><p>​    除了以2015年以节点所划分的债务之外， 还有隐性债务，包括：非债券发行的由财政性资金偿还的、政府提供担保的、约定回购本金、承诺保底收益的政府中长期支出事项。</p><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716168952330.png" alt="地方政府债务构成"></p><h1 id="二、如何对政府债务进行管理"><a href="#二、如何对政府债务进行管理" class="headerlink" title="二、如何对政府债务进行管理"></a>二、如何对政府债务进行管理</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716169336524.png" alt="政府债务的管理"></p><h1 id="三、债务发展历史"><a href="#三、债务发展历史" class="headerlink" title="三、债务发展历史"></a>三、债务发展历史</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716169647321.png" alt="债务发展历史"></p><h1 id="四、传统债务管理模式的缺陷"><a href="#四、传统债务管理模式的缺陷" class="headerlink" title="四、传统债务管理模式的缺陷"></a>四、传统债务管理模式的缺陷</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716169675985.png" alt="传统债务管理模式的缺陷"></p><h1 id="五、地方政府债务管理制度框架"><a href="#五、地方政府债务管理制度框架" class="headerlink" title="五、地方政府债务管理制度框架"></a>五、地方政府债务管理制度框架</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716169733113.png" alt="形成管理闭环"></p><h1 id="六、YX债务"><a href="#六、YX债务" class="headerlink" title="六、YX债务"></a>六、YX债务</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716169883081.png" alt="YX债务"></p><h1 id="七、产品体系"><a href="#七、产品体系" class="headerlink" title="七、产品体系"></a>七、产品体系</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716169966321.png" alt="产品体系"></p><h1 id="八、产品架构"><a href="#八、产品架构" class="headerlink" title="八、产品架构"></a>八、产品架构</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716170074661.png" alt="产品架构"></p><h1 id="九、创新产品"><a href="#九、创新产品" class="headerlink" title="九、创新产品"></a>九、创新产品</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716170203652.png" alt="创新产品"></p><h1 id="十、服务产品体系详细"><a href="#十、服务产品体系详细" class="headerlink" title="十、服务产品体系详细"></a>十、服务产品体系详细</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716170313415.png" alt="产品体系详细"></p><h1 id="十一、咨询产品体系详细"><a href="#十一、咨询产品体系详细" class="headerlink" title="十一、咨询产品体系详细"></a>十一、咨询产品体系详细</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716170354992.png" alt="咨询产品"></p><h1 id="十二、发文"><a href="#十二、发文" class="headerlink" title="十二、发文"></a>十二、发文</h1><p><img src="/2024/05/20/gong-zuo/202207-bei-jing-da-shu-yuan/zheng-fu-zhai-wu-fa-zhan-li-shi/1716170795551.png" alt="发文"></p>]]></content>
      
      
      <categories>
          
          <category> 业务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 业务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chat-im</title>
      <link href="/2024/05/16/xiang-mu/chat-im/"/>
      <url>/2024/05/16/xiang-mu/chat-im/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gitee.com/zzy888888/skill-test/tree/master/S-T-ChatDemo">https://gitee.com/zzy888888/skill-test/tree/master/S-T-ChatDemo</a></p><h1 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h1><p><a href="https://www.notion.so/f60817a0be4c4c3495a11235b4c06d7c?pvs=21">断线重连</a></p><blockquote><p>断线重连是client客户端配置在处理channel I/O 的eventLoopGroup中的一个eventloop处理的，是一个入站事件处理器，在client和server初次建立连接时，会触发<code>channelActive</code> 事件，在client和server断开连接时，会触发<code>channelInactive</code> 事件；一旦触发<code>channelInactive</code> 事件，则通过eventLoop注册延时任务，延时任务中负责对server端进行重连。</p><p>延时任务的触发时间随着重试次数递增，递增步幅如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 2 4 8 16 32 64</span><span class="token keyword">long</span> sleepMs <span class="token operator">=</span> baseSleepTimeMs <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> retryCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p><a href="https://www.notion.so/73a0a0b007c94e80a35fe21943053d71?pvs=21">心跳检测</a></p><blockquote><p>心跳检测是client客户端在连接server完成之后，会启动一个定时任务，定时任务中每秒会向server端发送ping消息，server服务端在处理消息时，优先过滤出ping消息，并回应客服端一个pong消息</p></blockquote><p><a href="https://www.notion.so/b60a6de198034b9987b1dd24bfd1f679?pvs=21">跨节点聊天</a></p><blockquote><p>跨节点聊天的场景主要是客户端在注册时，两个客户端并不在同一个server中进行连接，用户A在发送消息时，可能发送到了ServerA， 但是接收消息的用户B是与ServerB进行连接的，因此在这个场景下，存在跨节点聊天的问题。解决流程如下：</p><ol><li>用户A发送消息给用户B，用户A与ServerA建立连接</li><li>ServerA检查用户B是否与自己建立连接</li><li>如果用户B与自己建立了连接，则直接将消息发送给用户B；如果用户B未与自己建立连接，则将消息推送至与用户B建立了连接的ServerB的redis list中</li><li>在Server启动时会开启对于当前Server 的 redis list中的消息的定时消费，此时Server B发现自己的redis list中存在消息，则会获取消息并解析消息的接受者，并将消息发送给用户B</li></ol></blockquote><p><a href="https://www.notion.so/Server-61fc67165e0449cb875827357384a30a?pvs=21">Server负载均衡</a></p><blockquote><p>Server负载均衡主要是在client建立连接时，会从服务端集群中挑选一个负载最小的服务器，并与之建立连接</p></blockquote><p><a href="https://www.notion.so/98d588f9b2774e2a8f6cb23b7467b667?pvs=21">单聊与群聊</a></p><p><img src="/2024/05/16/xiang-mu/chat-im/1715820381611.png" alt="1715820381611"></p><h1 id="支持功能"><a href="#支持功能" class="headerlink" title="支持功能"></a>支持功能</h1><p>1、client与client单聊、群聊</p><p>2、client连接负载均衡、跨节点聊天</p><p>3、心跳检测</p><p>4、断线重连</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狂野架构师04源码-Spring</title>
      <link href="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/"/>
      <url>/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring源码"><a href="#Spring源码" class="headerlink" title="Spring源码"></a>Spring源码</h1><p><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/1715660816418.png" alt="六大模块"></p><h2 id="1-核心组件介绍"><a href="#1-核心组件介绍" class="headerlink" title="1. 核心组件介绍"></a>1. 核心组件介绍</h2><h3 id="1-1-Bean组件"><a href="#1-1-Bean组件" class="headerlink" title="1.1 Bean组件"></a>1.1 Bean组件</h3><p><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/1715669594622.png" alt="Bean组件"></p><h3 id="1-2-Context组件"><a href="#1-2-Context组件" class="headerlink" title="1.2 Context组件"></a>1.2 Context组件</h3><p><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/1715670072002.png" alt="Context组件"></p><h2 id="2-处理器"><a href="#2-处理器" class="headerlink" title="2 处理器"></a>2 处理器</h2><h3 id="2-1-BeanFactory后置处理器"><a href="#2-1-BeanFactory后置处理器" class="headerlink" title="2.1  BeanFactory后置处理器"></a>2.1  BeanFactory后置处理器</h3><p><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/1715670814031.png" alt="BeanFactory后置处理器"></p><h3 id="2-2-Bean后置处理器"><a href="#2-2-Bean后置处理器" class="headerlink" title="2.2 Bean后置处理器"></a>2.2 Bean后置处理器</h3><h2 id="3-IOC流程图"><a href="#3-IOC流程图" class="headerlink" title="3 IOC流程图***"></a><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/1715670771650.png" alt="Bean后置处理器">3 IOC流程图***</h2><p>AbstractApplicationContext.refresh（）方法</p><p><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/1715673486159.png" alt="IOC流程图"></p><p><strong>什么是Aware接口</strong></p><blockquote><p>Aware接口是在Bean设置相关属性时会自动调用，即对Set属性时会有回调，以BeanNameAware接口为例，实现接口后需要重新setBeanName方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanName</span> <span class="token keyword">implements</span> <span class="token class-name">BeanNameAware</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanName</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Bean生命周期"><a href="#4-Bean生命周期" class="headerlink" title="4 Bean生命周期"></a>4 Bean生命周期</h2><p><img src="/2024/05/14/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-04-yuan-ma-spring/v2-8787f1b3800b71f6234e996d432e0a0c_r.jpg" alt="Bean生命周期"></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><strong>题目1：</strong><br>问答题：在Spring框架中，Bean的定义对象（BeanDefinition）是如何根据配置文件中的标签进行封装的？<br><strong>答案及解析：</strong><br>答案：在Spring框架中，当解析标签时，Spring容器会读取标签中的各个配置项（如id、class、scope等），并将这些配置项的值封装到BeanDefinition对象的各个属性中。BeanDefinition是Spring内部用来描述Bean的元数据信息的对象，它包含了Bean的类信息、作用域、依赖关系、初始化方法、销毁方法等各种属性。<br>解析：这个问题考查了Spring框架中Bean定义对象的创建和封装过程。在Spring的启动过程中，它会加载配置文件，并解析其中的标签。解析过程中，Spring会根据标签中的属性信息创建BeanDefinition对象，并将这些属性信息封装到BeanDefinition中。这样，Spring就通过BeanDefinition对象持有了Bean的元数据信息，为后续创建和管理Bean提供了基础。<br><strong>题目2：</strong><br>问答题：请简述Spring框架中BeanPostProcessor的作用及其执行时机。<br><strong>答案及解析：</strong><br>答案：BeanPostProcessor是Spring框架提供的一个扩展接口，它允许在Bean的初始化方法前后添加一些处理逻辑。BeanPostProcessor有两个主要方法：postProcessBeforeInitialization和postProcessAfterInitialization。前者在Bean的初始化方法执行前被调用，后者在Bean的初始化方法执行后被调用。BeanPostProcessor的执行时机是在Spring容器实例化Bean之后，但在Bean的初始化方法（如构造函数、@PostConstruct注解的方法等）执行前后。<br>解析：这个问题考查了Spring框架中BeanPostProcessor的作用和执行时机。BeanPostProcessor是Spring提供的一个强大的扩展点，它允许开发者在Bean的生命周期中的关键节点添加自定义逻辑。通过实现BeanPostProcessor接口，开发者可以在Bean的初始化方法前后执行自定义操作，如修改Bean的属性、添加AOP代理等。BeanPostProcessor的执行时机是在Bean实例化之后、初始化方法执行前后，这使得它成为Spring框架中非常灵活和强大的一个功能。<br><strong>题目3：</strong><br>问答题：在Spring中，如何配置多个BeanPostProcessor，并且它们的执行顺序是如何确定的？<br><strong>答案及解析：</strong><br>答案：在Spring中，可以通过在配置文件中定义多个BeanPostProcessor的Bean来配置多个BeanPostProcessor。它们的执行顺序可以通过实现Ordered接口或标注@Order注解来指定优先级，也可以通过在配置文件中指定order属性来设置顺序。如果没有显式指定优先级或顺序，Spring会根据BeanPostProcessor的注册顺序来执行它们。<br>解析：这个问题考查了Spring中多个BeanPostProcessor的配置和执行顺序的确定方式。在Spring中，可以配置多个BeanPostProcessor来处理Bean的生命周期事件。为了控制它们的执行顺序，Spring提供了几种方式：实现Ordered接口并指定getOrder方法的返回值、使用@Order注解标注BeanPostProcessor的类、在配置文件中设置order属性等。通过这些方式，开发者可以精确地控制BeanPostProcessor的执行顺序，以满足特定的业务需求。<br><strong>题目4：</strong><br>问答题：请描述Spring中Bean的完整生命周期，并指出在哪个阶段BeanPostProcessor的postProcessAfterInitialization方法会被调用。<br><strong>答案及解析：</strong><br>答案：Spring中Bean的完整生命周期包括实例化、属性填充、初始化前处理、初始化方法执行、初始化后处理、销毁等阶段。其中，BeanPostProcessor的postProcessAfterInitialization方法会在Bean的初始化方法执行后被调用，即在Bean的初始化后处理阶段。<br>解析：这个问题考查了Spring中Bean的生命周期以及BeanPostProcessor的postProcessAfterInitialization方法的调用时机。在Spring中，Bean的生命周期包括多个阶段，其中初始化后处理阶段是一个重要的扩展点。在这个阶段，Spring会调用所有注册的BeanPostProcessor的postProcessAfterInitialization方法，允许开发者在Bean初始化完成后执行自定义操作。因此，了解Bean的生命周期和BeanPostProcessor的执行时机对于理解和使用Spring框架非常重要。<br><strong>题目5：</strong><br>问答题：请解释Spring中代理对象的生成时机，以及它与BeanPostProcessor的关系。<br><strong>答案及解析：</strong><br>答案：在Spring中，代理对象的生成时机通常是在BeanPostProcessor的postProcessBeforeInitialization或postProcessAfterInitialization方法中。具体生成时机取决于代理对象的创建方式和使用的BeanPostProcessor实现。例如，在使用AOP时，Spring会通过AOP相关的BeanPostProcessor（如AspectJAwareAdvisorAutoProxyCreator）在Bean初始化前后创建代理对象。<br>解析：这个问题考查了Spring中代理对象的生成时机以及它与BeanPostProcessor的关系。在Spring中，代理对象通常用于实现AOP等高级功能。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务多级限流方案</title>
      <link href="/2024/04/23/yun-wei/wei-fu-wu-duo-ji-xian-liu-fang-an/"/>
      <url>/2024/04/23/yun-wei/wei-fu-wu-duo-ji-xian-liu-fang-an/</url>
      
        <content type="html"><![CDATA[<h1 id="微服务多级限流方案"><a href="#微服务多级限流方案" class="headerlink" title="微服务多级限流方案"></a>微服务多级限流方案</h1><p><img src="/2024/04/23/yun-wei/wei-fu-wu-duo-ji-xian-liu-fang-an/1713842740324.png" alt="分级限流"></p><p>微服务场景中，其实各级限流都需要做，主要以下几个方面：</p><ol><li>客户端发送请求到Nginx需要进行限流 </li><li>通过Nginx负载均衡请求到网关 , 网关也需要限流</li><li>网关路由请求到微服务 , 微服务也需要限流</li></ol><h2 id="1-nginx限流"><a href="#1-nginx限流" class="headerlink" title="1. nginx限流"></a>1. nginx限流</h2><p>nginx限流主要是对请求的IP进行限流 , 使用的是<code>limit_req_zone</code>和<code>limit_req</code>配置 , 底层使用的是<strong>漏桶算法</strong>实现的 , nginx层限流主要是对下游的网关起到保护作用</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token function">http</span> <span class="token punctuation">{</span>  limit_req_zone $binary_remote_addr zone<span class="token operator">=</span>iplimit<span class="token punctuation">:</span>10m rate<span class="token operator">=</span>1r<span class="token operator">/</span>s<span class="token punctuation">;</span>  limit_req_zone $server_name zone<span class="token operator">=</span>iplimit<span class="token punctuation">:</span>10m rate<span class="token operator">=</span>1r<span class="token operator">/</span>s<span class="token punctuation">;</span>  <span class="token function">server</span> <span class="token punctuation">{</span>    server_name  www<span class="token punctuation">.</span>nginx<span class="token operator">-</span>lyntest<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    listen       <span class="token number">80</span><span class="token punctuation">;</span>    location <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">/</span>my<span class="token operator">-</span>api<span class="token operator">/</span> <span class="token punctuation">{</span>      proxy_pass   http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">9999</span><span class="token operator">/</span><span class="token punctuation">;</span>      limit_req zone<span class="token operator">=</span>iplimit burst<span class="token operator">=</span><span class="token number">20</span> nodelay<span class="token punctuation">;</span>      limit_req_status <span class="token number">429</span><span class="token punctuation">;</span> <span class="token operator">#</span> 默认返回 http <span class="token number">503</span>状态码      limit_req_log_level warn<span class="token punctuation">;</span> <span class="token operator">#</span> 默认为 error级别    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-网关限流"><a href="#2-网关限流" class="headerlink" title="2. 网关限流"></a>2. 网关限流</h2><p>网关层限流主要使用的是Spring Cloud Gateway提供<code>Request Rate Limiting</code>过滤器实现的 , 底层使用Redis基于<strong>令牌桶</strong>算法实现限流 , 网关限流主要是对下游的微服务系统起到保护作用</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"> <span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway<span class="token punctuation">-</span>limiter  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> limit_route        <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//httpbin.org<span class="token punctuation">:</span>80/get        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> After=2017<span class="token punctuation">-</span>01<span class="token punctuation">-</span>20T17<span class="token punctuation">:</span>42<span class="token punctuation">:</span>47.789<span class="token punctuation">-</span>07<span class="token punctuation">:</span>00<span class="token punctuation">[</span>America/Denver<span class="token punctuation">]</span>        <span class="token key atrule">filters</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> RequestRateLimiter           <span class="token key atrule">args</span><span class="token punctuation">:</span>             <span class="token comment"># key-resolver，用于限流的键的解析器的 Bean 对象的名字</span>             <span class="token key atrule">key-resolver</span><span class="token punctuation">:</span> <span class="token string">"#{@hostAddrKeyResolver}"</span>              <span class="token key atrule">redis-rate-limiter.replenishRate</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 令牌桶填充的速率 秒为单位</span>             <span class="token key atrule">redis-rate-limiter.burstCapacity</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 令牌桶总容量</span>             <span class="token key atrule">redis-rate-limiter.requestedTokens</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 每次请求获取的令牌数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HostAddrKeyResolver</span> <span class="token keyword">implements</span> <span class="token class-name">KeyResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-微服务限流"><a href="#3-微服务限流" class="headerlink" title="3. 微服务限流"></a>3. 微服务限流</h2><p>微服务限流的目的主要是为了保护微服务本身不被大流量冲垮 , 可以使用Hystrix和Sentinel进行限流 , 底层使用的是信号量和线程隔离实现的 , 当请求达到限制或者失败频率较高会自动熔断 , 执行降级逻辑</p>]]></content>
      
      
      <categories>
          
          <category> 限流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud微服务组件概览</title>
      <link href="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/"/>
      <url>/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/</url>
      
        <content type="html"><![CDATA[<h2 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h2><ul><li>注册与发现</li><li>服务调用</li><li>服务熔断</li><li>负载均衡</li><li>服务降级</li><li>服务消息队列</li><li>配置中心管理</li><li>服务网关</li><li>服务监控</li><li>全链路追踪</li><li>自动化构建部署</li><li>服务定时任务调度操作</li></ul><h2 id="springcloud"><a href="#springcloud" class="headerlink" title="springcloud"></a>springcloud</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p> 分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶。</p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image.png" alt="img"></p><h3 id="版本定义"><a href="#版本定义" class="headerlink" title="版本定义"></a>版本定义</h3><p>springcloud最初使用英国伦敦地铁站命名</p><table><thead><tr><th>Cloud代号</th><th>Boot版本(train)</th><th>Boot版本(tested)</th><th>lifecycle</th></tr></thead><tbody><tr><td>Angle</td><td>1.2.x</td><td>incompatible with 1.3</td><td>EOL in July 2017</td></tr><tr><td>Brixton</td><td>1.3.x</td><td>1.4.x</td><td>2017-07卒</td></tr><tr><td>Camden</td><td>1.4.x</td><td>1.5.x</td><td>-</td></tr><tr><td>Dalston</td><td>1.5.x</td><td>not expected 2.x</td><td>-</td></tr><tr><td>Edgware</td><td>1.5.x</td><td>not expected 2.x</td><td>-</td></tr><tr><td>Finchley</td><td>2.x</td><td>not expected 1.5.x</td><td>-</td></tr></tbody></table><p>由A - &gt; H</p><p><strong>小版本区分为</strong></p><p>SNAPSHOT： 快照版本，随时可能修改</p><p>M： MileStone，M1表示第1个里程碑版本，一般同时标注PRE，表示预览版版。</p><p>SR： Service Release，SR1表示第1个正式版本，一般同时标注GA：(GenerallyAvailable),表示稳定版本。</p><p><strong>与SpringBoot兼容性</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/22792222/1672922050321-3999fa76-e0cf-4924-bf26-a1e129777dbe.png" alt="img"></p><p><a href="https://spring.io/projects/spring-cloud#overview">https://spring.io/projects/spring-cloud#overview</a> 官网</p><p><a href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a> spring boot 以及 spring cloud版本建议</p><p>推荐版本</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/22792222/1672922348996-db661dc1-39cd-42ca-97df-8f41e21b659e.png" alt="img"></p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/22792222/1672925283430-c729200b-4960-4af6-9fc5-4470e1b9200d.png" alt="img"></p><h1 id="工程搭建"><a href="#工程搭建" class="headerlink" title="工程搭建"></a>工程搭建</h1><ol><li>New Project</li><li>聚合总总工程名称</li><li>Maven版本仓库</li><li>工程名称</li><li>字符编码</li><li>注解生效激活</li><li>java编译版本选择8</li><li>File Type过滤</li><li>删除src文件夹</li><li>.gitignore</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Compiled class file</span><span class="token important">*.class</span><span class="token comment"># Log file</span><span class="token important">*.log</span><span class="token comment"># BlueJ files</span><span class="token important">*.ctxt</span><span class="token comment"># Mobile Tools for Java (J2ME)</span>.mtj.tmp/<span class="token comment"># Package Files #</span><span class="token important">*.jar</span><span class="token important">*.war</span><span class="token important">*.nar</span><span class="token important">*.ear</span><span class="token important">*.zip</span><span class="token important">*.tar.gz</span><span class="token important">*.rar</span><span class="token comment"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span>hs_err_pid*<span class="token important">*.iml</span><span class="token important">*.class</span><span class="token important">*.idea/*</span><span class="token important">*\target</span><span class="token important">*.MF</span><span class="token important">*\out</span>.flattened<span class="token punctuation">-</span>pom.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>父pom统一管理版本</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">1. 定义参数  &lt;properties<span class="token punctuation">&gt;</span>    &lt;rversion<span class="token punctuation">&gt;</span>1.0<span class="token punctuation">-</span>SNAPSHOT&lt;/rversion<span class="token punctuation">&gt;</span>  &lt;/properties<span class="token punctuation">&gt;</span>2. 指定版本&lt;version<span class="token punctuation">&gt;</span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span>&lt;/version<span class="token punctuation">&gt;</span>3.添加插件&lt;plugin<span class="token punctuation">&gt;</span>  &lt;groupId<span class="token punctuation">&gt;</span>org.codehaus.mojo&lt;/groupId<span class="token punctuation">&gt;</span>  &lt;artifactId<span class="token punctuation">&gt;</span>flatten<span class="token punctuation">-</span>maven<span class="token punctuation">-</span>plugin&lt;/artifactId<span class="token punctuation">&gt;</span>  &lt;version<span class="token punctuation">&gt;</span>1.1.0&lt;/version<span class="token punctuation">&gt;</span>  &lt;configuration<span class="token punctuation">&gt;</span>    &lt;updatePomFile<span class="token punctuation">&gt;</span>true&lt;/updatePomFile<span class="token punctuation">&gt;</span>    &lt;flattenMode<span class="token punctuation">&gt;</span>resolveCiFriendliesOnly&lt;/flattenMode<span class="token punctuation">&gt;</span>  &lt;/configuration<span class="token punctuation">&gt;</span>  &lt;executions<span class="token punctuation">&gt;</span>    &lt;execution<span class="token punctuation">&gt;</span>      &lt;id<span class="token punctuation">&gt;</span>flatten&lt;/id<span class="token punctuation">&gt;</span>      &lt;phase<span class="token punctuation">&gt;</span>process<span class="token punctuation">-</span>resources&lt;/phase<span class="token punctuation">&gt;</span>      &lt;goals<span class="token punctuation">&gt;</span>        &lt;goal<span class="token punctuation">&gt;</span>flatten&lt;/goal<span class="token punctuation">&gt;</span>      &lt;/goals<span class="token punctuation">&gt;</span>    &lt;/execution<span class="token punctuation">&gt;</span>    &lt;execution<span class="token punctuation">&gt;</span>      &lt;id<span class="token punctuation">&gt;</span>flatten.clean&lt;/id<span class="token punctuation">&gt;</span>      &lt;phase<span class="token punctuation">&gt;</span>clean&lt;/phase<span class="token punctuation">&gt;</span>      &lt;goals<span class="token punctuation">&gt;</span>        &lt;goal<span class="token punctuation">&gt;</span>clean&lt;/goal<span class="token punctuation">&gt;</span>      &lt;/goals<span class="token punctuation">&gt;</span>    &lt;/execution<span class="token punctuation">&gt;</span>  &lt;/executions<span class="token punctuation">&gt;</span>&lt;/plugin<span class="token punctuation">&gt;</span>4. 子组件使用版本&lt;parent<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>sc2023&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.atguigu.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;version<span class="token punctuation">&gt;</span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span>&lt;/version<span class="token punctuation">&gt;</span>&lt;/parent<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816240.png" alt="img"></li><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816251.png" alt="img"></li><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816266.png" alt="img"></li><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816275.png" alt="img"></li><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816284.png" alt="img"></li><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816286.png" alt="img"></li><li><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816300.png" alt="img"></li></ol><h2 id="父工程配置"><a href="#父工程配置" class="headerlink" title="父工程配置"></a>父工程配置</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sc2023<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--  统一版本管理--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">&gt;</span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>8.0.31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">&gt;</span></span>1.2.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--子模块继承后，锁定版本，不用再写groupId和version--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--spring boot--&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--spring cloud--&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>Hoxton.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token comment">&lt;!--spring cloud alibaba--&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${druid.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${lombok.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mybatis.spring.boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子工程配置"><a href="#子工程配置" class="headerlink" title="子工程配置"></a>子工程配置</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sc2023<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-provider-payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>service  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//43.140.208.71<span class="token punctuation">:</span>6099/cloud<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.atguigu.springcloud.entitys <span class="token comment"># 所有entity所在包名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><ol><li>添加依赖</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>devtools&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;scope<span class="token punctuation">&gt;</span>runtime&lt;/scope<span class="token punctuation">&gt;</span>    &lt;optional<span class="token punctuation">&gt;</span>true&lt;/optional<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>添加插件</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;plugin<span class="token punctuation">&gt;</span>  &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>  &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>maven<span class="token punctuation">-</span>plugin&lt;/artifactId<span class="token punctuation">&gt;</span>  &lt;configuration<span class="token punctuation">&gt;</span>    &lt;fork<span class="token punctuation">&gt;</span>true&lt;/fork<span class="token punctuation">&gt;</span>    &lt;addResources<span class="token punctuation">&gt;</span>true&lt;/addResources<span class="token punctuation">&gt;</span>  &lt;/configuration<span class="token punctuation">&gt;</span>&lt;/plugin<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>自动编译</li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816306.png" alt="img"></p><ol><li>勾选配置（ctrl + shift + alt + /)</li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816310.png" alt="img"></p><ol><li>重启idea</li></ol><h2 id="微服务dashboard"><a href="#微服务dashboard" class="headerlink" title="微服务dashboard"></a>微服务dashboard</h2><p>打开service</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816318.png" alt="img"></p><p>添加springboot</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816324.png" alt="img"></p><h1 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h1><h2 id="Eureka与Dubbo"><a href="#Eureka与Dubbo" class="headerlink" title="Eureka与Dubbo"></a>Eureka与Dubbo</h2><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816333.png" alt="img"></p><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p><a href="https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/#service-discovery-eureka-clients">https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/#service-discovery-eureka-clients</a></p><h3 id="两大组件"><a href="#两大组件" class="headerlink" title="两大组件"></a>两大组件</h3><ul><li>Eureka Server 提供服务注册</li></ul><p>也是一个或多个java服务，需要特殊配置当前服务为server端</p><ul><li>Eureka Client 通过注册中心进行访问</li></ul><p>即为多个微服务模块</p><h3 id="Server-搭建"><a href="#Server-搭建" class="headerlink" title="Server 搭建"></a>Server 搭建</h3><ol><li>添加依赖 <code>spring-cloud-starter-netflix-eureka-server</code></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;<span class="token punctuation">?</span>xml version="1.0" encoding="UTF<span class="token punctuation">-</span>8"<span class="token punctuation">?</span><span class="token punctuation">&gt;</span>&lt;project xmlns="http<span class="token punctuation">:</span>//maven.apache.org/POM/4.0.0"         xmlns<span class="token punctuation">:</span>xsi="http<span class="token punctuation">:</span>//www.w3.org/2001/XMLSchema<span class="token punctuation">-</span>instance"         xsi<span class="token punctuation">:</span>schemaLocation="http<span class="token punctuation">:</span>//maven.apache.org/POM/4.0.0 http<span class="token punctuation">:</span>//maven.apache.org/xsd/maven<span class="token punctuation">-</span>4.0.0.xsd"<span class="token punctuation">&gt;</span>    &lt;parent<span class="token punctuation">&gt;</span>        &lt;artifactId<span class="token punctuation">&gt;</span>sc2023&lt;/artifactId<span class="token punctuation">&gt;</span>        &lt;groupId<span class="token punctuation">&gt;</span>com.atguigu.cloud&lt;/groupId<span class="token punctuation">&gt;</span>        &lt;version<span class="token punctuation">&gt;</span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span>&lt;/version<span class="token punctuation">&gt;</span>    &lt;/parent<span class="token punctuation">&gt;</span>    &lt;modelVersion<span class="token punctuation">&gt;</span>4.0.0&lt;/modelVersion<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>cloud<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>server7001&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;properties<span class="token punctuation">&gt;</span>        &lt;maven.compiler.source<span class="token punctuation">&gt;</span>8&lt;/maven.compiler.source<span class="token punctuation">&gt;</span>        &lt;maven.compiler.target<span class="token punctuation">&gt;</span>8&lt;/maven.compiler.target<span class="token punctuation">&gt;</span>    &lt;/properties<span class="token punctuation">&gt;</span>    &lt;dependencies<span class="token punctuation">&gt;</span>        &lt;dependency<span class="token punctuation">&gt;</span>            &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.cloud&lt;/groupId<span class="token punctuation">&gt;</span>            &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>netflix<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>server&lt;/artifactId<span class="token punctuation">&gt;</span>        &lt;/dependency<span class="token punctuation">&gt;</span>        &lt;dependency<span class="token punctuation">&gt;</span>            &lt;groupId<span class="token punctuation">&gt;</span>com.atguigu.cloud&lt;/groupId<span class="token punctuation">&gt;</span>            &lt;artifactId<span class="token punctuation">&gt;</span>cloud<span class="token punctuation">-</span>api<span class="token punctuation">-</span>commons&lt;/artifactId<span class="token punctuation">&gt;</span>            &lt;version<span class="token punctuation">&gt;</span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span>&lt;/version<span class="token punctuation">&gt;</span>        &lt;/dependency<span class="token punctuation">&gt;</span>        &lt;dependency<span class="token punctuation">&gt;</span>            &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>            &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>web&lt;/artifactId<span class="token punctuation">&gt;</span>        &lt;/dependency<span class="token punctuation">&gt;</span>        &lt;dependency<span class="token punctuation">&gt;</span>            &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>            &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>actuator&lt;/artifactId<span class="token punctuation">&gt;</span>        &lt;/dependency<span class="token punctuation">&gt;</span>        &lt;dependency<span class="token punctuation">&gt;</span>            &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>            &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>devtools&lt;/artifactId<span class="token punctuation">&gt;</span>            &lt;scope<span class="token punctuation">&gt;</span>runtime&lt;/scope<span class="token punctuation">&gt;</span>            &lt;optional<span class="token punctuation">&gt;</span>true&lt;/optional<span class="token punctuation">&gt;</span>        &lt;/dependency<span class="token punctuation">&gt;</span>    &lt;/dependencies<span class="token punctuation">&gt;</span>&lt;/project<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>编写配置文件<code>application.yaml</code></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost <span class="token comment"># eureka 服务端实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 自己不注册到eureka</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 自己就是注册中心，不需要检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/ <span class="token comment"># 设置与Eureka交互的地址查询服务和注册服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>springboot 启动类</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">@SpringBootApplication@EnableEurekaServerpublic class Eureka7001Application <span class="token punctuation">{</span>    public static void main(String<span class="token punctuation">[</span><span class="token punctuation">]</span> args) <span class="token punctuation">{</span>        SpringApplication.run(Eureka7001Application.class<span class="token punctuation">,</span> args);    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务访问地址：<a href="http://localhost:7001/">http://localhost:7001/</a></p><h3 id="client连接"><a href="#client连接" class="headerlink" title="client连接"></a>client连接</h3><ol><li>pom依赖添加</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>application配置添加</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 注册到eureka</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka/ <span class="token comment"># 设置与Eureka交互的地址查询服务和注册服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>启动类注解添加</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableEurekaClient</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="服务调用流程"><a href="#服务调用流程" class="headerlink" title="服务调用流程"></a>服务调用流程</h3><ol><li>eureka注册中心启动</li><li>服务启动</li><li>服务提供者注册进注册中心，服务调用者注册进注册中心</li><li>调用者调用服务提供者提供服务时，去注册中心基于服务别名获取实际rpc远程调用地址</li><li>基于HtppClient远程调用</li><li>服务地址会缓存到本地jvm中，默认每间隔30秒更新一次服务调用地址</li></ol><h3 id="Eureka-Server集群"><a href="#Eureka-Server集群" class="headerlink" title="Eureka Server集群"></a>Eureka Server集群</h3><p>关键：互相注册、相互守望</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816340.png" alt="img"></p><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><p>其他配置均一致，关键，eureka server相互注册</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">7001</span> <span class="token comment"># eureka 服务端实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># false表示不向注册中心注册自己</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 自己就是注册中心，不需要检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7002/eureka/ <span class="token comment"># 设置与Eureka交互的地址查询服务和注册服务 集群版相互注册</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，7001的server注册到7002， 7002的server注册到7001</p><h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><p>都不用动，增加注册地址即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 注册到eureka</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7002/eureka/ <span class="token comment"># 设置与Eureka交互的地址查询服务和注册服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Eureka-Client集群后服务调用"><a href="#Eureka-Client集群后服务调用" class="headerlink" title="Eureka Client集群后服务调用"></a>Eureka Client集群后服务调用</h3><h4 id="单工程复用为多服务"><a href="#单工程复用为多服务" class="headerlink" title="单工程复用为多服务"></a>单工程复用为多服务</h4><p>相同服务可以通过配置两组配置文件完成多服务搭建，例如：</p><ol><li>指定两个配置文件</li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816349.png" alt="img"></p><p>主配置文件写正常配置信息，除端口以外</p><p>8001/8002配置文件只用配置server.port</p><ol><li>设置启动参数</li></ol><ul><li>方式1：Idea</li></ul><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816377.png" alt="img"></p><ul><li>方式2：启动参数</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">java <span class="token punctuation">-</span>jar order<span class="token punctuation">-</span>service<span class="token punctuation">-</span>v1.0.jar <span class="token punctuation">-</span><span class="token punctuation">-</span>spring.profiles.active=8002<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>优先级</p><p>命令行方式 &gt; Java系统属性方式 &gt; 系统变量方式 &gt; 配置文件方式</p><h4 id="调用多服务"><a href="#调用多服务" class="headerlink" title="调用多服务"></a>调用多服务</h4><ol><li>调整点1：resttemplate固定ip调用改成eureka注册名</li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816387.png" alt="img"></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816388.png" alt="img"></p><ol><li>启用resttemplate负载均衡loadbalance</li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816396.png" alt="img"></p><h3 id="Eureka-Client注册名称以及IP"><a href="#Eureka-Client注册名称以及IP" class="headerlink" title="Eureka Client注册名称以及IP"></a>Eureka Client注册名称以及IP</h3><p>两个配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> payment8001   <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816402.png" alt="img"></p><h3 id="Eureka-api级服务信息获取"><a href="#Eureka-api级服务信息获取" class="headerlink" title="Eureka api级服务信息获取"></a>Eureka api级服务信息获取</h3><ol><li>启动类添加注解<code>@EnableDiscoveryClient</code></li><li>注入<code>DiscoverClient</code></li><li>接口编写</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/discovery"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">discovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> services <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> element <span class="token operator">:</span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"******element: {}"</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"CLOUD-PAYMENT-PROVIDER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServiceInstance</span> instance <span class="token operator">:</span> instances<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> discoveryClient<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">{</span>    <span class="token string">"services"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"cloud-payment-provider"</span><span class="token punctuation">,</span><span class="token string">"cloud-order-consumer"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\ <span class="token string">"order"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token number">8002</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.0</span><span class="token number">.149</span><span class="token operator">:</span><span class="token number">8002</span><span class="token number">8001</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.0</span><span class="token number">.149</span><span class="token operator">:</span><span class="token number">8001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自我保护机制"><a href="#自我保护机制" class="headerlink" title="自我保护机制"></a>自我保护机制</h3><p>Eureka服务端会检查最近15分钟内所有Eureka 实例正常心跳占比，如果低于85%就会触发自我保护机制。触发了保护机制，Eureka将暂时把这些失效的服务保护起来，不让其过期，但这些服务也并不是永远不会过期。Eureka在启动完成后，每隔60秒会检查一次服务健康状态，如果这些被保护起来失效的服务过一段时间后（默认90秒）还是没有恢复，就会把这些服务剔除。如果在此期间服务恢复了并且实例心跳占比高于85%时，就会自动关闭自我保护机制。</p><pre class="line-numbers language-none"><code class="language-none">保障了CAP中的AP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>关闭自我保护机制</strong></p><ol><li><strong>设置客户端心跳发送间隔以及非健康实例判断时间</strong></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span><span class="token comment"># eureka client 超过多少时间未发送心跳，则判断该client不可用</span><span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">90</span>   <span class="token comment"># eureka client 向 server 发送心跳间隔</span>  <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">30</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上两个配置可以设置的小一些，让client不可用</p><ol><li><strong>设置服务端关闭自我保护机制，及时剔除不可用client</strong></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span>      <span class="token comment"># 关闭自我保护</span>      <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 失效服务超过90秒即删除该可用实例</span>      <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">90000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><p><a href="https://zookeeper.apache.org/">https://zookeeper.apache.org/</a></p><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">docker pull zookeeperdocker run  <span class="token punctuation">-</span>p 2181<span class="token punctuation">:</span>2181 <span class="token punctuation">-</span><span class="token punctuation">-</span>privileged=true  <span class="token punctuation">-</span><span class="token punctuation">-</span>name zookeeper  <span class="token punctuation">-</span>d  zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>引入pom</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-zookeeper-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8004</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>provider<span class="token punctuation">-</span>payment8004  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">zookeeper</span><span class="token punctuation">:</span>      <span class="token key atrule">connect-string</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">2181</span> <span class="token comment"># zk注册地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816413.png" alt="img"></p><p>服务提供者注册成功</p><h3 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816424.png" alt="img"></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816434.png" alt="img"></p><h3 id="zk其他操作"><a href="#zk其他操作" class="headerlink" title="zk其他操作"></a>zk其他操作</h3><p>动态监听服务状态（利用Curator 作为zk客户端）</p><p>详细见代码</p><p>核心类</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">ZookeeperConfigZooKeeperPropertyZooKeeperUtils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h2><p><a href="https://www.consul.io/">https://www.consul.io/</a></p><p><a href="https://www.cnblogs.com/myitnews/p/13655000.html">https://www.cnblogs.com/myitnews/p/13655000.html</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">wget</span> -O- https://apt.releases.hashicorp.com/gpg <span class="token operator">|</span> gpg --dearmor <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /usr/share/keyrings/hashicorp-archive-keyring.gpg<span class="token builtin class-name">echo</span> <span class="token string">"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> main"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/hashicorp.list<span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> consul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>启动consul</p><p><code>consul agent -dev</code>（本地启动）</p><p><code>consul agent -dev -client 0.0.0.0 -ui</code>（非本地启动）</p><p>访问页面</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816451.png" alt="img"></p><h3 id="服务注册-1"><a href="#服务注册-1" class="headerlink" title="服务注册"></a>服务注册</h3><ol><li>pom引入</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.cloud<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-cloud-starter-consul-discovery<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置文件</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">server:  port: <span class="token number">8006</span>spring:  application:    name: cloud-payment-8006  cloud:    consul:      discovery:        service-name: <span class="token variable">${spring.application.name}</span> <span class="token comment"># 服务名</span>        heartbeat:          enabled: <span class="token boolean">true</span> <span class="token comment"># 服务健康检测(不开启会有红叉)</span><span class="token comment">#        prefer-ip-address: true # 服务名使用ip地址</span><span class="token comment">#        ip-address: localhost # 服务名ip地址</span>      host: <span class="token number">43.140</span>.208.71 <span class="token comment"># consul服务地址</span>      port: <span class="token number">8500</span> <span class="token comment"># consul服务端口</span><span class="token comment"># 暴露所有端点健康检查</span>management:  endpoints:    web:      exposure:        include: all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>启动类添加注解<code>@EnableDiscoveryClient</code></li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816456.png" alt="img"></p><h2 id="注册中心对比"><a href="#注册中心对比" class="headerlink" title="注册中心对比"></a>注册中心对比</h2><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816474.png" alt="img"></p><p><a href="https://blog.csdn.net/fly910905/article/details/100023415">https://blog.csdn.net/fly910905/article/details/100023415</a></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816485.png" alt="img"></p><p><a href="https://bbs.huaweicloud.com/blogs/361018">https://bbs.huaweicloud.com/blogs/361018</a></p><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.cloud<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>eureka客户端默认集成了ribbon，不需要重复引入依赖</p><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816497.png" alt="img"></p><table><thead><tr><th><strong>策略</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>round</td><td>轮询（<strong>默认</strong>）</td></tr><tr><td>random</td><td>随机</td></tr><tr><td>retry</td><td>先轮询，如果失败会重试</td></tr><tr><td>weighted</td><td>对轮询的拓展，响应越快权重越高</td></tr><tr><td>bestAviliable</td><td>先过滤多次失败而跳闸的服务，选择并发小的服务</td></tr><tr><td>availableFilter</td><td>先过滤故障实例，再选择并发较小的实例</td></tr></tbody></table><h3 id="指定服务切换负载均衡算法"><a href="#指定服务切换负载均衡算法" class="headerlink" title="指定服务切换负载均衡算法"></a>指定服务切换负载均衡算法</h3><ol><li>新建负载均衡类（IRule实现类注入spring)</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>loadbalancerule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">IRule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span></span><span class="token class-name">RandomRule</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token comment">/*** @author zhuzy* @version 1.0* @description MyRandomRule* @create 2023/1/18 16:22*/</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRandomRule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">randomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p>实现类不可以被<code>@ComponentScan</code> 扫描到，否则便是全局的了。</p><ol><li>添加启动参数<code>@RibbonClient</code></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"CLOUD-PAYMENT-PROVIDER"</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">MyRandomRule</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><p>name为需要切换负载均衡算法的服务名，configuration为具体负载均衡算法实现类</p><h1 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h1><h2 id="Ribbion"><a href="#Ribbion" class="headerlink" title="Ribbion"></a>Ribbion</h2><p>结合restTemplate使用</p><h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><p>涉及模块：</p><p>cloud-eureka-server7001</p><p>cloud-eureka-server7002</p><p>cloud-provider-payment8001</p><p>cloud-consumeropenfeign-order80</p><p>有了ribbon + resttemplate为什么还需要feign？</p><p><strong>方便复用：</strong>在使用ribbon+resttemplate时，每个地方要调用接口都得自己去写一套对接口的调用。使用feign之后，只需要声明一次接口，后序需要使用到接口调用引入这个接口即可。</p><p>feign如何实现负载均衡？</p><p><strong>集成了ribbon</strong></p><h3 id="与Feign区别"><a href="#与Feign区别" class="headerlink" title="与Feign区别"></a>与Feign区别</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816504.png" alt="img"></p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>依赖添加</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>注解添加<code>@EnableFeignClients</code></li><li>声明服务提供者接口路径</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PAYMENT-PROVIDER"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">"/payment"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentFeignClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/selectByPrimaryId/{id}"</span><span class="token punctuation">)</span>    <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaymentEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPrimaryId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h3><p>Openfeign默认超时时间是一秒钟，调用接口超时则会报错</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816523.png" alt="img"></p><p>可以通过ribbon设置超时时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># 设置feign客户端超时时间ribbon<span class="token operator">:</span>  <span class="token class-name">ReadTimeout</span><span class="token operator">:</span> <span class="token number">5000</span> # 指的是建立连接所用时间，适用于网络正常的情况下，两端连接所占用时间  <span class="token class-name">ConnectTimeout</span><span class="token operator">:</span> <span class="token number">5000</span> # 指的是建立连接后从服务器读到可用资源的时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志打印"><a href="#日志打印" class="headerlink" title="日志打印"></a>日志打印</h3><p><strong>日志级别</strong></p><ul><li>NONE 默认，不显示任何级别</li><li>BASIC 记录请求方法/URL/响应状态码/执行时间</li><li>HEADERS 除了BASIC定义的信息外，还有请求和响应头信息</li><li>FULL 除了HEADERS中的，还有请求以及响应正文以及元数据</li></ul><p><strong>设置日志级别</strong></p><ol><li>日志配置Bean（设置Feign日志级别）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>yml配置文件（设置接口日志级别：Debug/Info/Warn/Error)</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">logging<span class="token operator">:</span>  level<span class="token operator">:</span>    # feign日志以什么级别监控什么接口    <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>feign<span class="token punctuation">.</span></span>PaymentFeignClient</span><span class="token operator">:</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h1><p><a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a></p><p><strong>微服务服务调用面临的问题</strong></p><ol><li>服务雪崩</li></ol><p>多个微服务之间调用的时候，假如微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他微服务，这就是所谓的<strong>扇出</strong>。如果扇出的链路上某个微服务调用时间过长或者服务不可用，则会导致A服务长时间阻塞，占用越来越多的系统资源，进而造成系统崩溃。也就是所谓的雪崩效应。</p><h2 id="降级、熔断、限流"><a href="#降级、熔断、限流" class="headerlink" title="降级、熔断、限流"></a>降级、熔断、限流</h2><table><thead><tr><th>类型</th><th>含义</th><th>适用场景</th></tr></thead><tbody><tr><td>服务降级</td><td>服务不可用时，给一个兜底的响应（友好的提示fallback）</td><td>1.程序异常 2.超时 3.服务熔断 4.线程池/信号量打满</td></tr><tr><td>服务熔断</td><td>保险丝，服务濒临崩溃时保证服务不会崩溃而是以服务降级方式响应给调用方</td><td>保险丝</td></tr><tr><td>服务限流</td><td>高并发场景，服务并发量过高，将服务进行排队处理，有序进行</td><td>并发较高</td></tr></tbody></table><h2 id="Hystrix（豪猪哥）"><a href="#Hystrix（豪猪哥）" class="headerlink" title="Hystrix（豪猪哥）"></a>Hystrix（豪猪哥）</h2><p>对应工程</p><p>cloud-provider-hystrix-payment8001</p><p>cloud-eureka-server7001</p><p>cloud-consumerhystrix-order80</p><p>cloud-consumerhystrix-dashboard9001</p><p><strong>介绍</strong></p><p>处理分布式系统延迟和容错的开源库，类似于熔断保险丝。服务不可用或者长时间调用无响应超时时，向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方法无法处理的异常。</p><p><strong>jmeter并发压力测试</strong></p><p>2w并发请求timeout接口，再调用ok接口会发现ok也会被阻塞住，这是因为tomcat线程池资源被占尽。</p><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><ol><li>引入pom</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>hystrix<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>服务提供者自我容错配置</li></ol><p>@HystrixCommand 配置兜底方法以及失败触发条件</p><p>设置兜底处理api method， 并配置失败认定条件。即超时时间达到了2000毫秒</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"payment_timeoutHandler"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"2000"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"payment_timeoutHandler"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"2000"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_timeout</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> timeout <span class="token operator">=</span> <span class="token number">3000L</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"线程池： "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" payment_timeout, id: "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"^_^"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_timeoutHandler</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"线程池： "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" payment_timeoutHandler, id: "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"o(╥﹏╥)o"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主启动类激活</strong></p><p>添加注解： <code>@EnableCircuitBreaker</code></p><p>不仅仅系统超时才会降级，系统报错后也会被拦截走降级的逻辑。</p><ol><li>服务调用者fallback配置</li></ol><ul><li>配置feign开启降级(yaml)</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feign</span><span class="token punctuation">:</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span><span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>启动类添加注解<code>@EnableHystrix</code></li><li>配置降级command</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/timeout/{id}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"payment_timeoutHandler"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"800"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_timeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> res <span class="token operator">=</span> paymentFeignClient<span class="token punctuation">.</span><span class="token function">payment_timeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"payment_timeout响应结果, {}"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_timeoutHandler</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"我是消费者80， 对方支付系统繁忙请十秒后重试或者自己运行出错请检查自己o(╥﹏╥)o"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="全局fallback-解决冗余问题"><a href="#全局fallback-解决冗余问题" class="headerlink" title="全局fallback(解决冗余问题)"></a>全局fallback(解决冗余问题)</h4><p>类似于全局异常处理器，避免代码冗余。除了个别业务需要特殊设置降级，其他服务可以使用全局的降级处理器。</p><ol><li>声明当前类全局fallback</li><li>增加注解@HystrixCommand</li><li>定义全局fallback</li></ol><p><strong>case：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">"payment_Global_FallbackMethod"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">PaymentFeignClient</span> paymentFeignClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/ok/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_ok</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> res <span class="token operator">=</span> paymentFeignClient<span class="token punctuation">.</span><span class="token function">payment_ok</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"payment_ok响应结果： {}"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/timeout/{id}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@HystrixCommand</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_timeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> res <span class="token operator">=</span> paymentFeignClient<span class="token punctuation">.</span><span class="token function">payment_timeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"payment_timeout响应结果, {}"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_Global_FallbackMethod</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是消费者80， 对方支付系统繁忙请十秒后重试或者自己运行出错请检查自己o(╥﹏╥)o"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单一Feign接口的统一fallback-解决混乱问题"><a href="#单一Feign接口的统一fallback-解决混乱问题" class="headerlink" title="单一Feign接口的统一fallback(解决混乱问题)"></a>单一Feign接口的统一fallback(解决混乱问题)</h4><p>消费者在处理接口异常fallback时，如果接口较多，那么fallback处理逻辑将会很冗余且繁杂，可以通过统一的方式处理fallback</p><ol><li>feignclient增加fallback处理类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">"/payment"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> <span class="token class-name">PaymentFeignHystrixFallback</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentFeignClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/ok/{id}"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">payment_ok</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/timeout/{id}"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> <span class="token function">payment_timeout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>fallback处理类实现feignclient</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentFeignHystrixFallback</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentFeignClient</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_ok</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是消费者80， 对方支付系统繁忙请十秒后重试或者自己运行出错请检查自己o(╥﹏╥)o"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_timeout</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是消费者80， 对方支付系统繁忙请十秒后重试或者自己运行出错请检查自己o(╥﹏╥)o"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务熔断-1"><a href="#服务熔断-1" class="headerlink" title="服务熔断"></a>服务熔断</h3><p><a href="https://martinfowler.com/bliki/CircuitBreaker.html">https://martinfowler.com/bliki/CircuitBreaker.html</a></p><p>熔断机制是应对雪崩效应的一种链路保护机制。当扇出链路某个微服务出错或者不可用以及响应时间太长时，会进行服务降级，进而熔断该服务的调用。快速响应错误信息。<strong>当检测到该服务可正常进行调用时，则恢复调用链路。</strong></p><p>Hystrix会<strong>监控微服务调用链路，当失败达到一定阈值是，默认是（五秒钟20次）</strong>则会启用熔断机制。熔断机制的注解是@HystrixCommand</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816526.png" alt="img"></p><p>熔断的核心概念在于：</p><p>并不是完全认定该服务不可用，而是一个半断开阶段。仍有少量的请求会尝试该服务是否恢复，一旦恢复，则仍可以提供服务。</p><p><strong>测试</strong></p><p>Hystrix可配置属性：<code>HystrixCommandProperties</code></p><p><strong>服务提供者熔断配置</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 服务熔断</span><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"payment_circuitBreaker_fallback"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment">// 以下配置解释：在10秒内，请求超过十次且失败百分比超过百分之六十，则启用熔断机制</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.enabled"</span><span class="token punctuation">,</span> value<span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.requestVolumeThreshold"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 请求次数</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.sleepWindowInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 时间窗口大小</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"circuitBreaker.errorThresholdPercentage"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 失败百分比</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_circuitBreaker</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"*****id 不能为负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 调用成功， 流水号"</span> <span class="token operator">+</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">payment_circuitBreaker_fallback</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"id 不能为负数o(╥﹏╥)o"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dashboard搭建"><a href="#dashboard搭建" class="headerlink" title="dashboard搭建"></a>dashboard搭建</h3><h4 id="dashborad"><a href="#dashborad" class="headerlink" title="dashborad"></a>dashborad</h4><ol><li>新建工程dashboard</li><li>pom</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span>         xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>         xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>parent<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>sc2023<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>modelVersion<span class="token punctuation">&gt;</span></span><span class="token number">4.0</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>cloud<span class="token operator">-</span>consumerhystrix<span class="token operator">-</span>dashboard<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>properties<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token punctuation">&gt;</span></span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token punctuation">&gt;</span></span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>hystrix<span class="token operator">-</span>dashboard<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">&gt;</span></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>optional<span class="token punctuation">&gt;</span></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>cloud<span class="token operator">-</span>api<span class="token operator">-</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>application</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">server<span class="token operator">:</span>  port<span class="token operator">:</span> <span class="token number">9001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>启动类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableHystrixDashboard</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixDashboardApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HystrixDashboardApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816527.png" alt="img"></p><h4 id="注册进入dashboard"><a href="#注册进入dashboard" class="headerlink" title="注册进入dashboard"></a>注册进入dashboard</h4><ol><li>pom</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>增加bean</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@EnableCircuitBreaker</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentHystrix8001Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentHystrix8001Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HystrixMetricsStreamServlet</span> streamServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HystrixMetricsStreamServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServletRegistrationBean</span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>streamServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/hystrix.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"HystrixMetricsStreamServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h4><p>连接dashborad</p><p>dashboard输入url: <a href="http://localhost:8001/hystrix.stream">http://localhost:8001/hystrix.stream</a></p><p>进行请求</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816533.png" alt="img"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h1><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816546.png" alt="img"></p><h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><ol><li>pom</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud&lt;<span class="token operator">/</span>groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-gateway&lt;<span class="token operator">/</span>artifactId&gt;    &lt;<span class="token operator">/</span>dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot&lt;<span class="token operator">/</span>groupId&gt;        &lt;artifactId&gt;spring-boot-devtools&lt;<span class="token operator">/</span>artifactId&gt;        &lt;scope&gt;runtime&lt;<span class="token operator">/</span>scope&gt;        &lt;optional&gt;true&lt;<span class="token operator">/</span>optional&gt;    &lt;<span class="token operator">/</span>dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>cloud&lt;<span class="token operator">/</span>groupId&gt;        &lt;artifactId&gt;cloud-api-commons&lt;<span class="token operator">/</span>artifactId&gt;        &lt;version&gt;$<span class="token punctuation">{</span>version<span class="token punctuation">}</span>&lt;<span class="token operator">/</span>version&gt;    &lt;<span class="token operator">/</span>dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud&lt;<span class="token operator">/</span>groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;<span class="token operator">/</span>artifactId&gt;    &lt;<span class="token operator">/</span>dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org<span class="token punctuation">.</span>projectlombok&lt;<span class="token operator">/</span>groupId&gt;        &lt;artifactId&gt;lombok&lt;<span class="token operator">/</span>artifactId&gt;    &lt;<span class="token operator">/</span>dependency&gt;&lt;<span class="token operator">/</span>dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置文件</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">spring:  application:    name: cloud-gateway  cloud:    gateway:      routes:        <span class="token operator">-</span> id: payment_route           <span class="token comment"># 路由的id，唯一</span>          uri: http:<span class="token operator">/</span><span class="token operator">/</span>localhost:8011  <span class="token comment"># 匹配后提供服务的路由地址</span>          predicates:            <span class="token operator">-</span> Path=<span class="token operator">/</span>payment/<span class="token operator">*</span><span class="token operator">*</span>    <span class="token comment"># 断言， 匹配的路径会路由到uri（9527/payment... -&gt; 8001)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编码路由配置"><a href="#编码路由配置" class="headerlink" title="编码路由配置"></a>编码路由配置</h3><p>替换yml配置路由断言，改用硬编码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customerRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RouteLocatorBuilder<span class="token punctuation">.</span>Builder</span> routes <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"route_01"</span><span class="token punctuation">,</span>                     r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/guonei"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://news.baidu.com/guonei"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"route_02"</span><span class="token punctuation">,</span>                     r <span class="token operator">-&gt;</span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/guoji"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://news.baidu.com/guoji"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="微服务名动态路由"><a href="#微服务名动态路由" class="headerlink" title="微服务名动态路由"></a>微服务名动态路由</h3><p>通常情况下，路由并不会写死，而是通过注册中心获取服务名并结合ribbon等负载均衡策略进行负载均衡。</p><p>以Eureka为例，服务名取自application-name</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816560.png" alt="img"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启从注册中心动态创建路由的功能， 利用微服务名称进行服务调用</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_route <span class="token comment"># 路由id</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//CLOUD<span class="token punctuation">-</span>PAYMENT<span class="token punctuation">-</span>PROVIDER <span class="token comment"># 匹配后提供服务的路由地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> Path=/payment/<span class="token important">**</span>    <span class="token comment"># 断言， 匹配的路径会路由到uri（9527/payment... -&gt; CLOUD-PAYMENT-PROVIDER)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="predicate"><a href="#predicate" class="headerlink" title="predicate"></a>predicate</h3><p><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#gateway-request-predicates-factories">https://cloud.spring.io/spring-cloud-gateway/reference/html/#gateway-request-predicates-factories</a></p><p>具体参照以上官方文档</p><table><thead><tr><th>名称</th><th>含义</th><th>写法</th></tr></thead><tbody><tr><td>After</td><td>在xxx时间访问后</td><td>predicates: - After=2017-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>在xxx时间访问前</td><td>predicates: - Before=2017-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Between</td><td>在xxx时间之间</td><td>predicates: - Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>两个参数，cookie key以及正则，cookie key的值满足正则则匹配</td><td>predicates: - Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>两个参数，header key以及正则，header key的值满足正则则匹配</td><td>predicates: - Header=X-Request-Id, \d+</td></tr><tr><td>Host</td><td>集合参数，请求头Host包含该主机则匹配路由（支持通配符以及spel表达式）</td><td>predicates: - Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>集合参数，请求方式，Get 或者 Post，符合请求方式的请求则匹配</td><td>predicates: - Method=GET,POST</td></tr><tr><td>Path</td><td>集合参数，请求路径匹配</td><td>predicates: - Path=/red/{segment},/blue/{segment}</td></tr><tr><td>Query</td><td>两个或一个参数，参数名以及参数值的正则表达式，包含该参数并满足正则表达式则匹配；或者一个参数情况下，包含该参数即匹配</td><td>predicates: - Query=red, gree.or predicates: - Query=green</td></tr><tr><td>RemoteAddr</td><td>集合参数，匹配接口调用方ip，支持子网掩码，如有则表示 1~24均可</td><td>predicates: - RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight Route</td><td>权重路由（看官网示例）</td><td><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#the-weight-route-predicate-factory">https://cloud.spring.io/spring-cloud-gateway/reference/html/#the-weight-route-predicate-factory</a></td></tr></tbody></table><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#gatewayfilter-factories">https://cloud.spring.io/spring-cloud-gateway/reference/html/#gatewayfilter-factories</a></p><p><strong>生命周期以及种类</strong></p><ol><li>生命周期：pre/post</li><li>种类：gateway/global</li></ol><p><strong>自定义全局GlobalFilter</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">@Component@Slf4jpublic class MyGlobalFilter implements GlobalFilter<span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    @Override    public Mono&lt;Void<span class="token punctuation">&gt;</span> filter(ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain) <span class="token punctuation">{</span>        log.info("<span class="token important">********************come</span> in my global filter" + new Date());        String username = exchange.getRequest().getQueryParams().getFirst("username");        if (username == null) <span class="token punctuation">{</span>            log.info("<span class="token important">***************用户名为null，</span> 非法用户");            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);            return exchange.getResponse().setComplete();        <span class="token punctuation">}</span>        return chain.filter(exchange);    <span class="token punctuation">}</span>    @Override    public int getOrder() <span class="token punctuation">{</span>        return 0;    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h1><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>对应工程：</p><p>cloud-configcenter-3344</p><p>cloud-configclient-3355</p><p>cloud-configclient-3366</p><p>cloud-eureka-server7001</p><p><a href="https://www.bilibili.com/video/BV18E411x7eT/?p=76&amp;spm_id_from=pageDriver&amp;vd_source=f78aecb21fc43825405b56832e990cd1">https://www.bilibili.com/video/BV18E411x7eT/?p=76&amp;spm_id_from=pageDriver&amp;vd_source=f78aecb21fc43825405b56832e990cd1</a></p><p><a href="https://www.cnblogs.com/fengzheng/p/11242128.html">https://www.cnblogs.com/fengzheng/p/11242128.html</a></p><ul><li>支持git</li><li>支持数据库</li><li>支持svn</li><li>支持本地文件</li></ul><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816564.png" alt="img"></p><p><strong>一次修改，处处发版</strong></p><p>作用：</p><ul><li>集中管理配置文件</li><li>不同环境不同配置，动态化的配置更新</li><li>运行期间动态调整配置，不需要在部署节点上编辑配置，只需要统一编辑</li><li>配置发生变化时，服务不需要重启即可感知到配置变化并应用新的配置</li><li>将配置信息以rest接口形式暴露</li></ul><p>配置路径:</p><ul><li>github（默认）</li><li>svn</li><li>本地文件</li></ul><h3 id="Server搭建"><a href="#Server搭建" class="headerlink" title="Server搭建"></a>Server搭建</h3><ol><li>pom</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${rversion}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>yml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center <span class="token comment"># 注册进Eureka</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token comment"># 配置模式 git</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token comment"># git路径</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/zzy888888/cloud23<span class="token punctuation">-</span>config.git          <span class="token comment"># 配置文件匹配表达式（以config开头）</span>          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span> config          <span class="token comment"># 读取分支</span>          <span class="token key atrule">default-label</span><span class="token punctuation">:</span> master          <span class="token key atrule">username</span><span class="token punctuation">:</span> zzy888888          <span class="token key atrule">password</span><span class="token punctuation">:</span> zwzwxx0711.<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 注册到eureka</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>main class</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">@SpringBootApplication@EnableConfigServer@EnableEurekaClientpublic class ConfigServer3344 <span class="token punctuation">{</span>    public static void main(String<span class="token punctuation">[</span><span class="token punctuation">]</span> args) <span class="token punctuation">{</span>        SpringApplication.run(ConfigServer3344.class<span class="token punctuation">,</span> args);    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>可以选用github/gitte，这里选择gitte</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816581.png" alt="img"></p><p>如果选择私有仓库则需要配置用户名与密码</p><h3 id="Client搭建"><a href="#Client搭建" class="headerlink" title="Client搭建"></a>Client搭建</h3><ol><li>pom</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>web&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>actuator&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>netflix<span class="token punctuation">-</span>eureka<span class="token punctuation">-</span>client&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>devtools&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;scope<span class="token punctuation">&gt;</span>runtime&lt;/scope<span class="token punctuation">&gt;</span>    &lt;optional<span class="token punctuation">&gt;</span>true&lt;/optional<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.atguigu.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>cloud<span class="token punctuation">-</span>api<span class="token punctuation">-</span>commons&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;version<span class="token punctuation">&gt;</span>$<span class="token punctuation">{</span>rversion<span class="token punctuation">}</span>&lt;/version<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>yml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client <span class="token comment"># 注册进Eureka</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master <span class="token comment"># 分支名称</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config <span class="token comment"># 配置文件名称</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev <span class="token comment"># 配置文件读取后缀: label+name+profile+uri组合成配置文件路径： http://localhost:3344/master/config-dev.yaml</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344</span> <span class="token comment"># 配置中心地址</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 注册到eureka</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 检索服务</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>main class</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">@SpringBootApplication@EnableEurekaClientpublic class ConfigClient3355 <span class="token punctuation">{</span>    public static void main(String<span class="token punctuation">[</span><span class="token punctuation">]</span> args) <span class="token punctuation">{</span>        SpringApplication.run(ConfigClient3355.class<span class="token punctuation">,</span> args);    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端动态刷新"><a href="#客户端动态刷新" class="headerlink" title="客户端动态刷新"></a>客户端动态刷新</h3><p>我们修改了git中的配置后，服务端是实时获取的，可以进行刷新。但是由于客户端是先进行了本地缓存，因此不能够进行动态刷新。可以通过以下途径进行刷新：</p><ol><li>重启客户端</li><li>调用客户端刷新接口</li></ol><h4 id="动态刷新实战"><a href="#动态刷新实战" class="headerlink" title="动态刷新实战"></a>动态刷新实战</h4><p>目前服务端能够做到自动刷新，客户端不行。通过以上讲解，可以通过调用客户端接口进行自动刷新。配置步骤如下：</p><ol><li>加pom依赖</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>actuator&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>加application.yml配置</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 暴露监控端点</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"refresh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>涉及到配置的类加注解</li></ol><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">@RestController@RefreshScopepublic class ConfigClientController {    @Value("${config.info}")    private String configInfo;    @GetMapping("/config")    public String getConfigInfo() {        return configInfo;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>调用客户端刷新接口</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">curl <span class="token punctuation">-</span>X POST "http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3355/actuator/refresh"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><p>多个客户端，如果需要刷新的话 都得运维手动调用refresh接口，才能实现配置刷新。</p><h2 id="Bus"><a href="#Bus" class="headerlink" title="Bus"></a>Bus</h2><p><a href="https://www.bilibili.com/video/BV18E411x7eT/?p=78&amp;spm_id_from=pageDriver&amp;vd_source=f78aecb21fc43825405b56832e990cd1">https://www.bilibili.com/video/BV18E411x7eT/?p=78&amp;spm_id_from=pageDriver&amp;vd_source=f78aecb21fc43825405b56832e990cd1</a></p><p>配合config实现动态刷新</p><p><strong>定义：</strong>消息总线在微服务架构中，是一种轻量级的消息代理的主题，系统中的所有组件都可以连接进来，该主题的消息会被所有的实例监听和消费，所以称为消息总线。</p><p><strong>基本原理：</strong>ConfigClient实例全部都监听MQ中同一个topic（默认是springcloud bus）。当一个微服务刷新数据的时候，将会把这个信息放入topic中，这样其他监听同一个Topic的服务就能够得到通知，然后去更新自身的配置。</p><p>支持的消息队列：    RabbitMq 以及 Kafka</p><h3 id="rabbit-mq搭建"><a href="#rabbit-mq搭建" class="headerlink" title="rabbit mq搭建"></a>rabbit mq搭建</h3><p><a href="https://developer.aliyun.com/article/846528">https://developer.aliyun.com/article/846528</a></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">docker pull rabbitmq<span class="token punctuation">:</span>3.6.15<span class="token punctuation">-</span>managementdocker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span><span class="token punctuation">-</span>name cloud23rb \<span class="token punctuation">-</span>p 15672<span class="token punctuation">:</span>15672 <span class="token punctuation">-</span>p 5672<span class="token punctuation">:</span>5672 rabbitmq<span class="token punctuation">:</span>3.6.15<span class="token punctuation">-</span>management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>访问：</p><p>用户名：guest    密码：guest</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816586.png" alt="img"></p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816595.png" alt="img"></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816608.png" alt="img"></p><p>刷新配置在Config Server，而不是业务节点</p><h3 id="全局刷新（广播）"><a href="#全局刷新（广播）" class="headerlink" title="全局刷新（广播）"></a>全局刷新（广播）</h3><p>Config配置如果想要实现刷新单独只有Config的情况下，只能通过客户端开启actuator手动发起post请求调用<code>/actuator/refresh</code>接口，如果在客户端节点比较多的情况下，不现实。</p><p>因此迫切需要一种方式，只请求一个节点，并将刷新信息广播到其他的所有节点，另外，这个节点最好是server节点。</p><p><strong>Bus广播刷新配置步骤</strong></p><ol><li>安装rabbit mq</li><li>增加pom依赖（服务端以及客户端）</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>bus<span class="token punctuation">-</span>amqp&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置rabbit mq（服务端以及客户端）</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 43.140.208.71    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>config服务端暴露端点（bus-refresh）</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># rabbit mq 暴露bus刷新配置的端点</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"bus-refresh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>调用服务端端点接口实现刷新</li></ol><pre class="line-numbers language-none"><code class="language-none">**curl -X POST "http://localhost:3344/actuator/bus-refresh"**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="定点刷新"><a href="#定点刷新" class="headerlink" title="定点刷新"></a>定点刷新</h3><p>配置同全局刷新，调用url接口改成</p><pre class="line-numbers language-none"><code class="language-none">**curl -X POST "http://localhost:3344/actuator/bus-refresh/server-name:server-port"**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>例</strong>：</p><p>存在服务：cloud-config-client1:3355</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816612.png" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">curl -X POST "http://localhost:3344/actuator/bus-refresh/cloud-config-client1:3355**"**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="消息总线"><a href="#消息总线" class="headerlink" title="消息总线"></a>消息总线</h1><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>涉及到的模块：</p><p>cloud-eureka-server7001</p><p>cloud-stream-rabbitmq-provider8801</p><p>cloud-stream-rabbitmq-consumer8802</p><p><strong>用途：屏蔽底层消息中间件的差异，降低切换成本，统一消息编程模型。</strong></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816621.png" alt="img"></p><p>代码交互Binder；Binder去绑定MQ</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816637.png" alt="img"></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816640.png" alt="img"></p><p><strong>编码和常用注解</strong></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816646.png" alt="img"></p><h3 id="消息发送与消费"><a href="#消息发送与消费" class="headerlink" title="消息发送与消费"></a>消息发送与消费</h3><p><strong>工程搭建</strong></p><p><strong>生产者工程搭建</strong></p><p><strong>消费者工程搭建</strong></p><p>详见工程：cloud-stream-rabbitmq-provider8801 与 cloud-stream-rabbitmq-consumer8802</p><p><strong>测试</strong></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816660.png" alt="img"></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816662.png" alt="img"></p><h3 id="重复消费"><a href="#重复消费" class="headerlink" title="重复消费"></a>重复消费</h3><p>两个消费者消费同一个生成者的数据时，都会收到生成者的消息，这种情况一般是不被认可的。可以通过配置消费者组来解决这种情况。 （集群部署情况下解决重复消费问题）</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816676.png" alt="img">存在两个group，因此会重复消费。</p><p>可以通过调整配置文件设置分组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>stream<span class="token punctuation">-</span>consumer <span class="token comment"># 注册进Eureka</span>  <span class="token comment"># stream 配置</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">stream</span><span class="token punctuation">:</span>      <span class="token key atrule">binders</span><span class="token punctuation">:</span>        <span class="token key atrule">defaultRabbit</span><span class="token punctuation">:</span> <span class="token comment"># 在此处配置要绑定的rabbitmq的服务消息</span>          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit <span class="token comment"># 消息组件类型</span>          <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment"># 设置rabbitmq的相关环境信息</span>            <span class="token key atrule">spring</span><span class="token punctuation">:</span>              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>                <span class="token key atrule">host</span><span class="token punctuation">:</span> 43.140.208.71                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>                <span class="token key atrule">username</span><span class="token punctuation">:</span> guest                <span class="token key atrule">password</span><span class="token punctuation">:</span> guest      <span class="token key atrule">bindings</span><span class="token punctuation">:</span> <span class="token comment"># 服务整合</span>        <span class="token key atrule">input</span><span class="token punctuation">:</span> <span class="token comment"># 这个名字是通道的名称</span>          <span class="token key atrule">destination</span><span class="token punctuation">:</span> studyExchange <span class="token comment"># 表示要使用的Exchange名称</span>          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json <span class="token comment"># 设置消息类型，文本可以设置为：“text/plain"</span>          <span class="token key atrule">binder</span><span class="token punctuation">:</span> defaultRabbit <span class="token comment"># 设置要绑定消息服务的具体设置</span>          <span class="token key atrule">group</span><span class="token punctuation">:</span> atguiguA   <span class="token comment"># 设置分组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816688.png" alt="img"></p><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><p>配置了group属性后，将会自动开启消息持久化。</p><p>作用：在消费者服务重启后，在这时间如果生产者仍然发送了消息，则能够监控到，并在服务启动后消费该部分消息。不配置的话将会导致重启期间的所有消息遗漏。</p><h1 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h1><h2 id="Sleuth"><a href="#Sleuth" class="headerlink" title="Sleuth"></a>Sleuth</h2><p><strong>涉及工程：</strong></p><p>cloud-eureka-server7001</p><p>cloud-provider-payment8001</p><p>可参考文档：<a href="https://blog.51cto.com/u_15296180/5157222">https://blog.51cto.com/u_15296180/5157222</a></p><p><a href="https://www.cnblogs.com/duanxz/p/7552857.html">https://www.cnblogs.com/duanxz/p/7552857.html</a></p><p>Sleuth负责链路追踪Zpikin负责可视化</p><h3 id="Zipkin搭建（整合了Sleuth）"><a href="#Zipkin搭建（整合了Sleuth）" class="headerlink" title="Zipkin搭建（整合了Sleuth）"></a>Zipkin搭建（整合了Sleuth）</h3><ol><li>下载server jar（zipkin-server-2.19.3-exec.jar）： <a href="https://repo1.maven.org/maven2/io/zipkin/zipkin-server/">https://repo1.maven.org/maven2/io/zipkin/zipkin-server/</a></li><li>jar包启动</li><li>访问页面： localhost:9411/zipkin</li></ol><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816689.png" alt="img"></p><h3 id="工程改造"><a href="#工程改造" class="headerlink" title="工程改造"></a>工程改造</h3><p>复用8001以及80</p><p><strong>改造内容：</strong></p><ol><li>pom</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>zipkin&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>application.yaml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">zipkin</span><span class="token punctuation">:</span>    <span class="token comment"># zipkin admin路径</span>    <span class="token key atrule">base-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9411</span>  <span class="token key atrule">sleuth</span><span class="token punctuation">:</span>    <span class="token key atrule">sampler</span><span class="token punctuation">:</span>      <span class="token comment"># 采样率，介于0-1之间，1表示全部采集</span>      <span class="token key atrule">probability</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816706.png" alt="img"></p><h1 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h1><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><p>涉及工程：</p><p>cloudalibaba-provider-payment9001</p><p>cloudalibaba-consumer-order80</p><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/zh-cn/index.html">https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/zh-cn/index.html</a></p><p>Nacos = Dynamic Naming and Configuration Service = Eureka + Config + Bus</p><h3 id="安装以及部署"><a href="#安装以及部署" class="headerlink" title="安装以及部署"></a>安装以及部署</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">docker pull nacos/nacos<span class="token punctuation">-</span>serverdocker run \<span class="token punctuation">-</span><span class="token punctuation">-</span>name nacos \<span class="token punctuation">-</span>e MODE=standalone \<span class="token punctuation">-</span>p 8848<span class="token punctuation">:</span>8848 \<span class="token punctuation">-</span>p 9848<span class="token punctuation">:</span>9848 \<span class="token punctuation">-</span>e JVM_XMS=256m \<span class="token punctuation">-</span>e JVM_XMX=256m \<span class="token punctuation">-</span>d nacos/nacos<span class="token punctuation">-</span>server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登陆控制台：localhost:8848/nacos</p><p>默认用户名：nacos        默认密码：nacos</p><h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><h4 id="服务提供者工程搭建"><a href="#服务提供者工程搭建" class="headerlink" title="服务提供者工程搭建"></a>服务提供者工程搭建</h4><ol><li>父pom定义dependencymanage 管理子pom依赖版本</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;<span class="token tag">!--spring</span> cloud alibaba<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.alibaba.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>alibaba<span class="token punctuation">-</span>dependencies&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;version<span class="token punctuation">&gt;</span>2.1.0.RELEASE&lt;/version<span class="token punctuation">&gt;</span>    &lt;type<span class="token punctuation">&gt;</span>pom&lt;/type<span class="token punctuation">&gt;</span>    &lt;scope<span class="token punctuation">&gt;</span>import&lt;/scope<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>子pom引入discovery</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.alibaba.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>alibaba<span class="token punctuation">-</span>nacos<span class="token punctuation">-</span>discovery&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>web&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>devtools&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;scope<span class="token punctuation">&gt;</span>runtime&lt;/scope<span class="token punctuation">&gt;</span>    &lt;optional<span class="token punctuation">&gt;</span>true&lt;/optional<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>actuator&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.atguigu.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>cloud<span class="token punctuation">-</span>api<span class="token punctuation">-</span>commons&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;version<span class="token punctuation">&gt;</span>1.0<span class="token punctuation">-</span>SNAPSHOT&lt;/version<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>application配置文件定义</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># 服务注册地址</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9002</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>启动类</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">@SpringBootApplication@EnableDiscoveryClientpublic class PaymentNacos9001 <span class="token punctuation">{</span>    public static void main(String<span class="token punctuation">[</span><span class="token punctuation">]</span> args) <span class="token punctuation">{</span>        SpringApplication.run(PaymentNacos9001.class<span class="token punctuation">,</span> args);    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册效果</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816711.png" alt="img"></p><h4 id="服务消费者工程搭建"><a href="#服务消费者工程搭建" class="headerlink" title="服务消费者工程搭建"></a>服务消费者工程搭建</h4><p>基本和服务提供者一致，详见：cloudalibaba-consumer-order80</p><h4 id="Nacos特点"><a href="#Nacos特点" class="headerlink" title="Nacos特点"></a>Nacos特点</h4><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816713.png" alt="img"><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816722.png" alt="img"></p><h4 id="AP-x2F-CP切换"><a href="#AP-x2F-CP切换" class="headerlink" title="AP/CP切换"></a>AP/CP切换</h4><p>默认AP:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">curl <span class="token punctuation">-</span>X PUT '$NACOS_SERVER<span class="token punctuation">:</span>8848/nacos/v1/ns/operator/switches<span class="token punctuation">?</span>entry=serverMode<span class="token important">&amp;value=CP'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置中心-1"><a href="#配置中心-1" class="headerlink" title="配置中心"></a>配置中心</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816729.png" alt="img"></p><p><strong>nacos配置文件Data命名规则</strong></p><p><strong>工程搭建：</strong></p><ol><li>pom引入</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.alibaba.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>alibaba<span class="token punctuation">-</span>nacos<span class="token punctuation">-</span>config&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.alibaba.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>alibaba<span class="token punctuation">-</span>nacos<span class="token punctuation">-</span>discovery&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>web&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>devtools&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;scope<span class="token punctuation">&gt;</span>runtime&lt;/scope<span class="token punctuation">&gt;</span>    &lt;optional<span class="token punctuation">&gt;</span>true&lt;/optional<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>org.springframework.boot&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>actuator&lt;/artifactId<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span>&lt;dependency<span class="token punctuation">&gt;</span>    &lt;groupId<span class="token punctuation">&gt;</span>com.atguigu.cloud&lt;/groupId<span class="token punctuation">&gt;</span>    &lt;artifactId<span class="token punctuation">&gt;</span>cloud<span class="token punctuation">-</span>api<span class="token punctuation">-</span>commons&lt;/artifactId<span class="token punctuation">&gt;</span>    &lt;version<span class="token punctuation">&gt;</span>1.0<span class="token punctuation">-</span>SNAPSHOT&lt;/version<span class="token punctuation">&gt;</span>&lt;/dependency<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>bootstrap.yaml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3377</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># 服务注册地址</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># 配置中心地址</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment"># 指定yaml格式</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置分类管理"><a href="#配置分类管理" class="headerlink" title="配置分类管理"></a>配置分类管理</h4><p>Namespace（命名空间） -&gt; Group (分组) -&gt; DataId（配置文件）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># 服务注册地址</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># 配置中心地址</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment"># 指定yaml格式</span>        <span class="token comment"># namespace:</span>        <span class="token comment"># group: </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集群和持久化配置"><a href="#集群和持久化配置" class="headerlink" title="集群和持久化配置"></a>集群和持久化配置</h3><p>支持的部署模式：</p><ol><li>单机</li><li>集群</li><li>多集群</li></ol><p>nacos默认采用内嵌的数据库（derby）来进行存储，如果需要搭建nacos集群，则至少需要外挂高可用数据库，如mysql。大致架构如下：</p><p>（可参考：<a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p><p><a href="https://www.bilibili.com/video/BV18E411x7eT?p=108&amp;spm_id_from=pageDriver&amp;vd_source=f78aecb21fc43825405b56832e990cd1">https://www.bilibili.com/video/BV18E411x7eT?p=108&amp;spm_id_from=pageDriver&amp;vd_source=f78aecb21fc43825405b56832e990cd1</a>）</p><h4 id="集群部署架构图"><a href="#集群部署架构图" class="headerlink" title="集群部署架构图"></a>集群部署架构图</h4><p>推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p><p><a href="http://ip1/">http://ip1</a>:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。</p><p><a href="http://slb/">http://SLB</a>:port/openAPI 挂载SLB模式(内网SLB，不可暴露到公网，以免带来安全风险)，直连SLB即可，下面挂server真实ip，可读性不好。</p><p><a href="http://nacos.com/">http://nacos.com</a>:port/openAPI 域名 + SLB模式(内网SLB，不可暴露到公网，以免带来安全风险)，可读性好，而且换ip方便，推荐模式。<img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/00FDE252.png" alt="img"></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816747.png" alt="img"></p><h4 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h4><p>Nginx * 1 + Nacos Server * 3 + Mysql * 1</p><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><p>对应工程：</p><p>Nacos Server（docker）</p><p>Sentinel dashboard（jar）</p><p>cloudalibaba-sentinel-service8401</p><p><a href="https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/zh-cn/index.html">https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/zh-cn/index.html</a></p><h3 id="对比Hystrix"><a href="#对比Hystrix" class="headerlink" title="对比Hystrix"></a>对比Hystrix</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816750.png" alt="img"></p><h3 id="主要特征"><a href="#主要特征" class="headerlink" title="主要特征"></a>主要特征</h3><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816761.png" alt="img"></p><h3 id="dashboard安装"><a href="#dashboard安装" class="headerlink" title="dashboard安装"></a>dashboard安装</h3><p><a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p>jar包运行即可，默认端口8080，用户名/密码：sentinel</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816771.png" alt="img"></p><h3 id="客户端搭建"><a href="#客户端搭建" class="headerlink" title="客户端搭建"></a>客户端搭建</h3><p>搭建步骤：</p><ol><li>pom</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        后序做持久化的时候用到--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>application.yaml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8401</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloudalibaba<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 43.140.208.71<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># 服务注册地址</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token comment"># 配置sentinel dashboard地址</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>        <span class="token comment"># dashboard交互端口，若被占用则会逐步递增，直到找到未被占用的端口</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>其他内容详见工程</li></ol><p>sentinel懒加载，请求过一次客户端接口后，dashboard才能够检测到</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816772.png" alt="img"></p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><h4 id="流控"><a href="#流控" class="headerlink" title="流控"></a>流控</h4><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816788.png" alt="img"></p><p><strong>流控模式：</strong></p><p>直接：直接请求资源</p><p>关联：可以关联一个资源，关联资源被流控则会影响当前资源</p><p>链路：设置资源入口，入口资源被流控则会影响当前资源</p><p><strong>流控效果：</strong></p><p>快速失败：快速响应请求失败</p><p><strong>warm up</strong>：</p><p>解释：通过设置<strong>请求阈值</strong>以及<strong>预热时间，</strong>结合<strong>冷加载因子（默认3）</strong>，冷启动。例如请求阈值最终为10，则初始请求阈值为（10/3=3），并在预热时间内逐步增加到请求阈值10。（适用于突然大流量打进来直接把系统打挂）</p><p>官方解释：<a href="https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8">https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8</a></p><p>实现类：com.alibaba.csp.sentinel.slots.block.flow.controller.WarmUpController</p><p><strong>排队等待：</strong>超过阈值后排队发起请求，直到达到超时时间则请求失败。</p><h4 id="降级-x2F-熔断"><a href="#降级-x2F-熔断" class="headerlink" title="降级/熔断"></a>降级/熔断</h4><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7">https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7</a></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816789.png" alt="img"></p><h4 id="热点参数"><a href="#热点参数" class="headerlink" title="热点参数"></a>热点参数</h4><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81</a></p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816793.png" alt="img"></p><p>高级选项支持参数索引位置的参数如果接收具体值的参数，可以额外控制限流阈值，少于或者超出单机阈值的限制。</p><p><strong>Resource名称以及兜底方法自定义</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"testC/{name}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"testHotKey"</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"deal_testHotKey"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testC</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"---------testC"</span> <span class="token operator">+</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deal_testHotKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"deal_testHotKey"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h4><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81</a></p><p>很少使用，在系统入口处达到条件则进行限流，会影响所有服务接口。</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816802.png" alt="img"></p><h3 id="注解-SentinelResource"><a href="#注解-SentinelResource" class="headerlink" title="注解@SentinelResource"></a>注解@SentinelResource</h3><p>blockHandler 主管配置的限流熔断等错误，返回统一的兜底方法。</p><p>除此之外还支持fallback配置，用于业务出错或系统方面的错误。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Inherited</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SentinelResource</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>     资源名     <span class="token class-name">EntryType</span> <span class="token function">entryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span>OUT<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">resourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">blockHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>配置触发handler method    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">blockHandlerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   配置触发handler <span class="token keyword">class</span>    <span class="token class-name">String</span> <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>异常handler method    <span class="token class-name">String</span> <span class="token function">defaultFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>                   <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">fallbackClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exceptionsToTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token class-name">Throwable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exceptionsToIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 特定异常handler 忽略    <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结合openFeign"><a href="#结合openFeign" class="headerlink" title="结合openFeign"></a>结合openFeign</h3><p>sentinel能够在服务提供方设置流控、降级以及熔断规则，如果服务提供方挂了呢？熔断降级应该由谁来保证，这个时候只能是服务调用方进行兜底处理了。例如：OpenFeign的兜底fallback。</p><h3 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h3><p>Sentinel控制台配置的规则服务重启后将消失，需要配置持久化，支持<strong>nacos、redis、文件、mysql等</strong></p><ol><li>服务pom引入</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>sentinel<span class="token operator">-</span>datasource<span class="token operator">-</span>nacos<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>application.yaml  （增加sentinel datasouce相关配置）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token operator">:</span>  application<span class="token operator">:</span>    name<span class="token operator">:</span> cloudalibaba<span class="token operator">-</span>sentinel<span class="token operator">-</span>service  cloud<span class="token operator">:</span>    nacos<span class="token operator">:</span>      discovery<span class="token operator">:</span>        server<span class="token operator">-</span>addr<span class="token operator">:</span> <span class="token number">43.140</span><span class="token number">.208</span><span class="token number">.71</span><span class="token operator">:</span><span class="token number">8848</span> # 服务注册地址    sentinel<span class="token operator">:</span>      # 配置sentinel dashboard地址      transport<span class="token operator">:</span>        dashboard<span class="token operator">:</span> localhost<span class="token operator">:</span><span class="token number">8080</span>        # dashboard交互端口，若被占用则会逐步递增，直到找到未被占用的端口        port<span class="token operator">:</span> <span class="token number">8719</span>      datasource<span class="token operator">:</span>        nacos<span class="token operator">:</span>          server<span class="token operator">-</span>addr<span class="token operator">:</span> <span class="token number">43.140</span><span class="token number">.208</span><span class="token number">.71</span><span class="token operator">:</span><span class="token number">8848</span>          dataId<span class="token operator">:</span> cloudalibaba<span class="token operator">-</span>sentinel<span class="token operator">-</span>service          groupId<span class="token operator">:</span> DEFAULT_GROUP          data<span class="token operator">-</span>type<span class="token operator">:</span> json          rule<span class="token operator">-</span>type<span class="token operator">:</span> flow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>nacos default_group 新增对应dataId的配置格式为json</li></ol><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h2><p>定义：</p><p><img src="/2024/04/22/java/kuang-jia/springcloud-wei-fu-wu-zu-jian-gai-lan/image-1713770816804.png" alt="img"></p><p>server下载地址：<a href="http://seata.io/zh-cn/blog/download.html">http://seata.io/zh-cn/blog/download.html</a></p><p>（下载binary）</p>]]></content>
      
      
      <categories>
          
          <category> 微服务组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时任务</title>
      <link href="/2024/04/22/java/kuang-jia/ding-shi-ren-wu/"/>
      <url>/2024/04/22/java/kuang-jia/ding-shi-ren-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK自带Timer"><a href="#JDK自带Timer" class="headerlink" title="JDK自带Timer"></a>JDK自带Timer</h1><p>timer位于包<code>java.util.Timer;</code>下，提供了两种定时任务，一种是<code>schedule</code>另外一种是<code>scheduleAtFixedRate</code></p><p><strong>Timer</strong>的特点是单线程执行任务，多个任务依次调度，任务之间存在影响，前面任务失败或者导致系统报错，会导致另外的任务无法执行，基本不会使用这种方式实现定时任务。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkTimerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token function">timerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">timerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">/*Timer 可以指定延迟时间以及执行周期，单线程跑任务，一个任务阻塞下一个任务无法执行，很少使用*/</span>        <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*schedule 保证了任务之间执行的间隔，只有任务A执行完毕后，才开始计时下次任务period*/</span>        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timer-test "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timer<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fixedRateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*scheduleAtFixedRate 保证了单位时间内任务执行次数，下一任务执行开始则计时period*/</span>        timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timer-test "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timer<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="schedule和scheduleAtFixedRate区别"><a href="#schedule和scheduleAtFixedRate区别" class="headerlink" title="schedule和scheduleAtFixedRate区别"></a>schedule和scheduleAtFixedRate区别</h2><ul><li>schedule是任务A结束后间隔period执行任务B，保证了任务之间的执行时间间隔</li><li>scheduleAtFixedRate是任务A开始执行则间隔period执行任务B，保证了单位时间内任务执行的次数</li></ul><h1 id="JUC包ScheduleExecutor"><a href="#JUC包ScheduleExecutor" class="headerlink" title="JUC包ScheduleExecutor"></a>JUC包ScheduleExecutor</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JucSchedule</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token function">jucScheduleFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">jucScheduleTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">ScheduledExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run shedule"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">jucFixedRateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ScheduledExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行时间超过执行周期</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run scheduleAtFixedRate "</span><span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token number">500</span><span class="token punctuation">,</span>            <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 每隔多久执行</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// waiting to process(sleep to mock)</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// stop</span>        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">jucScheduleFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ScheduledExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行时间超过执行周期</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run scheduleWithFixedDelay "</span> <span class="token operator">+</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token number">500</span><span class="token punctuation">,</span>            <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 上次执行完成后，延迟多久执行</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// waiting to process(sleep to mock)</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// stop</span>        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="schedule、scheduleAtFixedRate以及scheduleWithFixedDelay区别"><a href="#schedule、scheduleAtFixedRate以及scheduleWithFixedDelay区别" class="headerlink" title="schedule、scheduleAtFixedRate以及scheduleWithFixedDelay区别"></a>schedule、scheduleAtFixedRate以及scheduleWithFixedDelay区别</h2><ul><li><strong>schedule</strong>：延迟执行单个任务</li><li><strong>scheduleAtFixedRate：</strong>执行上一个任务起间隔period执行下一个任务，保证了总时间内任务执行次数</li><li><strong>scheduleAtFixedDelay：</strong>执行完上一个任务后，间隔period执行下一个任务，保证了任务之间执行的间隔</li></ul><h1 id="Netty时间轮"><a href="#Netty时间轮" class="headerlink" title="Netty时间轮"></a>Netty时间轮</h1><p><code>Timer</code>以及<code>ScheduleExecutorService</code>是JDK内置的定时任务实现方案，业内还有一个经典的定时任务实现方式是时间轮（<code>Timer Whell</code>）Netty内部基于时间轮实现了一个HashedWheelTimer来优化百万量级I/O超时的检测，它是一个高性能，低消耗的数据结构，它适合用非准实时，延迟的短平快任务，例如心跳检测。</p><p><img src="/2024/04/22/java/kuang-jia/ding-shi-ren-wu/image.png" alt="img"></p><p>以上述在论文中的图片例子，这里一个轮子包含8个格子（Tick), 每个tick是一秒钟；</p><p><strong>任务的添加</strong>：如果一个任务要在17秒后执行，那么它需要转2轮，最终加到Tick=1位置的链表中。</p><p><strong>任务的执行</strong>：在时钟转2Round到Tick=1的位置，开始执行这个位置指向的链表中的这个任务。（# 这里表示剩余需要转几轮再执行这个任务）</p><p><img src="/2024/04/22/java/kuang-jia/ding-shi-ren-wu/image.png" alt="img"></p><ul><li>Worker：worker工作线程主要负责任务调度触发，单线程运行。</li><li>HashedWheelBucket： 时间轮上面的格子，内部持有HashedWheelTimeout组成的链表结构的头尾节点，多个格子组成的时间轮形成一圈又一圈的任务环</li><li>HashedWheelTimeout： 往时间轮里面提交的任务会被封装成HashedWheelTimeout</li></ul><h2 id="多级时间轮"><a href="#多级时间轮" class="headerlink" title="多级时间轮"></a>多级时间轮</h2><p>多级的时间轮是比较好理解的，时钟是有小时，分钟，秒的，秒转一圈(Round)分钟就转一个格（Tick）, 分钟转一圈(Round)小时就转一格（Tick）。</p><p><img src="/2024/04/22/java/kuang-jia/ding-shi-ren-wu/image.png" alt="img"></p><p>PS：显然HashedWheelTimer是一层时间轮</p><h1 id="SpringBoot定时任务"><a href="#SpringBoot定时任务" class="headerlink" title="SpringBoot定时任务"></a>SpringBoot定时任务</h1><ol><li>导入依赖</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>parent<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.3</span><span class="token number">.8</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>relativePath<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>启动类加注解</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>测试</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SprintSchedule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oneMinRun1T</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"一分钟运行一次,  {}"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 */1 * * * ?"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cronMinRun1T</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"一分钟运行一次,  {}"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delay10SecRun1T</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"每隔十秒运行一次,  {}"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数解释：</p><p><strong>@Scheduled所支持的参数</strong>：</p><ol><li>cron：cron表达式，指定任务在特定时间执行；</li><li>fixedDelay：表示上一次任务执行完成后多久再次执行，参数类型为long，单位ms；</li><li>fixedDelayString：与fixedDelay含义一样，只是参数类型变为String；</li><li>fixedRate：表示按一定的频率执行任务，参数类型为long，单位ms；</li><li>fixedRateString: 与fixedRate的含义一样，只是将参数类型变为String；</li><li>initialDelay：表示延迟多久再第一次执行任务，参数类型为long，单位ms；</li><li>initialDelayString：与initialDelay的含义一样，只是将参数类型变为String；</li><li>zone：时区，默认为当前时区，一般没有用到。</li></ol><hr><h2 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h2><ul><li><strong>关于异常处理</strong></li></ul><p>建议自行处理异常</p><ul><li><strong>关于超时处理</strong></li></ul><p>在实际的开发中，这个问题经常会出现，比如执行一段时间后定时任务不再执行了； 这种情况会发生在，比如你调用一个第三方接口，没有设置调用超时，继而引发异常，这时候当前任务便阻塞了。</p><h1 id="SpringBoot集成基础Quartz"><a href="#SpringBoot集成基础Quartz" class="headerlink" title="SpringBoot集成基础Quartz"></a>SpringBoot集成基础Quartz</h1><h2 id="什么是Quartz"><a href="#什么是Quartz" class="headerlink" title="什么是Quartz"></a>什么是Quartz</h2><p>Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，它可以与J2EE与J2SE应用程序相结合也可以单独使用。Quartz可以用来创建简单或为运行十个，百个，甚至是好几万个Jobs这样复杂的程序。Jobs可以做成标准的Java组件或 EJBs。</p><p><strong>它的特点如下</strong></p><ul><li>纯java实现，可以作为独立的应用程序，也可以嵌入在另一个独立式应用程序运行</li><li>强大的调度功能，Spring默认的调度框架，灵活可配置；</li><li>作业持久化，调度环境持久化机制，可以保存并恢复调度现场。系统关闭数据不会丢失；灵活的应用方式，可以任意定义触发器的调度时间表，支持任务和调度各种组合，组件式监听器、各种插件、线程池等功能，多种存储方式等；</li><li>分布式和集群能力，可以被实例化，一个Quartz集群中的每个节点作为一个独立的Quartz使用，通过相同的数据库表来感知到另一个Quartz应用</li></ul><h2 id="Quartz的体系结构"><a href="#Quartz的体系结构" class="headerlink" title="Quartz的体系结构"></a>Quartz的体系结构</h2><p><img src="/2024/04/22/java/kuang-jia/ding-shi-ren-wu/image-1713770742995.png" alt="img"></p><ul><li><strong>Job</strong> 表示一个工作，要执行的具体内容。</li><li><strong>JobDetail</strong> 表示一个具体的可执行的调度程序，Job 是这个可执行程调度程序所要执行的内容，另外 JobDetail 还包含了这个任务调度的方案和策略。</li><li><strong>Trigger</strong> 代表一个调度参数的配置，什么时候去调。</li><li><strong>Scheduler</strong> 代表一个调度容器，一个调度容器中可以注册多个 JobDetail 和 Trigger。当 Trigger 与 JobDetail 组合，就可以被 Scheduler 容器调度了。</li></ul><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>引入依赖</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>quartz<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>定义job</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span>        <span class="token comment">// get parameters</span>        context<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"param, key:{}, value:{}"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// your logics</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello Job执行时间: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置job</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"helloJob"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">JobDetail</span> <span class="token function">helloJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">HelloJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"DateTimeJob"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"Hello Quartz"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">storeDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//即使没有Trigger关联时，也不需要删除该JobDetail</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Trigger</span> <span class="token function">printTimeJobTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 每秒执行一次</span>        <span class="token class-name">CronScheduleBuilder</span> cronScheduleBuilder <span class="token operator">=</span> <span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/1 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token function">helloJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"quartzTaskService"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>cronScheduleBuilder<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="分布式定时任务-quartz"><a href="#分布式定时任务-quartz" class="headerlink" title="分布式定时任务-quartz"></a>分布式定时任务-quartz</h1><h2 id="什么是Quartz持久化"><a href="#什么是Quartz持久化" class="headerlink" title="什么是Quartz持久化"></a>什么是Quartz持久化</h2><ul><li><strong>为什么要持久化</strong>？</li></ul><p>当程序突然被中断时，如断电，内存超出时，很有可能造成任务的丢失。 可以将调度信息存储到数据库里面，进行持久化，当程序被中断后，再次启动，仍然会保留中断之前的数据，继续执行，而并不是重新开始。</p><ul><li><strong>Quartz提供了两种持久化方式</strong></li></ul><p>Quartz提供两种基本作业存储类型:</p><ol><li><strong>RAMJobStore</strong></li></ol><p>在默认情况下Quartz将任务调度的运行信息保存在内存中，这种方法提供了最佳的性能，因为内存中数据访问最快。不足之处是缺乏数据的持久性，当程序路途停止或系统崩溃时，所有运行的信息都会丢失。</p><ol><li><strong>JobStoreTX</strong></li></ol><p>所有的任务信息都会保存到数据库中，可以控制事物，还有就是如果应用服务器关闭或者重启，任务信息都不会丢失，并且可以恢复因服务器关闭或者重启而导致执行失败的任务</p><p>代码地址</p><p><a href="https://gitee.com/zzy888888/skill-test/tree/master">https://gitee.com/zzy888888/skill-test/tree/master</a></p><pre class="line-numbers language-none"><code class="language-none">S-T-TimingTask-QuartzCluster<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Elastic-job集成"><a href="#Elastic-job集成" class="headerlink" title="Elastic-job集成"></a>Elastic-job集成</h1><p><a href="https://www.pdai.tech/md/spring/springboot/springboot-x-task-elastic-job-timer.html">https://www.pdai.tech/md/spring/springboot/springboot-x-task-elastic-job-timer.html</a></p><h1 id="XXL-job集成"><a href="#XXL-job集成" class="headerlink" title="XXL-job集成"></a>XXL-job集成</h1><p><a href="https://www.pdai.tech/md/spring/springboot/springboot-x-task-xxl-job-timer.html">https://www.pdai.tech/md/spring/springboot/springboot-x-task-xxl-job-timer.html</a></p><p><a href="https://www.xuxueli.com/xxl-job/#%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0XXL-JOB%E3%80%8B">https://www.xuxueli.com/xxl-job/#%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0XXL-JOB%E3%80%8B</a></p><h1 id="Kafak死信队列"><a href="#Kafak死信队列" class="headerlink" title="Kafak死信队列"></a>Kafak死信队列</h1><h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><h1 id="hutool定时任务"><a href="#hutool定时任务" class="headerlink" title="hutool定时任务"></a>hutool定时任务</h1>]]></content>
      
      
      <categories>
          
          <category> 定时任务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty学习</title>
      <link href="/2024/04/22/java/kuang-jia/netty-xue-xi/"/>
      <url>/2024/04/22/java/kuang-jia/netty-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、三大组件简介"><a href="#一、三大组件简介" class="headerlink" title="一、三大组件简介"></a>一、三大组件简介</h1><p>Channel与Buffer</p><p>Java NIO系统的<strong>核心</strong>在于：<strong>通道(Channel)和缓冲区(Buffer)<strong>。通道表示打开到 IO 设备(例如：文件、套接字)的连接。若需要使用 NIO 系统，需要获取用于</strong>连接 IO 设备的通道</strong>以及用于<strong>容纳数据的缓冲区</strong>。然后操作缓冲区，对数据进行处理</p><p>简而言之，<strong>通道负责传输，缓冲区负责存储</strong></p><p><strong>常见的Channel有以下四种</strong>，其中FileChannel主要用于文件传输，其余三种用于网络通信</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p><strong>Buffer有以下几种</strong>，其中使用较多的是ByteBuffer</p><ul><li><p><strong>ByteBuffer</strong></p></li><li><ul><li>MappedByteBuffer</li><li>DirectByteBuffer</li><li>HeapByteBuffer</li></ul></li><li><p>ShortBuffer</p></li><li><p>IntBuffer</p></li><li><p>LongBuffer</p></li><li><p>FloatBuffer</p></li><li><p>DoubleBuffer</p></li><li><p>CharBuffer</p></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210412135510.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image.png" alt="img"></a></p><h2 id="1、Selector"><a href="#1、Selector" class="headerlink" title="1、Selector"></a>1、Selector</h2><p>在使用Selector之前，处理socket连接还有以下两种方法</p><p><strong>使用多线程技术</strong></p><p>为每个连接分别开辟一个线程，分别去处理对应的socke连接</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418181918.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image.png" alt="img"></a></p><p>这种方法存在以下几个问题</p><ul><li><p>内存占用高</p></li><li><ul><li>每个线程都需要占用一定的内存，当连接较多时，会开辟大量线程，导致占用大量内存</li></ul></li><li><p>线程上下文切换成本高</p></li><li><p>只适合连接数少的场景</p></li><li><ul><li>连接数过多，会导致创建很多线程，从而出现问题</li></ul></li></ul><p><strong>使用线程池技术</strong></p><p>使用线程池，让线程池中的线程去处理连接</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418181933.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image.png" alt="img"></a></p><p>这种方法存在以下几个问题</p><ul><li><p>阻塞模式下，线程仅能处理一个连接</p></li><li><ul><li>线程池中的线程获取任务（task）后，<strong>只有当其执行完任务之后（断开连接后），才会去获取并执行下一个任务</strong></li><li>若socke连接一直未断开，则其对应的线程无法处理其他socke连接</li></ul></li><li><p>仅适合<strong>短连接</strong>场景</p></li><li><ul><li>短连接即建立连接发送请求并响应后就立即断开，使得线程池中的线程可以快速处理其他连接</li></ul></li></ul><p><strong>使用选择器</strong></p><p><strong>selector 的作用就是配合一个线程来管理多个 channel（fileChannel因为是阻塞式的，所以无法使用selector）</strong>，获取这些 channel 上发生的<strong>事件</strong>，这些 channel 工作在<strong>非阻塞模式</strong>下，当一个channel中没有执行任务时，可以去执行其他channel中的任务。<strong>适合连接数多，但流量较少的场景</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418181947.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image.png" alt="img"></a></p><p>若事件未就绪，调用 selector 的 select() 方法会阻塞线程，直到 channel 发生了就绪事件。这些事件就绪后，select 方法就会返回这些事件交给 thread 来处理</p><h2 id="2、ByteBuffer"><a href="#2、ByteBuffer" class="headerlink" title="2、ByteBuffer"></a>2、ByteBuffer</h2><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ul><li><p>向 buffer 写入数据，例如调用 channel.read(buffer)</p></li><li><p>调用 flip() 切换至<strong>读模式</strong></p></li><li><ul><li><strong>flip会使得buffer中的limit变为position，position变为0</strong></li></ul></li><li><p>从 buffer 读取数据，例如调用 buffer.get()</p></li><li><p>调用 clear() 或者compact()切换至<strong>写模式</strong></p></li><li><ul><li>调用clear()方法时<strong>position=0，limit变为capacity</strong></li><li>调用compact()方法时，<strong>会将缓冲区中的未读数据压缩到缓冲区前面</strong></li></ul></li><li><p>重复以上步骤</p></li></ul><p><strong>使用ByteBuffer读取文件中的内容</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestByteBuffer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获得FileChannel</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"stu.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 获得缓冲区</span>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> hasNext <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hasNext <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 切换模式 limit=position, position=0</span>                buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 当buffer中还有数据时，获取其中的数据</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 切换模式 position=0, limit=capacity</span>                buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="核心属性"><a href="#核心属性" class="headerlink" title="核心属性"></a>核心属性</h3><p>字节缓冲区的父类Buffer中有几个核心属性，如下</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">// Invariants: mark &lt;= position &lt;= limit &lt;= capacityprivate int mark = -1;private int position = 0;private int limit;private int capacity;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>capacity</strong>：缓冲区的容量。通过构造函数赋予，一旦设置，无法更改</li><li><strong>limit</strong>：缓冲区的界限。位于limit 后的数据不可读写。缓冲区的限制不能为负，并且<strong>不能大于其容量</strong></li><li><strong>position</strong>：<strong>下一个</strong>读写位置的索引（类似PC）。缓冲区的位置不能为负，并且<strong>不能大于limit</strong></li><li><strong>mark</strong>：记录当前position的值。<strong>position被改变后，可以通过调用reset() 方法恢复到mark的位置。</strong></li></ul><p>以上四个属性必须满足以下要求</p><p><strong>mark &lt;= position &lt;= limit &lt;= capacity</strong></p><h3 id="bytebuffer字符串相互转换"><a href="#bytebuffer字符串相互转换" class="headerlink" title="bytebuffer字符串相互转换"></a>bytebuffer字符串相互转换</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteBufferByStringTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1. 转为字节数组</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugAll</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. charset 会自动切换到读模式</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugAll</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. standardCharset 会自动切换到读模式</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"my"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugAll</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4. wrap 会自动切换到读模式</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">"nb"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugAll</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// bytebuffer 转字符串</span>        <span class="token comment">// 需要切换到读模式在使用</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="粘包与半包"><a href="#粘包与半包" class="headerlink" title="粘包与半包"></a>粘包与半包</h3><h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h4><p>网络上有多条数据发送给服务端，数据之间使用 \n 进行分隔<br>但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为</p><ul><li>Hello,world\n</li><li>I’m Nyima\n</li><li>How are you?\n</li></ul><p>变成了下面的两个 byteBuffer (粘包，半包)</p><ul><li>Hello,world\nI’m Nyima\nHo</li><li>w are you?\n</li></ul><h4 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h4><p><strong>粘包</strong></p><p>发送方在发送数据时，并不是一条一条地发送数据，而是<strong>将数据整合在一起</strong>，当数据达到一定的数量后再一起发送。这就会导致多条信息被放在一个缓冲区中被一起发送出去</p><p><strong>半包</strong></p><p>接收方的缓冲区的大小是有限的，当接收方的缓冲区满了以后，就需要<strong>将信息截断</strong>，等缓冲区空了以后再继续放入数据。这就会发生一段完整的数据最后被截断的现象</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ul><li><p>通过get(index)方法遍历ByteBuffer，遇到分隔符时进行处理。<strong>注意</strong>：get(index)不会改变position的值</p></li><li><ul><li>记录该段数据长度，以便于申请对应大小的缓冲区</li><li>将缓冲区的数据通过get()方法写入到target中</li></ul></li><li><p>调用<strong>compact方法</strong>切换模式，因为缓冲区中可能还有未读的数据</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteBufferDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 模拟粘包+半包</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Hello,world\nI'm Nyima\nHo"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用split函数处理</span>        <span class="token function">split</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"w are you?\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">split</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 切换为读模式</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 遍历寻找分隔符</span>            <span class="token comment">// get(i)不会移动position</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 缓冲区长度</span>                <span class="token keyword">int</span> length <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ByteBuffer</span> target <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 将前面的内容写入target缓冲区</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 将buffer中的数据写入target中</span>                    target<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 打印查看结果</span>                <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugAll</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 切换为写模式，但是缓冲区可能未读完，这里需要使用compact</span>        buffer<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、文件编程"><a href="#二、文件编程" class="headerlink" title="二、文件编程"></a>二、文件编程</h1><h2 id="1、FileChannel"><a href="#1、FileChannel" class="headerlink" title="1、FileChannel"></a>1、FileChannel</h2><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p>FileChannel<strong>只能在阻塞模式下工作</strong>，所以无法搭配Selector</p><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p>不能直接打开 FileChannel，<strong>必须</strong>通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法</p><ul><li>通过 FileInputStream 获取的 channel <strong>只能读</strong></li><li>通过 FileOutputStream 获取的 channel <strong>只能写</strong></li><li>通过 RandomAccessFile 是否能读写<strong>根据构造 RandomAccessFile 时的读写模式决定</strong></li></ul><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>通过 FileInputStream 获取channel，通过read方法将数据写入到ByteBuffer中</p><p>read方法的返回值表示读到了多少字节，若读到了文件末尾则返回-1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> readBytes <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>可根据返回值判断是否读取完毕</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 进行对应操作     ... }</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p>因为channel也是有大小的，所以 write 方法并不能保证一次将 buffer 中的内容全部写入 channel。必须<strong>需要按照以下规则进行写入</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过hasRemaining()方法查看缓冲区中是否还有数据未写入到通道中</span><span class="token keyword">while</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><p>通道需要close，一般情况通过try-with-resource进行关闭，<strong>最好使用以下方法获取strea以及channel，避免某些原因使得资源未被关闭</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestChannel</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"stu.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"student.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileChannel</span> inputChannel <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileChannel</span> outputChannel <span class="token operator">=</span> fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 执行对应操作</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p><strong>position</strong></p><p>channel也拥有一个保存读取数据位置的属性，即position</p><p><strong>long pos = channel.position();</strong></p><p>可以通过position(int pos)设置channel中position的值</p><p><strong>long newPos = …;</strong> </p><p><strong>channel.position(newPos);</strong></p><p>设置当前位置时，如果设置为文件的末尾</p><ul><li>这时读取会返回 -1</li><li>这时写入，会追加内容，但要注意如果 position 超过了文件末尾，再写入时在新内容和原末尾之间会有空洞（00）</li></ul><h3 id="强制写入"><a href="#强制写入" class="headerlink" title="强制写入"></a>强制写入</h3><p>操作系统出于性能的考虑，会将数据缓存，不是立刻写入磁盘，而是等到缓存满了以后将所有数据一次性的写入磁盘。可以调用 <strong>force(true)</strong> 方法将文件内容和元数据（文件的权限等信息）立刻写入磁盘</p><h2 id="2、两个Channel传输数据"><a href="#2、两个Channel传输数据" class="headerlink" title="2、两个Channel传输数据"></a>2、两个Channel传输数据</h2><h3 id="transferTo方法"><a href="#transferTo方法" class="headerlink" title="transferTo方法"></a>transferTo方法</h3><p>使用transferTo方法可以快速、高效地将一个channel中的数据传输到另一个channel中，但<strong>一次只能传输2G的内容</strong></p><p>transferTo底层使用了零拷贝技术</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestChannel</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"stu.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"student.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileChannel</span> inputChannel <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileChannel</span> outputChannel <span class="token operator">=</span> fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 参数：inputChannel的起始位置，传输数据的大小，目的channel</span>            <span class="token comment">// 返回值为传输的数据的字节数</span>            <span class="token comment">// transferTo一次只能传输2G的数据</span>            inputChannel<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> inputChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> outputChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>当传输的文件大于<span class="token number">2</span>G时，需要使用以下方法进行多次传输<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestChannel</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"stu.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"student.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileChannel</span> inputChannel <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">FileChannel</span> outputChannel <span class="token operator">=</span> fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> size <span class="token operator">=</span> inputChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> capacity <span class="token operator">=</span> inputChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 分多次传输</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>capacity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// transferTo返回值为传输了的字节数</span>                capacity <span class="token operator">-=</span> inputChannel<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>size<span class="token operator">-</span>capacity<span class="token punctuation">,</span> capacity<span class="token punctuation">,</span> outputChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、Path与Paths"><a href="#3、Path与Paths" class="headerlink" title="3、Path与Paths"></a>3、Path与Paths</h2><ul><li>Path 用来表示文件路径</li><li>Paths 是工具类，用来获取 Path 实例</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对路径 不带盘符 使用 user.dir 环境变量来定位 1.txt</span><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绝对路径 代表了  d:\1.txt 反斜杠需要转义</span><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:/1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绝对路径 同样代表了  d:\1.txt</span><span class="token class-name">Path</span> projects <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\data"</span><span class="token punctuation">,</span> <span class="token string">"projects"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 代表了  d:\data\projects</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>. 代表了当前路径</li><li>.. 代表了上一级路径</li></ul><p>例如目录结构如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">d<span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span> data<span class="token operator">|</span><span class="token operator">-</span> projects<span class="token operator">|</span><span class="token operator">-</span> a<span class="token operator">|</span><span class="token operator">-</span> b<span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\data\\projects\\a\\..\\b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常化路径 会去除 . 以及 ..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、Files"><a href="#4、Files" class="headerlink" title="4、Files"></a>4、Files</h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>检查文件是否存在</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>创建<strong>一级目录</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果目录已存在，会抛异常 FileAlreadyExistsException</li><li>不能一次创建多级目录，否则会抛异常 NoSuchFileException</li></ul><p>创建<strong>多级目录用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/d1/d2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createDirectories</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="拷贝及移动"><a href="#拷贝及移动" class="headerlink" title="拷贝及移动"></a>拷贝及移动</h3><p><strong>拷贝文件</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/target.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果文件已存在，会抛异常 FileAlreadyExistsException</li></ul><p>如果希望用 source <strong>覆盖</strong>掉 target，需要用 StandardCopyOption 来控制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token class-name">StandardCopyOption</span><span class="token punctuation">.</span>REPLACE_EXISTING<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移动文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> source <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token class-name">StandardCopyOption</span><span class="token punctuation">.</span>ATOMIC_MOVE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性</strong></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/target.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果文件不存在，会抛异常 NoSuchFileException</li></ul><p>删除目录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span> target <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"helloword/d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果<strong>目录还有内容</strong>，会抛异常 DirectoryNotEmptyException</li></ul><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>可以<strong>使用Files工具类中的walkFileTree(Path, FileVisitor)方法</strong>，其中需要传入两个参数</p><ul><li><p>Path：文件起始路径</p></li><li><p>FileVisitor：文件访问器，<strong>使用访问者模式</strong></p></li><li><ul><li>接口的实现类<strong>SimpleFileVisitor</strong>有四个方法</li></ul></li><li><ul><li><ul><li>preVisitDirectory：访问目录前的操作</li><li>visitFile：访问文件的操作</li><li>visitFileFailed：访问文件失败时的操作</li><li>postVisitDirectory：访问目录后的操作</li></ul></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestWalkFileTree</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:\\JDK 8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 文件目录数目</span>        <span class="token class-name">AtomicInteger</span> dirCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 文件数目</span>        <span class="token class-name">AtomicInteger</span> fileCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">walkFileTree</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleFileVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">preVisitDirectory</span><span class="token punctuation">(</span><span class="token class-name">Path</span> dir<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===&gt;"</span><span class="token operator">+</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 增加文件目录数</span>                dirCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">preVisitDirectory</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">visitFile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 增加文件数</span>                fileCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打印数目</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件目录数:"</span><span class="token operator">+</span>dirCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件数:"</span><span class="token operator">+</span>fileCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、网络编程"><a href="#三、网络编程" class="headerlink" title="三、网络编程"></a>三、网络编程</h1><h2 id="1、阻塞"><a href="#1、阻塞" class="headerlink" title="1、阻塞"></a>1、阻塞</h2><ul><li><p>阻塞模式下，相关方法都会导致线程暂停</p></li><li><ul><li>ServerSocketChannel.accept 会在<strong>没有连接建立时</strong>让线程暂停</li><li>SocketChannel.read 会在<strong>通道中没有数据可读时</strong>让线程暂停</li><li>阻塞的表现其实就是线程暂停了，暂停期间不会占用 cpu，但线程相当于闲置</li></ul></li><li><p>单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持</p></li><li><p>但多线程下，有新的问题，体现在以下方面</p></li><li><ul><li>32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1671629101002-17f01bef-e012-4aed-af87-72269c37c338.png" alt="img"></p><ul><li><ul><li>可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1671629101057-234aa568-cbcb-4764-a33e-99f47bc648d2.png" alt="img"></p><p><strong>服务端代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建缓冲区</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得服务器通道</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 为服务器通道绑定端口</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 用户存放连接的集合</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span> channels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 循环接收连接</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before connecting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 没有连接时，会阻塞线程</span>                <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after connecting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                channels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 循环遍历集合中的连接</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> channel <span class="token operator">:</span> channels<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before reading"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 处理通道中的数据</span>                    <span class="token comment">// 当通道中没有数据可读时，会阻塞线程</span>                    channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugRead</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after reading"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 建立连接</span>            socketChannel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"waiting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><ul><li>客户端-服务器建立连接前：服务器端因accept阻塞</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210413213318.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image.png" alt="img"></a></p><ul><li>客户端-服务器建立连接后，客户端发送消息前：服务器端因通道为空被阻塞</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210413213446.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530929.png" alt="img"></a></p><ul><li>客户端发送数据后，服务器处理通道中的数据。再次进入循环时，再次被accept阻塞</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210413214109.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530929.png" alt="img"></a></p><ul><li>之前的客户端再次发送消息<strong>，服务器端因为被accept阻塞</strong>，无法处理之前客户端发送到通道中的信息</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210413214505.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530935.png" alt="img"></a></p><h2 id="2、非阻塞"><a href="#2、非阻塞" class="headerlink" title="2、非阻塞"></a>2、非阻塞</h2><ul><li>可以通过ServerSocketChannel的configureBlocking(<strong>false</strong>)方法将<strong>获得连接设置为非阻塞的</strong>。此时若没有连接，accept会返回null</li><li>可以通过SocketChannel的configureBlocking(<strong>false</strong>)方法将从通道中<strong>读取数据设置为非阻塞的</strong>。若此时通道中没有数据可读，read会返回-1</li></ul><p>服务器代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建缓冲区</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得服务器通道</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 为服务器通道绑定端口</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 用户存放连接的集合</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span> channels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 循环接收连接</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 设置为非阻塞模式，没有连接时返回null，不会阻塞线程</span>                server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 通道不为空时才将连接放入到集合中</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>socketChannel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after connecting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    channels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 循环遍历集合中的连接</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> channel <span class="token operator">:</span> channels<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 处理通道中的数据</span>                    <span class="token comment">// 设置为非阻塞模式，若通道中没有数据，会返回0，不会阻塞线程</span>                    channel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> read <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>read <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugRead</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after reading"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样写存在一个问题，因为设置为了非阻塞，会一直执行while(true)中的代码，CPU一直处于忙碌状态，会使得性能变低，所以实际情况中不使用这种方法处理请求</p><h2 id="3、Selector"><a href="#3、Selector" class="headerlink" title="3、Selector"></a>3、Selector</h2><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3><p>单线程可以配合 Selector 完成对多个 Channel 可读写事件的监控，这称之为多路复用</p><ul><li><p><strong>多路复用仅针对网络 IO</strong>，普通文件 IO <strong>无法</strong>利用多路复用</p></li><li><p>如果不用 Selector 的非阻塞模式，线程大部分时间都在做无用功，而 Selector 能够保证</p></li><li><ul><li>有可连接事件时才去连接</li><li>有可读事件才去读取</li><li>有可写事件才去写入</li></ul></li><li><ul><li><ul><li>限于网络传输能力，Channel 未必时时可写，一旦 Channel 可写，会触发 Selector 的可写事件</li></ul></li></ul></li></ul><h2 id="4、使用及Accpet事件"><a href="#4、使用及Accpet事件" class="headerlink" title="4、使用及Accpet事件"></a>4、使用及Accpet事件</h2><p>要使用Selector实现多路复用，服务端代码如下改进</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得服务器通道</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建选择器</span>            <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 通道必须设置为非阻塞模式</span>            server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将通道注册到选择器中，并设置感兴趣的事件</span>            server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 若没有事件就绪，线程会被阻塞，反之不会被阻塞。从而避免了CPU空转</span>                <span class="token comment">// 返回值为就绪的事件个数</span>                <span class="token keyword">int</span> ready <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"selector ready counts : "</span> <span class="token operator">+</span> ready<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 获取所有事件</span>                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 使用迭代器遍历事件</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment">// 判断key的类型</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 获得key对应的channel</span>                        <span class="token class-name">ServerSocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before accepting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 获取连接并处理，而且是必须处理，否则需要取消</span>                        <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after accepting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment">// 处理完毕后移除</span>                        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤解析</strong></p><ul><li>获得选择器Selector</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>将<strong>通道设置为非阻塞模式</strong>，并注册到选择器中，并设置感兴趣的事件</p></li><li><ul><li>channel 必须工作在非阻塞模式</li><li>FileChannel 没有非阻塞模式，因此不能配合 selector 一起使用</li><li>绑定的<strong>事件类型</strong>可以有</li></ul></li><li><ul><li><ul><li>connect - 客户端连接成功时触发</li><li>accept - 服务器端成功接受连接时触发</li><li>read - 数据可读入时触发，有因为接收能力弱，数据暂不能读入的情况</li><li>write - 数据可写出时触发，有因为发送能力弱，数据暂不能写出的情况</li></ul></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通道必须设置为非阻塞模式</span>server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将通道注册到选择器中，并设置感兴趣的实践</span>server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过Selector监听事件，并获得就绪的通道个数，若没有通道就绪，线程会被阻塞</p><ul><li>阻塞直到绑定事件发生</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>阻塞直到绑定事件发生，<strong>或是超时</strong>（时间单位为 ms）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>不会阻塞</strong>，也就是不管有没有事件，立刻返回，自己根据返回值检查是否有事件</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取就绪事件并<strong>得到对应的通道</strong>，然后进行处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取所有事件</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 使用迭代器遍历事件</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 判断key的类型，此处为Accept类型</span><span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获得key对应的channel</span>        <span class="token class-name">ServerSocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取连接并处理，而且是必须处理，否则需要取消</span>        <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 处理完毕后移除</span>        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>事件发生后能否不处理</strong></p><p>事件发生后，<strong>要么处理，要么取消（cancel）</strong>，不能什么都不做，<strong>否则下次该事件仍会触发</strong>，这是因为 nio 底层使用的是水平触发</p><h2 id="5、Read事件"><a href="#5、Read事件" class="headerlink" title="5、Read事件"></a>5、Read事件</h2><ul><li>在Accept事件中，若有客户端与服务器端建立了连接，<strong>需要将其对应的SocketChannel设置为非阻塞，并注册到选择其中</strong></li><li>添加Read事件，触发后进行读取操作</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得服务器通道</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建选择器</span>            <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 通道必须设置为非阻塞模式</span>            server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将通道注册到选择器中，并设置感兴趣的实践</span>            server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 为serverKey设置感兴趣的事件</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 若没有事件就绪，线程会被阻塞，反之不会被阻塞。从而避免了CPU空转</span>                <span class="token comment">// 返回值为就绪的事件个数</span>                <span class="token keyword">int</span> ready <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"selector ready counts : "</span> <span class="token operator">+</span> ready<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取所有事件</span>                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 使用迭代器遍历事件</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 判断key的类型</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 获得key对应的channel</span>                        <span class="token class-name">ServerSocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before accepting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 获取连接</span>                        <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after accepting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 设置为非阻塞模式，同时将连接的通道也注册到选择其中</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 处理完毕后移除</span>                        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before reading..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after reading..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugRead</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 处理完毕后移除</span>                        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除事件</strong></p><p><strong>当处理完一个事件后，一定要调用迭代器的remove方法移除对应事件，否则会出现错误</strong>。原因如下</p><p>以我们上面的 <strong>Read事件</strong> 的代码为例</p><ul><li>当调用了 server.register(selector, SelectionKey.OP_ACCEPT)后，Selector中维护了一个集合，<strong>用于存放SelectionKey以及其对应的通道</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// WindowsSelectorImpl 中的 SelectionKeyImpl数组</span><span class="token keyword">private</span> <span class="token class-name">SelectionKeyImpl</span><span class="token punctuation">[</span><span class="token punctuation">]</span> channelArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectionKeyImpl</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionKeyImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSelectionKey</span> <span class="token punctuation">{</span>    <span class="token comment">// Key对应的通道</span>    <span class="token keyword">final</span> <span class="token class-name">SelChImpl</span> channel<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210414192429.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530940.png" alt="img"></a></li><li>当<strong>选择器中的通道对应的事件发生后</strong>，selecionKey会被放到另一个集合中，但是<strong>selecionKey不会自动移除</strong>，所以需要我们在处理完一个事件后，通过迭代器手动移除其中的selecionKey。否则会导致已被处理过的事件再次被处理，就会引发错误<a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210414193143.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530954.png" alt="img"></a></li></ul><h3 id="断开处理"><a href="#断开处理" class="headerlink" title="断开处理"></a>断开处理</h3><p>当客户端与服务器之间的连接<strong>断开时，会给服务器端发送一个读事件</strong>，对异常断开和正常断开需要加以不同的方式进行处理</p><ul><li><p><strong>正常断开</strong></p></li><li><ul><li>正常断开时，服务器端的channel.read(buffer)方法的返回值为-1，<strong>所以当结束到返回值为-1时，需要调用key的cancel方法取消此事件，并在取消后移除该事件</strong></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> read <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 断开连接时，客户端会向服务器发送一个写事件，此时read的返回值为-1</span><span class="token keyword">if</span><span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 取消该事件的处理</span>key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">// 取消或者处理，都需要移除key</span>iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>异常断开</p></li><li><ul><li>异常断开时，会抛出IOException异常， 在try-catch的<strong>catch块中捕获异常并调用key的cancel方法即可</strong></li></ul></li></ul><h3 id="消息边界"><a href="#消息边界" class="headerlink" title="消息边界"></a>消息边界</h3><p><strong>不处理消息边界存在的问题</strong></p><p>将缓冲区的大小设置为4个字节，发送2个汉字（你好），通过decode解码并打印时，会出现乱码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解码并打印</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>你���<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为UTF-8字符集下，1个汉字占用3个字节，此时缓冲区大小为4个字节，<strong>一次读时间无法处理完通道中的所有数据，所以一共会触发两次读事件</strong>。这就导致 你好 的 好 字被拆分为了前半部分和后半部分发送，解码时就会出现问题</p><p><strong>处理消息边界</strong></p><p>传输的文本可能有以下三种情况</p><ul><li><p>文本大于缓冲区大小</p></li><li><ul><li>此时需要将缓冲区进行扩容</li></ul></li><li><p>发生半包现象</p></li><li><p>发生粘包现象</p></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210415103442.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530959.png" alt="img"></a></p><p>解决思路大致有以下三种</p><ul><li><p><strong>固定消息长度</strong>，数据包大小一样，服务器按预定长度读取，当发送的数据较少时，需要将数据进行填充，直到长度与消息规定长度一致。缺点是浪费带宽</p></li><li><p>另一种思路是按分隔符拆分，缺点是效率低，需要一个一个字符地去匹配分隔符</p></li><li><p><strong>TLV 格式，即 Type 类型、Length 长度、Value 数据</strong>（也就是在消息开头<strong>用一些空间存放后面数据的长度</strong>），如HTTP请求头中的Content-Type与<strong>Content-Length</strong>。类型和长度已知的情况下，就可以方便获取消息大小，分配合适的 buffer，缺点是 buffer 需要提前分配，如果内容过大，则影响 server 吞吐量</p></li><li><ul><li>Http 1.1 是 TLV 格式</li><li>Http 2.0 是 LTV 格式<a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210415103926.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530989.png" alt="img"></a></li></ul></li></ul><p>下文的消息边界处理方式为<strong>第二种：按分隔符拆分</strong></p><p><strong>附件与扩容</strong></p><p>Channel的register方法还有<strong>第三个参数</strong>：附件，可以向其中放入一个Object类型的对象，该对象会与登记的Channel以及其对应的SelectionKey绑定，可以从SelectionKey获取到对应通道的附件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">SelectionKey</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Selector</span> sel<span class="token punctuation">,</span> <span class="token keyword">int</span> ops<span class="token punctuation">,</span> <span class="token class-name">Object</span> att<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可通过SelectionKey的<strong>attachment()方法获得附件</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们需要在Accept事件发生后，将通道注册到Selector中时，<strong>对每个通道添加一个ByteBuffer附件</strong>，让每个通道发生读事件时都使用自己的通道，避免与其他通道发生冲突而导致问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置为非阻塞模式，同时将连接的通道也注册到选择其中，同时设置附件</span>socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加通道对应的Buffer附件</span>socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当Channel中的数据大于缓冲区时，需要对缓冲区进行<strong>扩容</strong>操作。此代码中的扩容的判定方法：<strong>Channel调用compact方法后的position与limit相等，说明缓冲区中的数据并未被读取（容量太小），此时创建新的缓冲区，其大小扩大为两倍。同时还要将旧缓冲区中的数据拷贝到新的缓冲区中，同时调用SelectionKey的attach方法将新的缓冲区作为新的附件放入SelectionKey中</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果缓冲区太小，就进行扩容</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ByteBuffer</span> newBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将旧buffer中的内容放入新的buffer中</span>    ewBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将新buffer作为附件放到key中</span>    key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>newBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>改造后的服务器代码如下</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获得服务器通道</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建选择器</span>            <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 通道必须设置为非阻塞模式</span>            server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将通道注册到选择器中，并设置感兴趣的事件</span>            server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 为serverKey设置感兴趣的事件</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 若没有事件就绪，线程会被阻塞，反之不会被阻塞。从而避免了CPU空转</span>                <span class="token comment">// 返回值为就绪的事件个数</span>                <span class="token keyword">int</span> ready <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"selector ready counts : "</span> <span class="token operator">+</span> ready<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取所有事件</span>                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 使用迭代器遍历事件</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 判断key的类型</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 获得key对应的channel</span>                        <span class="token class-name">ServerSocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before accepting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 获取连接</span>                        <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after accepting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 设置为非阻塞模式，同时将连接的通道也注册到选择其中，同时设置附件</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 处理完毕后移除</span>                        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before reading..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 通过key获得附件（buffer）</span>                        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> read <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token comment">// 通过分隔符来分隔buffer中的数据</span>                            <span class="token function">split</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// 如果缓冲区太小，就进行扩容</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token class-name">ByteBuffer</span> newBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 将旧buffer中的内容放入新的buffer中</span>                                buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                newBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 将新buffer放到key中作为附件</span>                                key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>newBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after reading..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 处理完毕后移除</span>                        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 遍历寻找分隔符</span>            <span class="token comment">// get(i)不会移动position</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 缓冲区长度</span>                <span class="token keyword">int</span> length <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ByteBuffer</span> target <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 将前面的内容写入target缓冲区</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 将buffer中的数据写入target中</span>                    target<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 打印结果</span>                <span class="token class-name">ByteBufferUtil</span><span class="token punctuation">.</span><span class="token function">debugAll</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 切换为写模式，但是缓冲区可能未读完，这里需要使用compact</span>        buffer<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ByteBuffer的大小分配"><a href="#ByteBuffer的大小分配" class="headerlink" title="ByteBuffer的大小分配"></a>ByteBuffer的大小分配</h3><ul><li><p>每个 channel 都需要记录可能被切分的消息，因为 <strong>ByteBuffer 不能被多个 channel 共同使用</strong>，因此需要为每个 channel 维护一个独立的 ByteBuffer</p></li><li><p>ByteBuffer 不能太大，比如一个 ByteBuffer 1Mb 的话，要支持百万连接就要 1Tb 内存，因此需要设计大小可变的 ByteBuffer</p></li><li><p>分配思路可以参考</p></li><li><ul><li>一种思路是首先分配一个较小的 buffer，例如 4k，如果发现数据不够，再分配 8k 的 buffer，将 4k buffer 内容拷贝至 8k buffer，优点是消息连续容易处理，缺点是数据拷贝耗费性能</li></ul></li><li><ul><li><ul><li>参考实现 <a href="http://tutorials.jenkov.com/java-performance/resizable-array.html">http://tutorials.jenkov.com/java-performance/resizable-array.html</a></li></ul></li></ul></li><li><ul><li>另一种思路是用多个数组组成 buffer，一个数组不够，把多出来的内容写入新的数组，与前面的区别是消息存储不连续解析复杂，优点是避免了拷贝引起的性能损耗</li></ul></li></ul><h2 id="6、Write事件"><a href="#6、Write事件" class="headerlink" title="6、Write事件"></a>6、Write事件</h2><p>服务器通过Buffer向通道中写入数据时，<strong>可能因为通道容量小于Buffer中的数据大小，导致无法一次性将Buffer中的数据全部写入到Channel中，这时便需要分多次写入</strong>，具体步骤如下</p><ul><li>执行一次写操作，向将buffer中的内容写入到SocketChannel中，然后判断Buffer中是否还有数据</li><li>若Buffer中还有数据，则<strong>需要将SockerChannel注册到Seletor中，并关注写事件，同时将未写完的Buffer作为附件一起放入到SelectionKey中</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">int</span> write <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通道中可能无法放入缓冲区中的所有数据</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 注册到Selector中，关注可写事件，并将buffer添加到key的附件中</span>    socket<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加写事件的相关操作key.isWritable()，对Buffer再次进行写操作</p><ul><li>每次写后需要判断Buffer中是否还有数据（是否写完）。<strong>若写完，需要移除SelecionKey中的Buffer附件，避免其占用过多内存，同时还需移除对写事件的关注</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SocketChannel</span> socket <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获得buffer</span><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行写操作</span><span class="token keyword">int</span> write <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果已经完成了写操作，需要移除key中的附件，同时不再对写事件感兴趣</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>整体代码如下</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span> server <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> selectionKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 处理后就移除事件</span>                    iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">// 获得客户端的通道</span>                        <span class="token class-name">SocketChannel</span> socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 写入数据</span>                        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 先执行一次Buffer-&gt;Channel的写入，如果未写完，就添加一个可写事件</span>                        <span class="token keyword">int</span> write <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 通道中可能无法放入缓冲区中的所有数据</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment">// 注册到Selector中，关注可写事件，并将buffer添加到key的附件中</span>                            socket<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            socket<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">SocketChannel</span> socket <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 获得buffer</span>                        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 执行写操作</span>                        <span class="token keyword">int</span> write <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 如果已经完成了写操作，需要移除key中的附件，同时不再对写事件感兴趣</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、优化"><a href="#7、优化" class="headerlink" title="7、优化"></a>7、优化</h2><h3 id="多线程优化"><a href="#多线程优化" class="headerlink" title="多线程优化"></a>多线程优化</h3><p>充分利用多核CPU，分两组选择器</p><ul><li>单线程配一个选择器（Boss），<strong>专门处理 accept 事件</strong></li><li>创建 cpu 核心数的线程（Worker），<strong>每个线程配一个选择器，轮流处理 read 事件</strong></li></ul><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><ul><li><p>创建<strong>一个</strong>负责处理Accept事件的Boss线程，与<strong>多个</strong>负责处理Read事件的Worker线程</p></li><li><p><strong>Boss线程</strong>执行的操作</p></li><li><ul><li>接受并处理Accepet事件，当Accept事件发生后，调用Worker的register(SocketChannel socket)方法，让Worker去处理Read事件，其中需要<strong>根据标识robin去判断将任务分配给哪个Worker</strong></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiThreadNetworkServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">AcceptBossServer</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcceptBossServer</span><span class="token punctuation">(</span><span class="token string">"boss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">accepting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">class</span> <span class="token class-name">AcceptBossServer</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 服务器套接字通道     */</span>    <span class="token keyword">private</span> <span class="token class-name">ServerSocketChannel</span> serverSocketChannel<span class="token punctuation">;</span>    <span class="token comment">/**     * 选择器     */</span>    <span class="token keyword">private</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>    <span class="token comment">/**     * 端口     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 事件侦听     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> LISTENER_EVENT <span class="token operator">=</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">;</span>    <span class="token comment">/**     * 名字     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 工人,获取的核心线程数在docker容器环境中存在问题，获取的是宿主机的核心线程数，直到jdk10才解决     */</span>    <span class="token keyword">private</span> <span class="token class-name">RWWorkerServer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RWWorkerServer</span><span class="token punctuation">[</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 次序     */</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> turns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AcceptBossServer</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> port<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">AcceptBossServer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocketChannel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> LISTENER_EVENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> workers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            workers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RWWorkerServer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"worker-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accepting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 阻塞，等待连接</span>            selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keyIterator <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>keyIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"boss 监听到accept事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> keyIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                keyIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> serverSocketChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    channel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 将channel关联到worker的selector</span>                    <span class="token class-name">RWWorkerServer</span> worker <span class="token operator">=</span> workers<span class="token punctuation">[</span>turns<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> workers<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"boss 监听到accept事件, 远程地址{}, 并绑定到{}"</span><span class="token punctuation">,</span>                            channel<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> worker<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    worker<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 给worker绑定事件</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">class</span> <span class="token class-name">RWWorkerServer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 线程     */</span>    <span class="token keyword">private</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>    <span class="token comment">/**     * 选择器     */</span>    <span class="token keyword">public</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>    <span class="token comment">/**     * 回复消息     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> responseStr<span class="token punctuation">;</span>    <span class="token comment">/**     * 名字     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 事件侦听器, 仅仅监听可读可写事件     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> LISTENER_EVENT <span class="token operator">=</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ <span class="token operator">|</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">;</span>    <span class="token comment">/**     * 已经初始化     */</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> hasInit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 通过队列在boss线程和worker线程中传递任务，保证添加监听的事件和唤醒事件先后执行     */</span>    <span class="token keyword">private</span> <span class="token class-name">ConcurrentLinkedDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentLinkedDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RWWorkerServer</span><span class="token punctuation">(</span><span class="token class-name">String</span> responseStr<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>responseStr <span class="token operator">=</span> responseStr<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> sc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hasInit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                sc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">RWWorkerServer</span><span class="token punctuation">.</span>LISTENER_EVENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClosedChannelException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        selector<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒select方法</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// select不能无限等待，如果无限等待阻塞的话，将无法捕获到boss下达的监听指令</span>                selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tasks<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeyIterator <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>selectionKeyIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> selectionKeyIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    selectionKeyIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"触发读事件..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 可读事件</span>                        <span class="token comment">// 检查是否一次没读完，需要二次读甚至多次读</span>                        <span class="token class-name">ByteBuffer</span> attachByteBuffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        attachByteBuffer <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>attachByteBuffer <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">:</span> attachByteBuffer<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 没读完，需要读第二次</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>attachByteBuffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> attachByteBuffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"需要二次读..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">notReadAllAndAttach</span><span class="token punctuation">(</span>attachByteBuffer<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment">// 读完了，打印数据</span>                        <span class="token function">debugAll</span><span class="token punctuation">(</span>attachByteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notReadAllAndAttach</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> attachByteBuffer<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuffer</span> newByteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>attachByteBuffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        attachByteBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newByteBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>attachByteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//newByteBuffer.compact();</span>        key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>newByteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">ByteBuffer</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> buffer<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> closeInExp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            read <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 判断客户端是否异常断开连接</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            closeInExp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 判断客户端是否断开连接</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> closeInExp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、NIO与BIO"><a href="#四、NIO与BIO" class="headerlink" title="四、NIO与BIO"></a>四、NIO与BIO</h1><h2 id="1、Stream与Channel"><a href="#1、Stream与Channel" class="headerlink" title="1、Stream与Channel"></a>1、Stream与Channel</h2><ul><li><p>stream 不会自动缓冲数据，channel 会利用系统提供的发送缓冲区、接收缓冲区（更为底层）</p></li><li><p>stream 仅支持阻塞 API，channel 同时支持阻塞、非阻塞 API，<strong>网络 channel 可配合 selector 实现多路复用</strong></p></li><li><p>二者<strong>均为全双工</strong>，即读写可以同时进行</p></li><li><ul><li>虽然Stream是单向流动的，但是它也是全双工的</li></ul></li></ul><h2 id="2、IO模型"><a href="#2、IO模型" class="headerlink" title="2、IO模型"></a>2、IO模型</h2><ul><li><p><strong>同步</strong>：线程自己去获取结果（一个线程）</p></li><li><ul><li>例如：线程调用一个方法后，需要等待方法返回结果</li></ul></li><li><p><strong>异步</strong>：线程自己不去获取结果，而是由其它线程返回结果（至少两个线程）</p></li><li><ul><li>例如：线程A调用一个方法后，继续向下运行，运行结果由线程B返回</li></ul></li></ul><p>当调用一次 channel.<strong>read</strong> 或 stream.<strong>read</strong> 后，会由用户态切换至操作系统内核态来完成真正数据读取，而读取又分为两个阶段，分别为：</p><ul><li>等待数据阶段</li><li>复制数据阶段<a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418151243.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530971.png" alt="img"></a></li></ul><p>根据UNIX 网络编程 - 卷 I，IO模型主要有以下几种</p><h3 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418151605.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770530984.png" alt="img"></a></p><ul><li>用户线程进行read操作时，<strong>需要等待操作系统执行实际的read操作</strong>，此期间用户线程是被阻塞的，无法执行其他操作</li></ul><h3 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418152137.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531008.png" alt="img"></a></p><ul><li><p>用户线程<strong>在一个循环中一直调用read方法</strong>，若内核空间中还没有数据可读，立即返回</p></li><li><ul><li><strong>只是在等待阶段非阻塞</strong></li></ul></li><li><p>用户线程发现内核空间中有数据后，等待内核空间执行复制数据，待复制结束后返回结果</p></li></ul><h3 id="多路复用-1"><a href="#多路复用-1" class="headerlink" title="多路复用"></a>多路复用</h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418154208.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531008.png" alt="img"></a></p><p><strong>Java中通过Selector实现多路复用</strong></p><ul><li>当没有事件是，调用select方法会被阻塞住</li><li>一旦有一个或多个事件发生后，就会处理对应的事件，从而实现多路复用</li></ul><p><strong>多路复用与阻塞IO的区别</strong></p><ul><li>阻塞IO模式下，<strong>若线程因accept事件被阻塞，发生read事件后，仍需等待accept事件执行完成后</strong>，才能去处理read事件</li><li>多路复用模式下，一个事件发生后，若另一个事件处于阻塞状态，不会影响该事件的执行</li></ul><h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418160106.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531009.png" alt="img"></a></p><ul><li>线程1调用方法后理解返回，<strong>不会被阻塞也不需要立即获取结果</strong></li><li>当方法的运行结果出来以后，由线程2将结果返回给线程1</li></ul><h2 id="3、零拷贝"><a href="#3、零拷贝" class="headerlink" title="3、零拷贝"></a>3、零拷贝</h2><p><strong>零拷贝指的是数据无需拷贝到 JVM 内存中</strong>，同时具有以下三个优点</p><ul><li>更少的用户态与内核态的切换</li><li>不利用 cpu 计算，减少 cpu 缓存伪共享</li><li>零拷贝适合小文件传输</li></ul><h3 id="传统-IO-问题"><a href="#传统-IO-问题" class="headerlink" title="传统 IO 问题"></a>传统 IO 问题</h3><p>传统的 IO 将一个文件通过 socket 写出</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">File</span> <span class="token attr-value">f = new File("helloword/data.txt");</span><span class="token attr-name">RandomAccessFile</span> <span class="token attr-value">file = new RandomAccessFile(file, "r");</span><span class="token attr-name">byte[]</span> <span class="token attr-value">buf = new byte[(int)f.length()];</span>file.read(buf);<span class="token attr-name">Socket</span> <span class="token attr-value">socket = ...;</span>socket.getOutputStream().write(buf);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>内部工作流如下</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162306.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531009.png" alt="img"></a></p><ul><li>Java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 Java 程序的<strong>用户态切换至内核态</strong>，去调用操作系统（Kernel）的读能力，将数据读入<strong>内核缓冲区</strong>。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 CPUDMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO</li><li>从<strong>内核态</strong>切换回<strong>用户态</strong>，将数据从<strong>内核缓冲区</strong>读入<strong>用户缓冲区</strong>（即 byte[] buf），这期间 <strong>CPU 会参与拷贝</strong>，无法利用 DMA</li><li>调用 write 方法，这时将数据从<strong>用户缓冲区</strong>（byte[] buf）写入 <strong>socket 缓冲区，CPU 会参与拷贝</strong></li><li>接下来要向网卡写数据，这项能力 Java 又不具备，因此又得从<strong>用户态</strong>切换至<strong>内核态</strong>，调用操作系统的写能力，使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 CPU</li></ul><p>可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的</p><ul><li>用户态与内核态的切换发生了 3 次，这个操作比较重量级</li><li>数据拷贝了共 4 次</li></ul><h3 id="NIO-优化"><a href="#NIO-优化" class="headerlink" title="NIO 优化"></a>NIO 优化</h3><p>通过 <strong>DirectByteBuf</strong></p><ul><li><p>ByteBuffer.allocate(10)</p></li><li><ul><li>底层对应 HeapByteBuffer，使用的还是 Java 内存</li></ul></li><li><p>ByteBuffer.<strong>allocateDirect</strong>(10)</p></li><li><ul><li>底层对应DirectByteBuffer，<strong>使用的是操作系统内存</strong></li></ul></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162410.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531022.png" alt="img"></a></p><p>大部分步骤与优化前相同，唯有一点：<strong>Java 可以使用 DirectByteBuffer 将堆外内存映射到 JVM 内存中来直接访问使用</strong></p><ul><li><p>这块内存不受 JVM 垃圾回收的影响，因此内存地址固定，有助于 IO 读写</p></li><li><p>Java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步</p></li><li><ul><li>DirectByteBuffer 对象被垃圾回收，将虚引用加入引用队列</li></ul></li><li><ul><li><ul><li>当引用的对象ByteBuffer被垃圾回收以后，虚引用对象Cleaner就会被放入引用队列中，然后调用Cleaner的clean方法来释放直接内存</li><li>DirectByteBuffer 的释放底层调用的是 Unsafe 的 freeMemory 方法</li></ul></li></ul></li><li><ul><li>通过专门线程访问引用队列，根据虚引用释放堆外内存</li></ul></li><li><p><strong>减少了一次数据拷贝，用户态与内核态的切换次数没有减少</strong></p></li></ul><h3 id="进一步优化1"><a href="#进一步优化1" class="headerlink" title="进一步优化1"></a>进一步优化1</h3><p><strong>以下两种方式都是零拷贝</strong>，即无需将数据拷贝到用户缓冲区中（JVM内存中）</p><p>底层采用了 <strong>linux 2.1</strong> 后提供的 <strong>sendFile</strong> 方法，Java 中对应着两个 channel 调用 <strong>transferTo/transferFrom</strong> 方法拷贝数据</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162750.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531029.png" alt="img"></a></p><ul><li>Java 调用 transferTo 方法后，要从 Java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 CPU</li><li>数据从<strong>内核缓冲区</strong>传输到 <strong>socket 缓冲区</strong>，CPU 会参与拷贝</li><li>最后使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 CPU</li></ul><p>这种方法下</p><ul><li>只发生了1次用户态与内核态的切换</li><li>数据拷贝了 3 次</li></ul><h3 id="进一步优化2"><a href="#进一步优化2" class="headerlink" title="进一步优化2"></a>进一步优化2</h3><p><strong>linux 2.4</strong> 对上述方法再次进行了优化</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418163033.png"><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531029.png" alt="img"></a></p><ul><li>Java 调用 transferTo 方法后，要从 Java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 CPU</li><li>只会将一些 offset 和 length 信息拷入 <strong>socket 缓冲区</strong>，几乎无消耗</li><li>使用 DMA 将 <strong>内核缓冲区</strong>的数据写入网卡，不会使用 CPU</li></ul><p><strong>整个过程仅只发生了1次用户态与内核态的切换，数据拷贝了 2 次</strong></p><h2 id="4、AIO"><a href="#4、AIO" class="headerlink" title="4、AIO"></a>4、AIO</h2><p>AIO 用来解决数据复制阶段的阻塞问题</p><ul><li>同步意味着，在进行读写操作时，线程需要等待结果，还是相当于闲置</li><li>异步意味着，在进行读写操作时，线程不必等待结果，而是将来由操作系统来通过回调方式由另外的线程来获得结果</li></ul><p>异步模型需要底层操作系统（Kernel）提供支持</p><ul><li>Windows 系统通过 IOCP <strong>实现了真正的异步 IO</strong></li><li>Linux 系统异步 IO 在 2.6 版本引入，但其<strong>底层实现还是用多路复用模拟了异步 IO，性能没有优势</strong></li></ul><h1 id="五、Netty"><a href="#五、Netty" class="headerlink" title="五、Netty"></a>五、Netty</h1><h2 id="核心组件及作用"><a href="#核心组件及作用" class="headerlink" title="核心组件及作用"></a>核心组件及作用</h2><p>Netty是一个基于Java的异步事件驱动网络应用程序框架，旨在帮助开发者轻松构建高性能、可伸缩、易于维护的网络应用。它提供了一组强大的网络编程工具和组件，适用于各种网络协议和应用场景。下面是Netty中一些重要组件的介绍及其作用：</p><ol><li>Channel和ChannelHandler：</li></ol><ul><li><ul><li>Channel：表示网络连接的通道，可以理解为传统Java I/O中的Socket。它可以代表客户端与服务器之间的双向通信通道。</li><li>ChannelHandler：用于处理入站和出站数据事件的组件。它可以拦截、处理、转换和生成数据，实现各种网络协议和逻辑的处理。</li></ul></li></ul><ol><li>EventLoop和EventLoopGroup：</li></ol><ul><li><ul><li>EventLoop：一个用于处理Channel的I/O事件、任务和定时任务的循环。它会监听事件并调用相应的ChannelHandler处理数据。</li><li>EventLoopGroup：包含一组EventLoop，用于管理它们的生命周期。在Netty中，通常会有两个EventLoopGroup，一个用于处理客户端的连接，一个用于处理已连接的Channel的I/O。</li></ul></li></ul><ol><li>Bootstrap和ServerBootstrap：</li></ol><ul><li><ul><li>Bootstrap：用于客户端的启动引导类，用于配置和创建客户端Channel。</li><li>ServerBootstrap：用于服务器端的启动引导类，用于配置和创建服务器端Channel。</li></ul></li></ul><ol><li>ChannelPipeline：</li></ol><ul><li><ul><li>通道管道是一系列的ChannelHandler组成的管道，用于处理进出的数据。数据在管道中依次经过不同的处理器进行处理。</li></ul></li></ul><ol><li>Codec：</li></ol><ul><li><ul><li>编解码器，用于将字节流和Java对象进行互相转换。Netty提供了许多内置的编解码器，例如基于长度的帧解码器、字符串编解码器等。</li></ul></li></ul><ol><li>ByteBuf：</li></ol><ul><li><ul><li>Netty的字节容器，类似于Java的ByteBuffer，但提供了更多的功能和更灵活的API。</li></ul></li></ul><ol><li>ChannelFuture：</li></ol><ul><li><ul><li>代表一个异步操作的结果，可以用来获取操作的状态和结果。在Netty中，几乎所有的操作都是异步的，因此ChannelFuture被广泛使用。</li></ul></li></ul><ol><li>Promise：</li></ol><ul><li><ul><li>一种更高级的Future，用于表示异步操作的结果，同时还可以手动设置结果，以满足某些特定的需求。</li></ul></li></ul><ol><li>IdleStateHandler：</li></ol><ul><li><ul><li>用于检测连接的空闲状态，当连接一段时间内没有读取或写入数据时，可以触发特定的事件。</li></ul></li></ul><ol><li>WebSocket：</li></ol><ul><li><ul><li><p>Netty提供了用于处理WebSocket协议的相关组件，使得构建WebSocket应用变得更加简单。</p><pre><code>     ![img](netty学习/image-1713770531034.png)</code></pre></li></ul></li></ul><h2 id="1、HelloWrold"><a href="#1、HelloWrold" class="headerlink" title="1、HelloWrold"></a>1、HelloWrold</h2><ol><li>引入依赖</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.1.87.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>开发Server</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>nt<span class="token punctuation">.</span>aHello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span></span><span class="token class-name">ServerBootstrap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelHandlerContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInboundHandlerAdapter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInitializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span></span><span class="token class-name">StringDecoder</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. 启动器，组装netty组件，启动服务器</span>        <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 2. group 组</span>            <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 3. 选择服务器的server socket channel实现方式，包括OIO/BIO</span>            <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token comment">// 4. 配置child能够处理那些操作</span>            <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span>                <span class="token comment">// 5. 和客户端读写通道的初始化，添加其他的handler</span>                <span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                        <span class="token comment">// 添加具体的handler</span>                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将ByteBuf转换为字符串</span>                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInboundHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 自定义handler，定义触发读事件要做的事情</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>开发Client</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>nt<span class="token punctuation">.</span>aHello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span></span><span class="token class-name">Bootstrap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInitializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span></span><span class="token class-name">StringEncoder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. 启动类</span>        <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 2. 添加eventGroup</span>                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 3. 选择客户端channel实现</span>                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token comment">// 4. 添加处理器</span>                <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 阻塞方法，直到连接建立</span>                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 代表连接对象</span>                <span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>整体流程</li></ol><p><img src="/2024/04/22/java/kuang-jia/netty-xue-xi/image-1713770531048.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线上问题排查</title>
      <link href="/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/"/>
      <url>/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/</url>
      
        <content type="html"><![CDATA[<h1 id="线上问题排查"><a href="#线上问题排查" class="headerlink" title="线上问题排查"></a>线上问题排查</h1><h2 id="1-Cpu飚高"><a href="#1-Cpu飚高" class="headerlink" title="1. Cpu飚高"></a>1. Cpu飚高</h2><ol><li><p>使用top命令查看cpu占用情况</p><p><img src="/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/image.png" alt="top"></p></li><li><p>通过top命令查看后，可以查看是哪一个进程占用cpu较高，上图所示的进程为：30978</p></li><li><p>查询进程中的线程信息<br>pid：进程pid<br>tid：线程id<br>%：cpu占用率<br><img src="/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/image-1713757255775.png" alt="image.png"></p></li><li><p>通过上面分析，在进程(30978)中哪一个线程(30979)占用的cpu较高</p></li><li><p>把线程号转换为16进制 , 记住这个16进制的线程号</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">printf "%x\n" 30979 , 30979为10进制进程id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行<code>jstack 30978</code>可以根据线程 id 找到有问题的线程，进一步定位到问题代码的源码行号<br><img src="/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/image-1713757297193.png" alt="jstack查看"></p></li><li><p>代码修复</p></li></ol><h2 id="2-JVM调优"><a href="#2-JVM调优" class="headerlink" title="2. JVM调优"></a>2. JVM调优</h2><p>要想调优首先就要确定问题 , 目前系统哪些地方出现了问题 , 哪些地方没有达到设计目标 , 需要进行调优</p><p>确定了问题之后 , 首先应该思考是否能够从<strong>架构方面</strong>, <strong>代码优化方面</strong>或者<strong>数据库优化</strong>方面解决问题</p><p>从其他方面着手能不能解决问题 <strong>,<strong>才需要进行</strong>JVM调优</strong>应该是Java性能优化的最后手段。</p><p> 我认为JVM调优应该是系统优化的最后手段 , JVM本身就有自动内存管理机制 , 一般的项目调整一下初始堆内存(<code>-Xms</code>)大小, 和最大堆内存(<code>-Xmx</code>)大小也就行了 </p><p><strong>如果确实要进行JVM调优, 首先要确认系统有没有出现如下的问题 :</strong> </p><ul><li>Heap内存（老年代）持续上涨达到设置的最大内存值</li><li>Full GC 次数频繁</li><li>GC 停顿时间过长（超过1秒）</li><li>应用出现OutOfMemory 等内存异常</li><li>应用中有使用本地缓存且占用大量内存空间</li></ul><p>如果存在上述问题 , 能不能通过架构调整和逻辑代码调整进行解决</p><ul><li>我们编写的代码中有没有出现内存泄露 , 死循环 , 无限递归这样的问题</li><li>程序在执行的时候有没有在循环中创建大量的对象, 是否有必要 , 是否可以优化</li><li>是否存在大量的全局变量和大对象</li><li>本地缓存中有大量的数据存储, 是否可以切换到外部缓存中间件中</li><li>数据库SQL执行效率是否达到预期 , 是否还有优化空间 , 有没有查询大量数据到内存 , 是否有必要</li><li>服务器JVM参数有没有设置到最优</li></ul><p>如果确定要进行JVM调优 , 我们可以从以下方面进行着手 : </p><ol><li>分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点</li><li>确定JVM调优量化目标</li><li>确定JVM调优参数（根据历史JVM参数来调整）</li><li>依次调优内存、延迟、吞吐量等指标</li><li>对比观察调优前后的差异</li><li>不断的分析和调整，直到找到合适的JVM参数配置</li></ol><p>整个过程也不是一下就能完成的 , 要不断的测试和优化</p><p><strong>常见的JVM调优参数设置 :</strong> </p><p><code>-Xms</code>：初始化堆内存大小，默认为物理内存的1/64(小于1GB)。</p><p><code>-Xmx</code>：堆内存最大值。默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。</p><p><code>-Xmn</code>：新生代大小，包括Eden区与2个Survivor区。</p><p><code>-XX:SurvivorRatio=8</code>：Eden区与一个Survivor区比值 , 默认值Eden:S0:S1为 8:1:1  , 如果是4 那么就是4:1:1</p><p><code>-XX:NewRatio=4</code>：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为4，则年轻代与年老代所占比值为1：4，年轻代占整个堆栈的1/5</p><p><code>-Xss512k</code>：设置每个线程的堆栈大小。每个线程堆栈大小为1MB , 应根据应用线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。</p><p><code>-XX:PermSize=100m</code>：设置初始化永久代大小为100MB。</p><p><code>-XX:MaxPermSize=256m</code>：设置持久代大小为256MB。</p><p><code>-XX:MaxDirectMemorySize=1G</code>：设置直接内存大小。报java.lang.OutOfMemoryError: Direct buffer memory异常可以上调这个值。</p><p><code>-XX:ConcGCThreads=4</code>：CMS垃圾回收器并行线程线，推荐值为CPU核心数。</p><p><code>-XX:ParallelGCThreads=8</code>：新生代并行收集器的线程数。</p><p>还有很多参数 , 太多了记不住 , 之前整理了一个文档 , 需要用的时候可以查询</p><p>一般我们调整参数的比例 : </p><p><img src="/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/image-1713757339564.png" alt="参数调整"></p><p>具体参数要根据情况设置</p><h2 id="3-JVM调优工具"><a href="#3-JVM调优工具" class="headerlink" title="3. JVM调优工具"></a>3. JVM调优工具</h2><p><img src="/2024/04/22/yun-wei/xian-shang-wen-ti-pai-cha/image-1713757370830.png" alt="调优工具"></p><p>也可以使用Arthas</p>]]></content>
      
      
      <categories>
          
          <category> 线上问题排查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis常用业务场景下Lua脚本</title>
      <link href="/2024/04/21/java/kuang-jia/redis-chang-yong-ye-wu-chang-jing-xia-lua-jiao-ben/"/>
      <url>/2024/04/21/java/kuang-jia/redis-chang-yong-ye-wu-chang-jing-xia-lua-jiao-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis常用业务场景下的lua脚本及其解释"><a href="#Redis常用业务场景下的lua脚本及其解释" class="headerlink" title="Redis常用业务场景下的lua脚本及其解释"></a>Redis常用业务场景下的lua脚本及其解释</h1><h2 id="1、-限流场景"><a href="#1、-限流场景" class="headerlink" title="1、 限流场景"></a>1、 限流场景</h2><h3 id="1-1-滑动窗口限流"><a href="#1-1-滑动窗口限流" class="headerlink" title="1.1 滑动窗口限流"></a>1.1 滑动窗口限流</h3><p><strong>使用到的数据结构以及命令解释</strong></p><pre class="line-numbers language-none"><code class="language-none">Sorted Set：Redis有序集合是一组按相关分数排序的唯一字符串（成员）的集合。它类似于集合和哈希的混合体。有序集合通常用于排行榜和速率限制器。它们可以高效地更新和查询。ZREMRANGEBYSCORE:`ZREMRANGEBYSCORE key min max`移除掉zset中分数位于min以及max之间的元素ZCARD:`ZCARD key`返回key的元素个数ZADD:`ZADD key [NX | XX] [GT | LT] [CH] [INCR] score member [score member   ...]`将所有指定的成员及其指定的分数添加到存储在键中的排序集合中。可以指定多个分数/成员对。如果指定的成员已经是排序集合的成员，则更新分数，并重新插入元素以确保正确排序。如果键不存在，则将创建一个具有指定成员作为唯一成员的新排序集合，就好像排序集合为空一样。如果键存在但不包含排序集合，则会返回错误。分数值应为双精度浮点数的字符串表示。+inf和-inf值也是有效值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>lua脚本解释</strong></p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">参数解释：<span class="token number">1</span>、 timeWindowSize： 滑动窗口时间范围<span class="token number">2</span>、 allowRequestSize： 滑动窗口允许访问的次数<span class="token number">3</span>、 key： 资源key<span class="token comment">-- 计算窗口起始时间</span><span class="token keyword">local</span> window_start <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> timeWindowSize<span class="token comment">-- 删除掉 【负无穷，窗口起始时间】的元素（获取当前时间窗口，删除历史元素）</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'ZREMRANGEBYSCORE'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'-INF'</span><span class="token punctuation">,</span> window_start<span class="token punctuation">)</span><span class="token comment">-- 计算当前窗口剩余元素数量</span><span class="token keyword">local</span> current_window_size <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'ZCARD'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">-- 判断当前窗口元素数量是否大于窗口最大允许访问次数</span><span class="token keyword">if</span> current_window_size <span class="token operator">&lt;</span> allowRequestSize <span class="token keyword">then</span>    <span class="token comment">-- 允许访问，将当前元素添加进去</span>    redis<span class="token punctuation">.</span><span class="token function">cal</span><span class="token punctuation">(</span><span class="token string">'ZADD'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ARGS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>lua调用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>lua<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span> allowRequestSize<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Java应用实例参考</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlidingWindowLimitUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">JedisPool</span> jedisPool<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SlidingWindowLimitUtil</span><span class="token punctuation">(</span><span class="token class-name">JedisPool</span> jedisPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jedisPool <span class="token operator">=</span> jedisPool<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *  滑动窗口限流算法     * @param key 限流key     * @param timeRange 时间范围     * @param windowRange 窗口范围     * @return boolean     * @date 2024/03/25     * @version 1.0.0     * @author zhuzy     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> timeRange<span class="token punctuation">,</span> <span class="token class-name">String</span> windowRange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取连接</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> res <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// timeRange配置的是秒，转换为毫秒</span>            <span class="token class-name">Long</span> timeRangeL <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>timeRange<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> lua <span class="token operator">=</span> <span class="token string">"local window_start = ARGV[1] - "</span> <span class="token operator">+</span> timeRangeL <span class="token operator">+</span> <span class="token string">"\n "</span> <span class="token operator">+</span>                    <span class="token string">"redis.call('ZREMRANGEBYSCORE', KEYS[1], '-INF', window_start)\n"</span> <span class="token operator">+</span>                    <span class="token string">"local current_request = redis.call('ZCARD', KEYS[1])\n"</span> <span class="token operator">+</span>                    <span class="token string">"if current_request &lt; tonumber(ARGV[2]) then\n"</span> <span class="token operator">+</span>                    <span class="token string">"   redis.call('ZADD', KEYS[1], ARGV[1], ARGV[1])\n"</span> <span class="token operator">+</span>                    <span class="token string">"   return 1\n"</span> <span class="token operator">+</span>                    <span class="token string">"else\n"</span> <span class="token operator">+</span>                    <span class="token string">"   return 0\n"</span> <span class="token operator">+</span>                    <span class="token string">"end"</span><span class="token punctuation">;</span>            <span class="token comment">// 参数顺序： lua脚本，key个数， key， 参数1， 参数2</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>lua<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span> windowRange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res <span class="token operator">==</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-令牌桶限流"><a href="#1-2-令牌桶限流" class="headerlink" title="1.2 令牌桶限流"></a>1.2 令牌桶限流</h3><p><strong>使用到的数据结果及命令解释</strong></p><pre class="line-numbers language-none"><code class="language-none">String:基本数据类型。在令牌桶场景中，剩余令牌数量以及上次获取令牌的时间均是基于string实现的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>lua脚本解释</strong></p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">参数解释：<span class="token number">1</span>、key：限流资源标识<span class="token number">2</span>、interval：令牌添加速率<span class="token number">3</span>、capacity：令牌桶容量<span class="token number">4</span>、now：当前时间<span class="token number">5</span>、cost_token_num<span class="token punctuation">:</span> 消耗令牌数量（当前操作<span class="token punctuation">)</span><span class="token comment">-- 参数获取</span><span class="token keyword">local</span> key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> interval <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> capacity <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">local</span> now <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">local</span> cost_token_num <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">local</span> last_req_time_key <span class="token operator">=</span> <span class="token string">'last_time:'</span> <span class="token operator">..</span> key<span class="token comment">-- 获取当前key剩余令牌数量, 如果为空，则初始化为桶容量</span><span class="token keyword">local</span> remain_tokens <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token keyword">or</span> capacity<span class="token punctuation">)</span><span class="token comment">-- 获取当前key上次获取令牌的时间, 如果为空，则初始化为当前时间</span><span class="token keyword">local</span> last_time <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> last_req_time_key<span class="token punctuation">)</span> <span class="token keyword">or</span> now<span class="token punctuation">)</span><span class="token comment">-- 计算新生成的token数量</span><span class="token keyword">local</span> new_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>now <span class="token operator">-</span> last_time<span class="token punctuation">)</span> <span class="token operator">/</span> interval<span class="token punctuation">)</span><span class="token comment">-- 新生成的token + 剩余的token 不能大于桶容量</span><span class="token keyword">local</span> detal_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>remain_tokens <span class="token operator">+</span> delta_tokens<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token keyword">if</span> detal_tokens <span class="token operator">&gt;=</span> cost_token_num <span class="token keyword">then</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> detal_tokens <span class="token operator">-</span> cost_token_num<span class="token punctuation">)</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span> last_req_time_key<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>lua调用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>lua<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> capacity<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>，costTokenNum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马点评</title>
      <link href="/2024/04/18/xiang-mu/hei-ma-dian-ping/"/>
      <url>/2024/04/18/xiang-mu/hei-ma-dian-ping/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713691863632.png" alt="Redis官网"></p><p><a href="https://redis.io/docs/latest/commands/">Commands | Docs (redis.io)</a></p><h1 id="黑马点评"><a href="#黑马点评" class="headerlink" title="黑马点评"></a>黑马点评</h1><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713453578683.png" alt="1713453578683"></p><h2 id="1-验证码登录"><a href="#1-验证码登录" class="headerlink" title="1. 验证码登录"></a>1. 验证码登录</h2><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713454025294.png" alt="1713454025294"></p><blockquote><p>生成的token作为redis的key， value存储用户的具体信息</p></blockquote><h2 id="2-两层拦截器"><a href="#2-两层拦截器" class="headerlink" title="2. 两层拦截器"></a>2. 两层拦截器</h2><blockquote><p>刷新token有效期</p></blockquote><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713454333387.png" alt="1713454333387"></p><h2 id="3-缓存更新策略"><a href="#3-缓存更新策略" class="headerlink" title="3. 缓存更新策略"></a>3. 缓存更新策略</h2><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713454551095.png" alt="1713454551095"></p><h2 id="4-缓存穿透、雪崩、击穿"><a href="#4-缓存穿透、雪崩、击穿" class="headerlink" title="4. 缓存穿透、雪崩、击穿"></a>4. 缓存穿透、雪崩、击穿</h2><h3 id="4-1-缓存穿透"><a href="#4-1-缓存穿透" class="headerlink" title="4.1 缓存穿透"></a>4.1 缓存穿透</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713454830339.png" alt="1713454830339"></p><h3 id="4-2-缓存雪崩"><a href="#4-2-缓存雪崩" class="headerlink" title="4.2 缓存雪崩"></a>4.2 缓存雪崩</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713454846336.png" alt="1713454846336"></p><h3 id="4-3-缓存击穿"><a href="#4-3-缓存击穿" class="headerlink" title="4.3 缓存击穿"></a>4.3 缓存击穿</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713454865946.png" alt="1713454865946"></p><h2 id="5-秒杀业务"><a href="#5-秒杀业务" class="headerlink" title="5. 秒杀业务"></a>5. 秒杀业务</h2><h3 id="5-1-发号器（全局ID）"><a href="#5-1-发号器（全局ID）" class="headerlink" title="5.1 发号器（全局ID）"></a>5.1 发号器（全局ID）</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713531629403.png" alt="1713531629403"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisIdWorker</span> <span class="token punctuation">{</span>    <span class="token comment">//开始时间戳</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> BEGIN_TIMESTAMP <span class="token operator">=</span> <span class="token number">1674086400L</span><span class="token punctuation">;</span>    <span class="token comment">//序列号位数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_BITS <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RedisIdWorker</span><span class="token punctuation">(</span><span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stringRedisTemplate <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyPrefix<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//1.生成时间戳</span>        <span class="token class-name">LocalDateTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> nowSecond <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span>UTC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> nowSecond <span class="token operator">-</span> BEGIN_TIMESTAMP<span class="token punctuation">;</span>        <span class="token comment">//2.生成序列号,redis自增长,redis单个key自增长有上限，2的64次方</span>        <span class="token comment">//2.1获取当前日期，精确到天</span>        <span class="token class-name">String</span> date <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy:MM:dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string">"icr:"</span> <span class="token operator">+</span> keyPrefix <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.拼接并返回,不能使用字符串方式拼接</span>        <span class="token keyword">return</span> timestamp <span class="token operator">&lt;&lt;</span> COUNT_BITS <span class="token operator">|</span> count<span class="token punctuation">;</span><span class="token comment">//先向左移32位，那么低32位全为0，跟序列号进行或操作</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 生成开始时间戳     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LocalDateTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> second <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span>UTC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2乐观锁防止超卖"><a href="#5-2乐观锁防止超卖" class="headerlink" title="5.2乐观锁防止超卖"></a>5.2乐观锁防止超卖</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713537654445.png" alt="1713537654445"></p><blockquote><p>弊端，比较浪费性能，在查询时并发较大情况下，很多线程会判断stock不等于查询的stock，导致秒杀失败。</p></blockquote><h4 id="5-2-1-优化：提高成功率"><a href="#5-2-1-优化：提高成功率" class="headerlink" title="5.2.1 优化：提高成功率"></a>5.2.1 优化：提高成功率</h4><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713537718210.png" alt="1713537718210"></p><h3 id="5-3-一人一单"><a href="#5-3-一人一单" class="headerlink" title="5.3 一人一单"></a>5.3 一人一单</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713537851447.png" alt="1713537851447"></p><h4 id="5-3-1-分布式环境锁"><a href="#5-3-1-分布式环境锁" class="headerlink" title="5.3.1 分布式环境锁"></a>5.3.1 分布式环境锁</h4><p>使用分布式锁解决</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713538141860.png" alt="1713538141860"></p><h4 id="5-3-2-redis锁避免被他人解锁"><a href="#5-3-2-redis锁避免被他人解锁" class="headerlink" title="5.3.2 redis锁避免被他人解锁"></a>5.3.2 redis锁避免被他人解锁</h4><p>使用lua脚本在解锁前是否由当前线程持有锁</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 这里的 KEYS[1] 就是锁的 key，这里的 ARGV[1] 就是当前线程标识</span><span class="token comment">-- 获取锁中的线程标识 get key</span><span class="token keyword">local</span> id <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 比较线程标识与锁中的标识是否一致</span><span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token comment">-- 释放锁 del key</span>    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'del'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-3-Redission分布式锁"><a href="#5-3-3-Redission分布式锁" class="headerlink" title="5.3.3 Redission分布式锁"></a>5.3.3 Redission分布式锁</h4><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713538395179.png" alt="1713538395179"></p><blockquote><p>Redission分布式锁原理：</p><ol><li><strong>可重入</strong>：利用hash结构记录线程id和重入次数</li><li><strong>可重试</strong>：利用信号量和Publish功能实现等待、唤醒，获取锁的重试机制（并不是无脑自旋）</li><li><strong>超时续约</strong>：利用Watch dog，每隔一段时间（release time / 3 )自动续期</li></ol></blockquote><h3 id="5-4-秒杀业务优化"><a href="#5-4-秒杀业务优化" class="headerlink" title="5.4 秒杀业务优化"></a>5.4 秒杀业务优化</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713611973434.png" alt="秒杀优化"></p><blockquote><p>优化思路如下，之前的流程中，步骤如下：</p><ol><li>查询优惠券</li><li>判断秒杀库存</li><li>查询订单</li><li>校验一人一单</li><li>减库存</li><li>创建订单</li></ol><p>可以发现，以上操作很多操作是需要操作mysql数据库的，而且如下单的操作需要调用其他服务的接口，存在时延较长的问题。压测情况下，1000tps情况下，最低时延和最高时延分别为100ms和800ms性能差距较大。</p></blockquote><p>整体上优化思路如下：</p><ol><li>将判断逻辑在主线程完成，如果能够下单（满足库存、一人一单的要求），则通过异步线程完成减库存以及创建订单的操作。</li><li>通过lua脚本在redis中 完成能够下单的校验操作</li></ol><h4 id="5-4-1-优化后整体流程"><a href="#5-4-1-优化后整体流程" class="headerlink" title="5.4.1 优化后整体流程"></a>5.4.1 优化后整体流程</h4><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713623713572.png" alt="lua校验逻辑"></p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 1.参数列表</span><span class="token comment">-- 1.1 优惠券id</span><span class="token keyword">local</span> voucherId <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">-- 1.2 用户id</span><span class="token keyword">local</span> userId <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">-- 2.数据key</span><span class="token comment">-- 2.1 库存key   key 是优惠的业务名称加优惠券id  value 是优惠券的库存数</span><span class="token keyword">local</span> stockKey <span class="token operator">=</span> <span class="token string">'seckill:stock:'</span> <span class="token operator">..</span> voucherId<span class="token comment">-- 2.2 订单key   key 也是拼接的业务名称加优惠权id  而value是用户id， 这是一个set集合，凡购买该优惠券的用户都会将其id存入集合中</span><span class="token keyword">local</span> orderKey <span class="token operator">=</span> <span class="token string">'seckill:order:'</span> <span class="token operator">..</span> voucherId<span class="token comment">-- 3.脚本业务</span><span class="token comment">-- 3.1 判断库存是否充足 get stockKey</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> stockKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">then</span>  <span class="token comment">--将get的value先转为数字类型才能判断比较</span>    <span class="token comment">-- 3.2 库存不足，返回1</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">end</span><span class="token comment">-- 3.3 判断用户是否下单 sismember orderKey userId命令，判断当前key集合中，是否存在该value；返回1存在，0不存在</span><span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'sismember'</span><span class="token punctuation">,</span> orderKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token comment">--3.4 存在说明是重复下单，返回2</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token keyword">end</span><span class="token comment">-- 3.5 扣库存</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'incrby'</span><span class="token punctuation">,</span> stockKey<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">-- 3.6 下单（保存用户）</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'sadd'</span><span class="token punctuation">,</span> orderKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码逻辑步骤</strong></p><ol><li><p>lua 注入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">IVoucherOrderService</span> proxy<span class="token punctuation">;</span><span class="token comment">//定义代理对象，提前定义后面会用到</span><span class="token comment">//注入脚本</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> SECKILL_SCRIPT<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    SECKILL_SCRIPT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SECKILL_SCRIPT<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"seckill.lua"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SECKILL_SCRIPT<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>脚本运行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">seckillVoucher</span><span class="token punctuation">(</span><span class="token class-name">Long</span> voucherId<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//使用lua脚本</span>    <span class="token comment">//获取用户</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1.执行lua脚本</span>    <span class="token class-name">Long</span> result <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>            SECKILL_SCRIPT<span class="token punctuation">,</span>            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//这里是key数组，没有key，就传的一个空集合</span>            voucherId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.判断结果是0</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Long型转为int型，便于下面比较</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//2.1 不为0，代表没有购买资格</span>        <span class="token keyword">return</span>  <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">?</span><span class="token string">"优惠券已售罄"</span><span class="token operator">:</span><span class="token string">"不能重复购买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>满足下单的元素添加至阻塞队列</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建阻塞队列  这个阻塞队列特点：当一个线程尝试从队列获取元素的时候，如果没有元素该线程阻塞，直到队列中有元素才会被唤醒获取</span><span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">VoucherOrder</span><span class="token punctuation">&gt;</span></span> orderTasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化阻塞队列的大小</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>下单代码逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">//2.2 为0，有购买资格，把下单信息保存到阻塞队列中</span>    <span class="token comment">//7.创建订单   向订单表新增一条数据，除默认字段，其他字段的值需要set</span>    <span class="token class-name">VoucherOrder</span> voucherOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VoucherOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.1订单id</span>    <span class="token keyword">long</span> orderId <span class="token operator">=</span> redisIdWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.2用户id</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.3代金券id</span>    voucherOrder<span class="token punctuation">.</span><span class="token function">setVoucherId</span><span class="token punctuation">(</span>voucherId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//放入阻塞对列中</span>    orderTasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>voucherOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取代理对象</span>    proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IVoucherOrderService</span><span class="token punctuation">)</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.返回订单id</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>异步线程持续消费延迟队列消息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建线程池</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> SECKILL_ORDER_EXECUTOR <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//利用spring提供的注解，在类初始化完毕后立即执行线程任务</span><span class="token annotation punctuation">@PostConstruct</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SECKILL_ORDER_EXECUTOR<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoucherOrderHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment">//创建线程任务，内部类方式</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">VoucherOrderHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>       <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1.获取队列中的订单信息</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">VoucherOrder</span> voucherOrder <span class="token operator">=</span> orderTasks<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.创建订单，这是调之前那个创建订单的方法，需要稍作改动</span>            <span class="token function">handleVoucherOrder</span><span class="token punctuation">(</span>voucherOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"异常信息:"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建订单与减少库存</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleVoucherOrder</span><span class="token punctuation">(</span><span class="token class-name">VoucherOrder</span> voucherOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> voucherOrder<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建锁对象</span>    <span class="token class-name">SimpleRedisLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRedisLock</span><span class="token punctuation">(</span><span class="token string">"order:"</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span> stringRedisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取锁</span>    <span class="token keyword">boolean</span> isLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断是否获取锁成功</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isLock<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"您已购买过该商品，不能重复购买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        proxy<span class="token punctuation">.</span><span class="token function">createVoucherOrder</span><span class="token punctuation">(</span>voucherOrder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用代理对象，最后用于提交事务</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放锁</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-总结"><a href="#5-5-总结" class="headerlink" title="5.5 总结"></a>5.5 总结</h3><blockquote><p>①编写lua脚本，对于超卖问题和一人一单进行解决处理，超卖用CAS方法判断库存是否大于0，一人一单用redis的set集合的sismenber判读该优惠券（key）下的用户id（value）是否唯一</p><p>②Java代码中注入脚本，并执行脚本判断脚本返回结果，若不为脚本结果0，直接返回错误提示</p><p>③若脚本结果为0，代表有购买优惠券资格，将new VoucherOrder创建订单对象，并set orderId，userId，voucherId。再把订单对象放入阻塞队列中，返回订单id给用户</p><p>④创建线程池，并定义线程任务，但注意，线程任务必须在方法执行前执行，使用到spring提供的注解在类初始化完成后执行线程任务</p><p>⑤线程任务中获取阻塞队列的订单对象，然后调用handleVoucherOrder方法传入voucherOrder</p><p>⑥handleVoucherOrder方法其实是再次获取锁，这个就是个纯兜底，作用不大。并在获取锁成功后调用createVoucherOrder方法扣减库存创建订单，由于都是对数据库的操作，因此要提交事务</p></blockquote><h3 id="5-6-目前方案存在的缺陷"><a href="#5-6-目前方案存在的缺陷" class="headerlink" title="5.6 目前方案存在的缺陷"></a>5.6 目前方案存在的缺陷</h3><blockquote><p>队列满了怎么办 ？</p><p>子线程下单失败怎么办？</p><p>订单太多了超过阻塞队列大小了怎么办？</p><p>拒绝策略怎么设计？</p><p>待消费的消息是否应该持久化，不然宕机了消息不就丢失了？</p><p>还有如何确保消息确实被消费成功了，不然消费失败了无法重试</p></blockquote><h3 id="5-7-Redis消息队列解决持久化"><a href="#5-7-Redis消息队列解决持久化" class="headerlink" title="5.7 Redis消息队列解决持久化"></a>5.7 Redis消息队列解决持久化</h3><h4 id="5-7-1-基于List实现"><a href="#5-7-1-基于List实现" class="headerlink" title="5.7.1 基于List实现"></a>5.7.1 基于List实现</h4><p>Redis 的 list 数据结构是一个双向链表<br>队列是入口和出口不在一边，因此我们可以利用：LPUSH 结合 RPOP、或者 RPUSH 结合 LPOP 来实现。</p><p>不过要注意的是，当队列中没有消息时 RPOP 或 LPOP 操作会返回 null，并不像 JVM 的阻塞队列那样会阻塞并等待消息。</p><p>因此这里应该使用 BRPOP 或者 BLPOP 来实现阻塞效果。</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713627065321.png" alt="List实现消息队列"></p><p><strong>基于 List 的消息队列有哪些优缺点</strong></p><p>优点<br>利用 Redis 存储，不受限于 JVM 内存上限<br>基于 Redis 的持久化机制，数据安全性有保证<br>可以满足消息有序性</p><p>缺点<br>无法避免消息丢失<br>只支持单消费者</p><h4 id="5-7-2-基于Publish实现"><a href="#5-7-2-基于Publish实现" class="headerlink" title="5.7.2 基于Publish实现"></a>5.7.2 基于Publish实现</h4><p>PubSub（发布订阅） 是 Redis 2.0 版本引入的消息传递模型。</p><p>顾名思义，消费者可以订阅一个或多个channel，生产者向对应 channel 发送消息后，所有订阅者都能收到相关消息。</p><p>SUBSCRIBE channel [channel] ：订阅一个或多个频道<br>PUBLISH channel msg ：向一个频道发送消息<br>PSUBSCRIBE pattern[pattern] ：订阅与 pattern 格式匹配的所有频道<br>pattern – 通配符方式<br>?：匹配一个字符<br>*：匹配多个字符<br>ae：匹配括号内存在的字符</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713627730106.png" alt="publish实现"></p><p><strong>基于 PubSub 的消息队列有哪些优缺点</strong></p><p>优点：采用发布订阅模型，支持多生产、多消费<br>缺点：<br>不支持数据持久化<br>无法避免消息丢失<br>消息堆积有上限，超出时数据丢失</p><h4 id="5-7-3-基于Stream实现"><a href="#5-7-3-基于Stream实现" class="headerlink" title="5.7.3 基于Stream实现"></a>5.7.3 基于Stream实现</h4><h5 id="5-7-3-1-单消费模式"><a href="#5-7-3-1-单消费模式" class="headerlink" title="5.7.3.1 单消费模式"></a>5.7.3.1 单消费模式</h5><p><strong>创建命令</strong></p><pre class="line-numbers language-none"><code class="language-none">XADD key [NOMKSTREAM] [MAXLEN|MINID [=|~] threshold [LIMIT count]] *|ID field value [field value …]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>key：队列名称</p><p>[NOMKSTREAM]：如果队列不存在时，确定是否自动创建队列，默认自动创建</p><p>[MAXLEN|MINID [=|~] threshold [LIMIT count]]：设置消息队列的最大消息数量</p><p>|ID：消息的唯一 ID， 代表由 Redis 自动生成，格式是 ”时间戳-递增数字“，例如：”1666161469358-0“</p><p>field value [field value …]：发送到队列中的消息，称为 Entry。格式为多个 Key-Value 键值对。</p><p>例如：创建名为 users 的队列，并向其中发送一个消息，内容是：{name=jack,age=21}，并且使用 Redis 自动生成 ID</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; XADD users * name jack age 21 “1644805700523-0”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713627832760.png" alt="命令参数"></p><p><strong>读取命令</strong></p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713627895106.png" alt="读取命令"></p><p>读取消息的方式之一：XREAD</p><p>[COUNT count]：每次读取消息的最大数量；</p><p>[BLOCK milliseconds]：当没有消息时，确定是否阻塞，阻塞则添加具体的 milliseconds （阻塞时长）</p><p>STREAMS key [key …]：从哪个队列读取消息，Key 就是队列名；</p><p>ID [ID …]：起始 ID，只返回大于该 ID 的消息；0 代表从第一个消息开始，$ 代表从最新的消息开始。</p><p>例如，使用 XREAD 读取第一个消息</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; XREAD COUNT 1 STREAMS users 01) 1) "queue"   2) 1) 1) "1666169070359-0"         2) 1) "name"            2) "jack"            3) "age"            4) 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XREAD 阻塞方式，读取最新的消息</p><pre class="line-numbers language-none"><code class="language-none">XREAD COUNT 1 BLOCK STREAMS queue $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：<br>当我们指定起始 ID 为 $ 时，代表读取最新的消息<br>如果我们处理一条消息的过程中，又有超过 1 条以上的消息到达队列，则下次获取时也只能获取到最新的一条<br>如此便会出现漏读消息的问题</p><p>STREAM 类型消息队列的 XREAD 命令特点：</p><p>1.消息可回溯（消息永久的保存在消息队列中）<br>2.一个消息可以被多个消费者读取<br>3.可以阻塞读取<br>4.有消息漏读的风险（缺点）</p><h5 id="5-7-3-2-消费者组模式"><a href="#5-7-3-2-消费者组模式" class="headerlink" title="5.7.3.2 消费者组模式"></a>5.7.3.2 消费者组模式</h5><p>消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列。</p><p>其具备下列特点：</p><p>消息分流：队列中的 消息会分流给组内不同的消费者，而不是重复消费，从而加快消息处理的速度。</p><p>消息标示：消费者组会维护一个标示，记录最后一个被处理的消息，即使消费者宕机重启，还会从标示之后读取消息，确保每一个消息都会被消费。（解决漏读问题）</p><p>消息确认：消费者获取消息后，消息处于 pending 状态，并存入一个 pending-list。</p><p>当处理完成后需要通过 XACK 命令来确认消息，标记消息为已处理，才会从 pending-list 中移除。（解决消息丢失问题)</p><p>创建消费者组</p><pre class="line-numbers language-none"><code class="language-none">XGROUP CREATE key groupName ID [MKSTREAM]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>key：队列名称</p><p>groupName：消费者组名称</p><p>ID：起始 ID 标示，$ 代表队列中最后一个消息，0 则代表队列中第一个消息</p><p>MKSTREAM：队列不存在时自动创建队列</p><p><strong>删除指定的消费者组</strong></p><pre class="line-numbers language-none"><code class="language-none">XGROUP DESTORY key groupName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>给指定的消费者组添加消费者</strong></p><pre class="line-numbers language-none"><code class="language-none">XGROUP CREATECONSUMER key groupname consumername<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>删除消费者组中的指定消费者</strong></p><pre class="line-numbers language-none"><code class="language-none">XGROUP DELCONSUMER key groupname consumername<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>从消费者组读取消息</strong></p><pre class="line-numbers language-none"><code class="language-none">XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key …] ID [ID …]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>group：消费组名称</p><p>consumer：消费者名称，如果消费者不存在，会自动创建一个消费者</p><p>count：本次查询的最大数量</p><p>BLOCK milliseconds：当没有消息时最长等待时间</p><p>NOACK：无需手动 ACK，获取到消息后自动确认</p><p>STREAMS key：指定队列名称</p><p>ID：获取消息的起始 ID</p><p>“&gt;”：从下一个未消费的消息开始</p><p>其它：根据指定 id 从 pending-list 中获取已消费但未确认的消息。</p><p>例如 0，是从 pending-list 中的第一个消息开始</p><p><strong>STREAM 类型消息队列的 XREADGROUP 命令特点</strong></p><p>消息可回溯<br>可以多消费者争抢消息，加快消费速度<br>可以阻塞读取<br>没有消息漏读的风险<br>有消息确认机制，保证消息至少被消费一次</p><h4 id="5-7-4-三种消息队列的对比"><a href="#5-7-4-三种消息队列的对比" class="headerlink" title="5.7.4 三种消息队列的对比"></a>5.7.4 三种消息队列的对比</h4><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713628199993.png" alt="三种消息队列的对比"></p><h3 id="5-8-通过Stream消息队列解决延迟队列持久化问题"><a href="#5-8-通过Stream消息队列解决延迟队列持久化问题" class="headerlink" title="5.8 通过Stream消息队列解决延迟队列持久化问题"></a>5.8 通过Stream消息队列解决延迟队列持久化问题</h3><blockquote><p>需求：</p><p>①创建一个 Stream 类型的消息队列，名为 stream.orders</p><p>②修改之前的秒杀下单 Lua 脚本，在认定有抢购资格后，直接向 stream.orders 中添加消息，内容包含 voucherId、userId、orderId</p><p>③项目启动时，开启一个线程任务，尝试获取 stream.orders 中的消息，完成下单</p></blockquote><p>redis客户端命令行执行如下命令，创建消息队列以及消费者组</p><p>ps：MKSTREAM 在消息队列不存在时自动创建</p><pre class="line-numbers language-none"><code class="language-none">XGROUP CREATE stream.orders g1 0 MKSTREAM<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Lua脚本调整</strong></p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- 1.参数列表</span><span class="token comment">-- 1.1.优惠券 id</span><span class="token keyword">local</span> voucherId <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">-- 1.2.用户 id</span><span class="token keyword">local</span> userId <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">-- 1.3.订单 id</span><span class="token keyword">local</span> orderId <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">-- 2.数据 key</span><span class="token comment">-- 2.1.库存 key</span><span class="token keyword">local</span> stockKey <span class="token operator">=</span> <span class="token string">'seckill:stock:'</span> <span class="token operator">..</span> voucherId<span class="token comment">-- 2.2.订单 key</span><span class="token keyword">local</span> orderKey <span class="token operator">=</span> <span class="token string">'seckill:order:'</span> <span class="token operator">..</span> voucherId<span class="token keyword">local</span> stockKey_value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> stockKey<span class="token punctuation">)</span><span class="token comment">-- 3.脚本业务</span><span class="token comment">-- 3.1.判断库存是否充足 get stockKey</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tonumber</span><span class="token punctuation">(</span>stockKey_value<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token comment">-- 3.2.库存不足，返回 1</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">end</span><span class="token comment">-- 3.2.判断用户是否下单 SISMEMBER orderKey userId</span><span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'sismember'</span><span class="token punctuation">,</span> orderKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token comment">-- 3.3.存在，则说明该用户是重复下单（这是不允许的），则返回 2</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token keyword">end</span><span class="token comment">-- 3.4.扣库存 incrby stockKey -1</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'incrby'</span><span class="token punctuation">,</span> stockKey<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">-- 3.5.下单（保存用户） sadd orderKey userId</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'sadd'</span><span class="token punctuation">,</span> orderKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token comment">-- 3.6.发送消息到队列中：XADD stream.orders * k1 v1 k2 v2 ...</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'xadd'</span><span class="token punctuation">,</span> <span class="token string">'stream.orders'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'userId'</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> <span class="token string">'voucherId'</span><span class="token punctuation">,</span> voucherId<span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-点赞业务"><a href="#6-点赞业务" class="headerlink" title="6. 点赞业务"></a>6. 点赞业务</h2><blockquote><p>业务中需要达到排行榜的功能，先点赞的五名同学要显示在前面，因此可以选择使用Sorted Set数据结构，value的值存储点赞的userId，而score的值可以存储点赞的时间戳。</p></blockquote><p>在Mysql in语句中有一个小坑，例如 SELECT * FROM USER WHERE ID IN (5, 1)；</p><p>查询结果会是1在前，5在后，如果要强制将5在前1在后，可以使用<code>order by field</code> 语句，示例如下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> ID <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> FIELD<span class="token punctuation">(</span>ID<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>代码逻辑如下</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 根据博客id查询点赞排行榜 * @param id * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">queryBlogLikes</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> BLOG_LIKED_KEY <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token comment">//1.查询top5的点赞用户 zrange key 0 4</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> top5 <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>top5 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> top5<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//2.解析除其中的用户id</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> top5<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> idStr <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.根据用户id查询用户  将user处理为userDTO对象    where id (5 , 1)   order by field(id, 5, 1)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> userDTOS <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"order by field(id,"</span> <span class="token operator">+</span> idStr <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token class-name">UserDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.返回</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>userDTOS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-好友关注业务"><a href="#7-好友关注业务" class="headerlink" title="7. 好友关注业务"></a>7. 好友关注业务</h2><h3 id="7-1-关注与取关"><a href="#7-1-关注与取关" class="headerlink" title="7.1 关注与取关"></a>7.1 关注与取关</h3><p><strong>业务逻辑：</strong></p><blockquote><p>①关注用户功能的实现，根据前端传递的isFollow的值判断，用户是否已关注该博主，若未关注，传过来的是true，则有关注资格，new出follow对象，将userId和userFollowId都set到follow对象里，再将follow对象save到数据库表中</p><p>②查看博客详情页的另一个请求，判断用户是否关注了博主，根据ThreadLocal中获取的userId和传递过来的userFollowId查询count是否大于0，结果返回true或false</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token comment">//关注取关功能</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">follow</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userFollowId<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isFollow<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFollow<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Follow</span> follow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Follow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        follow<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        follow<span class="token punctuation">.</span><span class="token function">setFollowUserId</span><span class="token punctuation">(</span>userFollowId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">save</span><span class="token punctuation">(</span>follow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//取关，删除  delete from tb_follow where user_id = ? and follow_user_id = ?</span>        <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Follow</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"follow_user_id"</span><span class="token punctuation">,</span> userFollowId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span>  <span class="token comment">//用户是否关注了博主</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">isFolow</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userFollowId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//查询是否关注  select count(*) from tb_follow where user_id = ? and follow_user_id = ?</span>    <span class="token class-name">Integer</span> count <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"follow_user_id"</span><span class="token punctuation">,</span> userFollowId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-共同关注"><a href="#7-2-共同关注" class="headerlink" title="7.2 共同关注"></a>7.2 共同关注</h3><p><strong>业务逻辑：</strong></p><blockquote><p>①关注与取关操作同步存储在redis的set数据结构中</p><p>②通过指令，<code>SINTER</code> 获取两个set的交集部分</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">SINTER key [key ...]-- 举例key1 = {a,b,c,d}key2 = {c}key3 = {a,c,e}SINTER key1 key2 key3 = {c}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">followCommons</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> key1 <span class="token operator">=</span> FOLLOW_USER_ID <span class="token operator">+</span> userId<span class="token punctuation">;</span>  <span class="token comment">//当前登录用户的关注列表集合</span>    <span class="token class-name">String</span> key2 <span class="token operator">=</span> FOLLOW_USER_ID <span class="token operator">+</span> id<span class="token punctuation">;</span>  <span class="token comment">//点击查看的用户的关注列表集合</span>    <span class="token comment">//求交集</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> intersect <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intersect</span><span class="token punctuation">(</span>key1<span class="token punctuation">,</span> key2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>intersect <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> intersect<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//无交集</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//解析id集合</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> intersect<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//批量查询用户并转换为userDTO对象</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDTO</span><span class="token punctuation">&gt;</span></span> userDTOList <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">listByIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span>                    <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token class-name">UserDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>userDTOList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-关注推送（Feed）"><a href="#7-3-关注推送（Feed）" class="headerlink" title="7.3 关注推送（Feed）"></a>7.3 关注推送（Feed）</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713685487863.png" alt="Feed流模式"></p><blockquote><p>Feed 流产品有两种常见模式：</p><p>Timeline：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。</p><p>例如朋友圈</p><p>优点：信息全面，不会有缺失。并且实现也相对简单<br>缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低</p><p>智能排序：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户</p><p>例如抖音，快手</p><p>优点：投喂用户感兴趣信息，用户粘度很高，容易沉迷<br>缺点：如果算法不精准，可能起到反作用</p><p><strong>本例中的个人页面，是基于关注的好友来做 Feed 流，因此采用 Timeline 的模式。</strong></p></blockquote><h4 id="7-3-1-拉取模式（读扩散）"><a href="#7-3-1-拉取模式（读扩散）" class="headerlink" title="7.3.1 拉取模式（读扩散）"></a>7.3.1 拉取模式（读扩散）</h4><p>每次读的时候获取消息，内存消耗小，但读操作过于频繁，若用户关注了许多博主，一次要读的消息也是十分多，造成延迟较高</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/a492bd69a0c344edac54f38856c53f13.png" alt="拉取模式"></p><h4 id="7-3-2-推送模式（写扩散）"><a href="#7-3-2-推送模式（写扩散）" class="headerlink" title="7.3.2 推送模式（写扩散）"></a>7.3.2 推送模式（写扩散）</h4><p>发消息时写入粉丝收件箱，内存占用更高，写操作频繁，若博主有许多粉丝，写操作更加繁重</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713685593398.png" alt="写扩散"></p><h4 id="7-3-3-推拉结合模式（读写混合）"><a href="#7-3-3-推拉结合模式（读写混合）" class="headerlink" title="7.3.3 推拉结合模式（读写混合）"></a>7.3.3 推拉结合模式（读写混合）</h4><p>普通博主，粉丝少，可以采用推模式，写操作并不是很繁重</p><p>大v博主，粉丝多；分两种粉丝，活跃粉，普通粉；活跃粉，数量少，可以采用推模式；</p><p>​                                            普通粉，数量多，但上线查看少，采用拉模式，什么时候看什么时候拉取。</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/84049ddd45a94dddbde89fddeda0d2ba.png" alt="推拉结合"></p><h4 id="7-3-4-三种模式对比"><a href="#7-3-4-三种模式对比" class="headerlink" title="7.3.4 三种模式对比"></a>7.3.4 三种模式对比</h4><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/d6cc0c5ded2e4e5093aa6ea69e94bed0.png" alt="推、拉、推拉结合"></p><h4 id="7-3-5-Feed模式下的分页查询"><a href="#7-3-5-Feed模式下的分页查询" class="headerlink" title="7.3.5 Feed模式下的分页查询"></a>7.3.5 Feed模式下的分页查询</h4><blockquote><p>由于feed模式下，数据会实时进行新增，如果按照传统分页，会查询到重复的数据</p></blockquote><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/f3f8948f9ba34c9d960e4de50eaf92b8.png" alt="feed分页"></p><p><strong>滚动分页模式</strong></p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/9d8c420c31c8466d86ac410f48d5cbc8.png" alt="滚动分页模式"></p><blockquote><p>在redis中对收件箱内的博客进行分页时，常用的是ZRANGE命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ZRANGE key start stop [BYSCORE | BYLEX] [REV] [LIMIT offset count]   [WITHSCORES]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是很明显，如果新增了元素，会导致角标混乱问题，就会查询出重复的数据。</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713689260747.png" alt="普通分页出现了重复数据"></p></blockquote><p><strong>滚动分页</strong></p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713689404930.png" alt="现有元素"></p><p>通过zrevrangebysocre完成滚动排序</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">参数含义：max：分数最大值min：分数最小值WITHSCORES: 是否显示分数offset: 偏移量（匹配后跳过元素数量）count：显示条数ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>按照三条来分页，只查询分数最高的三条</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713689787807.png" alt="前三条"></p></li><li><p>新增两条元素</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713689819024.png" alt="新增两条元素"></p></li><li><p>滚动分页</p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713689998743.png" alt="滚动分页"></p></li></ol><blockquote><p>整体思路如下：</p><ol><li><p>第一次查询，不设置最大值，最小值为0，不设置偏移量，查询3条记录分别为</p><p>7/6/5</p></li><li><p>新增两条元素8/9，如果按照传统分页，这次应该查询角标为4 和 5的数据，即5,4,3存在数据重复问题，因此采用滚动分页</p></li><li><p>第二次查询，设置最大值（因为是倒序排序，所以上次查询的最小值，就是这次查询的最大值），不设置最小值，偏移量设置为1,（因为最大值是上次查询的最小值，<strong>已查询过，因此需要跳过最大值</strong>，还是同样的查询三条记录</p></li></ol><p>需要注意一点：<strong>offset的值不是固定为1，而是上一次查询的最小值的元素个数</strong></p></blockquote><p><strong>代码逻辑</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 滚动查询，展示博主推送的笔记， 新发布的滚动查询查不到，但是往上滚，前端做了处理，就是刷新重新查询，开始位置在当前最新位置 * @param max * @param offset * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">queryBlogOfFollow</span><span class="token punctuation">(</span><span class="token class-name">Long</span> max<span class="token punctuation">,</span> <span class="token class-name">Integer</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//获取当前用户</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//查询收件箱 ZREVRANGEBYSCORE key Max Min LIMIT offset count    limit是小于等于的意思，小于等于查询的最后时间戳</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"feed:"</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ZSetOperations<span class="token punctuation">.</span>TypedTuple</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> typedTuples <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">reverseRangeByScoreWithScores</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> max<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//非空判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>typedTuples <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> typedTuples<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//解析数据： blogId，minTime（时间戳）， offset</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>typedTuples<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> minTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//这个minTime是上次查询的最小时间戳，作为当次查询的最大时间戳来开始查</span>    <span class="token keyword">int</span> os <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ZSetOperations<span class="token punctuation">.</span>TypedTuple</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> typedTuple <span class="token operator">:</span> typedTuples<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取博客id转换为Long型并存入ids数组中</span>        ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>typedTuple<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取分数      判读得到最后一次的时间戳，以及偏移量</span>        <span class="token keyword">long</span> time <span class="token operator">=</span> typedTuple<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">==</span> minTime<span class="token punctuation">)</span><span class="token punctuation">{</span>            os<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            minTime <span class="token operator">=</span> time<span class="token punctuation">;</span>            os <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//根据id查询blog，先把前面保存id的ids数组转为字符串</span>    <span class="token class-name">String</span> idStr <span class="token operator">=</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//由于用mp提供的listByIds是用in方法查，不能保证顺序</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">&gt;</span></span> blogs <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"order by field(id,"</span> <span class="token operator">+</span> idStr <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Blog</span> blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//查询blog有关用户信息</span>        <span class="token function">queryBlogUser</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//查询blog是否已被点赞</span>        <span class="token function">isBlogLinked</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//封装并返回</span>    <span class="token class-name">ScrollResult</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScrollResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>blogs<span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">setOffset</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">setMinTime</span><span class="token punctuation">(</span>minTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-附近商户业务"><a href="#8-附近商户业务" class="headerlink" title="8. 附近商户业务"></a>8. 附近商户业务</h2><h3 id="8-1-Geo"><a href="#8-1-Geo" class="headerlink" title="8.1 Geo"></a>8.1 Geo</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/23985f4ad39142e4a27345f58bdc0624.png" alt="GEO基本使用"></p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713692228374.png" alt="半径内北京站距离"></p><h3 id="8-2-商户距离"><a href="#8-2-商户距离" class="headerlink" title="8.2 商户距离"></a>8.2 商户距离</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/87e3a309ed1542418d5bbd8f6b26aca7.png" alt="导入商户geo坐标"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">loadShopData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//查询店铺信息</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shop</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> shopService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把店铺分组，按照typeId分组，typeId一致的放到一个集合</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Shop</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Shop</span><span class="token operator">::</span><span class="token function">getTypeId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//分批完成写入Redis</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Shop</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取类型id</span>        <span class="token class-name">Long</span> typeId <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"shop:geo"</span> <span class="token operator">+</span> typeId<span class="token punctuation">;</span>        <span class="token comment">//获取同类型的店铺的集合</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shop</span><span class="token punctuation">&gt;</span></span> value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoLocation</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> locations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//写入redis  GEOADD key 经度 纬度 member</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Shop</span> shop <span class="token operator">:</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//stringRedisTemplate.opsForGeo().add(key, new Point(shop.getX(), shop.getY()), shop.getId().toString());</span>            locations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoLocation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>                    shop<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>shop<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>shop<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-签到业务"><a href="#9-签到业务" class="headerlink" title="9. 签到业务"></a>9. 签到业务</h2><p><strong>bitmap位图</strong></p><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713692659065.png" alt="通过位图存储签到信息"></p><p><strong>代码实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//获取登录用户</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取当前日期</span>    <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//拼接key</span>    <span class="token class-name">String</span> format <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">":yyyyMM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"sign:"</span><span class="token operator">+</span> userId <span class="token operator">+</span> format<span class="token punctuation">;</span>    <span class="token comment">//获取今天是本月的第几天</span>    <span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//写入redis select key offset 1</span>    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBit</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dayOfMonth <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true代表 1为签到，0为未签到</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>实现逻辑：</p><ol><li>计算key：key=sign + userId + yyyyMM</li><li>计算当前天代表的bit位（正好每个月31天，一共有31个比特位）</li><li>对应位设置为1，表示已签到</li></ol></blockquote><h3 id="9-1-签到统计"><a href="#9-1-签到统计" class="headerlink" title="9.1 签到统计"></a>9.1 签到统计</h3><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/3df03cb214374c448a9eecca8a96b0b3.png" alt="签到统计"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/** * 统计签到次数 * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">signCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//获取登录用户</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">UserHolder</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取当前日期</span>    <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//拼接key</span>    <span class="token class-name">String</span> format <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">":yyyyMM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"sign:"</span><span class="token operator">+</span> userId <span class="token operator">+</span> format<span class="token punctuation">;</span>    <span class="token comment">//获取今天是本月的第几天</span>    <span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取本月截至今天为止的所有签到记录，返回的是一个十进制的数字 BITFIELD sign：5：202203 GET u14 0</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bitField</span><span class="token punctuation">(</span>            key<span class="token punctuation">,</span>            <span class="token class-name">BitFieldSubCommands</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">BitFieldSubCommands<span class="token punctuation">.</span>BitFieldType</span><span class="token punctuation">.</span><span class="token function">unsigned</span><span class="token punctuation">(</span>dayOfMonth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//没有任何签到结果</span>        <span class="token keyword">return</span>  <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Long</span> num <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//循环遍历</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//让这个数字与1做与运算，得到数字的最后一个bit位   //判读这个bit位是否为0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//如果为0，说明未签到，结束</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//如果不为0，说明已签到，计数器加1</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//把数字右移一位，抛弃最后一个bit位，继续下一个bit位</span>        num <span class="token operator">&gt;&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-3-连续签到天数算法"><a href="#9-3-连续签到天数算法" class="headerlink" title="9.3 连续签到天数算法"></a>9.3 连续签到天数算法</h3><blockquote><p>计算当前一个月内，连续签到的最大天数</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongestContinuousSignIn</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">longestContinuousSignIn</span><span class="token punctuation">(</span><span class="token keyword">long</span> bitmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxContinuous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> currentContinuous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>bitmap <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bitmap <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                currentContinuous<span class="token operator">++</span><span class="token punctuation">;</span>                maxContinuous <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxContinuous<span class="token punctuation">,</span> currentContinuous<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                currentContinuous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bitmap <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 右移一位</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxContinuous<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 示例的位图，假设1表示签到，0表示未签到</span>        <span class="token keyword">long</span> bitmap <span class="token operator">=</span> <span class="token number">0b1110000111000001110000000111111L</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxContinuousSignIn <span class="token operator">=</span> <span class="token function">longestContinuousSignIn</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最长连续签到天数: "</span> <span class="token operator">+</span> maxContinuousSignIn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-UV统计"><a href="#10-UV统计" class="headerlink" title="10. UV统计"></a>10. UV统计</h2><p>Redis的HyperLogLog的统计功能</p><hr><p>UV：全称 Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1 天内同一个用户多次访问该网站，只记录1次。</p><p>PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录 1 次PV，用户多次打开页面，则记录多次PV。</p><p>往往用来衡量网站的流量。</p><hr><p>Hyperloglog（HLL）是从 Loglog 算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。</p><p>相关算法原理大家可以参考：<a href="https://juejin.cn/post/6844903785744056333#heading-0">https://juejin.cn/post/6844903785744056333#heading-0</a></p><p>Redis 中的 HLL 是基于 string 结构实现的，单个 HLL 的内存永远小于 16 kb，内存占用低，但相对的其测量结果是概率性的，有小于 0.81％ 的误差。不过对于 UV 统计的庞大数量来说，这完全可以忽略。</p><p>127.0.0.1:6379&gt; PFADD hl1 e1 e2 e3 e4 e5<br>(integer) 1<br>127.0.0.1:6379&gt; pfcount hl1<br>(integer) 5<br>127.0.0.1:6379&gt; PFADD hl1 e1 e2 e3 e4 e5<br>(integer) 0<br>127.0.0.1:6379&gt; pfcount hl1<br>(integer) 5</p><p><strong>由上可以看出，Hyperloglog天生就适合做UV统计，相同元素只能统计一次</strong></p><p>通过单元测试，向 HyperLogLog 中添加 100 万条数据，看看内存占用和统计效果如何</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        j <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>        values<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"user_"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 发送到 Redis</span>            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hl2"</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//  统计数量</span>    <span class="token class-name">Long</span> count <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token string">"hl2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count = "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：</p><p>HyperLogLog 的作用：做海量数据的统计工作</p><p>HyperLogLog 的优点：内存占用极低、性能非常好</p><p>HyperLogLog 的缺点：有一定的误差</p></blockquote><h2 id="11-Redis锁对比"><a href="#11-Redis锁对比" class="headerlink" title="11. Redis锁对比"></a>11. Redis锁对比</h2><p><img src="/2024/04/18/xiang-mu/hei-ma-dian-ping/1713609469752.png" alt="锁的对比"></p><p>参考文献：</p><p><a href="https://blog.csdn.net/giveupgivedown/article/details/128723748">黑马点评项目全部功能实现及详细笔记–Redis练手项目-CSDN博客</a></p><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元蜂WMS</title>
      <link href="/2024/04/17/xiang-mu/yuan-feng-wms/"/>
      <url>/2024/04/17/xiang-mu/yuan-feng-wms/</url>
      
        <content type="html"><![CDATA[<h1 id="元蜂WMS"><a href="#元蜂WMS" class="headerlink" title="元蜂WMS"></a>元蜂WMS</h1><p>项目原型地址： <a href="https://app.mockplus.cn/p/50CCEEmA7m?%E8%AF%B7%E6%9F%A5%E7%9C%8B%E3%80%8AWMS%E5%90%8E%E5%8F%B0%E3%80%8B">https://app.mockplus.cn/p/50CCEEmA7m?请查看《WMS后台》</a></p><h1 id="仓库-库区-库位"><a href="#仓库-库区-库位" class="headerlink" title="仓库-库区-库位"></a>仓库-库区-库位</h1><p><img src="/2024/04/17/xiang-mu/yuan-feng-wms/1713404964685.png" alt="1713404964685"></p><h1 id="库存盘点"><a href="#库存盘点" class="headerlink" title="库存盘点"></a>库存盘点</h1><p><img src="/2024/04/17/xiang-mu/yuan-feng-wms/u1.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wms波次策略</title>
      <link href="/2024/04/17/ye-wu/gong-ying-lian/wms-bo-ci-ce-lue/"/>
      <url>/2024/04/17/ye-wu/gong-ying-lian/wms-bo-ci-ce-lue/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个仓库的运营效率，最核心的部分是出库，如何有序的处理订单，高效的拣货，准确的复核，都是关键的步骤。尤其对于出库订单量比较大的企业，其中的出库的相关策略的设置变得尤为重要。其中波次策略，为效率的提升提供一个切实可行的办法。</p></blockquote><h1 id="什么是波次"><a href="#什么是波次" class="headerlink" title="什么是波次"></a>什么是波次</h1><p>波次是指对仓库集中性管理方法，通常是将多笔订单或者任务集中在一起处理和执行，以提高操作效率和资源利用率，通常在出库时应用最为广泛，也可用于补库、盘点等。</p><p>波次在拣货的场景中很重要，考虑一种极端情况，比如有100笔对A货物的出库需求，传统拣货可能采取摘果法，需要拣货100次，但是使用波次拣货后，可以将这100笔订单合并，形成一笔拣货单，只需要拣货一次，后序再通过播种法将其分发到各个包裹中，能极大的提升仓库拣货人员的作业效率。</p><h1 id="业务系统流程与对应单据"><a href="#业务系统流程与对应单据" class="headerlink" title="业务系统流程与对应单据"></a>业务系统流程与对应单据</h1><p><img src="/2024/04/17/ye-wu/gong-ying-lian/wms-bo-ci-ce-lue/1713322515015.png" alt="1713322515015"></p><h2 id="各业务流程具体规则策略应用场景"><a href="#各业务流程具体规则策略应用场景" class="headerlink" title="各业务流程具体规则策略应用场景"></a>各业务流程具体规则策略应用场景</h2><p><img src="/2024/04/17/ye-wu/gong-ying-lian/wms-bo-ci-ce-lue/1713322560660.png" alt="1713322560660"></p><blockquote><p>入库上架策略：多种上架策略可以单一配置，也可以按照一定优先级进行组合生效。当相关货物到达仓库后，WMS系统首先会判断货物所在仓库，然后基于商品分类，货主信息，然后按顺序执行货物的上架操作，以期最大程度满足业务的作业效率或者业务目标（比如库位利用率管控，库内作业时间最短）</p></blockquote><p>具体常见配置规则如下：</p><ol><li><strong>ABC原则</strong>：基于帕累托分析方法，可以按照销量金额或销售数量等特征，将商品进行品类划分为A（下单数量或金额多、流动快），C类（流通慢，价值低廉），B类介于两者中间。假设货架总共六层，基于人体工学特征，将货架定义为A区（取货容易），一般对应货架的3-4层；B区（取货比较容易），一般对应货架的2-5层；C区（取货比较困难），一般对应货架的1-6层。基于货架的分层取货特征，可以对应将ABC品类放置在对应的ABC区层位上。</li><li><strong>最短路径原则</strong>：假设系统内已经维护各个货位对应的通道，货架和XY坐标数据，可以计算得到上架到对应库位，预计需要的行走路径。一般结合商品库存周转率使用，库存周转率高的SKU，上架时，优先分配靠近进出口的货位；而库存周转率较低的SKU，上架时优先分配远离进出口的货位。</li><li><strong>产品属性原则</strong>（重量、体积、正常品、残损品等不同维度）：结合产品维护的档案信息，比如重物（单件重量超过一定数值），优先分配至容易搬运区域；泡货（体积大，重量小）可以选择分配至高位货架区域等，入库时正常品和残次品可以分配至对应不同的货区，用以做好仓库现场的质量把控。</li><li><strong>产品相对集中原则</strong>：属于同一种品类的产品，在仓库上架环节，优先分配至同一固定区域的对应货位，比如电子产品区、生鲜区、日用品区，用以针对不同的商品品类做好分区管理。</li><li><strong>包装规则</strong>：根据货物的包装形态（托盘，箱，散件）进行区分，将相同包装形态的商品，尽量放在相邻货位。</li><li><strong>订单类型规则</strong>（采购入库 调拨入库 生产入库 退货入库）：基于不同的入库订单类型，将商品上架到不同的库区，比如销退商品，由于质量状态待判定，一般不会直接存入存储区或者拣货区；调拨商品一般为整托商品，常常直接存入存储区，用以补货拆零出库时使用。一般订单类型规则，需要和其他上架策略规则组合使用，基于优先级控制生效顺序。</li><li><strong>库存合并规则</strong>：将相同供应商、相同产品、相同批次优先存储在同一货位或邻近货位。假设仓内允许商品一品多位，或一位多品，产品进入仓库后，优先检查固定仓位存储类型中的固定货位（或者历史已存入库存的货位）是否可用，若该库位已被占用或放满时，优先将产品存储到靠近分配到该产品的固定货位的预留存储区域（如靠近固定仓位的空仓）。</li></ol><p>综上，上架策略在配置环节，可以限定生效的货主、订单类型（采购订单、调拨订单、退货订单、库内订单等）、商品形态（良品、不良品）、指定区域。如果需要多种上架策略组合生效，也可以针对对应的上架策略设置对应的优先级。</p><blockquote><p>波次策略：订单进入WMS系统后，审单通过后，系统对订单进行数据结构分析，将订单按照一定的优先原则汇总分类，批量下发。</p><p>波次管理的目的主要是为了进行集约化拣货，而集约化拣货主要有以下两个主要优势：1） 提高拣货效率，减少拣货行走路线；2） 归类拣货，如相同客户的订单归类、相同出货方向的进行归类，降低拣货后的后续的理货二次分拣工作。</p></blockquote><p>具体常见配置规则如下：</p><ol><li><strong>定时规则</strong>：按照一个固定的时间周期（比如下单时间、期望到货时间等）将订单进行合并。</li><li><strong>路线规则</strong>：按照收货人所在的路线进行订单合并（对于同一条送货路线（或同一个收货地区）的货物，安排在一个波次分拣，且合并生成集货任务时也进行集货点的集中摆放，便于简化交接装车工作，缩短装车时间）。</li><li><strong>订单数量规则</strong>：每个波次合并的订单总量控制（比如，系统中下发100张订单，波次限制每次只能合并下发50张，此时至少会生成两个波次）。</li><li><strong>订单行数规则</strong>：每个波次合并的订单行总量控制。</li><li><strong>产品数量规则</strong>：每个波次合并的产品总量控制。</li><li><strong>产品重合率分析规则</strong>：在筛选订单时，按照产品在各个订单中出现的频次优化选择，以提高合并拣货的效率。</li><li><strong>包装筛选规则</strong>：波次筛选订单时，需要考虑包装的类型(件/箱/托盘）。</li></ol><p>基于上述规则的组合生效，波次策略可以在下述方面协助业务提升作业效率：缩短拣货路径，减少重复行走，作业面积减少，订单SKU集中度提高。</p><blockquote><p>分配策略：WMS系统可以将仓内的物理库区，划分为一个或多个不同的逻辑拣货作业区，也可以将多个物理库区合并为一个逻辑拣货作业区。此时在分配库存下发时，可以针对货主或者订单类型等条件，限制对应单据的库存分配指定逻辑库位类型（存储库位、缓存库位、拣货库位、差异库位等）、指定逻辑拣货区域，指定逻辑库位等。有的特殊场景下，允许通过分配规则设定是否允许订单部分分配的清空下，进行下发。</p></blockquote><p>具体常见配置规则如下：</p><ol><li><strong>指定逻辑库位类型</strong>：限制仅能获取存储库位、缓存库位、拣货库位、或差异库位等类型的库位上，获取可用库存。</li><li><strong>指定逻辑拣货区域</strong>：限制仅能在系统划定的对应逻辑拣货区域进行库存分配。</li><li><strong>指定逻辑库位</strong>：仅能在指定库位进行库存分配占用。</li></ol><p>综上，分配规则直接定义了拣货作业人员的作业范围（拣货库位、存储库位等），最终的拣货动线合理性将极大程度依赖于分配规则的设置逻辑。</p><blockquote><p>库存周转策略：通过系统分配库存的逻辑，实现对库内商品的库龄、库内库位的流通使用等具体业务指标的优化控制。</p></blockquote><p>具体常见配置规则如下：</p><ol><li><strong>先进先出</strong>：可以设定某个商品，在本仓库进出时必须遵循先进先出策略，这样每次出库，系统需要自动检查商品在库的批次，指定最先入库的批次作为本次出库的批次，并将对应的库位写入对应的出库任务中。</li><li><strong>先到期先出货</strong>：上架时必须采集对应商品的生效时间信息，优先指定生效结束时间靠前的产品出库。</li><li><strong>指定批次出货</strong>：指定某个或多个批次分配库存出库。</li><li><strong>库位利用率优先</strong>：优先清空货位上库存少的货位，再寻找库存多的货位。</li></ol><blockquote><p>拣货策略：波次下发后，拣货策略直接定义拣货单中商品的数量和拣货顺序，拣货数量，拣货方式等。直接影响拣货作业人员的拣货动线效率以及拣货时效等业务指标。相对复杂的应用场景下，还可以约定拣货动线（库位升序/降序）、约定分播方式（先拣后分、边拣变分等）、分区拣货、整散分离、路线分离（按收货路线）分离、下单平台分离、配送方式分离（快递、自营快递、上门自提等拆分）。</p><p>举例：系统中，一定时间段内流入20个客户的100张订单，满足一定的条件创建了波次后，分配库存成功后，需要基于拣货规则生成对应的拣货单据。若基于订单视角拆分时系统直接生成100张拣货单，若基于同客户订单混拣时，此时将按收货人（客户）拆分生成20张拣货单。</p></blockquote><p>具体常见配置规则如下：</p><ol><li><strong>定义拣货动线</strong>（库位升序/降序）：设定拣货动线后，拣货人员按照动线规则执行拣货。</li><li><strong>定义分播方式</strong>（先拣后分、边拣变分等）：一般订单中的商品重合度较高时，一般采用先拣后分方案，若订单中的商品种类多且重合度较低，若先拣后分，会造成二次分拣环节工作量爬升，此时一般采用边拣边分方案，将不同订单的商品放在移动笼车中的不同容器内。</li><li><strong>定义拣货单中包含的订单数量、商品数量、商品体积、重量上限</strong>等：相对好理解，不予以赘述。</li><li><strong>包装整散分离规则</strong>：整/零分开，非标准包装规则，需要前置维护商品档案中的包装数据，上架时标记本次入库的商品的包装形态，在生成拣货任务时，整托或者整箱可以优先派单给拥有叉车的作业人员，整件则分配给无作业工具的拣货人员。</li><li><strong>分区拣货（基于拣货库区围栏进行划分）</strong>：一般来说，拣货作业人员的作业范围并不是越大越好，拣货区域过大需要了解熟悉的商品特性越多，且行走路径过长也会拉长拣货时效，所以衍生了分区拣货设定规则，需要系统中前置将逻辑库位维护上对应的逻辑拣货区域（不一定和物理库区对应），控制作业范围和管控的产品范围。</li><li><strong>路线分离（按收货路线）</strong>：同一个收货路线上的订单，合并成一个拣货单，便于装车交接时，降低二次分拣的作业难度和处理时效。</li><li><strong>下单平台分离</strong>：相对好理解，不予以赘述。</li><li><strong>配送方式分离</strong>（快递、自营快递、上门自提等拆分）：不同配送方式的订单，拆分成不同的拣货单，对应分配到不同的集货点，便于后续控制发车时的交接难度。</li></ol><p>在上述几种常见的业务策略和规则的共同生效下，一般可以覆盖大部分电商行业的出入库的场景。</p><p>不过对于简易的WMS系统，在前期可以先按照一定写死的规则进行运转，然后在和业务磨合过程中，抓取其对不同作业环节的多策略的真实痛点诉求，没必要在前期0-1环节就全部拟定好，业务策略是锦上添花类型的系统功能，可徐徐图之。</p>]]></content>
      
      
      <categories>
          
          <category> WMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>债务与一体化系统融合</title>
      <link href="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/"/>
      <url>/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/</url>
      
        <content type="html"><![CDATA[<h1 id="债务与一体化系统融合"><a href="#债务与一体化系统融合" class="headerlink" title="债务与一体化系统融合"></a>债务与一体化系统融合</h1><h2 id="一、债务模块需融合"><a href="#一、债务模块需融合" class="headerlink" title="一、债务模块需融合"></a>一、债务模块需融合</h2><table><thead><tr><th>模块</th><th>内容</th><th>可能需要做的事情</th></tr></thead><tbody><tr><td>基础数据</td><td>融合包括<code>区划</code>、<code>单位</code>以及各种<code>下拉框</code>等信息</td><td><code>数据拉取</code></td></tr><tr><td>限额</td><td>限额<code>接收</code>（财政部）、限额<code>推送</code></td><td><code>数据推送</code></td></tr><tr><td>项目录入</td><td>项目编码生成（<code>拉取</code>）、项目<code>推送</code></td><td><code>数据拉取与推送</code></td></tr><tr><td>债券发行</td><td><code>上报</code>财政部、批复结果<code>接收</code></td><td><code>数据拉取与推送</code></td></tr><tr><td>收支、还本付息</td><td>如非税收入缴款通知推送，缴款通知回单接收、还本付息回单<code>接收</code>等</td><td><code>数据拉取与推送</code></td></tr><tr><td>……</td><td></td><td></td></tr></tbody></table><p>整体上来说，与一体化整合的很大一部分核心在于：</p><p><strong>数据同步，即<code>接收</code>其他一体化厂商的数据以及<code>推送</code>债务系统的数据到一体化</strong></p><blockquote><p>​    接收： 一体化 -&gt; 债务<br>​    推送：债务 -&gt; 一体化</p></blockquote><h2 id="二、数据交互现存模式"><a href="#二、数据交互现存模式" class="headerlink" title="二、数据交互现存模式"></a>二、数据交互现存模式</h2><ol><li><p>功能页面：如项目数据推送功能，通过点击<code>推送按钮</code>后，将数据进行推送。</p></li><li><p>数据同步组件：</p><p>平台组件数据同步配置，通过平台提供的<code>数据同步</code>组件，可以配置简单数据结构的<code>数据拉取入库</code>功能。</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669620920934.png" alt="简单数据入库"></p><blockquote><p>​    特点：适用于简单<code>表对表</code>的入库情况，数据行是<code>一对一</code>的。</p></blockquote></li><li><p>定时任务<code>手动入库</code>，适用于平台基础数据入库无法解决情况，可能需要代码对数据进行解析，并入库。</p><blockquote><p>​    例如项目绩效指标：一体化接口响应为树状结构，且字段名对应不上。需要代码将树状结构进行展开并调整字段名。<code>PerfTemplatePullServiceImpl</code></p></blockquote></li></ol><h2 id="三、个性化兼容"><a href="#三、个性化兼容" class="headerlink" title="三、个性化兼容"></a>三、个性化兼容</h2><p>债务标准版实现了一整套数据交互的标准方案，为了解决各地复杂多变的数据交互模式，债务模块采用以下方式实现个性化兼容：</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669623611797.png" alt="个性化兼容"></p><p>整体原则是：<strong>隔离变化与不变，封装变化</strong></p><blockquote><p>​    以推送为例：无论是前台功能推送，还是定时任务推送；不变点在于<code>数据推送</code>，变化点在于<code>数据推送的内容、数据推送的数据结构等</code>。</p><p>​    因此，整体而言目前存在两种途径去封装变化点：</p><ol><li>通过数据库视图封装（工作量最小）</li><li>通过个性化接口封装（工作量较大）</li></ol></blockquote><h3 id="3-1-视图封装变化点"><a href="#3-1-视图封装变化点" class="headerlink" title="3.1 视图封装变化点"></a>3.1 视图封装变化点</h3><p>某些数据推送场景中，如项目推送：</p><p>对于项目基本信息陕西省推送数据字段均为小写，而湖北省推送数据字段均为大写。并且陕西湖北存在部分字段差异。对于这种细微的差异，可以通过视图来封装变化点。</p><p>​    <code>视图封装变化点场景中：和代码强耦合的应该是不变的内容，通过不变的外部视图**GD_V_PRO_PUSH**封装内部视图来处理变化</code></p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669632503708.png" alt="外层视图"></p><pre class="line-numbers language-none"><code class="language-none"># 外部视图内部实际可能是create view GD_V_PRO_PUSH asSELECT * FROM GD_V_PRO_PUSH_AD42;# 也可能是create view GD_V_PRO_PUSH asSELECT * FROM GD_V_PRO_PUSH_AD61;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>处理查询条件</strong></p><p>在某些情况，可能与代码强耦合的外部视图需要加上查询条件，如上图<code>PRO_ID</code>。但是这个字段在不同的内部视图可能不是一致的：如42<code>PRO_CODE</code> 61<code>pro_code</code>。尽管仅仅只是大小写的区分，但是在代码中也可能报错。</p><p>​    因此选择采用<code>冗余查询字段</code>来处理这种情况。即：<code>在所有个性化内部视图中，均冗余**查询条件字段**</code>。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 举例说明，61均为小写字段的内部视图可能为</span><span class="token keyword">select</span> PRO_ID <span class="token keyword">as</span> C_PRO_ID<span class="token punctuation">,</span>   PRO_ID <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">`</span>pro_id<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-接口封装变化点"><a href="#3-2-接口封装变化点" class="headerlink" title="3.2 接口封装变化点"></a>3.2 接口封装变化点</h3><p>对于数据结构有较大差异无法通过视图封装实现的场景，可以通过个性化接口来封装这种变化。</p><p>可见个性化接口配置文件：<code>trunk/dsy-cloud-bgd/dsy-cloud-bgd-starter/src/main/resources/application-service.yml</code></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">yth-service</span><span class="token punctuation">:</span> <span class="token comment">#一体化接口服务</span>  <span class="token key atrule">token</span><span class="token punctuation">:</span> <span class="token comment">#token配置</span>    <span class="token key atrule">service-bean-name</span><span class="token punctuation">:</span> <span class="token string">'tokenCommonServiceImpl_AD61'</span> <span class="token comment">#token实现类配置</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span> <span class="token comment">#接口配置</span>    <span class="token comment">#项目信息推送接口</span>    <span class="token key atrule">pro_push</span><span class="token punctuation">:</span>      <span class="token key atrule">busi-type</span><span class="token punctuation">:</span> pro_push <span class="token comment">#业务类型。可不配置，不配置默认取代码中的（和DSY_T_YTH_INTERFACE表中busi_type必须对应） </span>      <span class="token key atrule">deploy-mode</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment">#部署模式。可不配置，不配置默认为0，0集中部署（默认），1分级部署</span>      <span class="token key atrule">field-name</span><span class="token punctuation">:</span> mofDivCode <span class="token comment">#分级部署根据字段分堆名称。当部署模式为1时，必须配置此项</span>      <span class="token key atrule">service-bean-name</span><span class="token punctuation">:</span> <span class="token string">'proSendServiceImpl_AD61'</span> <span class="token comment">#service层实现类名称。可不配置，当有多个实现类时必须配置，与ConditionalOnProperty注解一起使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    以上配置片段为<code>项目推送</code>，核心需要关注<code>service-bean-name</code>配置，通过该配置项的值，结合注解<code>ConditionalOnproperty</code>注解，能够保证在代码环境中，只加载一个<code>ProSendService</code>接口的实现类，且该类为该配置文件中的<code>bean</code></p></blockquote><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669634135204.png" alt="实际接口"></p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669634099189.png" alt="个性化实现类"></p><p>通过注解结合配置，只会加载独一个的<code>ProSendService</code>接口的实现类。对于个性化开发，可以通过CV标准实现类再自定义实现类的方式实现。能够解决视图无法封装的场景。</p><h3 id="3-3-开发原则"><a href="#3-3-开发原则" class="headerlink" title="3.3 开发原则"></a>3.3 开发原则</h3><p>​    优先使用视图开发个性化内容，如果视图不能满足，再考虑通过个性化接口实现类的方式去实现。</p><blockquote><p>​    整体而言，所有的这种推送/拉取接口底层数据库视图都是只与<code>外层视图</code>存在耦合，因此个性化需求优先求证能否通过替换<code>外层视图</code>实现。</p><p>​    如果数据结构上有较大差异，不能够通过外部视图来实现，再考虑去通过<code>个性化接口</code>实现。在开发个性化接口时，可以先将现有的标准版或其他省市个性化版本<code>CV</code>过来，求同存异，可能工作量要小很多。</p><p>​    主要的工作量应该存在于：找字段、对字段、测字段阶段。</p></blockquote><h3 id="3-4-配置项解释"><a href="#3-4-配置项解释" class="headerlink" title="3.4 配置项解释"></a>3.4 配置项解释</h3><p>​    个性化接口配置文件：<code>application-service.yml</code>存在很多配置项，现逐一对其进行解释：</p><ol><li><p><code>token</code>: 数据推送或拉取获取token的实现类</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669635133010.png" alt="token"></p></li><li><p><code>busi-type</code>：业务类型</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669635277865.png" alt="busi-type"></p><blockquote><p>​    数据推送时，基于该字段配置的内容，查询<code>DSY_T_YTH_INTERFACE</code>表中，该业务推送的接口类型（包括HTTP或者WebService等）、请求方式、接口地址等等信息。</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669635514960.png" alt="busi-type"></p></blockquote></li><li><p><code>deploy-mode</code>与<code>field-name</code>：推送模式以及分堆字段</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669635707454.png" alt="分堆"></p><blockquote><p>​    在推送模式为<code>1</code>，且配置了分堆字段<code>field-name</code>时；在推送时会对数据进行分组推送，避免对方接口扛不住压力或数据包过大请求超时。</p></blockquote></li><li><p><code>service-bean-name</code>：个性化接口具体实现类<code>bean名称</code></p></li><li><p><code>token</code>：是否需要传递token</p><p><img src="/2022/12/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-yu-yi-ti-hua-xi-tong-rong-he/%E5%80%BA%E5%8A%A1%E4%B8%8E%E4%B8%80%E4%BD%93%E5%8C%96%E8%9E%8D%E5%90%88%5C1669636091973.png" alt="1669636091973"></p></li><li><p><code>token-tag</code>：传递token时token的key是什么</p></li><li><p><code>page-config</code>：数据拉取时，分页拉取配置</p></li></ol><h2 id="四、接口列表"><a href="#四、接口列表" class="headerlink" title="四、接口列表"></a>四、接口列表</h2><table><thead><tr><th><strong>业务域</strong></th><th><strong>接口名称</strong></th><th><strong>数据需求方</strong></th><th><strong>数据提供方</strong></th><th><strong>数据内容</strong></th><th><strong>接口服务地址</strong></th><th><strong>接口业务类型</strong></th></tr></thead><tbody><tr><td><strong>基础数据</strong></td><td>债务限额接收接口</td><td>预算一体化系统</td><td>债务系统</td><td>债务限额信息</td><td>–</td><td>limit_push</td></tr><tr><td></td><td>资产卡片查询接口</td><td>债务系统</td><td>预算一体化系统</td><td>债务资产卡片信息</td><td>–</td><td>asset_pull</td></tr><tr><td></td><td>绩效指标查询接口</td><td>债务系统</td><td>预算一体化系统</td><td>绩效指标信息</td><td>–</td><td>perf_temp_pull</td></tr><tr><td><strong>项目库</strong></td><td>项目编码生成接口</td><td>债务系统</td><td>预算一体化系统</td><td>项目编码信息</td><td>–</td><td>pro_code_pull</td></tr><tr><td></td><td>项目入库接口</td><td>预算一体化系统</td><td>债务系统</td><td>项目入库信息</td><td>–</td><td>pro_push</td></tr><tr><td></td><td>项目绩效信息查询接口</td><td>债务系统</td><td>预算一体化系统</td><td>项目绩效信息</td><td>–</td><td>perf_pull</td></tr><tr><td></td><td>项目查询接口</td><td>债务系统</td><td>预算一体化系统</td><td>所有债务相关项目，包括债务还本、付息、手续费项目、转贷项目</td><td>–</td><td>pro_pull</td></tr><tr><td><strong>预算调整调剂</strong></td><td>债券发行计划接收接口</td><td>预算一体化系统</td><td>债务系统</td><td>债券项目发行计划信息</td><td>–</td><td>bond_pro_budget_push</td></tr><tr><td></td><td>债务资金相关预算指标信息查询接口</td><td>债务系统</td><td>预算一体化系统</td><td>预算指标信息</td><td>–</td><td>budget_pull</td></tr><tr><td></td><td>支付申请单据接收接口</td><td>预算一体化系统</td><td>债务系统</td><td>债券还本付息、手续费支付申请信息</td><td>–</td><td>bond_payment_push</td></tr><tr><td></td><td>支付结果查询接口</td><td>债务系统</td><td>预算一体化系统</td><td>支付结果信息，包括新增债券支付、还本付息、手续费</td><td>–</td><td>bond_payment_pull</td></tr><tr><td><strong>非税衔接</strong></td><td>非税缴款通知单生成接口</td><td>非税系统</td><td>债务系统</td><td>非税收缴通知书</td><td>–</td><td>nontax_push</td></tr><tr><td></td><td>非税缴款情况查询接口</td><td>债务系统</td><td>非税系统</td><td>非税缴款情况</td><td>–</td><td>nontax_pull</td></tr><tr><td><strong>汇总库数据</strong></td><td>汇总数据推送接口</td><td>预算一体化系统</td><td>债务系统</td><td>需上传财政部的债务相关数据表数据</td><td>–</td><td>table_push</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 地方政府债务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web容器之tomcat/jetty</title>
      <link href="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/"/>
      <url>/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/</url>
      
        <content type="html"><![CDATA[<h1 id="web容器之tomcat-x2F-jetty"><a href="#web容器之tomcat-x2F-jetty" class="headerlink" title="web容器之tomcat/jetty"></a>web容器之tomcat/jetty</h1><h2 id="1-web容器始末"><a href="#1-web容器始末" class="headerlink" title="1. web容器始末"></a>1. web容器始末</h2><ol><li>早期web应用主要是静态页面，HTTP服务器（如Apache、Nginx）负责返回静态HTML，浏览器负责解析HTML。</li><li>由于<code>早期web</code>无法与服务器进行交互，因此SUN公司推出Servlet技术（运行在服务端的Java小程序），Servlet无Main方法，只能运行在Web容器之中。</li></ol><p>Tomcat/Jetty本质上就是一个<code>web容器</code></p><blockquote><p>​    其他应用服务器包括：JBOSS或者WebLogic，不仅仅拥有Servlet功能，也包括EJB容器，是完整的Java EE应用服务器。</p><p>​    从这个角度来看，Tomcat/jetty是一个轻量级的应用服务器。</p></blockquote><p>EJB:  是基于分布式事务处理的企业级应用程序的组件。Sun公司发布的文档中对EJB的定义是：EJB是用于开发和部署多层结构的、<code>分布式的</code>、面向对象的Java应用系统的<code>跨平台</code>的构件体系结构。</p><h2 id="2-HTTP协议"><a href="#2-HTTP协议" class="headerlink" title="2. HTTP协议"></a>2. HTTP协议</h2><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667283420936.png" alt="通信流程"></p><p>HTTP: 约定了客户端（浏览器）与服务器端通信的格式。</p><p><strong>请求与响应</strong></p><p>​    Web服务器的核心工作便是：接收连接、解析请求、处理请求和发送响应四步，在此之上，并发能力是服务器的核心。</p><p><strong>请求数据包</strong></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667283628840.png" alt="请求包"></p><p><strong>响应数据包</strong></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667283646527.png" alt="响应包"></p><blockquote><p>​    Web服务器（Tomcat）将HTTP请求数据包封装为一个<code>Request</code>对象，将Request对象交给Web应用处理，并将处理结果封装为一个<code>Response</code>对象。</p></blockquote><p><strong>Cookie和Session</strong></p><ol><li><p>为什么需要？：<code>HTTP无状态</code>，并不知道当前访问浏览器的是谁。例如：你正在访问购物车，并添加了几件商品，正准备付款，不小心刷新了一下页面，由于HTTP无状态，服务器并不知道你是谁，因此也无法找到你刚才添加的商品。</p></li><li><p>是什么？：</p><ul><li><p>cookie： cookie是HTTP的一个请求头，存储在浏览器端，每次发送请求给服务器时，会携带上cookie信息。可以用于存储信息。</p></li><li><p>session：<code>cookie以明文存储，且存储在浏览器端（用户端）因此相当不安全</code>，session存储在<code>服务器端</code>。用户信息不在存储在cookie中，而是存储在session中。通过在cookie中设置<code>Session ID字段</code>，标注服务器中对应的Session，便可以标注当前访问用户的真实身份。</p><p>优点包括：安全，节省网络流量</p></li><li><p>Tomcat Session管理器支持多种持久化方案存储session，包括redis集群，同时通过后台轮询线程定时删除过期session。</p></li></ul></li></ol><p>HTTP1.1基于1.0升级了长连接，通过配置：Connection：keep-alive。（未配置每次发送都会建立新的连接，重复三次握手）</p><h2 id="3-Servlet规范"><a href="#3-Servlet规范" class="headerlink" title="3. Servlet规范"></a>3. Servlet规范</h2><p>两个问题：</p><ol><li><p>HTTP服务器接收到请求，如何知道调用哪个类哪个方法来处理？</p></li><li><p>HTTP服务器如何知道哪个Servlet来处理。</p><blockquote><p>​    要回答第二个问题，先得回答第一个问题。</p><p>​    显而易见，HTPP发送请求时，会携带请求资源路径，那么HTTP服务器收到请求资源路径后，怎么找到对应能够处理的类以及方法呢？通过if-else嘛，虽然可行，但是服务器和业务逻辑完全耦合了，因此不满足。</p><p>​    解决方法便是：<code>通过定义Servlet接口，让所有能处理业务逻辑的类都实现Servlet接口，需要调用资源便调用Servlet接口实现类</code></p><p>​    </p><p>​    针对第二个问题，本质上是如何找到能处理该资源请求的Servlet接口，这个是<code>Servlet容器完成的</code></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667286186824.png" alt="资源请求与接口调用"></p></blockquote></li></ol><p><strong>Servlet规范：</strong>以上这一套业务处理Servlet实现类以及Servlet容器便是Servlet规范。</p><p>帮助开发人员更关心如何实现业务逻辑，而不需要了解其中的细节。</p><p><strong>Servlet接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span>    <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> var1<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心方法便是service，用于处理业务逻辑</p><p><strong>Servlet抽象类</strong></p><p>GenericServlet</p><p><strong>Servlet容器</strong></p><blockquote><p>​    Servlet容器收到请求后，负责调用对应的Servlet，若Servlet并未加载，则会基于<code>web.xml</code>配置文件加载对应的Servlet，加载完毕后，会将其放置在<code>ServletContext</code>全局环境之中。</p></blockquote><p><strong>拓展机制</strong></p><ul><li>Filter：请求进入时，会调用filter，并通过多个filter组成filter chain，串行调用filter</li><li>Listener：监听如web应用启停、用户请求到达等</li></ul><p><strong>容器之间的关系</strong></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/20190503213508577.png" alt="servlet容器、spring容器、springmvc容器"></p><p>web容器中有servlet容器，spring项目部署后存在spring容器。其中spring控制service层和dao层的bean对象以及controller层bean对象。servlet容器控制servlet对象。项目启动时，首先 servlet初始化，初始化过程中通过web.xml中spring的配置加载spring配置，初始化spring容器。待容器加载完成。servlet初始化完成，则完成启动。springmvc是viewAndModie的请求传递和结果解析。本身并没有容器管理，都是交给spring管理。<br>HTTP请求到达web容器后，会到达Servlet容器，容器通过分发器分发到具体的spring的Controller层。执行业务操作后返回结果。</p><p><strong>核心类</strong></p><p>Servlet接口、GenericServlet抽象类、HttpServlet</p><h2 id="4-手写Servlet"><a href="#4-手写Servlet" class="headerlink" title="4. 手写Servlet"></a>4. 手写Servlet</h2><blockquote><p>​    日常开发中我们可能都习惯与使用spring 以及 spring mvc等框架完成web开发，本章便使用纯手写继承HttpServlet的方式完成Web应用。</p></blockquote><p>开发步骤：</p><ol><li><p>下载并安装Tomcat（<a href="https://mirrors.cnnic.cn/apache/tomcat/tomcat-8/v8.5.83/bin/%EF%BC%89">https://mirrors.cnnic.cn/apache/tomcat/tomcat-8/v8.5.83/bin/）</a></p></li><li><p>写Servlet</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloTomcat</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//设置流的默认编码 ISO-8859-1 设置为GDK</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//告诉浏览器, 服务器发送的消息体数据的编码. 建议浏览器使用该编码解码</span>        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1. 获取字符输出流</span>        <span class="token class-name">PrintWriter</span> pw <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 输出数据</span>        pw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;hello tomcat&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编译java文件（需要用到tomcat lib目录下的servlet-api.jar jar包）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">javac <span class="token operator">-</span>cp <span class="token punctuation">.</span>/servlet<span class="token operator">-</span>api<span class="token punctuation">.</span>jar <span class="token class-name">HelloTomcat</span><span class="token punctuation">.</span>java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>建立Web应用目录</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667292247696.png" alt="web应用目录"></p></li><li><p>编写web.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee                http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>helloTomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>HelloTomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>helloTomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整文件讲解：<a href="https://www.cnblogs.com/mytJava/p/13143449.html">https://www.cnblogs.com/mytJava/p/13143449.html</a></p></li><li><p>拷贝完整项目（4中图示MyWebApp）到tomcat webapps下</p></li><li><p>启动tomcat（./bin/startup.sh)</p></li><li><p>访问资源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:8080/MyWebApp/hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>疑问：Servlet和HttpServlet什么关系，难道可以支持除Http之外的协议吗？</p><p>解答：Tomcat支持HTTP/1.1、AJP（用于和web服务器集成如nginx）、HTTP/2.0等。（<a href="https://www.cnblogs.com/alimayun/p/10604532.html%EF%BC%89">https://www.cnblogs.com/alimayun/p/10604532.html）</a></p><p><strong>基于注解配置Servlet</strong></p><ol><li>删除上面配置的<code>web.xml</code>文件</li><li>使用注解<code>@WebServlet（【urlMapping】）</code></li></ol><p><strong>tomcat日志</strong></p><ul><li><code>catalina.*.out</code>: tomcat启动日志，启动过程中的配置错误都会在这里。</li><li><code>localhost.*.out</code>: web在初始化过程中未处理的异常。</li><li><code>localhost_access_log.*.out</code>: 请求日志，包括IP、请求路径、时间、请求协议、状态码等。</li><li><code>manager.*.log</code>：存放tomcat自带的manager日志。</li></ul><h2 id="5-系统架构之连接器"><a href="#5-系统架构之连接器" class="headerlink" title="5. 系统架构之连接器"></a>5. 系统架构之连接器</h2><p><strong>Tomcat核心功能</strong>：</p><ol><li>处理socket连接，负责网络字节流Request和Response对象的转化。（<code>连接器</code>）</li><li>加载和管理Servlet，以及具体的Request请求。（<code>容器</code>）</li></ol><p><strong>Tomcat支持的I/O模型</strong>：</p><ol><li>NIO：非阻塞I/O，采用Java NIO类库实现</li><li>NIO.2：异步I/O，采用JDK7最新NIO.2类库实现</li><li>APR：采用Apache可移植运行库实现，是C/C++编写的本地库</li></ol><p><strong>Tomcat支持的应用层协议</strong>：</p><ol><li><p>HTTP/1.1：目前大部分的Web应用使用的协议</p></li><li><p>AJP：用于和Web服务器如Apache、Nginx集成</p></li><li><p>HTTP/2.0：HTTP2.0相较于1.0大幅度提升了性能</p><blockquote><p>​    什么是Web服务器，和Tomcat有什么区别。一直说Apache和Nginx是Web服务器，其实Web服务器即静态资源服务器，而Tomcat是Java服务器，支持JSP以及Servlet。</p><p>​    <strong>Apache</strong>：</p><p>​    1、主要用于解析静态文本，并发性能高，侧重于HTTP服务；</p><p>​    2、支持静态页（HTML），不支持动态请求如：CGI、Servlet/JSP、PHP、ASP等；</p><p>​    3、具有很强的可扩展性，可以通过插件支持PHP，还可以单向Apache连接Tomcat实现连通；</p><p>​    4、Apache是世界使用排名第一的Web服务器。</p><p>​    <strong>Tomcat</strong>：</p><p>​    特性：免费的Java应用服务器</p><p>​    1、主要用于解析JSP/Servlet，侧重于Servlet引擎；</p><p>​    2、支持静态页，但效率没有Apache高；支持Servlet、JSP请求；</p><p>​    3、Tomcat本身也内置了一个HTTP服务器用于支持静态内容，可以通过Tomcat的配置管理工具实现与Apache整合。</p><p>​    两者整合后优点：如果请求是静态网页则由Apache处理，并将结果返回；如果是动态请求，Apache会将解析工作转发给Tomcat处理，Tomcat处理后将结果通过Apache返回。这样可以达到分工合作，实现负载远衡，提高系统的性能。</p></blockquote></li></ol><p><strong>Tomcat、Service、连接器、容器</strong></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667353115418.png" alt="tomcat组件关系"></p><ul><li><p>tomcat中包含多个service。（service只是对连接器以及容器的封装，每个service独占端口，可以理解为一个service对应一个web应用）</p></li><li><p>一个service中包含一个容器和多个连接器，连接器与容器之间使用标准ServletRequest以及ServletResponse通信。（多个连接器是为了适配多种网络协议以及I/O模型的搭配）</p><blockquote><p>​    连接器核心工作：</p><p>​        对Servlet容器屏蔽协议以及I/O模型的差异，无论是HTTP还是AJP，在容器中获取的都是标准的ServletRequest对象。</p><p>​    细化：</p><ol><li>监听网络端口</li><li>接收网络请求</li><li>读取网络字节流</li><li>根据具体的网络协议解析字节流（HTTP/AJP），并封装为统一的Tomat Request对象</li><li>将Tomcat Request对象转换为标准的ServletRequest</li><li>调用Servlet容器业务接口，得到Servlet Response</li><li>将Servlet Response转换为Tomcat Response对象</li><li>将Tomcat Response转换为网络字节流</li><li>将响应字节流写回给浏览器端</li></ol></blockquote></li></ul><p><strong>连接器核心功能</strong></p><ol><li>网络通信</li><li>应用层协议解析</li><li>Tomcat Request/Response 与 Servlet Request/Response的转化</li></ol><p>因此Tomcat设计了三个组件（<code>接口</code>）来实现这三个功能：Endpoint、Processor、Adapter</p><ul><li><p><code>Endpoint</code>：负责网络通信，将接受到的请求字节流提供给<code>Processor</code></p></li><li><p><code>Processor</code>：负责解析<code>Endpoint</code>传送的字节流，并将其封装为<code>Tomcat Request</code>对象给<code>Adapter</code></p></li><li><p><code>Adapter</code>：负责解析<code>Processor</code>传送的<code>Tomcat Request</code>对象，并封装为<code>Servlet request</code>提供给<code>容器</code></p><blockquote><p>​    分别需要考虑的变化点包括：</p><ol><li>Endpoint： 需要支持不同的I/O模型，包括<code>NIO、NIO.2、APR</code></li><li>Processor：需要支持解析不同的<code>网络协议</code>，并基于协议将字节流封装为<code>Tomcat Request</code>对象，协议包括：<code>HTTP1.1、HTTP2.0、JAP</code></li></ol></blockquote></li></ul><p>如果需要实现<code>NIO Endpoint</code>，则只需要实现接口<code>Endpoint</code>，其他同理。若以后出现了I/O模型或者网络协议，只需要新的实现即可。</p><p><strong>适配Endpoint和Processor的多种组合</strong></p><p>​    前面提到，Endpoint以及Processor接口需要适配多种I/O模型或者网络协议，因此为了任意搭配Endpoint以及Processor，Tomcat设计者使用了ProtocalHandler接口用来组合Endpoint以及Processor。例如：<code>HTTP11NioProtocal</code>和<code>AJPNioProtocal</code></p><p>​    除了这些变化点（Endpoint以及Processor），系统中也存在一些相对稳定的部分，因此使用抽象类用来封装稳定的部分。整体类图如下：</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667356824430.png" alt="Protocal类图"></p><p><strong>连接器整体架构</strong></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667357524300.png" alt="连接器架构"></p><p><strong>ProtocolHandler组件</strong></p><ol><li><p>Endpoint</p><blockquote><p>​    功能：实现TCP/IP协议，Socket接收和发送处理器</p><p>​    继承关系：Endpoint（接口）-&gt; AbstractEndpoint（抽象类）-&gt; NioEndpoint等（实现类）</p><p>​    子组件：</p><ul><li>Acceptor：监听Socket请求</li><li>SocketProcessor：处理接受到的Socket请求（实现了Runnable接口）</li></ul></blockquote></li><li><p>Processor</p><blockquote><p>​    功能：实现HTTP协议，负责转换Socket字节流为Tomcat Request对象，通过Adapter交给容器进行处理</p><p>​    继承关系：Processor（接口）-&gt; AbstractProcessor（抽象类）-&gt; HTTP11Processor(实现类)</p></blockquote></li></ol><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667463275286.png" alt="连接器组件图"></p><p><strong>Adapter</strong></p><p>Adapter组件核心功能是将Processor传输过来的Tomcat Request对象，转换为Servlet Request对象，并交给容器。（<code>设计模式：适配器模式</code>）</p><p>具体实现是：<code>CoyoteAdater</code></p><p><strong>架构设计原则</strong></p><p><code>根据高内聚、低耦合原则确定子模块，找出模块中的变化点和不变点，用接口封装变化点（子类实现自己的）、抽象类定义模板方法实现变化点。</code></p><h2 id="6-系统架构之容器"><a href="#6-系统架构之容器" class="headerlink" title="6. 系统架构之容器"></a>6. 系统架构之容器</h2><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667465739525.png" alt="容器层级关系"></p><blockquote><p>​    tomcat设计了四层容器，彼此之间是<code>包含关系</code>。</p><ul><li>Wrapper：Servlet接口（写的Controller接口）</li><li>Context：一个Web应用程序（webapps模块下一个应用）</li><li>Host：一个虚拟主机或一个站点</li><li>Engine：引擎</li></ul><p>其中Host以及Engine的概念比较陌生，一个Tomcat容器只存在一个Engine引擎，而一个Engine引擎存在多个Host虚拟主机</p></blockquote><p>tomcat配置文件server.xml</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667466252039.png" alt="server.xml"></p><p><strong>容器管理</strong></p><p>Tomcat中存在四层容器，容器之间有着明显的父子关系，通过组合模式，以及父子节点的设计，并抽象统一接口，能够一致看待外层容器（父容器）和内层容器（子容器）。容器接口如下：</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667467503397.png" alt="容器接口"></p><p><strong>资源映射</strong></p><p>上文提到，一个Tomcat Engine包含多个Host<code>（IP+端口 - 域名）</code>，一个Host包含多个Context<code>（web应用）</code>，一个Context包含多个Wrapper<code>（Servlet）</code></p><p>这些是一个树状的层级结构，Tomcat提供了<code>Mapper</code>组件来保存这些映射关系（Map）。</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667468212754.png" alt="Mapper"></p><p><strong>资源定位步骤</strong></p><ol><li><p>根据协议和端口号选择Service和Engine</p><blockquote><p>Service中存在一个Connector和一个Engine，每个连接器监听的端口号都不一致。如HTTP连接器默认监听8080端口，而AJP连接器默认监听8009端口。因此协议和端口已经确定好了Service，而Service确定好了也就确定好了Engine。</p></blockquote></li><li><p>根据域名选择Host</p></li><li><p>根据URL选择Context以及Wrapper</p></li></ol><p><strong>Pipeline - Value</strong></p><p>请求的处理有一定的顺序，如从Connector -&gt; Engine -&gt; Host -&gt; Context -&gt; Wrapper</p><p>而容器之间又是分层的，因此这一系列的处理需要通过一个<code>链路串起来</code>，Tomcat使用到了<code>责任链模式</code></p><p><code>Value</code>表示其中一个处理节点，<code>Pipeline</code>负责将多个<code>Value</code>节点串起来。</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667470030847.png" alt="value"></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667470041619.png" alt="Pipeline"></p><p>跨容器的链条通过Basic串通</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667470086082.png" alt="pipeline - value调用关系"></p><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667476837683.png" alt="架构"></p><p>其中红色箭头虚线表示请求在Tomcat中流转的过程。</p><h2 id="7-一键式启停"><a href="#7-一键式启停" class="headerlink" title="7. 一键式启停"></a>7. 一键式启停</h2><p>上图整体架构静态的描述了组件之间的关系，一个完整的系统需要创建并组装这些组件；在服务停止的时候，还需要关闭并停止这些组件。这是一个动态的过程。而如何优雅的管理组件的创建、初始化、启动、停止和销毁？是我们需要思考的问题。</p><p>从静态结构图分析来看，有两点：</p><ol><li>组件之间有大有小，大的组件管理小的组件，比如Server管理Servise，Service又管理连接器和容器。</li><li>组件有内有外，外层组件控制内层组件，比如连接器是外层组件，外层组件调用内层组件完成业务功能。也就是说，<strong>请求的处理过程是由外层组件来驱动的</strong></li></ol><p>根据这两个特点来总结，决定了系统再创建组件时需要遵循一定的原则：</p><ol><li>原则1：先创建子组件，再创建父组件。子组件需要被注入到父组件当中。</li><li>原则2：先创建内层组件，再创建外层组件，内层组件需要被注入到外层组件当中。</li></ol><p><strong>尝试1：按照先小再大，先内再外顺序创建</strong><br>    很直观的做法就是按照小-&gt;大，内-&gt;外的顺序原则创建组件，但是这样处理会导致代码逻辑的混乱，也容易造成组件的遗漏，因此不太合适。</p><p><strong>一键式启停：Lifecycle</strong></p><p><code>设计的原则便在于：找到系统的变化点和不变点。这里的不变点便是：每个组件都要经历创建、初始化和启动这几个过程，变化的是初始化做的具体的事情不一样</code></p><p>因此，可以抽象出一个接口，用于声明这些不变的点</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667479316839.png" alt="Lifecycle"></p><p>理所当然，在父组件中调用 init方法，子组件中也会执行。其他同理，我们可以调用最顶层组件的接口，来启动完整的所有的组件。</p><p><strong>可拓展的LifeCycle</strong></p><p>上面说到父组件的LifeCycle API被执行，子组件的也会被执行。那如果我们想要拓展子组件方法的内容呢，是不是可能得改动现有的组件API。因此，<code>上述说明的父组件调用init方法，子组件也会执行，并不是父组件调用子组件，而是通过设计模式：观察者模式，给子组件注册监听器，自动调用子组件的API</code></p><p><strong>可重用的LifeCycleBase</strong></p><p>LifeCycleBase抽象类抽象了一些公共的逻辑，包括初始化、启动、停止以及销毁。LifeCycleBase实现了LifeCycle接口，并抽象了一些共用方法，这边是典型的<code>设计模式：模板方法模式</code></p><p>示例（LifeCycleBase）：</p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667479753752.png" alt="init监听器的触发"></p><p><strong>何时注册监听器</strong></p><p>分为两种情况：</p><ul><li><p>Tomcat 自定义了一些监听器，这些监听器是父组件在创建子组件的过程中注册到子组件的。比如 MemoryLeakTrackingListener 监听器，用来检测 Context 容器中的内存泄漏，这个监听器是 Host 容器在创建 Context 容器时注册到 Context 中的。</p></li><li><p>我们还可以在server.xml中定义自己的监听器，Tomcat 在启动时会解析server.xml，创建监听器并注册到容器组件。生周期管理总体类图</p></li></ul><p><strong>类图</strong></p><p><img src="/2022/11/01/java/kuang-jia/web-rong-qi-zhi-tomcat-jetty/1667479900598.png" alt="类图"></p><h2 id="可参考文章"><a href="#可参考文章" class="headerlink" title="可参考文章"></a>可参考文章</h2><ol><li>Tomcat源码分析：<a href="https://www.cnblogs.com/tanshaoshenghao/p/10932306.html">https://www.cnblogs.com/tanshaoshenghao/p/10932306.html</a></li><li>Tomcat内嵌式启动：<a href="https://github.com/heroku/devcenter-embedded-tomcat">https://github.com/heroku/devcenter-embedded-tomcat</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> web容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java爬虫</title>
      <link href="/2022/11/01/java/ji-chu/java-pa-chong/"/>
      <url>/2022/11/01/java/ji-chu/java-pa-chong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    Java爬虫</p><ul><li>爬虫：HTTPUrlConnection</li><li>html解析：XPATH</li><li>文件保存：FileWriter</li><li>线程池：ThreadPoolExecutor</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span></span><span class="token class-name">SAXException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span></span><span class="token class-name">DocumentBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span></span><span class="token class-name">DocumentBuilderFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span></span><span class="token class-name">ParserConfigurationException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span></span><span class="token class-name">XPath</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span></span><span class="token class-name">XPathConstants</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span></span><span class="token class-name">XPathExpressionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span></span><span class="token class-name">XPathFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">LinkedBlockingDeque</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * @author zhuzy * @version 1.0 * @description Main * @create 2022/10/31 9:49 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IP <span class="token operator">=</span> <span class="token string">"http://47.119.191.225:8092/"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> BOOKS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            <span class="token string">"DDD"</span><span class="token punctuation">,</span>            <span class="token string">"Kafka/"</span><span class="token punctuation">,</span>            <span class="token string">"Redis/"</span><span class="token punctuation">,</span>            <span class="token string">"java bf/"</span><span class="token punctuation">,</span>            <span class="token string">"java core 36/"</span><span class="token punctuation">,</span>            <span class="token string">"mq/"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> TITLES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            <span class="token string">"DDD实战课"</span><span class="token punctuation">,</span>            <span class="token string">"Kafka核心技术与实战"</span><span class="token punctuation">,</span>            <span class="token string">"Redis核心技术与实战"</span><span class="token punctuation">,</span>            <span class="token string">"Java并发编程与实战"</span><span class="token punctuation">,</span>            <span class="token string">"Java核心技术36讲"</span><span class="token punctuation">,</span>            <span class="token string">"消息队列高手课"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> THREADS_POOL <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">XPathExpressionException</span><span class="token punctuation">,</span> <span class="token class-name">ParserConfigurationException</span><span class="token punctuation">,</span> <span class="token class-name">SAXException</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BOOKS<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> articles <span class="token operator">=</span> <span class="token function">getInnerArticle</span><span class="token punctuation">(</span><span class="token function">getHtml</span><span class="token punctuation">(</span><span class="token function">getConnect</span><span class="token punctuation">(</span>IP <span class="token operator">+</span> BOOKS<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">crawlArticle</span><span class="token punctuation">(</span>BOOKS<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> TITLES<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> articles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取连接</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpURLConnection</span> <span class="token function">getConnect</span><span class="token punctuation">(</span><span class="token class-name">String</span> urlStr<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>urlStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpURLConnection</span> con <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> con<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取文本html</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getHtml</span><span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span> con<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>                    <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取所有内链文章</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInnerArticle</span><span class="token punctuation">(</span><span class="token class-name">String</span> html<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParserConfigurationException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">SAXException</span><span class="token punctuation">,</span> <span class="token class-name">XPathExpressionException</span> <span class="token punctuation">{</span>        <span class="token comment">// html字符串转document</span>        <span class="token class-name">DocumentBuilderFactory</span> factory <span class="token operator">=</span> <span class="token class-name">DocumentBuilderFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DocumentBuilder</span> builder <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        html <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"&lt;hr&gt;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayInputStream</span> bytes <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Document</span> document <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">XPath</span> xPath <span class="token operator">=</span> <span class="token class-name">XPathFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newXPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> expression <span class="token operator">=</span> <span class="token string">"//pre/a"</span><span class="token punctuation">;</span>        <span class="token class-name">NodeList</span> nodeList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NodeList</span><span class="token punctuation">)</span> xPath<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token class-name">XPathConstants</span><span class="token punctuation">.</span>NODESET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodeList<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Node</span> node <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>ELEMENT_NODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Element</span> eElement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Element</span><span class="token punctuation">)</span> node<span class="token punctuation">;</span>            <span class="token class-name">String</span> href <span class="token operator">=</span> eElement<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"../"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 并发爬取内链文章并保存</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">crawlArticle</span><span class="token punctuation">(</span><span class="token class-name">String</span> book<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> articlesHrefs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">"./"</span> <span class="token operator">+</span> title<span class="token punctuation">;</span>        <span class="token comment">// 创建目录</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前爬取书籍： "</span> <span class="token operator">+</span> book <span class="token operator">+</span> <span class="token string">"， 保存位置: "</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> articleHref <span class="token operator">:</span> articlesHrefs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            THREADS_POOL<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 解码</span>                    <span class="token class-name">String</span> articleTitle <span class="token operator">=</span> articleHref<span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment">//articleTitle = URLEncoder.encode(articleHref, String.valueOf(StandardCharsets.UTF_8));</span>                        articleTitle <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>articleTitle<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token function">getHtml</span><span class="token punctuation">(</span><span class="token function">getConnect</span><span class="token punctuation">(</span>IP <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> book <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> articleHref<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 保存</span>                        <span class="token class-name">File</span> articleFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> articleTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>                        articleFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>articleFile<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>                        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book <span class="token operator">+</span> <span class="token string">"---爬取文章完成： "</span> <span class="token operator">+</span> articleTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot之servlet工具类</title>
      <link href="/2022/10/25/java/ji-chu/springboot-zhi-servlet-gong-ju-lei/"/>
      <url>/2022/10/25/java/ji-chu/springboot-zhi-servlet-gong-ju-lei/</url>
      
        <content type="html"><![CDATA[<blockquote><p>开发springboot程序时，可能需要用到原生的Tomcat Servlet，并基于Servlet Request获取如IP、Agent等信息。本文便记录可能用到的一些模块功能。</p></blockquote><h1 id="springBoot之servlet工具类"><a href="#springBoot之servlet工具类" class="headerlink" title="springBoot之servlet工具类"></a>springBoot之servlet工具类</h1><h2 id="1-Servlet-工具类"><a href="#1-Servlet-工具类" class="headerlink" title="1. Servlet 工具类"></a>1. Servlet 工具类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletUtils</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 获取ServletRequest     *     * @return {@link HttpServletRequest }     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpServletRequest</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取参数     *     * @param name 参数名     * @return {@link String }     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 将字符串响应给客户端     *     * @param response     响应     * @param string 字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">renderString</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ServletRequestAttributes</span> <span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RequestAttributes</span> attributes <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> attributes<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-获取真实IP"><a href="#2-获取真实IP" class="headerlink" title="2. 获取真实IP"></a>2. 获取真实IP</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IpUtils</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 获取客户端IP     *     * @param request 请求对象     * @return IP地址     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getIpAddr</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-Forwarded-For"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"WL-Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-Real-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"0:0:0:0:0:0:0:1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"127.0.0.1"</span> <span class="token operator">:</span> <span class="token function">getMultistageReverseProxyIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 检查是否为内部IP地址     *     * @param ip IP地址     * @return 结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">internalIp</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> addr <span class="token operator">=</span> <span class="token function">textToNumericFormatV4</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">internalIp</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 检查是否为内部IP地址     *     * @param addr byte地址     * @return 结果     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">internalIp</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> addr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> b0 <span class="token operator">=</span> addr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> b1 <span class="token operator">=</span> addr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 10.x.x.x/8</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> SECTION_1 <span class="token operator">=</span> <span class="token number">0x0A</span><span class="token punctuation">;</span>        <span class="token comment">// 172.16.x.x/12</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> SECTION_2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xAC</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> SECTION_3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x10</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> SECTION_4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x1F</span><span class="token punctuation">;</span>        <span class="token comment">// 192.168.x.x/16</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> SECTION_5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xC0</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> SECTION_6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xA8</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>b0<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> SECTION_1<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> SECTION_2<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>b1 <span class="token operator">&gt;=</span> SECTION_3 <span class="token operator">&amp;&amp;</span> b1 <span class="token operator">&lt;=</span> SECTION_4<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">case</span> SECTION_5<span class="token operator">:</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>b1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> SECTION_6<span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 将IPv4地址转换成字节     *     * @param text IPv4地址     * @return byte 字节     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">textToNumericFormatV4</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> l<span class="token punctuation">;</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                    l <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token number">4294967295L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">24</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">16</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                    l <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token number">255L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    l <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token number">16777215L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">16</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        l <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token number">255L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    l <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token number">65535L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        l <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> <span class="token number">255L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取IP地址     *     * @return 本地IP地址     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getHostIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取主机名     *     * @return 本地主机名     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"未知"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 从多级反向代理中获得第一个非unknown IP地址     *     * @param ip 获得的IP地址     * @return 第一个非unknown IP地址     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getMultistageReverseProxyIp</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 多级反向代理检测</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ip<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ips <span class="token operator">=</span> ip<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> subIp <span class="token operator">:</span> ips<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token function">isUnknown</span><span class="token punctuation">(</span>subIp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ip <span class="token operator">=</span> subIp<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 检测给定字符串是否为未知，多用于检测HTTP请求相关     *     * @param checkString 被检测的字符串     * @return 是否未知     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isUnknown</span><span class="token punctuation">(</span><span class="token class-name">String</span> checkString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>checkString<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>checkString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-获取真实地理位置"><a href="#3-获取真实地理位置" class="headerlink" title="3. 获取真实地理位置"></a>3. 获取真实地理位置</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">AddressUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// IP地址查询</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IP_SEARCH_URL <span class="token operator">=</span> <span class="token string">"http://whois.pconline.com.cn/ipJson.jsp"</span><span class="token punctuation">;</span>    <span class="token comment">// 位置地址</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> KNOWN_ADDRESS <span class="token operator">=</span> <span class="token string">"XX XX"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getRealAddressByIp</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">IpUtils</span><span class="token punctuation">.</span><span class="token function">internalIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"内网IP"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> rspStr <span class="token operator">=</span> <span class="token class-name">HttpUtils</span><span class="token punctuation">.</span><span class="token function">sendGet</span><span class="token punctuation">(</span>IP_SEARCH_URL<span class="token punctuation">,</span> <span class="token string">"ip="</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">"&amp;json=true"</span><span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>GBK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>rspStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取地理位置异常 {}"</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> KNOWN_ADDRESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">JSONObject</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>rspStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> region <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"pro"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 省份</span>            <span class="token class-name">String</span> city <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 城市</span>            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span> region<span class="token punctuation">,</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取地理位置异常 {}"</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> KNOWN_ADDRESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-发起HTTP请求"><a href="#4-发起HTTP请求" class="headerlink" title="4. 发起HTTP请求"></a>4. 发起HTTP请求</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">HttpUtils</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 向指定URL发送GET请求     *     * @param url url     * @return {@link String }     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">sendGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">sendGet</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span>EMPTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">sendGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">sendGet</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> param<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 向指定URL发送get请求     *     * @param url         url     * @param param       参数，格式：?name=value1&amp;pass=value2     * @param contentType 编码类型     * @return {@link String }     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">sendGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> param<span class="token punctuation">,</span> <span class="token class-name">String</span> contentType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 拼接param</span>            <span class="token class-name">String</span> urlString <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">?</span> url <span class="token operator">:</span> url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> param<span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"sendGet: {}"</span><span class="token punctuation">,</span> urlString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">URL</span> realUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>urlString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">URLConnection</span> urlConnection <span class="token operator">=</span> realUrl<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            urlConnection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">,</span> <span class="token string">"*/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            urlConnection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token string">"Keep-Alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            urlConnection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 发起连接</span>            urlConnection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>urlConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> line<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"recv -&gt; {}"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ConnectException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"调用HttpUtils.sendGet ConnectException, url="</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">",param="</span> <span class="token operator">+</span> param<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketTimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"调用HttpUtils.sendGet SocketTimeoutException, url="</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">",param="</span> <span class="token operator">+</span> param<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"调用HttpUtils.sendGet IOException, url="</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">",param="</span> <span class="token operator">+</span> param<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"调用HttpsUtil.sendGet Exception, url="</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">",param="</span> <span class="token operator">+</span> param<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"调用in.close Exception, url="</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">",param="</span> <span class="token operator">+</span> param<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue大杂烩</title>
      <link href="/2022/10/18/qian-duan/vue-da-za-hui/"/>
      <url>/2022/10/18/qian-duan/vue-da-za-hui/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    <code>vue</code>、<code>vue-router</code>、<code>vue-x</code>、<code>element-ui</code>前端知识大杂烩，记录开发过程中不会或遗忘的点。</p></blockquote><h1 id="vue大杂烩"><a href="#vue大杂烩" class="headerlink" title="vue大杂烩"></a>vue大杂烩</h1><h2 id="1-watch深度监听"><a href="#1-watch深度监听" class="headerlink" title="1.  watch深度监听"></a>1.  watch深度监听</h2><p>需求：监听某个<code>data</code>下对象的<code>属性</code>，变化后手动刷新<code>dom</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token comment">// 普通监听</span>   <span class="token function">form</span> <span class="token punctuation">(</span><span class="token parameter">oldVal<span class="token punctuation">,</span> newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token operator">...</span><span class="token punctuation">.</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// 深度监听</span>  <span class="token string-property property">'form.menuType'</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">o<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 在值初始化的时候也去执行handler（而不是修改时）</span>    <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 深度监听</span>    <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正常来说，<code>watch</code>能够监听到<code>data</code>下的对象，而无法监听到<code>data对象下的属性</code>，可以监听整个对象，但是这样会对性能影响比较大。</p><p>因此，可以通过以上写法，指定监听的属性。</p><h2 id="2-组件强制刷新"><a href="#2-组件强制刷新" class="headerlink" title="2. 组件强制刷新"></a>2. 组件强制刷新</h2><ol><li>刷新整个页面（最low的，可以借助<code>route</code>机制）</li><li>使用<code>v-if</code>标记（比较low的）</li><li>使用内置的<code>forceUpdate</code>方法（较好的）</li><li>使用<code>key-changing</code>优化组件（最好的）</li></ol><p><code>force update</code><br>组件内置$forceUpdate方法，使用前需要在配置中启用。</p><pre class="line-numbers language-none"><code class="language-none">import Vue from 'vue'Vue.forceUpdate()export default {  methods: {    handleUpdateClick() {      // built-in      this.$forceUpdate()    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>key-changing</code><br>原理很简单，vue使用key标记组件身份，当key改变时就是释放原始组件，重新加载新的组件。</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;span :key="key"&gt;&lt;/span&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  export default {    data() {      return {        key: 0      }    },    methods: {      handleUpdateClick() {        this.key += 1       }    }  }&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-el-row缩放排版乱"><a href="#3-el-row缩放排版乱" class="headerlink" title="3. el-row缩放排版乱"></a>3. el-row缩放排版乱</h2><p>场景是这样，一个<code>el-row</code>内部多个<code>el-col</code>，通过设置<code>el-col - span</code>设置所占宽度（span最大24，设置为24或者12，能满足占一行或者占半行）。通过以上搭配实现组件隐藏时自动补充元素位置</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> element-ui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis分布式锁</title>
      <link href="/2022/10/14/java/kuang-jia/redis-fen-bu-shi-suo/"/>
      <url>/2022/10/14/java/kuang-jia/redis-fen-bu-shi-suo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    转自：<a href="https://mp.weixin.qq.com/s/ZPhRD46J76VuX7TvUbgpYw">https://mp.weixin.qq.com/s/ZPhRD46J76VuX7TvUbgpYw</a></p></blockquote><blockquote><p>使用Redis分布式锁的详细方案是什么？</p></blockquote><p>一个很简单的答案就是去使用 Redission 客户端。Redission 中的锁方案就是 Redis 分布式锁的比较完美的详细方案。</p><p>那么，Redission 中的锁方案为什么会比较完美呢？</p><p>正好，我用 Redis 做分布式锁经验十分丰富，在实际工作中，也探索过许多种使用 Redis 做分布式锁的方案，经过了无数血泪教训。</p><p>所以，在谈及 Redission 锁为什么比较完美之前，先给大家看看我曾经使用 Redis 做分布式锁遇到过的问题。</p><p>我曾经用 Redis 做分布式锁想去解决一个用户抢优惠券的问题。这个业务需求是这样的：当用户领完一张优惠券后，优惠券的数量必须相应减一，如果优惠券抢光了，就不允许用户再抢了。</p><p>在实现时，先从数据库中先读出优惠券的数量进行判断，当优惠券大于 0，就进行允许领取优惠券，然后，再将优惠券数量减一后，写回数据库。</p><p>当时由于请求数量比较多，所以，我们使用了三台服务器去做分流。</p><p><img src="/2022/10/14/java/kuang-jia/redis-fen-bu-shi-suo/1665710494981.png" alt="1665710494981"></p><p>这时候会出现一个问题：</p><p>如果其中一台服务器上的 A 应用获取到了优惠券的数量之后，由于处理相关业务逻辑，未及时更新数据库的优惠券数量；在 A 应用处理业务逻辑的时候，另一台服务器上的 B 应用更新了优惠券数量。那么，等 A 应用去更新数据库中优惠券数量时，就会把 B 应用更新的优惠券数量覆盖掉。</p><p>看到这里，可能有人比较奇怪，为什么这里不直接使用 SQL：</p><pre class="line-numbers language-none"><code class="language-none">update 优惠券表 set 优惠券数量 = 优惠券数量 - 1 where 优惠券id = xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原因是这样做，在没有分布式锁协调下，优惠券数量可能直接会出现负数。因为当优惠券数量为 1 的时候，如果两个用户通过两台服务器同时发起抢优惠券的请求，都满足优惠券大于 0 的条件，然后都执行这条 SQL 语句，结果优惠券数量直接变成 -1 了。</p><p>还有人说可以用乐观锁，比如使用如下 SQL:</p><pre class="line-numbers language-none"><code class="language-none">update 优惠券表 set 优惠券数量 = 优惠券数量 - 1 where 优惠券id = xxx and version = xx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方式就在一定几率下，很可能出现数据一直更新不上，导致长时间重试的情况。</p><p>所以，经过综合考虑，我们就采用了 Redis 分布式锁，通过互斥的方式，以防止多个客户端去同时更新优惠券数量的方案。</p><p>当时，我们首先想到的就是使用 Redis 的 setnx 命令，setnx 命令其实就是 set if not exists 的简写。</p><p>当 key 设置值成功后，则返回 1，否则就返回 0。所以，这里 setnx 设置成功可以表示成获取到锁，如果失败，则说明已经有锁，可以被视作获取锁失败。</p><pre class="line-numbers language-none"><code class="language-none">setnx lock true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想要释放锁，执行 del 指令，把 key 删除即可。</p><pre class="line-numbers language-none"><code class="language-none">del lock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用这个特性，我们就可以让系统在执行优惠券逻辑之前，先去 Redis 中执行 setnx 指令。再根据指令执行结果，去判断是否获取到锁。如果获取到了，就继续执行业务，执行完再使用 del 指令去释放锁。如果没有获取到，就等待一定时间，重新再去获取锁。</p><p><img src="/2022/10/14/java/kuang-jia/redis-fen-bu-shi-suo/1665710506516.png" alt="1665710506516"></p><p>乍一看，这一切没什么问题，使用 setnx 指令确实起到了想要的互斥效果。</p><p>但是，这是建立在所有运行环境都是正常的情况下的。一旦运行环境出现了异常，问题就出现了。</p><p>想一下，持有锁的应用突然崩溃了，或者所在的服务器宕机了，会出现什么情况？</p><p>这会造成死锁——持有锁的应用无法释放锁，其他应用根本也没有机会再去获取锁了。这会造成巨大的线上事故，我们要改进方案，解决这个问题。</p><p>怎么解决呢？咱们可以看到，造成死锁的根源是，一旦持有锁的应用出现问题，就不会去释放锁。从这个方向思考，可以在 Redis 上给 key 一个过期时间。</p><p>这样的话，即使出现问题，key 也会在一段时间后释放，是不是就解决了这个问题呢？实际上，大家也确实是这么做的。</p><p>不过，由于 setnx 这个指令本身无法设置超时时间，所以一般会采用两种办法来做这件事：</p><p>1、采用 lua 脚本，在使用 setnx 指令之后，再使用 expire 命令去给 key 设置过期时间。</p><pre class="line-numbers language-none"><code class="language-none">if redis.call("SETNX", "lock", "true") == 1 then  local expireResult = redis.call("expire", "lock", "10")  if expireResult == 1 then      return "success"  else      return "expire failed"  endelse  return "setnx not null"end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、直接使用 set(key,value,NX,EX,timeout) 指令，同时设置锁和超时时间。</p><pre class="line-numbers language-none"><code class="language-none">redis.call("SET", "lock", "true", "NX", "PX", "10000")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上两种方法，使用哪种方式都可以。</p><p>释放锁的脚本两种方式都一样，直接调用 Redis 的 del 指令即可。</p><p>到目前为止，我们的锁既起到了互斥效果，又不会因为某些持有锁的系统出现问题，导致死锁了。这样就完美了吗？</p><p>假设有这样一种情况，如果一个持有锁的应用，其持有的时间超过了我们设定的超时时间会怎样呢？会出现两种情况：</p><ol><li>发现系统在 Redis 中设置的 key 还存在</li><li>发现系统在 Redis 中设置的 key 不存在</li></ol><p>出现第一种情况比较正常。因为你毕竟执行任务超时了，key 被正常清除也是符合逻辑的。</p><p>但是最可怕的是第二种情况，发现设置的 key 还存在。这说明什么？说明当前存在的 key，是另外的应用设置的。</p><p>这时候如果持有锁超时的应用调用 del 指令去删除锁时，就会把别人设置的锁误删除，这会直接导致系统业务出现问题。</p><p>所以，为了解决这个问题，我们需要继续对 Redis 脚本进行改动……毁灭吧，累了……!</p><p><img src="/2022/10/14/java/kuang-jia/redis-fen-bu-shi-suo/1665710524429.png" alt="1665710524429"></p><p>首先，我们要让应用在获取锁的时候，去设置一个只有应用自己知道的独一无二的值。</p><p>通过这个唯一值，系统在释放锁的时候，就能识别出这锁是不是自己设置的。如果是自己设置的，就释放锁，也就是删除 key；如果不是，则什么都不做。</p><p>脚本如下：</p><pre class="line-numbers language-none"><code class="language-none">if redis.call("SETNX", "lock", ARGV[1]) == 1 then local expireResult = redis.call("expire", "lock", "10") if expireResult == 1 then     return "success" else     return "expire failed" endelse  return "setnx not null"end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-none"><code class="language-none">redis.call("SET", "lock", ARGV[1], "NX", "PX", "10000")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，ARGV[1] 是一个可传入的参数变量，可以传入唯一值。比如一个只有自己知道的 UUID 的值，或者通过雪球算法，生成只有自己持有的唯一 ID。</p><p>释放锁的脚本改成这样：</p><pre class="line-numbers language-none"><code class="language-none">if redis.call("get", "lock") == ARGV[1]   then      return redis.call("del", "lock")   else      return 0 end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，从业务角度，无论如何，我们的分布式锁已经可以满足真正的业务需求了。能互斥，不死锁，不会误删除别人的锁，只有自己上的锁，自己可以释放。</p><p>一切都是那么美好！！！</p><p>可惜，还有个隐患，我们并未排除。这个隐患就是 Redis 自身。</p><p>要知道，lua 脚本都是用在 Redis 的单例上的。一旦 Redis 本身出现了问题，我们的分布式锁就没法用了，分布式锁没法用，对业务的正常运行会造成重大影响，这是我们无法接受的。</p><p>所以，我们需要把 Redis 搞成高可用的。一般来讲，解决 Redis 高可用的问题，都是使用主从集群。</p><p>但是搞主从集群，又会引入新的问题。主要问题在于，Redis 的主从数据同步有延迟。这种延迟会产生一个边界条件：当主机上的 Redis 已经被人建好了锁，但是锁数据还未同步到从机时，主机宕了。随后，从机提升为主机，此时从机上是没有以前主机设置好的锁数据的——锁丢了……丢了……了……</p><p><img src="/2022/10/14/java/kuang-jia/redis-fen-bu-shi-suo/1665710537271.png" alt="1665710537271"></p><p>到这里，终于可以介绍 Redission（开源 Redis 客户端）了，我们来看看它怎么是实现 Redis 分布式锁的。</p><p>Redission 实现分布式锁的思想很简单，无论是主从集群还是 Redis Cluster 集群，它会对集群中的每个 Redis，挨个去执行设置 Redis 锁的脚本，也就是集群中的每个 Redis 都会包含设置好的锁数据。</p><p>我们通过一个例子来介绍一下。</p><p>假设 Redis 集群有 5 台机器，同时根据评估，锁的超时时间设置成 10 秒比较合适。</p><p>第 1 步，咱们先算出集群总的等待时间，集群总的等待时间是 5 秒（锁的超时时间 10 秒 / 2）。</p><p>第 2 步，用 5 秒除以 5 台机器数量，结果是 1 秒。这个 1 秒是连接每台 Redis 可接受的等待时间。</p><p>第 3 步，依次连接 5 台 Redis，并执行 lua 脚本设置锁，然后再做判断：</p><ul><li>如果在 5 秒之内，5 台机器都有执行结果，并且半数以上（也就是 3 台）机器设置锁成功，则认为设置锁成功；少于半数机器设置锁成功，则认为失败。</li><li>如果超过 5 秒，不管几台机器设置锁成功，都认为设置锁失败。比如，前 4 台设置成功一共花了 3 秒，但是最后 1 台机器用了 2 秒也没结果，总的等待时间已经超过了 5 秒，即使半数以上成功，这也算作失败。</li></ul><p>再额外多说一句，在很多业务逻辑里，其实对锁的超时时间是没有需求的。</p><p>比如，凌晨批量执行处理的任务，可能需要分布式锁保证任务不会被重复执行。此时，任务要执行多长时间是不明确的。如果设置分布式锁的超时时间在这里，并没有太大意义。但是，不设置超时时间，又会引发死锁问题。</p><p>所以，解决这种问题的通用办法是，每个持有锁的客户端都启动一个后台线程，通过执行特定的 lua 脚本，去不断地刷新 Redis 中的 key 超时时间，使得在任务执行完成前，key 不会被清除掉。</p><p>脚本如下：</p><pre class="line-numbers language-none"><code class="language-none">if redis.call("get", "lock") == ARGV[1]   then     return redis.call("expire", "lock", "10") else     return 0 end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，ARGV[1] 是可传入的参数变量，表示持有锁的系统的唯一值，也就是只有持有锁的客户端才能刷新 key 的超时时间。</p><p>到此为止，一个完整的分布式锁才算实现完毕。总结实现方案如下：</p><ol><li>使用 set 命令设置锁标记，必须有超时时间，以便客户端崩溃，也可以释放锁；</li><li>对于不需要超时时间的，需要自己实现一个能不断刷新锁超时时间的线程；</li><li>每个获取锁的客户端，在 Redis 中设置的 value 必须是独一无二的，以便识别出是由哪个客户端设置的锁；</li><li>分布式集群中，直接每台机器设置一样的超时时间和锁标记；</li><li>为了保证集群设置的锁不会因为网络问题导致某些已经设置的锁出现超时的情况，必须合理设置网络等待时间和锁超时时间。</li></ol><p>这个分布式锁满足如下四个条件：</p><ol><li>任意时刻只能有一个客户端持有锁；</li><li>不能发生死锁，有一个客户端持有锁期间出现了问题没有解锁，也能保证后面别的客户端继续去持有锁；</li><li>加锁和解锁必须是同一个客户端，客户端自己加的锁只能自己去解；</li><li>只要大多数 Redis 节点正常，客户端就能正常使用锁。</li></ol><p>当然，在 Redission 中的脚本，为了保证锁的可重入，又对 lua 脚本做了一定的修改，现在把完整的 lua 脚本贴在下面。</p><p>获取锁的 lua 脚本：</p><pre class="line-numbers language-none"><code class="language-none">if (redis.call('exists', KEYS[1]) == 0) then  redis.call('hincrby', KEYS[1], ARGV[2], 1);  redis.call('pexpire', KEYS[1], ARGV[1]);  return nil;end;if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then  redis.call('hincrby', KEYS[1], ARGV[2], 1);  redis.call('pexpire', KEYS[1], ARGV[1]);  return nil;end;return redis.call('pttl', KEYS[1]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的刷新锁超时时间的脚本：</p><pre class="line-numbers language-none"><code class="language-none">if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then  redis.call('pexpire', KEYS[1], ARGV[1]);   return 1; end;  return 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的释放锁的脚本：</p><pre class="line-numbers language-none"><code class="language-none">if (redis.call('hexists', KEYS[1], ARGV[3]) == 0) then return nil;end;local counter = redis.call('hincrby', KEYS[1], ARGV[3], -1); if (counter &gt; 0) then redis.call('pexpire', KEYS[1], ARGV[2]);return 0;else redis.call('del', KEYS[1]); redis.call('publish', KEYS[2], ARGV[1]);return 1;end;return nil;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到现在为止，使用 Redis 作为分布式锁的详细方案就写完了。</p><p>我既写了一步一坑的坎坷经历，也写明了各个问题和解决问题的细节，希望大家看完能有所收获。</p><p>最后再给大家提个醒，使用 Redis 集群做分布式锁，有一定的争议性，还需要大家在实际用的时候，根据现实情况，做出更好的选择和取舍。</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于源码安装redis并配置远程连接</title>
      <link href="/2022/10/13/java/kuang-jia/ji-yu-yuan-ma-an-zhuang-redis-bing-pei-zhi-yuan-cheng-lian-jie/"/>
      <url>/2022/10/13/java/kuang-jia/ji-yu-yuan-ma-an-zhuang-redis-bing-pei-zhi-yuan-cheng-lian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="基于源码安装redis并配置远程连接"><a href="#基于源码安装redis并配置远程连接" class="headerlink" title="基于源码安装redis并配置远程连接"></a>基于源码安装redis并配置远程连接</h1><h2 id="1-wget-获取tar"><a href="#1-wget-获取tar" class="headerlink" title="1. wget 获取tar"></a>1. wget 获取tar</h2><p>官方网站：<a href="https://redis.io/">Redis</a>        点进去下载</p><p>或者使用<code>wget</code>进行下载</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">wget</span> http://download.redis.io/releases/redis-7.0.5.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-解压tar并编译"><a href="#2-解压tar并编译" class="headerlink" title="2. 解压tar并编译"></a>2. 解压tar并编译</h2><pre class="line-numbers language-none"><code class="language-none">tar -zxvf redis-7.0.5.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若未安装<code>gcc</code>则进行安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> gcc* -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换目录进行编译</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> redis-7.0.5<span class="token function">make</span><span class="token function">make</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/root/soft/redis-7.0.5 <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>经过以上操作就算安装完成了，可以通过<code>./bin/redis-server ./redis.conf</code>启动<code>redis server</code></p><p>并通过<code>./bin/redis-cli -h 127.0.0.1 -p 6379</code>连接本地启动的<code>redis server</code></p><h2 id="3-配置远程连接"><a href="#3-配置远程连接" class="headerlink" title="3. 配置远程连接"></a>3. 配置远程连接</h2><p>远程连接主要配置有：</p><table><thead><tr><th>配置项名称</th><th>配置项值范围</th><th>说明</th></tr></thead><tbody><tr><td><strong>daemonize</strong></td><td>yes、no</td><td>yes表示启用守护进程，默认是no即不以守护进程方式运行。其中Windows系统下不支持启用守护进程方式运行</td></tr><tr><td><strong>port</strong></td><td></td><td>指定 Redis 监听端口，默认端口为 6379</td></tr><tr><td><strong>bind</strong></td><td></td><td>绑定的主机地址,如果需要设置远程访问则直接将这个属性备注下或者改为bind * 即可,这个属性和下面的protected-mode控制了是否可以远程访问 。</td></tr><tr><td><strong>protected-mode</strong></td><td>yes 、no</td><td>保护模式，该模式控制外部网是否可以连接redis服务，默认是yes,所以默认我们外网是无法访问的，如需外网连接rendis服务则需要将此属性改为no。</td></tr><tr><td>timeout</td><td>300</td><td>当客户端闲置多长时间后关闭连接，如果指定为 0，表示关闭该功能</td></tr><tr><td>loglevel</td><td>debug、verbose、notice、warning</td><td>日志级别，默认为 notice</td></tr><tr><td>databases</td><td>16</td><td>设置数据库的数量，默认的数据库是0。整个通过客户端工具可以看得到</td></tr><tr><td>rdbcompression</td><td>yes、no</td><td>指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大。</td></tr><tr><td>dbfilename</td><td>dump.rdb</td><td>指定本地数据库文件名，默认值为 dump.rdb</td></tr><tr><td>dir</td><td></td><td>指定本地数据库存放目录</td></tr><tr><td><strong>requirepass</strong></td><td></td><td>设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</password></td></tr><tr><td>maxclients</td><td>0</td><td>设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息。</td></tr><tr><td>maxmemory</td><td>XXX <bytes></bytes></td><td>指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区。配置项值范围列里XXX为数值。</td></tr></tbody></table><p>其中主要需要配置的进行了加粗处理，有以下几个配置：</p><ol><li><code>daemonize</code>： 启动方式（yes为守护进程启动）</li><li><code>port</code>：端口（默认6379）</li><li><code>bind</code>：绑定主机地址（需要远程连接需要注释掉或者写为*）</li><li><code>protected-mode</code>：控制外网能否远程连接<code>redis server</code>（默认为yes，即启用了保护模式，外网无法远程连接，需要设置为no）</li><li><code>requirepass</code>：远程连接密码（最好配置）</li></ol><p>以上配置项配置完成后，便可以进行远程连接了</p><h2 id="4-几个常用命令"><a href="#4-几个常用命令" class="headerlink" title="4. 几个常用命令"></a>4. 几个常用命令</h2><ol><li><p><code>redis server</code>启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./bin/redis-server ./redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>连接redis cli</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./bin/redis-cli -h <span class="token number">127.0</span>.0.1 -p <span class="token number">6379</span>auth password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>关闭redis server</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">连接redis cli<span class="token function">shutdown</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="5-redis-频繁断线"><a href="#5-redis-频繁断线" class="headerlink" title="5. redis 频繁断线"></a>5. redis 频繁断线</h2><p><a href="https://blog.csdn.net/zw521cx/article/details/101212549">https://blog.csdn.net/zw521cx/article/details/101212549</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库/缓存</title>
      <link href="/2022/10/12/shu-ju-ku/shu-ju-ku-huan-cun/"/>
      <url>/2022/10/12/shu-ju-ku/shu-ju-ku-huan-cun/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库-x2F-缓存"><a href="#数据库-x2F-缓存" class="headerlink" title="数据库/缓存"></a>数据库/缓存</h1><h2 id="1-Mysql数据库-x2F-表修改编码集"><a href="#1-Mysql数据库-x2F-表修改编码集" class="headerlink" title="1. Mysql数据库/表修改编码集"></a>1. Mysql数据库/表修改编码集</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> xwa <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">`</span>utf8mb4<span class="token punctuation">`</span></span> <span class="token keyword">COLLATE</span> <span class="token identifier"><span class="token punctuation">`</span>utf8mb4_general_ci<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> gen_table <span class="token keyword">CONVERT</span> <span class="token keyword">TO</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">`</span>utf8mb4<span class="token punctuation">`</span></span> <span class="token keyword">COLLATE</span> <span class="token identifier"><span class="token punctuation">`</span>utf8mb4_general_ci<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库/缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库/缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue动态路由导航栏</title>
      <link href="/2022/10/09/qian-duan/vue-dong-tai-lu-you-dao-hang-lan/"/>
      <url>/2022/10/09/qian-duan/vue-dong-tai-lu-you-dao-hang-lan/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue动态路由导航栏"><a href="#Vue动态路由导航栏" class="headerlink" title="Vue动态路由导航栏"></a>Vue动态路由导航栏</h1><blockquote><p>​    动态导航栏在日常开发中很常见，主要是基于后台登陆用户的角色加载对应的权限。前端基于权限动态展示导航栏。</p><p>​    两种常见的实现思路如下：</p><ul><li>​    后端响应<code>角色</code>前端维护<code>路由表</code>，<strong>基于角色动态加载路由表</strong></li><li>​    后端提供接口，响应<code>该登陆用户对应角色的路由表</code></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传与下载</title>
      <link href="/2022/10/08/java/ji-chu/wen-jian-shang-chuan-yu-xia-zai/"/>
      <url>/2022/10/08/java/ji-chu/wen-jian-shang-chuan-yu-xia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h1><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p><strong>前端</strong></p><p><img src="/2022/10/08/java/ji-chu/wen-jian-shang-chuan-yu-xia-zai/1665217894748.png" alt="文件上传"></p><p><strong>后端</strong></p><p><img src="/2022/10/08/java/ji-chu/wen-jian-shang-chuan-yu-xia-zai/1665217980999.png" alt="文件上传"></p><p>文件上传后，<code>upload</code>方法执行过程中，tomcat会暂存<code>tmp文件</code>，在执行结束之前，允许操作图片（进行保存），执行结束后，将会删除暂存的文件。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><img src="/2022/10/08/java/ji-chu/wen-jian-shang-chuan-yu-xia-zai/1665218050394.png" alt="下载"></p><p><img src="/2022/10/08/java/ji-chu/wen-jian-shang-chuan-yu-xia-zai/1665219897044.png" alt="1665219897044"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-security</title>
      <link href="/2022/09/19/java/kuang-jia/spring-security/"/>
      <url>/2022/09/19/java/kuang-jia/spring-security/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h1><blockquote><p>​        SpringSecurity是一款权限认证框架，主要提供了<code>认证</code>以及<code>授权</code>功能，随着SpringBoot的兴起，SpringSecurity也火了起来。在这之前，SpringSecurity由于繁重的配置广为人所诟病。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot邮件发送</title>
      <link href="/2022/09/18/java/kuang-jia/springboot-you-jian-fa-song/"/>
      <url>/2022/09/18/java/kuang-jia/springboot-you-jian-fa-song/</url>
      
        <content type="html"><![CDATA[<h1 id="SMTP邮件"><a href="#SMTP邮件" class="headerlink" title="SMTP邮件"></a>SMTP邮件</h1><blockquote><p>​    邮件发送在日常业务开发中很常见，如账号动态验证码、忘记密码等等场景。</p><p>在<code>SpringBoot</code>中，可以很容易的完成验证码收发功能。</p></blockquote><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h2><ol><li><p>依赖引入（starter）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 发送邮件 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml配置</p><p>配置分别以<code>163</code>以及<code>qq</code>为例，其中<code>password</code>为<code>SMTP授权码</code></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">mail</span><span class="token punctuation">:</span>        <span class="token comment"># 配置SMTP 服务器地址</span>        <span class="token comment">#host: smtp.exmail.qq.com</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.163.com        <span class="token comment"># 发件人邮箱</span>        <span class="token comment">#username: 1968286694@qq.com</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> z17362936917@163.com        <span class="token comment"># 发件人授权码</span>     <span class="token comment">#password: fgcdlmepqkyqchbf</span>        <span class="token key atrule">password</span><span class="token punctuation">:</span> UBUTQLCSGPBGAHOD        <span class="token comment"># 端口号</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">465</span>        <span class="token comment"># 邮件编码</span>        <span class="token key atrule">default-encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>        <span class="token comment"># 配置SSL</span>        <span class="token key atrule">properties</span><span class="token punctuation">:</span>          <span class="token key atrule">mail</span><span class="token punctuation">:</span>            <span class="token key atrule">smtp</span><span class="token punctuation">:</span>              <span class="token key atrule">auth</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>              <span class="token comment"># 使用STARTTLS安全连接，是对纯文本通信协议的拓展</span>      <span class="token comment"># starttls: true</span>              <span class="token key atrule">ssl</span><span class="token punctuation">:</span>                <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>              <span class="token key atrule">socketFactoryClass</span><span class="token punctuation">:</span> javax.net.ssl.SSLSocketFactory            <span class="token comment"># debug日志模式，方便打印日志</span>            <span class="token key atrule">debut</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>授权码开通</p><p><img src="/2022/09/18/java/kuang-jia/springboot-you-jian-fa-song/image-20220918163326551.png" alt="163邮箱授权码"></p></li></ol><h2 id="2-小试牛刀"><a href="#2-小试牛刀" class="headerlink" title="2. 小试牛刀"></a>2. 小试牛刀</h2><blockquote><p>​    准备工作做好后，可以简单尝试一下邮件发送功能了</p><p>核心类是<code>JavaMailSender</code></p></blockquote><p>以下为普通邮件发送<code>Service</code>， 需要注意<code>邮件发送人需要和配置的usernmae一致</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"mailService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MailService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">JavaMailSender</span> mailSender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"{spring.mail.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mailFrom<span class="token punctuation">;</span>    <span class="token comment">/**     * 发送简单邮件     *     * @param to      收件人     * @param subject 主题     * @param content 内容     * @author zhuzy     * @date 2022/09/18 15:26     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSimpleMail</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SimpleMailMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>mailFrom<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"邮件发送成功：收件人：{}, 发件时间：{}, "</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"邮件发送失败：收件人：{}, 发件时间：{}, "</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-ftl模板"><a href="#3-ftl模板" class="headerlink" title="3. ftl模板"></a>3. ftl模板</h2><blockquote><p>有场景我们可能需要发送<code>html</code>邮件，其中，页面大部分内容都是一致的，只是很少部分需要个性化，如以下验证码确认页面：</p></blockquote><p><img src="/2022/09/18/java/kuang-jia/springboot-you-jian-fa-song/image-20220918165902093.png" alt="html邮件"></p><ol><li><p>定义ftl模板</p><p>首先，我们需要定义这样一个<code>ftl html</code>模板<code>EmailCodeTemplate.ftl</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email code<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--邮箱验证码模板--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#ECECEC<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>           <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0px auto<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span> <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span> <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span> <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span> <span class="token property">font-family</span><span class="token punctuation">:</span>微软雅黑<span class="token punctuation">,</span> 黑体<span class="token punctuation">;</span> <span class="token property">line-height</span><span class="token punctuation">:</span> 1.5<span class="token punctuation">;</span> <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>153<span class="token punctuation">,</span> 153<span class="token punctuation">,</span> 153<span class="token punctuation">)</span> 0px 0px 5px<span class="token punctuation">;</span> <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span> <span class="token property">background-position</span><span class="token punctuation">:</span> initial initial<span class="token punctuation">;</span> <span class="token property">background-repeat</span><span class="token punctuation">:</span> initial initial<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">valign</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span>                <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span> <span class="token property">line-height</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 15px 35px<span class="token punctuation">;</span> <span class="token property">border-bottom-width</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span> <span class="token property">border-bottom-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span> <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> <span class="token function">RGB</span><span class="token punctuation">(</span>148<span class="token punctuation">,</span>0<span class="token punctuation">,</span>211<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">RGB</span><span class="token punctuation">(</span>148<span class="token punctuation">,</span>0<span class="token punctuation">,</span>211<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span> <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span> <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span> <span class="token property">border-bottom-left-radius</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>微软雅黑<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>x-wa后台管理系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">word-break</span><span class="token punctuation">:</span>break-all</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">padding</span><span class="token punctuation">:</span>25px 35px 40px<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span><span class="token property">opacity</span><span class="token punctuation">:</span>0.8<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin</span><span class="token punctuation">:</span> 5px 0px<span class="token punctuation">;</span> </span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#333333<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> </span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span> 22px<span class="token punctuation">;</span> </span><span class="token punctuation">"</span></span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                                尊敬的用户：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>                    <span class="token comment">&lt;!-- 中文 --&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>您好！感谢您使用x-wa后台管理系统，您的账号正在进行邮箱验证，验证码为：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ff8c00<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{1}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>，有效期30分钟，请尽快填写验证码完成验证！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                    <span class="token comment">&lt;!-- 英文 --&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin</span><span class="token punctuation">:</span> 5px 0px<span class="token punctuation">;</span> </span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#333333<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> </span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">line-height</span><span class="token punctuation">:</span> 22px<span class="token punctuation">;</span> </span><span class="token punctuation">"</span></span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                                Dear user:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello! Thanks for using x-wa background management system, your account is being authenticated by email, the                        verification code is:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ff8c00<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{1}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">&gt;</span></span>, valid for 30 minutes. Please fill in the verification code as soon as                        possible!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>0 auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">padding</span><span class="token punctuation">:</span>10px 10px 0<span class="token punctuation">;</span><span class="token property">border-top</span><span class="token punctuation">:</span>1px solid #ccc<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>#747474<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span>1.3em<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>12px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>x-wa后台管理开发团队<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>联系我们：tel-17362936917<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>此为系统邮件，请勿回复<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                                Please do not reply to this system email                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>{0}</code>,<code>{1}</code>即为传入的参数</p></li><li><p>发送邮件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 发送注册电子邮件验证码     *     * @param to       收件人邮箱     * @param username 收件人用户名     * @param code     验证码     * @author zhuzy     * @date 2022/09/18 17:11     */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendRegisterEmailCheckCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">MimeMessageHelper</span> mimeMessageHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置主题，文本，发件人</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>mailFrom<span class="token punctuation">)</span><span class="token punctuation">;</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"账号注册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">buildRegisterEmailCheckContent</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"注册邮箱验证码邮件发送失败：收件人：{}, 发件时间：{}, "</span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"邮箱验证码发送失败，请稍后再试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/**     * 构建注册邮箱验证邮件内容     *     * @param username 注册用户用户名     * @param code     验证码     * @return {@link String }     * @author zhuzy     * @date 2022/09/18 17:12     */</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">buildRegisterEmailCheckContent</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"ftl/EmailCodeTemplate.ftl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token class-name">FileReader</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reader<span class="token punctuation">.</span><span class="token function">readLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>buffer<span class="token operator">::</span><span class="token function">append</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">MessageFormat</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> springboot 邮件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot 邮件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-GoF</title>
      <link href="/2022/09/14/java/she-ji-mo-shi/she-ji-mo-shi-gof/"/>
      <url>/2022/09/14/java/she-ji-mo-shi/she-ji-mo-shi-gof/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    内行的设计者知道：”不是解决任何问题都需要从头做起，我们更愿意<code>复用</code>以前使用过的解决方案。“</p><p>​    当找到一个好的解决方案时，我们会选择一遍又一遍的使用它。</p></blockquote><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="引子：MVC中的设计模式"><a href="#引子：MVC中的设计模式" class="headerlink" title="引子：MVC中的设计模式"></a>引子：MVC中的设计模式</h2><p>​    模型（Model）、视图（View）、控制器（Controller）三元组模式MVC模式常常被应用于构建用户界面。它们的定义与作用如下：</p><ul><li><code>模型</code>：数据对象</li><li><code>视图</code>：数据对象在用户界面上的展示</li><li><code>控制器</code>：定义用户界面对用户输入的响应形式</li></ul><p>变化形式流程如：</p><ol><li>用户基于控制器操作数据模型</li><li>数据模型基于<code>订阅/通知</code>形式，通知所有视图，刷新视图的表现形态</li></ol><blockquote><p>​    不使用MVC，用户界面设计往往将这些对象混合在一起，<code>MVC</code>模式将它们进行分离，以提高灵活性以及复用性。</p><p>​    例如：</p><ul><li>可以随意搭配模型以及视图，可拔插式的切换视图的表现形式</li><li>视图可复用，可根据输入的模型展示不同的视图效果</li></ul></blockquote><p><strong>MVC中的设计模式</strong></p><ul><li><p><code>M-V联动</code>：<code>观察者模式Observer</code></p><blockquote><p>​        数据模型的修改会导致视图对应的修改，视图并不知道数据模型被修改的细节，将模型和视图分离，使得一个对象（<code>数据模型</code>）的改变能够影响到另外一个对象（<code>视图</code>）。</p></blockquote></li><li><p><code>视图View</code>：<code>组合模式Composite</code></p><blockquote><p>​        完整的用户界面基于多组件共同实现，如原子组件Button、Input，也包括复合组件Form；其中复合组件Form是由多个原子对象组合而成的复杂对象。</p><p>​        而视图View也是又多个原子对象，多个复合对象共同组合而成。</p></blockquote></li><li><p><code>V-C</code></p></li></ul><h2 id="1-什么是设计模式"><a href="#1-什么是设计模式" class="headerlink" title="1. 什么是设计模式"></a>1. 什么是设计模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>软件工程中，设计模式是：<code>对用来在特定场景下解决一般设计问题的类和相互通信的对象的描述</code></p><blockquote><p>​    解释：是一种用来描述<code>类的设计，对象的组合关系</code>，用于解决特定场景下一般设计问题。</p></blockquote><h3 id="四要素"><a href="#四要素" class="headerlink" title="四要素"></a>四要素</h3><ul><li>模式名：助记词，用于描述模式面临的<code>问题</code>、<code>解决方案</code>以及<code>效果</code></li><li>问题：描述模式的<code>适用场景</code></li><li>解决方案：描述设计的<code>组成成分</code>以及各成分的<code>职责和协作方式</code></li><li>效果：描述了模式应用的效果以及使用模式需要权衡的问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot集成日志</title>
      <link href="/2022/08/31/java/kuang-jia/springboot-ji-cheng-ri-zhi/"/>
      <url>/2022/08/31/java/kuang-jia/springboot-ji-cheng-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot集成日志"><a href="#SpringBoot集成日志" class="headerlink" title="SpringBoot集成日志"></a>SpringBoot集成日志</h1><h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><table><thead><tr><th>日志门面（接口）</th><th>日志实现（实现）</th><th>场景</th><th>导入</th></tr></thead><tbody><tr><td>无</td><td>java.util.logging.Logger;</td><td>JDK自带</td><td>JDK自带</td></tr><tr><td>JCL(Jakarta commons-logging)</td><td>Log4j等</td><td>spring默认</td><td>commons-logging</td></tr><tr><td>SLF4J</td><td>Log4j2,Logback</td><td>springboot</td><td>spring-boot-starter(单独引入：spring-boot-starter-logging)</td></tr></tbody></table><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>由于<code>SpringBoot</code>使用<code>SLF4J</code>搭配<code>LogBack</code>，因此主要讲解<code>SpringBoot</code>场景下<code>SLF4J</code>的使用。</p><h3 id="SLF4J"><a href="#SLF4J" class="headerlink" title="SLF4J"></a>SLF4J</h3><p>遗留问题：每个框架都有自己的日志实现，非常混乱，而且api不一致，<code>SLF4J</code>提供了统一的接口API，通过面向接口编程，无论日志实现框架是什么，可以同一为<code>SLF4J</code></p><p><img src="/2022/08/31/java/kuang-jia/springboot-ji-cheng-ri-zhi/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70.png" alt="SLF4J"></p><h3 id="系统中日志框架统一步骤"><a href="#系统中日志框架统一步骤" class="headerlink" title="系统中日志框架统一步骤"></a>系统中日志框架统一步骤</h3><ol><li><p>将系统中其他日志框架排除出去</p><p>例如spring：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用中间包替换原有的日志框架</p><p><img src="/2022/08/31/java/kuang-jia/springboot-ji-cheng-ri-zhi/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg4MzkxNw==,size_16,color_FFFFFF,t_70-16619338924732.png" alt="中间替换包"></p></li><li><p>导入slf4j实现</p></li></ol><h2 id="slf4日志配置"><a href="#slf4日志配置" class="headerlink" title="slf4日志配置"></a>slf4日志配置</h2><h4 id="application配置"><a href="#application配置" class="headerlink" title="application配置"></a>application配置</h4><ul><li><p>日志级别配置（trace、debug、info、warn、error）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">logging.level.com.keafmd<span class="token operator">=</span>trace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>日志文件位置配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">logging.file.path<span class="token operator">=</span>/spring/log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>日志输出格式配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#在控制台输出的日志格式</span>logging.pattern.console<span class="token operator">=</span>%d<span class="token punctuation">{</span>yyyy-MM-dd<span class="token punctuation">}</span> <span class="token punctuation">[</span>%thread<span class="token punctuation">]</span> %-5level %logger<span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span> - %msg%n<span class="token comment">#指定文件中日志输出的格式</span>logging.pattern.file<span class="token operator">=</span>%d<span class="token punctuation">{</span>yyyy-MM-dd<span class="token punctuation">}</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token punctuation">[</span>%thread<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token operator">=</span> %-5level <span class="token operator">==</span><span class="token operator">=</span> %logger<span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span> <span class="token operator">==</span><span class="token operator">=</span> %msg%n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="日志框架配置"><a href="#日志框架配置" class="headerlink" title="日志框架配置"></a>日志框架配置</h4><table><thead><tr><th><strong>Logging System</strong></th><th><strong>Customization</strong></th></tr></thead><tbody><tr><td>Logback</td><td>logback-spring.xml<code>, </code>logback-spring.groovy<code>, </code>logback.xml<code>or</code>logback.groovy</td></tr><tr><td>Log4j2</td><td>log4j2-spring.xml<code>or</code>log4j2.xml</td></tr><tr><td>JDK (Java Util Logging)</td><td>logging.properties</td></tr></tbody></table><h4 id="logback完整配置示例"><a href="#logback完整配置示例" class="headerlink" title="logback完整配置示例"></a>logback完整配置示例</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token comment">&lt;!--scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60 seconds<span class="token punctuation">"</span></span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 定义日志的根目录 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_HOME<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/app/log<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 定义日志文件名称 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>appName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xwa-log<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--        日志输出格式：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息，%n是换行符        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>appLogAppender<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 指定日志文件的名称 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>${LOG_HOME}/${appName}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动             %i：当文件大小超过maxFileSize时，按照i进行文件滚动            --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>${LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--             可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，            那些为了归档而创建的目录也会被删除。            --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MaxHistory</span><span class="token punctuation">&gt;</span></span>365<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MaxHistory</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--             当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy            --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 日志输出格式： --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- logger主要用于存放日志对象，也可以定义日志类型、级别name：表示匹配的logger类型前缀，也就是包的前半部分level：要记录的日志级别，包括 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERRORadditivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，false：表示只用当前logger的appender-ref，true：表示当前logger的appender-ref和rootLogger的appender-ref都有效    --&gt;</span>    <span class="token comment">&lt;!-- hibernate logger --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- Spring framework logger --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--     root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>appLogAppender<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="logback高级使用"><a href="#logback高级使用" class="headerlink" title="logback高级使用"></a>logback高级使用</h4><h5 id="基于profile动态设置"><a href="#基于profile动态设置" class="headerlink" title="基于profile动态设置"></a>基于profile动态设置</h5><p>如果logback日志配置命名为<code>logback-spring.xml</code>,则日志框架则不会直接加载日志的配置项，而是交由<code>SpringBoot解析日志配置</code>可以使用<code>Profile功能</code></p><p>示例：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} --&gt; [%thread] --&gt; %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!dev<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ==-&gt; [%thread] ==-&gt; %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    注意，若配置文件命名为logback.xml，则会报错</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日志集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2022/08/31/yun-wei/docker/"/>
      <url>/2022/08/31/yun-wei/docker/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    </p></blockquote><h2 id="1-vagrant断电"><a href="#1-vagrant断电" class="headerlink" title="1. vagrant断电"></a>1. vagrant断电</h2><p>断电后会导致磁盘变为只读状态并且虚拟机无法重启。</p><p>解决方案：</p><ul><li>重新挂载磁盘:<code>mount -o remount rw /</code></li><li><code>systemctl stop containerd &amp;&amp; systemctl start containerd &amp;&amp; systemctl start docker.service</code></li></ul><h2 id="2-Docker-部署spring-boot项目"><a href="#2-Docker-部署spring-boot项目" class="headerlink" title="2. Docker 部署spring boot项目"></a>2. Docker 部署spring boot项目</h2><ol><li><p>将<code>jar</code>包上传至linux</p></li><li><p>制作dockerfile</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Docker image for springboot file run# VERSION 0.0.1# Author: eangulee# 基础镜像使用javaFROM java:8# 作者MAINTAINER eangulee &lt;eangulee@gmail.com&gt;# VOLUME 指定了临时文件目录为/tmp。# 其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmpVOLUME /tmp # 将jar包添加到容器中并更名为app.jarADD noncarsimple-0.0.1-SNAPSHOT.jar app.jar # 运行jar包RUN bash -c 'touch /app.jar'ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>制作镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker build -t `name` .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -dit --name region -p 8080:8080 -v /data/java/logs:/app/log -v /root/jars:/java/data/config  -d 2fe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>其他：</p><ul><li><p>外挂application.yml</p><blockquote><ol><li><p>​    修改dockerfile</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ENTRYPOINT ["java","-jar","/app.jar","--spring.config.location=/java/data/config/application.yml"]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>挂载配置所在目录</p></li></ol>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-v /root/jars:/java/data/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></li><li><p>查看日志：将springboot项目日志外挂在linux系统中</p></li><li><p>查看docker某容器日志：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker logs -f --tail 100 efb78392fcc6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>​    复杂需求：</p><p>查看指定时间后的日志，只显示最后100行：</p><pre class="line-numbers language-none"><code class="language-none">$ docker logs -f -t --since="2020-02-08" --tail=50 CONTAINER_ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看最近30分钟的日志:</p><pre class="line-numbers language-none"><code class="language-none">$ docker logs --since 30m CONTAINER_ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看某时间之后的日志：</p><pre class="line-numbers language-none"><code class="language-none">$ docker logs -t --since="2020-02-08T13:23:37" CONTAINER_ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看某时间段日志：</p><pre class="line-numbers language-none"><code class="language-none">$ docker logs -t --since="2020-02-08T13:23:37" --until "2020-02-09T12:23:37" CONTAINER_ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot动态加载类</title>
      <link href="/2022/08/30/java/kuang-jia/springboot-dong-tai-jia-zai-lei/"/>
      <url>/2022/08/30/java/kuang-jia/springboot-dong-tai-jia-zai-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot动态加载类"><a href="#SpringBoot动态加载类" class="headerlink" title="SpringBoot动态加载类"></a><code>SpringBoot</code>动态加载类</h1><blockquote><p>​    业务中有这样一个需求，需要根据当前个性化的省市，去动态的切换类。例如：湖北省的推送有限额推送类、项目推送类；标准化的推送也有限额推送类和项目推送类。需要动态的去选择当前省市适配的推送类。</p></blockquote><h2 id="1-几种选择类的手段"><a href="#1-几种选择类的手段" class="headerlink" title="1. 几种选择类的手段"></a>1. 几种选择类的手段</h2><h3 id="1-Class-Conditions"><a href="#1-Class-Conditions" class="headerlink" title="1. Class Conditions"></a>1. Class Conditions</h3><p><code>@ConditionalOnClass</code>和<code>ConditionalOnMissingClass</code>适用于判断某个类是否存在而选择是否当前加载当前类。</p><h3 id="2-Bean-Conditions"><a href="#2-Bean-Conditions" class="headerlink" title="2.Bean Conditions"></a>2.Bean Conditions</h3><p><code>@ConditionalOnBean</code>和<code>@ConditionalOnMissingBean</code>适用于判断某个<code>Bean</code>是否存在于<code>Spring容器中</code>，而选择是否加载当前类。</p><h3 id="3-Resource-Conditions"><a href="#3-Resource-Conditions" class="headerlink" title="3. Resource Conditions"></a>3. Resource Conditions</h3><p><code>@ConditionalOnResource</code> 适用于当存在某指定资源时加载当前类。</p><h3 id="4-Web-Application-Conditions"><a href="#4-Web-Application-Conditions" class="headerlink" title="4. Web Application Conditions"></a>4. Web Application Conditions</h3><p><code>@ConditionalOnWebApplication</code>和<code>@ConditionalOnWebApplication</code>适用于当前工程是否是<code>Web</code>工程。</p><h3 id="5-SpEL-Expression-Conditions"><a href="#5-SpEL-Expression-Conditions" class="headerlink" title="5. SpEL Expression Conditions"></a>5. SpEL Expression Conditions</h3><p><code>@ConditionalOnExpression</code>适用于根据<code>spEL表达式</code>的结果判断是否加载当前类。</p><h3 id="6-自定义Condition"><a href="#6-自定义Condition" class="headerlink" title="6. 自定义Condition"></a>6. 自定义Condition</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Windows"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过实现<code>Condition</code>类，自定义<code>Condition</code>，在通过<code>@Conditional(WindowsCondition.class)</code>注解实现是否加载当前类。</p><p>该种实现方式的明显缺陷在于，只能返回<code>true 或者 false</code>，因此对于一个类只能有加载或者不加载。</p><h2 id="2-最佳实践"><a href="#2-最佳实践" class="headerlink" title="2. 最佳实践"></a>2. 最佳实践</h2><p>以上几种方案已经能够满足大部分的业务需求，但是很多时候我们可能有更加灵活的需求，比如必须基于当前配置文件中的配置，来选择加载某个<code>bean</code>。</p><p>当前业务便是这样的场景，我们想要将<code>各省市的推送类写在配置文件中，这样我们就能随意搭配当前启用的推送数据</code>。</p><p>解决这种场景的注解是<code>@ConditionalOnProperty</code></p><blockquote><p>​    见名知意，该注解能够基于<code>Property</code>配置，动态选择当前是否加载某个<code>Bean</code>。</p><p>有以下属性：</p><ul><li>​    value：name的别名</li><li>prefix：配置前缀（正常配置都是键值对，yml中可能写多层，例如：spring.datasource.activity=mysql，这个时候正常来说键是activity，那么spring.datasource就是prefix前缀)</li><li>​    name: 配置的key</li><li>​    havingVaue：匹配key的值是否等于该配置</li><li>​    matchingIfMissing：如果未匹配如何处理（可以返回true或者false，true表示加载bean）</li></ul></blockquote><p>我们可以在<code>application.properties</code>中配置当前的环境，并读取配置去加载需要的<code>bean</code></p><p><strong>存在的问题</strong></p><h4 id="1-ConditionalOnProperty读取的域"><a href="#1-ConditionalOnProperty读取的域" class="headerlink" title="1. ConditionalOnProperty读取的域"></a>1. <code>ConditionalOnProperty</code>读取的域</h4><p>只能读取<code>Enviroment</code>中的配置，包括但不限于：</p><blockquote><ol><li>通过硬编码的方式（SpringApplication.setDefaultProperties）进行配置。</li><li>在 Spring Boot 的配置类上使用 @PropertySource 注解指定配置文件。</li><li>使用配置文件 (比如 application.properties 文件)。</li><li>通过 random.* 配置的随机属性。</li><li>操作系统中的环境变量。</li><li>Java 的系统属性，可通过 System.getProperties() 获得相关内容。</li><li>java:comp/env 中 JNDI 属性。</li><li>ServletContext 初始化参数（web 环境）</li><li>ServletConfig 初始化参数（web 环境）</li><li>SPRING_APPLICATION_JSON 属性，该属性以 JSON 形式存储在系统环境变量中。</li><li>命令行参数，类似于 java -jar -Denv=DEV 之类。</li><li>@SpringBootTest 注解，仅在测试中使用。</li><li>@TestPropertySource 注解，仅在测试中使用。</li><li>激活 devtools 时，位于 $HOME/.config/spring-boot 下的配置。</li></ol></blockquote><h4 id="2-如何将配置写在另外的配置文件"><a href="#2-如何将配置写在另外的配置文件" class="headerlink" title="2. 如何将配置写在另外的配置文件"></a>2. 如何将配置写在另外的配置文件</h4><blockquote><p>​    <code>ConditionnalOnProperty</code>使用有限制条件，那便是必须在<code>Environment中</code>，我们可能需要单独写一个<code>yml</code>文件去添加这些配置。默认情况下是读取不到的，必须得手动配置将其生效。</p></blockquote><p>配置项：</p><ul><li><p>application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> gxh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>另外的yml文件命名</p><p>必须是以applicaiton开头，并<code>-</code>加上名称，如<code>application-gxh.yml</code></p></li></ul><h2 id="3-可参考文献"><a href="#3-可参考文献" class="headerlink" title="3. 可参考文献"></a>3. 可参考文献</h2><p>conditionalonproperty：<a href="https://www.baeldung.com/spring-conditionalonproperty">https://www.baeldung.com/spring-conditionalonproperty</a></p><p>springboot profiles：<a href="https://www.cnblogs.com/one12138/p/11273031.html">https://www.cnblogs.com/one12138/p/11273031.html</a></p><p>environment：<a href="https://zhuanlan.zhihu.com/p/357050965">https://zhuanlan.zhihu.com/p/357050965</a></p><p>​                                <a href="https://www.cnblogs.com/binarylei/p/10280374.html">https://www.cnblogs.com/binarylei/p/10280374.html</a></p><p>读取resource：<a href="https://blog.csdn.net/weixin_42169734/article/details/119329377">https://blog.csdn.net/weixin_42169734/article/details/119329377</a></p><p>@profile：<a href="https://blog.csdn.net/wild46cat/article/details/71189858">https://blog.csdn.net/wild46cat/article/details/71189858</a></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins集成</title>
      <link href="/2022/08/23/yun-wei/jenkins-ji-cheng/"/>
      <url>/2022/08/23/yun-wei/jenkins-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1><h2 id="1-所处地位与作用"><a href="#1-所处地位与作用" class="headerlink" title="1. 所处地位与作用"></a>1. 所处地位与作用</h2><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661226243159.png" alt="操作流程"></p><blockquote><p>​     Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。</p></blockquote><h2 id="2-其他环境安装"><a href="#2-其他环境安装" class="headerlink" title="2. 其他环境安装"></a>2. 其他环境安装</h2><h3 id="1-JDK安装"><a href="#1-JDK安装" class="headerlink" title="1.  JDK安装"></a>1.  <code>JDK</code>安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install -y java-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-Maven安装"><a href="#2-Maven安装" class="headerlink" title="2. Maven安装"></a>2. <code>Maven</code>安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">1. 下载maven：maven.apache.orgtar -zxvf xxx -C path2. 配置阿里镜像&lt;mirror&gt;    &lt;id&gt;aliyunmaven&lt;/id&gt;    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;    &lt;name&gt;阿里云公共仓库&lt;/name&gt;    &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;&lt;/mirror&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Vagrant配置内存以及cpu核数"><a href="#3-Vagrant配置内存以及cpu核数" class="headerlink" title="3. Vagrant配置内存以及cpu核数"></a>3. Vagrant配置内存以及cpu核数</h3><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661311540504.png" alt="配置内存以及Cpu核数"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">config.vm.provider "virtualbox" do |vb|vb.cpus = 2vb.memory = "6144"end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-DNS配置"><a href="#4-DNS配置" class="headerlink" title="4. DNS配置"></a>4. DNS配置</h3><p>文件位于<code>/etc/resolv.conf</code>,添加两个<code>nameserver</code>即可</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/image-20220829153840622.png" alt="添加nameserver"></p><h2 id="3-集成SVN"><a href="#3-集成SVN" class="headerlink" title="3. 集成SVN"></a>3. 集成SVN</h2><h3 id="1-SVN安装及部署"><a href="#1-SVN安装及部署" class="headerlink" title="1. SVN安装及部署"></a>1. <code>SVN</code>安装及部署</h3><h4 id="1-docker安装"><a href="#1-docker安装" class="headerlink" title="1. docker安装"></a><code>1. docker安装</code></h4><blockquote><p>​    为了方便演示，使用<code>docker</code>部署svn</p></blockquote><ol><li><p>拉取<code>docker</code>镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull docker.io/garethflowers/svn-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动svn容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -v ~/docker-data/svn/repo:/var/opt/svn --name svn-server -p 3690:3690 --privileged=true -e SVN_REPONAME=repository -d docker.io/garethflowers/svn-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>​    配置解释：</p><p>​    <code>-v</code> 磁盘挂载：将容器内文件<code>/var/opt/svn</code>文件夹下文件挂载到<code>外部linux文件系统中</code>（数据持久化）</p><p>​    <code>-p</code>端口映射：将容器内部端口对外映射到<code>linux</code>端口</p><p>​    <code>--privileged</code>：应用容器获取宿主机<code>root</code>权限</p><p>​    <code>-e</code>：设置容器内部环境变量</p><p>​    <code>-d</code>：指定镜像    </p></blockquote></li><li><p>进入容器内部进行配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it svn-server /bin/sh  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建仓库</p><pre class="line-numbers language-sehll" data-language="sehll"><code class="language-sehll">svnadmin create /var/opt/svn/dasyRepo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入仓库配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd /var/opt/svn/dasyRepo/conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编辑配置</p><ul><li><p><code>svnserver.conf</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661236082115.png" alt="配置文件：svnserver.conf"></p><blockquote><p>​    <code>authz-db</code> = <code>authz</code>表示启用<code>authz</code>文件验证，开启这个配置后，<code>authz</code>的权限配置才有效</p></blockquote></li><li><p><code>passwd</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661236129886.png" alt="配置文件2：passwd"></p></li><li><p><code>authz</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661236179410.png!%5B1661237552451%5D(jenkins%E9%9B%86%E6%88%90/1661237552451.png" alt="配置文件3-authz"></p></li></ul></li><li><p>退出重启<code>svn-server</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker restart svn-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>客户端检出<code>svn</code></p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661236307302.png" alt="进行checkout"></li></ol><h4 id="2-yum安装"><a href="#2-yum安装" class="headerlink" title="2. yum安装"></a><code>2. yum</code>安装</h4><blockquote><p>​    讲解一下原生安装：</p><ol><li><p><code>yum install -y subversion</code></p></li><li><p>查看<code>svnserve</code>位置：<code>which svnserve</code></p></li><li><p>修改<code>svn</code>默认数据根目录</p><p><code># vim /etc/sysconfig/svnserve</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># OPTIONS is used to pass command-line arguments to svnserve.# # Specify the repository location in -r parameter:OPTIONS="-r /var/svn"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建<code>仓库</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd /var/svnsvnadmin create dasy-demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>其他配置账号、权限、hooks同docker</p></li><li><p>检出若提示无权限，则配置其他用户对该仓库拥有读写权限</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/image-20220826144627371.png" alt="提示无权限"></p><p>并配置关闭<code>selinux</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4Mjg5NDA1,size_16,color_FFFFFF,t_70.png" alt="img"></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4Mjg5NDA1,size_16,color_FFFFFF,t_70-16615006826712.png" alt="img"></p></li></ol></blockquote><h3 id="2-Jenkins安装及部署"><a href="#2-Jenkins安装及部署" class="headerlink" title="2. Jenkins安装及部署"></a>2. <code>Jenkins</code>安装及部署</h3><ol><li><p>安装<code>jenkins war包</code></p><p><code>https://www.jenkins.io/zh/download/</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661255762394.png" alt="下载jenkins war包"></p></li><li><p><code>java -jar</code>运行<code>jenkins</code>服务端</p><p>保存生成的密码（保存在了当前用户的根目录下）：</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661257534380.png" alt="启动jenkins"></p><ul><li><p>访问<code>jenkins</code></p><p><code>IP</code>:<code>192.168.56.10:8080</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661257288932.png" alt="jenkins"></p></li></ul></li><li><p>安装插件</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661258242174.png" alt="插件安装"></p></li><li><p>创建用户</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661258654268.png" alt="创建用户"></p></li><li><p>安装<code>maven</code>构建插件</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661259386240.png" alt="安装maven plugin"></p></li><li><p>安装<code>svn</code>插件</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661305380202.png" alt="svn插件安装"></p></li></ol><h3 id="3-构建maven项目"><a href="#3-构建maven项目" class="headerlink" title="3. 构建maven项目"></a>3. 构建<code>maven</code>项目</h3><ol><li><p>构建<code>Maven</code>项目</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661304955866.png" alt="构建FreeStyle Project"></p></li><li><p>构建参数配置</p><blockquote><p>​    <code>General</code><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661305749141.png" alt="General配置"></p><table><thead><tr><th>配置项</th><th>含义</th></tr></thead><tbody><tr><td>描述</td><td>项目描述</td></tr><tr><td>GitHub项目</td><td>是否为GitHub项目（配置项目url）</td></tr><tr><td>This project is parameterized</td><td>项目参数化，可配置部署或启动参数</td></tr><tr><td>Throttle builds</td><td>构建次数控制，可配置单位时间内最大构建次数</td></tr><tr><td>丢弃旧的构建</td><td>配置构建记录、发布包保留的最大个数以及天数</td></tr><tr><td>关闭构建</td><td>可以通过该配置关闭自动构建</td></tr><tr><td>在必要时并发构建</td><td>允许同时构建该项目的多个版本（版本不一致、参数不一致）</td></tr><tr><td>构建静默期</td><td>在触发构建后（SVN提交代码），允许等待静默期配置的时间再构建</td></tr><tr><td>重试次数</td><td>检出代码失败后重试检出</td></tr><tr><td>该项目的上游项目正在构建时阻止该项目构建</td><td>上游依赖项目构建时阻止构建</td></tr><tr><td>该项目的下游项目正在构建时阻止该项目构建</td><td>下游被依赖项目构建时阻止构建</td></tr><tr><td>使用自定义的工作空间</td><td>配置jenkins检出代码并构建代码的目录</td></tr><tr><td>显示名称</td><td>显示该选项配置的名称</td></tr><tr><td>保留构建的依赖日志</td><td>保存构建日志，不受其他删除配置的影响</td></tr></tbody></table><p><code>源码管理</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661307144666.png" alt="源码管理"></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661307303404.png" alt="凭证配置"></p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>Repository URL</td><td>仓库地址</td></tr><tr><td>Credentials</td><td>svn操作凭证</td></tr><tr><td>Local module directory</td><td>检出目录位置</td></tr><tr><td>Repository depth</td><td>检出深度（默认infinity无穷大）</td></tr><tr><td>Check-out Strategy</td><td>检出策略</td></tr></tbody></table><p><code>构建触发器</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661308217173.png" alt="构建触发器"></p><table><thead><tr><th>配置</th><th>含义</th></tr></thead><tbody><tr><td>Build whenever。。。</td><td>连续构建时使用解析过的POM文件</td></tr><tr><td>触发远程构建</td><td>提供http接口方式远程构建项目的能力，需要配置token，请求时携带该token</td></tr><tr><td>其他工程构建后触发</td><td>在其他工程构建后，该工程也开始构建（适用于该工程作为某工程的测试工程）</td></tr><tr><td>定时构建</td><td>基于Crontab表达式定时构建项目（请思考是否需要启用该配置：CI目的便在于一发生修改便进行集成，若使用定时任务，可能和CI理念背道而驰）</td></tr><tr><td>轮询SCM</td><td>定时check jenkins工作区与项目库的代码，若发生不一致则执行构建</td></tr></tbody></table><p><code>Per Steps</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661308827273.png" alt="构建之前需要做的事情"></p><p><code>Build</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661309567515.png" alt="build工具配置"></p><p>记得配置<code>pom</code>文件的位置</p><p>配置<code>maven</code>目录</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661309490702.png" alt="maven目录配置"></p></blockquote></li></ol><h3 id="4-执行打包"><a href="#4-执行打包" class="headerlink" title="4. 执行打包"></a>4. 执行打包</h3><ol><li><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661312069800.png" alt="执行打包"></p></li><li><p>构建成功</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661311223527.png" alt="build success"></p></li><li><p>查看打包文件</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661311174332.png" alt="最终打包文件"></p><p>位于<code>/root/.jenkins/workspace</code>目录下</p></li></ol><h3 id="5-远程发布"><a href="#5-远程发布" class="headerlink" title="5. 远程发布"></a>5. 远程发布</h3><blockquote><p>​    一般情况下，项目的构建地址可能位于<code>jenkins</code>，但是运行地址可能不一致，可能在测试服务器也可能在线上服务器。</p><p>​    所以本地构造，远程发布是很常见的。</p></blockquote><ol><li><p>安装插件<code>publish over ssh</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661319531850.png" alt="安装插件publish over ssh"></p></li><li><p>重新打开项目配置，设置<code>Post Steps</code>配置<code>send file or excute command over ssh</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661319758285.png" alt="post steps配置"></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661319785249.png" alt="send file over ssh"></p></li><li><p>目前没有可选服务器，需要进行添加</p><p>回到设置页，打开系统管理-&gt;系统设置，配置<code>publish over ssh</code></p><p>配置之前需要配置<code>ssh</code>连接，使<code>jenkins</code>服务器能够远程连接到<code>ssh服务器上</code>，这里以腾讯云为例；</p><p>(<strong>以下方式是配置<code>jenkins</code>服务器能够ssh连接<code>腾讯云</code>服务器，可以直接配置私钥连接不使用这种方式</strong>)</p><blockquote><ul><li>​    生成密钥对并绑定实例</li></ul><p>生成密钥</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661320671415.png" alt="生成密钥对"></p><p>绑定实例</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661320755246.png" alt="绑定实例"></p><ul><li>私钥上传jenkins服务器</li></ul><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661321022637.png" alt="生成的私钥上传至jenkins服务器"></p><ul><li><p>配置私钥</p><ul><li>```shell<br> cd ~/.ssh<br> ssh-agent bash <pre class="line-numbers language-none"><code class="language-none">```<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">  - ```shellssh-add jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">  - 给私钥授权`600`​```shellchmod 600 jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置config</li></ul><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661321216004.png" alt="配置config"></p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">#云服务器Host         txy-serverHostName     81.70.27.70Port         22PreferredAuthentications publickeyIdentityFile ~/.ssh/jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><blockquote> <pre class="line-numbers language-none"><code class="language-none"> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><strong>（私钥连接）</strong></p><blockquote><p>​    可以在<code>腾讯云服务器</code>生成私钥之后，将私钥配置在<code>jenkins ssh servers中</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661330824408.png" alt="配置私钥"></p></blockquote><p>配置完<code>ssh</code>之后，继续配置<code>post steps</code></p><p><code>nohup</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661334452597.png" alt="post steps"></p><blockquote><p>​    优化：</p><p>​        执行命令时，可能会出现一些问题，例如由于导致之前的进程没关闭，端口被占用。所以我们可能需要写一些逻辑，执行一些其他的操作。</p><ol><li><p>在pre steps，执行构建前删除<code>kill jar</code>（最好还是配在post steps里,和nohup写一起弄个脚本）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/bashpid=`jps -l | grep 'jenkins*' | awk -F' ' '{print $1}'`if [ -n "$pid" ];then        echo "正在杀死pid：$pid"         kill -9 $pidfi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在post steps，执行构建后，运行命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nohup java -jar jenkins-demo-0.0.1-SNAPSHOT.jar &gt;mylog.log 2&gt;&amp;1 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></blockquote><h3 id="6-自动化构建"><a href="#6-自动化构建" class="headerlink" title="6.自动化构建"></a>6.自动化构建</h3><p>开启允许触发远程构建，并配置<code>token</code>（token不能带特殊符号）</p><pre class="line-numbers language-none"><code class="language-none">url地址：JENKINS_URL/job/dasy-jenkins-demo/build?token=TOKEN_NAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661410903769.png" alt="允许触发自动化构建"></p><p>仅仅这样配置还不够，因为不安装插件的情况下，执行远程调用需要登录<code>jenkins服务器</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661410987039.png" alt="需要登录"></p><p>因此还需要安装插件<code>Build Authorization Token Root</code>允许使用<code>token</code>情况下，不登录触发远程部署</p><p>直接请求远程部署地址即可：</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.56.10:8080/buildByToken/build?job=NAME&amp;token=TOKEN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-GitLab"><a href="#1-GitLab" class="headerlink" title="1. GitLab"></a>1. <code>GitLab</code></h4><p>配置<code>WebHooks</code>回调钩子</p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661412484848.png" alt="触发来源配置"></p><h4 id="2-SVN"><a href="#2-SVN" class="headerlink" title="2. SVN"></a>2. <code>SVN</code></h4><blockquote><p>​    svn hooks：</p><p><a href="https://cloud.tencent.com/developer/article/1380951">https://cloud.tencent.com/developer/article/1380951</a></p><p><a href="https://blog.csdn.net/ithope123/article/details/10857685">https://blog.csdn.net/ithope123/article/details/10857685</a></p></blockquote><ul><li><p>钩子函数位置</p><p><code>svn</code>的钩子配置位于<code>/svn/repo/xxx/hooks</code></p><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/1661412786170.png" alt="SVN钩子函数"></p><p>允许我们在提交后、提交前等等操作时执行钩子。</p></li><li><p><code>svn</code>服务器安装<code>curl</code></p><p><code>linux</code>服务器通过<code>curl</code>发送<code>HTTP</code>请求</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install -y curlcurl命令解释：-X 参数：指定请求方式-v 参数：显示响应结果-u 参数：携带用户名/密码-H 参数：携带请求消息头信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>用<code>curl</code>请求总是各种莫名报错，浏览器请求没问题，无奈只能将浏览器请求导出<code>curl</code>（执行无问题）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl 'http://192.168.56.10:8080/buildByToken/build?job=dasy-jenkins-demo&amp;token=gO160Tv5yRSadf3Ijre8BYEVLF2qXwZlAmo7nzKQDcMtGhHWPxUCsbipNJku940F' \  -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9' \  -H 'Accept-Language: zh-CN,zh;q=0.9' \  -H 'Cache-Control: no-cache' \  -H 'Connection: keep-alive' \  -H 'Pragma: no-cache' \  -H 'Upgrade-Insecure-Requests: 1' \  -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36' \  --compressed \  --insecure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-其他注意事项"><a href="#4-其他注意事项" class="headerlink" title="4.其他注意事项"></a>4.其他注意事项</h2><h3 id="1-spring-boot项目pom标配"><a href="#1-spring-boot项目pom标配" class="headerlink" title="1. spring boot项目pom标配"></a>1. spring boot项目pom标配</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jenkins-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>jenkins-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-maven-setting配置"><a href="#2-maven-setting配置" class="headerlink" title="2. maven setting配置"></a>2. maven setting配置</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.2.0<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginGroups</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proxies</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>maven-default-http-blocker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>external:http:*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Pseudo repository to mirror external repositories initially using HTTP.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://0.0.0.0/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blocked</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blocked</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><p><img src="/2022/08/23/yun-wei/jenkins-ji-cheng/6464255-cc56d3af1fdd96df.png" alt="jenkins脑图"></p>]]></content>
      
      
      <categories>
          
          <category> jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端工程化</title>
      <link href="/2022/08/17/java/ji-chu/hou-duan-gong-cheng-hua/"/>
      <url>/2022/08/17/java/ji-chu/hou-duan-gong-cheng-hua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    接上篇前端工程化，本篇博文从0开始介绍后端工程化以及相关实践，并对常用功能以及组件进行封装</p></blockquote><h1 id="后端工程化"><a href="#后端工程化" class="headerlink" title="后端工程化"></a>后端工程化</h1><h2 id="0-依赖集成"><a href="#0-依赖集成" class="headerlink" title="0. 依赖集成"></a>0. 依赖集成</h2><h3 id="Redis（RedisTemplate"><a href="#Redis（RedisTemplate" class="headerlink" title="Redis（RedisTemplate)"></a><code>Redis</code>（RedisTemplate)</h3><ol><li><p>pom文件导入</p><blockquote><p>​    默认使用<code>lettuce</code>作为客户端连接redis，可以通过排除<code>pom</code>替换<code>jedis</code>更换客户端</p><p>以下为例。</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token comment">&lt;!-- redis 缓存操作 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>yml配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment"># 接入redis</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token comment"># host</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.56.10    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> tqW2VHZraeQEi1fJlCjugGNKb0FByL97    <span class="token comment"># jedis</span>    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token comment"># 最大阻塞等待时间（负数表示没有限制）</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token comment"># lettuce</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>1ms        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">cluster</span><span class="token punctuation">:</span>        <span class="token key atrule">refresh</span><span class="token punctuation">:</span>          <span class="token key atrule">adaptive</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">period</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 1000ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Redis序列化配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastJson2JsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Charset</span> DEFAULT_CHARSET <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">FastJson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clazz <span class="token operator">=</span> clazz<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SerializationException</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>WriteClassName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SerializationException</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> bytes<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> <span class="token class-name">JSONReader<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>SupportAutoType</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FastJson2JsonRedisSerializer</span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Hash的key也采用StringRedisSerializer的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>常用api操作</p><blockquote><p>​    包含五种数据类型</p><table><thead><tr><th>数据类型</th><th>api</th><th>简介</th><th>特性</th><th>场景</th></tr></thead><tbody><tr><td>string</td><td>opsForValue</td><td>二进制安全</td><td>可以包含任何数据如图片或序列化对象，最大能存储512M</td><td>–</td></tr><tr><td>hash</td><td>opsForHash</td><td>键值对集合</td><td>适合存储对象，支持update（update是将数据反序列化出来，修改后再序列化存储进去）</td><td>存储，读取，修改用户属性</td></tr><tr><td>list</td><td>opsForList</td><td>链表（双向链表）</td><td>增删快</td><td>1.最新消息排行信息、2.消息队列</td></tr><tr><td>set</td><td>opsForSet</td><td>哈希表实现，元素不重复</td><td>1.增删查复杂度都是O(1) 2.为集合提供了交并差等操作</td><td>1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td></tr><tr><td>zSet</td><td>opsForZSet</td><td>将Set中的元素增加一个权重参数score,元素按score有序排列</td><td>数据插入集合时,已经进行天然排序</td><td>1、排行榜 2、带权重的消息队列</td></tr></tbody></table></blockquote></li><li><p>注意</p><blockquote><p>注意：Redis支持多个数据库，并且每个数据库的数据是隔离的不能共享，并且基于单机才有，如果是集群就没有数据库的概念。</p><p>Redis是一个字典结构的存储服务器，而实际上一个Redis实例提供了多个用来存储数据的字典，客户端可以指定将数据存储在哪个字典中。这与我们熟知的在一个关系数据库实例中可以创建多个数据库类似，所以可以将其中的每个字典都理解成一个独立的数据库。</p><p>每个数据库对外都是一个从0开始的递增数字命名，Redis默认支持16个数据库（可以通过配置文件支持更多，无上限），可以通过配置databases来修改这一数字。客户端与Redis建立连接后会自动选择0号数据库，不过可以随时使用SELECT命令更换数据库，如要选择1号数据库：</p><pre class="line-numbers language-none"><code class="language-none">redis&gt; SELECT 1OKredis [1] &gt; GET foo(nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然而这些以数字命名的数据库又与我们理解的数据库有所区别。首先Redis不支持自定义数据库的名字，每个数据库都以编号命名，开发者必须自己记录哪些数据库存储了哪些数据。另外Redis也不支持为每个数据库设置不同的访问密码，所以一个客户端要么可以访问全部数据库，要么连一个数据库也没有权限访问。最重要的一点是多个数据库之间并不是完全隔离的，比如FLUSHALL命令可以清空一个Redis实例中所有数据库中的数据。综上所述，这些数据库更像是一种命名空间，而不适宜存储不同应用程序的数据。比如可以使用0号数据库存储某个应用生产环境中的数据，使用1号数据库存储测试环境中的数据，但不适宜使用0号数据库存储A应用的数据而使用1号数据库B应用的数据，不同的应用应该使用不同的Redis实例存储数据。由于Redis非常轻量级，一个空Redis实例占用的内存只有1M左右，所以不用担心多个Redis实例会额外占用很多内存。</p><p><img src="/2022/08/17/java/ji-chu/hou-duan-gong-cheng-hua/1661218693395.png" alt="redis字典"></p></blockquote></li></ol><p><strong>Redis工具类</strong></p><p><a href="RedisCache.java">Redis工具类</a></p><h2 id="1-创建模块"><a href="#1-创建模块" class="headerlink" title="1. 创建模块"></a>1. 创建模块</h2><p><img src="/2022/08/17/java/ji-chu/hou-duan-gong-cheng-hua/image-20220817221740317.png" alt="若依模块划分"></p><ol><li><p>以若依工程为例，将项目模块整体划分为</p><ul><li><code>Ruo-Yi</code><ul><li><code>ruoyi-admin</code>                     web服务（提供接口，启动类）</li><li><code>ruoyi-common</code>               通用工具以及常量枚举等</li><li><code>ruoyi-framework</code>         web相关配置</li><li><code>ruoyi-generate</code>            代码生成器</li><li><code>ruoyi-quartz</code>                 定时任务</li><li><code>ruoyi-system</code>                系统domain、dao、service</li></ul></li></ul><p>整体上分为六个模块，其中<code>ruoyi</code>作为父工程，会定义项目所用依赖，以及依赖版本（<code>dependencyManagement</code>）。并声明项目的打包方式，聚合各个子模块（<code>modules</code>）</p></li></ol><blockquote><p>​    注意：</p><ol><li>在声明模块版本时，不要带字母；使用<code>xyz</code>方式进行命名；其中<code>x</code>为<code>主版本号</code>、<code>y</code>为<code>子版本号</code>、<code>z</code>为<code>修订版本号</code></li></ol></blockquote><h2 id="2-基础数据"><a href="#2-基础数据" class="headerlink" title="2. 基础数据"></a>2. 基础数据</h2><h3 id="1-常量"><a href="#1-常量" class="headerlink" title="1. 常量"></a>1. 常量</h3><ul><li><p>缓存常量：CacheConstants</p></li><li><p>通用常量：Constants</p></li><li><p>状态码常量：HTTP Constants</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpStatus</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 操作成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SUCCESS <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 对象创建成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CREATED <span class="token operator">=</span> <span class="token number">201</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 请求已经被接受     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ACCEPTED <span class="token operator">=</span> <span class="token number">202</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 操作已经执行成功，但是没有返回数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NO_CONTENT <span class="token operator">=</span> <span class="token number">204</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 资源已被移除     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MOVED_PERM <span class="token operator">=</span> <span class="token number">301</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 重定向     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SEE_OTHER <span class="token operator">=</span> <span class="token number">303</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 资源没有被修改     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NOT_MODIFIED <span class="token operator">=</span> <span class="token number">304</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 参数列表错误（缺少，格式不匹配）     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BAD_REQUEST <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 未授权     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNAUTHORIZED <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 访问受限，授权过期     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FORBIDDEN <span class="token operator">=</span> <span class="token number">403</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 资源，服务未找到     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NOT_FOUND <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 不允许的http方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BAD_METHOD <span class="token operator">=</span> <span class="token number">405</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 资源冲突，或者资源被锁     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CONFLICT <span class="token operator">=</span> <span class="token number">409</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 不支持的数据，媒体类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNSUPPORTED_TYPE <span class="token operator">=</span> <span class="token number">415</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 系统内部错误     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ERROR <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 接口未实现     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NOT_IMPLEMENTED <span class="token operator">=</span> <span class="token number">501</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-异常"><a href="#2-异常" class="headerlink" title="2. 异常"></a>2. 异常</h3><p><img src="/2022/08/17/java/ji-chu/hou-duan-gong-cheng-hua/image-20220916193428237.png" alt="异常类图"></p><h3 id="3-实体类"><a href="#3-实体类" class="headerlink" title="3. 实体类"></a>3. 实体类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 搜索值     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> searchVal<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建者     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> createBy<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间     */</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新者     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> updateBy<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新时间     */</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 请求参数     */</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">;</span>    <span class="token comment">/**     * 备注     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> remark<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Spring-Security"><a href="#3-Spring-Security" class="headerlink" title="3. Spring  Security"></a>3. Spring  Security</h2><h2 id="4-登陆注册模块"><a href="#4-登陆注册模块" class="headerlink" title="4. 登陆注册模块"></a>4. 登陆注册模块</h2><h3 id="1-验证码"><a href="#1-验证码" class="headerlink" title="1. 验证码"></a>1. 验证码</h3><ol><li><p>依赖导入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 验证码 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.penggle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>kaptcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建Producer</p><blockquote><p>​    <code>DefaultKaptcha</code>验证码生成类可以自定义生成文本，也可以默认生成文本。因此我们可以设置<code>数学表达式</code>类验证码，也可以用传统的<code>纯文本验证码</code>，数学表达式验证码只需要我们自定义文本生成类，并将表达式赋值成文本，<code>redis</code>中存储表达式的值。</p></blockquote><p>字符类验证码</p><blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"captchaChar"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DefaultKaptcha</span> <span class="token function">getCaptchaCharBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultKaptcha</span> captcha <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置验证码存在边框</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_BORDER<span class="token punctuation">,</span> <span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置验证码文本颜色</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_TEXTPRODUCER_FONT_COLOR<span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置验证码宽高</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_IMAGE_WIDTH<span class="token punctuation">,</span> <span class="token string">"180"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_IMAGE_HEIGHT<span class="token punctuation">,</span> <span class="token string">"80"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置验证码文本字符大小</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_TEXTPRODUCER_FONT_SIZE<span class="token punctuation">,</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// KAPTCHA_SESSION_KEY</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_SESSION_CONFIG_KEY<span class="token punctuation">,</span> <span class="token string">"captchaCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证码文本字符长度 默认为5</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_TEXTPRODUCER_CHAR_LENGTH<span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证码文本字体样式 默认为new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize)</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_TEXTPRODUCER_FONT_NAMES<span class="token punctuation">,</span> <span class="token string">"Arial,Courier"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_OBSCURIFICATOR_IMPL<span class="token punctuation">,</span> <span class="token string">"com.google.code.kaptcha.impl.ShadowGimpy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>    captcha<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> captcha<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>数学表达式类验证码</p><blockquote><p>​    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"captchaMath"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DefaultKaptcha</span> <span class="token function">getCaptchaMathBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">DefaultKaptcha</span> defaultKaptcha <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 是否有边框 默认为true 我们可以自己设置yes，no</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_BORDER<span class="token punctuation">,</span> <span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 边框颜色 默认为Color.BLACK</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_BORDER_COLOR<span class="token punctuation">,</span> <span class="token string">"105,179,90"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证码文本字符颜色 默认为Color.BLACK</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_TEXTPRODUCER_FONT_COLOR<span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证码图片宽度 默认为200</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_IMAGE_WIDTH<span class="token punctuation">,</span> <span class="token string">"160"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证码图片高度 默认为50</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_IMAGE_HEIGHT<span class="token punctuation">,</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证码文本字符大小 默认为40</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_TEXTPRODUCER_FONT_SIZE<span class="token punctuation">,</span> <span class="token string">"35"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// KAPTCHA_SESSION_KEY</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_SESSION_CONFIG_KEY<span class="token punctuation">,</span> <span class="token string">"kaptchaCodeMath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证码文本生成器</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_TEXTPRODUCER_IMPL<span class="token punctuation">,</span> <span class="token string">"com.ruoyi.framework.config.KaptchaTextCreator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证码文本字符间距 默认为2</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_TEXTPRODUCER_CHAR_SPACE<span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证码文本字符长度 默认为5</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_TEXTPRODUCER_CHAR_LENGTH<span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证码文本字体样式 默认为new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize)</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_TEXTPRODUCER_FONT_NAMES<span class="token punctuation">,</span> <span class="token string">"Arial,Courier"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证码噪点颜色 默认为Color.BLACK</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_NOISE_COLOR<span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 干扰实现类</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_NOISE_IMPL<span class="token punctuation">,</span> <span class="token string">"com.google.code.kaptcha.impl.NoNoise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy</span>    prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>KAPTCHA_OBSCURIFICATOR_IMPL<span class="token punctuation">,</span> <span class="token string">"com.google.code.kaptcha.impl.ShadowGimpy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>    defaultKaptcha<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> defaultKaptcha<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>核心在于自定义验证码文本生成器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaptchaTextGenerate</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultTextCreator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">CaptchaTextGenerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> NUMS <span class="token operator">=</span> <span class="token string">"0,1,2,3,4,5,6,7,8,9,10"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 表达式内容</span>        <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> rd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 表达式类型，加、减、乘</span>        <span class="token comment">//String[] operation = new String[]{"add", "sub", "mul"};</span>        <span class="token keyword">int</span> operationType <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>NUMS<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> rd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>NUMS<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>operationType <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 加法</span>            result <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>NUMS<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" + "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>NUMS<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>operationType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 减法</span>            result <span class="token operator">=</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>NUMS<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" - "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>NUMS<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 乘法</span>            result <span class="token operator">=</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>NUMS<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" * "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>NUMS<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"=@"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/captchaImage"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Result</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取验证码类型</span>    <span class="token class-name">String</span> captchaType <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getCaptchaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证码文本以及运算值</span>    <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> val <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedImage</span> img <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//  唯一标识符(key)</span>    <span class="token class-name">UUID</span> uid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> verifyKey <span class="token operator">=</span> <span class="token class-name">CacheConstants</span><span class="token punctuation">.</span>CAPTCHA_CODE_KEY <span class="token operator">+</span> uid<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>captchaType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"math"</span><span class="token operator">:</span>            <span class="token class-name">String</span> imgText <span class="token operator">=</span> captchaMath<span class="token punctuation">.</span><span class="token function">createText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            text <span class="token operator">=</span> imgText<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> imgText<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            val <span class="token operator">=</span> imgText<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>imgText<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            img <span class="token operator">=</span> captchaMath<span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"char"</span><span class="token operator">:</span>            text <span class="token operator">=</span> val <span class="token operator">=</span> captchaChar<span class="token punctuation">.</span><span class="token function">createText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            img <span class="token operator">=</span> captchaChar<span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">assert</span> val <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    redisCache<span class="token punctuation">.</span><span class="token function">setCacheObject</span><span class="token punctuation">(</span>verifyKey<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>CAPTCHA_EXPIRATION<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FastByteArrayOutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> os<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uuid"</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">,</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-流程"><a href="#2-流程" class="headerlink" title="2. 流程"></a>2. 流程</h3><h4 id="1-注册"><a href="#1-注册" class="headerlink" title="1. 注册"></a>1. 注册</h4><p><img src="/2022/08/17/java/ji-chu/hou-duan-gong-cheng-hua/.%5C%E5%90%8E%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%5C1663559573918.png" alt="注册"></p><h4 id="2-登陆"><a href="#2-登陆" class="headerlink" title="2. 登陆"></a>2. 登陆</h4><p><img src="/2022/08/17/java/ji-chu/hou-duan-gong-cheng-hua/.%5C%E5%90%8E%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%5C1663559592474.png" alt="登陆"></p><h4 id="3-Token生成"><a href="#3-Token生成" class="headerlink" title="3. Token生成"></a>3. Token生成</h4><p>登陆身份验证完成后（验证码、用户名密码），需要生成<code>Token</code>。</p><p><code>Token</code>是用于表名用户身份的令牌，用于用户登陆发起其他请求之后的身份认证手段。</p><blockquote><p>​    HTTP本质上是一个无状态协议，服务器端并不清楚发起请求的客户端对应到时哪一个人，因此也无法验证发起请求的用户是否具备合法的身份。</p><p>​    常见的认证方式有：</p><ul><li><p>Cookiee-Session：用户登录 -&gt; 服务器生成Session -&gt; 下发SessionID作为cookie保存至用户Cookie中；</p><pre class="line-numbers language-none"><code class="language-none">后序客户端请求服务器会携带以上存储了sessionId的cookie，并放在header中，以表明请求者的身份。缺点：1. 分布式部署的session共享问题2. 服务端需要存储session，占用服务端内存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Token：用户登录 -&gt; 服务器生成Token及有效期 -&gt; 下发Token</p><pre class="line-numbers language-none"><code class="language-none">客户端请求会携带Token，服务端基于Token验证用户的合法性。相较于Cookie-Session模式的优点：1. 支持多端共享2. 支持其他场景 .eg app（Cookie-Session只能适用于Web场景）3. 防止CSRF攻击[https://tech.meituan.com/2018/10/11/fe-security-csrf.html]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>JWT: 过程同Token</p><pre class="line-numbers language-none"><code class="language-none">JWT相较于Token的优点在于，JWT生成的Token是基于`数据声明claims`生成的，claims可以存储用户的信息，在Token解密时，能够可以在不查询数据库的情况下，获取用户的基本信息。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></blockquote><p><strong>生成流程</strong></p><ol><li><p>依赖导入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- Token生成与解析--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">token</span><span class="token punctuation">:</span>  <span class="token comment"># token头</span>  <span class="token key atrule">header</span><span class="token punctuation">:</span> xwaAuth  <span class="token comment"># 密钥</span>  <span class="token key atrule">secret</span><span class="token punctuation">:</span> 7jVqms2w40rHeg8OyKokvQdfxcnJzlBN  <span class="token comment"># 失效时间</span>  <span class="token key atrule">expire</span><span class="token punctuation">:</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Token生成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 生成token（数据声明claim为uuid）<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token class-name">LoginUser</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> token <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loginUser<span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 刷新token有效期，将{key：token，value：loginUser对象}存储进redis</span>    <span class="token function">refreshToken</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 数据声明中存储uuid token</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGIN_USER_KEY<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">createToken</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>基于数据声明生成token<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">createToken</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> claims<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS512<span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">2.</span> 存储进redis<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">refreshToken</span><span class="token punctuation">(</span><span class="token class-name">LoginUser</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>    loginUser<span class="token punctuation">.</span><span class="token function">setLoginTime</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loginUser<span class="token punctuation">.</span><span class="token function">setExpireTime</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getLoginTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expireTime <span class="token operator">*</span> MILLIS_MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 基于uuid将loginUser缓存</span>    <span class="token class-name">String</span> userKey <span class="token operator">=</span> <span class="token function">getTokenKey</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisCache<span class="token punctuation">.</span><span class="token function">setCacheObject</span><span class="token punctuation">(</span>userKey<span class="token punctuation">,</span> loginUser<span class="token punctuation">,</span> expireTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解析token</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 从token中获取数据声明claims<span class="token keyword">private</span> <span class="token class-name">Claims</span> <span class="token function">parseToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">2.</span> 属于数据声明获取redis中用户对象<span class="token keyword">public</span> <span class="token class-name">LoginUser</span> <span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 将jwt token解析为用户信息，以及用户对应的权限</span>            <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>LOGIN_USER_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> userKey <span class="token operator">=</span> <span class="token function">getTokenKey</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">LoginUser</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoginUser</span><span class="token punctuation">)</span> redisCache<span class="token punctuation">.</span><span class="token function">getCacheObject</span><span class="token punctuation">(</span>userKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> user<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h5><p><img src="/2022/08/17/java/ji-chu/hou-duan-gong-cheng-hua/.%5C%E5%90%8E%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%5C1663570492681.png" alt="1663570492681"></p><blockquote><p>​    关于<code>token</code>为什么能够防止<code>CSRF</code>攻击问题，可详见文章：<a href="https://blog.csdn.net/a709046532/article/details/119999318">为什么CSRF Token能够放在Cookie中</a></p><p>简单来说：</p><ol><li><p>服务器下发的token存储在了客户端cookie中（必须存cookie or localStorage）</p></li><li><p>客户端下一次发起请求后，并不是将<code>cookie 中的token作为token</code>，而是<code>拿到cookie 中的token后，将其设置在header中</code>，访问其他资源</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 如果需要设置token，则获取token，并存储在headers中</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 在本地存储中获取token</span>    <span class="token keyword">let</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    token <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置token</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Header对攻击者来说是不可控的，服务端只需要比较头部的自定义属性（即csrf-token）和Cookie中值是否一致即可</p></li></ol></blockquote><h2 id="5-国际化i18n"><a href="#5-国际化i18n" class="headerlink" title="5. 国际化i18n"></a>5. 国际化i18n</h2><p><code>spring boot</code>工程配置国际化<code>i18n</code>还是比较简单的（由于强大的自动配置<code>MessageSourceAutoConfiguration</code>基本上不需要配置什么）</p><ol><li><p>定义<code>i18n</code>资源文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">于<span class="token variable"><span class="token variable">`</span>resources<span class="token variable">`</span></span>文件夹下创建：i18n.messages.properties部分内容：not.null<span class="token operator">=</span>* 必须填写user.jcaptcha.error<span class="token operator">=</span>验证码错误user.jcaptcha.expire<span class="token operator">=</span>验证码已失效user.not.exists<span class="token operator">=</span>用户不存在/密码错误user.password.retry.limit.exceed<span class="token operator">=</span>密码输入错误<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>次，帐户锁定<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>分钟<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置资源文件位置（application.yml)</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">messages</span><span class="token punctuation">:</span>    <span class="token comment"># 国际化资源路径</span>    <span class="token key atrule">basename</span><span class="token punctuation">:</span> i18n/messages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>MessageSource</code></p><p>​        读取资源后可以使用<code>MessageSource</code>读取相关配置；支持参数化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">使用时传入`code（必传）`以及`args（非必传）`；如配置：user<span class="token punctuation">.</span>password<span class="token punctuation">.</span>retry<span class="token punctuation">.</span>limit<span class="token punctuation">.</span>exceed<span class="token operator">=</span>密码输入错误<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>次，帐户锁定<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>分钟可以读取`args`中的参数。<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MessageSource</span> messageSource <span class="token operator">=</span> <span class="token class-name">SpringUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MessageSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="6-邮件发送"><a href="#6-邮件发送" class="headerlink" title="6. 邮件发送"></a>6. 邮件发送</h2><p><a href="SpringBoot%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81.md">邮件发送</a></p><h2 id="7-代码生成"><a href="#7-代码生成" class="headerlink" title="7. 代码生成"></a>7. 代码生成</h2><p><a href="mybatis%E9%85%8D%E7%BD%AE.md">代码生成</a></p><h2 id="8-Servlet工具类"><a href="#8-Servlet工具类" class="headerlink" title="8. Servlet工具类"></a>8. Servlet工具类</h2><p><a href="springBoot%E4%B9%8Bservlet%E5%B7%A5%E5%85%B7%E7%B1%BB.md">Servlet工具类</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化</title>
      <link href="/2022/08/09/qian-duan/qian-duan-gong-cheng-hua/"/>
      <url>/2022/08/09/qian-duan/qian-duan-gong-cheng-hua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博文从0开始介绍前端工程化以及相关实践，并尝试封装常用前端<code>api</code></p></blockquote><h1 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h1><h2 id="1-Vue-Cli初始化项目"><a href="#1-Vue-Cli初始化项目" class="headerlink" title="1. Vue Cli初始化项目"></a>1. <code>Vue Cli</code>初始化项目</h2><ol><li><p>安装<code>vue cli</code></p><pre class="line-numbers language-none"><code class="language-none">npm install -g @vue/cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建新项目</p><pre class="line-numbers language-none"><code class="language-none">vue create hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建项目时，最好自定义创建，并选择<code>vuex</code>和<code>vue-router</code></p></li></ol><h3 id="Yarn安装依赖"><a href="#Yarn安装依赖" class="headerlink" title="Yarn安装依赖"></a><code>Yarn</code>安装依赖</h3><ol><li><p>下载<code>yarn</code>(全局安装)</p><pre class="line-numbers language-none"><code class="language-none">npm install -g -y yarn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>下载<code>axios</code>、<code>qs</code></p><blockquote><p>​    <code>qs</code>是是用于<code>application/x-www-form-urlencoded</code>格式传参，能够将对象转换为<code>url</code>参数（x=?&amp;&amp;y=?&amp;&amp;…），如果后台全部使用<code>json</code>传参，可以不需要安装</p></blockquote><pre class="line-numbers language-none"><code class="language-none">yarn add axios qs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/08/09/qian-duan/qian-duan-gong-cheng-hua/1660699797229.png" alt="使用yarn安装依赖"></p></li></ol><h3 id="axios封装"><a href="#axios封装" class="headerlink" title="axios封装"></a><code>axios</code>封装</h3><ol><li><p>基于<code>webpack</code>发布环境，设置<code>base url</code></p><p>通过<code>process.env.NODE_ENV</code>可以获取当前运行环境</p><blockquote><p>​    我们在<code>npm</code>运行或打包时，会自动设置当前环境，如：</p><p><code>npm run dev</code>：<code>process.env.NODE_ENV</code>为<code>development</code></p><p><code>npm run build</code>：<code>process.env.NODE_ENV</code>为<code>production</code></p></blockquote><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">// 基于webpack 发布环境，设置请求公共urlswitch (process.env.NODE_ENV) {    case "production":        axios.defaults.baseURL="http://127.0.0.1:80";        break;    case "test":        axios.defaults.baseURL="http://127.0.0.1:7777";        break;    default:        axios.defaults.baseURL="http://127.0.0.1:8888";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，可以在<code>package.json</code>中设置其他启动命令脚本，并设置启动脚本的环境，如下：</p><p><img src="/2022/08/09/qian-duan/qian-duan-gong-cheng-hua/1660702141322.png" alt="设置启动脚本"></p><pre class="line-numbers language-none"><code class="language-none">"scripts": {    "serve": "vue-cli-service serve",    "serve:test": "set NODE_ENV=test&amp;&amp;vue-cli-service serve",    "serve:production": "set NODE_ENV=production&amp;&amp;vue-cli-service serve",    "build": "vue-cli-service build",    "lint": "vue-cli-service lint"  },<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，可以使用</p><pre class="line-numbers language-none"><code class="language-none">yarn serve/serve:test/serve:production<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等命令，启动服务</p></li><li><p>设置请求超时时间、并设置跨域允许携带凭证信息</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 设置请求超时时间、跨域允许携带凭证等信息（cookie）</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>设置请求传递参数格式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 设置请求传递数据格式（配置情况1：后端接收参数格式为json）</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/json;charset=utf-8'</span><span class="token punctuation">;</span><span class="token comment">// 配置情况2：后端接收参数格式为表单形式 (x=?&amp;&amp;y=?&amp;&amp;...)</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置<code>post</code>请求参数格式（和上面<code>content-type</code>需要配套）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 配置post请求参数的格式（配置情况1：后端接收参数格式为json）-- 无需配置</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function-variable function">transformRequest</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 配置post请求参数的格式(配置情况2：后端接收参数格式为表单形式(x=?&amp;&amp;y=?&amp;&amp;...）</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function-variable function">transformRequest</span> <span class="token operator">=</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置请求拦截器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 设置请求拦截器 作用：客户端发送请求 -&gt; 请求拦截器 -&gt; 服务器 需要做的事情：    1.token校验（JWT)： 接收服务器返回的token，存储在vuex/cookie/本地存储中，每次向服务器发送请求之前，都需要携带token信息    2.重复请求过滤 api参数：    config：客户端发送请求所携带的config，包括参数、cookie、header等信息 拦截请求配置项，并返回请求配置项 */</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 判断是否需要设置token</span>    <span class="token keyword">const</span> isToken <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isToken <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 判断是否允许重复提交</span>    <span class="token keyword">const</span> canRepeatSubmit <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>canRepeatSubmit <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 如果需要设置token，则获取token，并存储在headers中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在本地存储中获取token</span>        <span class="token keyword">let</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        token <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置token</span>    <span class="token punctuation">}</span>    <span class="token comment">// 判断请求方式，如果为get，需要将参数拼接在url后面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'get'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> config<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>        config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 对于post请求、put请求，禁止重复提交</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canRepeatSubmit <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'post'</span> <span class="token operator">||</span> config<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'put'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> requestParam <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token literal-property property">url</span><span class="token operator">:</span> config<span class="token punctuation">.</span>url<span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">typeof</span> config<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">:</span> config<span class="token punctuation">.</span>data<span class="token punctuation">,</span>            <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment">// 获取session中保存提交参数</span>        <span class="token keyword">const</span> sessionParam <span class="token operator">=</span> cache<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string">'requestParam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionParam <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> sessionParam <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> sessionParam <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cache<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">setJson</span><span class="token punctuation">(</span><span class="token string">'requestParam'</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> s_url <span class="token operator">=</span> sessionParam<span class="token punctuation">.</span>url<span class="token punctuation">;</span>            <span class="token keyword">const</span> s_data <span class="token operator">=</span> sessionParam<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token keyword">const</span> s_time <span class="token operator">=</span> sessionParam<span class="token punctuation">.</span>time<span class="token punctuation">;</span>            <span class="token keyword">const</span> intervalTime <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>            <span class="token comment">// 如果都相等，且间隔时间小于intervalTime，则判断为重复提交</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestParam<span class="token punctuation">.</span>data <span class="token operator">===</span> s_data <span class="token operator">&amp;&amp;</span> requestParam<span class="token punctuation">.</span>url <span class="token operator">===</span> s_url <span class="token operator">&amp;&amp;</span> requestParam<span class="token punctuation">.</span>time <span class="token operator">-</span> s_time <span class="token operator">&lt;</span> intervalTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">'数据已提交，请勿重复提交'</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>s_url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]:</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span> message<span class="token punctuation">)</span>                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                cache<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">setJson</span><span class="token punctuation">(</span><span class="token string">'requestParam'</span><span class="token punctuation">,</span> requestParam<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置响应拦截器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 响应拦截器 服务器响应信息 -&gt; 响应拦截器 -&gt; 客户端JS获取到数据 */</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// config.data 即为后端返回值</span>    <span class="token comment">// 获取状态码，未返回默认为成功状态</span>    <span class="token keyword">const</span> code <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">||</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token comment">// 获取错误信息</span>    <span class="token keyword">const</span> msg <span class="token operator">=</span> errorCode<span class="token punctuation">[</span>code<span class="token punctuation">]</span> <span class="token operator">||</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg <span class="token operator">||</span> errorCode<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 判断数据格式，如果是二进制数据，直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>responseType <span class="token operator">===</span> <span class="token string">'blob'</span> <span class="token operator">||</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>responseType <span class="token operator">===</span> <span class="token string">'arraybuffer'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'登陆信息已过期，您可以继续留在该页面，或者重新登陆'</span><span class="token punctuation">,</span> <span class="token string">'系统提示'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                <span class="token literal-property property">confirmButtonText</span><span class="token operator">:</span> <span class="token string">'重新登陆'</span><span class="token punctuation">,</span>                <span class="token literal-property property">cancelButtonText</span><span class="token operator">:</span> <span class="token string">'取消'</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'warning'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'LogOut'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'/index'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'无效的会话，或会话已过期，请重新登陆'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> msg<span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'error'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Notification<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> msg        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span>data    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err: '</span> <span class="token operator">+</span> error<span class="token punctuation">)</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span>message<span class="token punctuation">}</span> <span class="token operator">=</span> error<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token operator">===</span> <span class="token string">"Network Error"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        message <span class="token operator">=</span> <span class="token string">"后端接口连接异常"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"timeout"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        message <span class="token operator">=</span> <span class="token string">"系统接口请求超时"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"Request failed with status code"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        message <span class="token operator">=</span> <span class="token string">"系统接口"</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"异常"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">message</span><span class="token operator">:</span> message<span class="token punctuation">,</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>        <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Vue项目架构"><a href="#Vue项目架构" class="headerlink" title="Vue项目架构"></a><code>Vue</code>项目架构</h3><p><img src="/2022/08/09/qian-duan/qian-duan-gong-cheng-hua/image-20220915220415299.png" alt="目录结构"></p><p>除去自动生成的，主要有以下几个目录：</p><ol><li>api：<code>js</code>函数文件</li><li>components：组件</li><li>plugins：插件函数<code>js</code></li><li>router：vue router配置</li><li>store：vuex 配置</li><li>utils：工具函数<code>js</code></li><li>vies: 界面</li></ol><h2 id="2-Vue配置"><a href="#2-Vue配置" class="headerlink" title="2. Vue配置"></a>2. <code>Vue</code>配置</h2><h3 id="配置组件允许非驼峰命名"><a href="#配置组件允许非驼峰命名" class="headerlink" title="配置组件允许非驼峰命名"></a>配置组件允许非驼峰命名</h3><p>默认情况下，<code>vue</code>组件不能够是单字母的，并且得是驼峰命名。我们可以通过修改<code>vue.config.js</code>文件，修改其配置。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@vue/cli-service'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">transpileDependencies</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">lintOnSave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-VueX"><a href="#4-VueX" class="headerlink" title="4. VueX"></a>4. VueX</h2><p><code>VueX</code>提供了一个容器<code>store</code>，它更方便的便于我们进行状态<code>state</code>的共享。</p><p>使用：</p><ol><li><p>在vue cli初始化时，选择了vueX后，会有以下配置自动生成</p><ul><li><p>```javascript<br>main.js</p><p>import store from ‘./store’<br>new Vue({<br>  router,<br>  store,<br>  render: h =&gt; h(App)<br>}).$mount(‘#app’)</p><pre class="line-numbers language-none"><code class="language-none">   - ![vuex](前端工程化/image-20220915221817073.png)2. 在store中，我们可以配置state，即共享状态，并在index.js中将其暴露   例如如下：配置了user state   ```javascript   import {getToken, setToken, removeToken} from "@/utils/auth";   import { login, logout, getInfo } from '@/api/login'      const user = {       // vueX数据       state: {           token: getToken(),           name: '',           avatar: '',           roles: [],           permissions: []       },          // vueX修改数据       mutations: {           SET_TOKEN: (state, token) =&gt; {               state.token = token;           },           SET_NAME: (state, name) =&gt; {               state.name = name;           },           SET_AVATAR: (state, avatar) =&gt; {               state.avatar = avatar;           },           SET_ROLES: (state, roles) =&gt; {               state.roles = roles;           },           SET_PERMISSIONS: (state, permissions) =&gt; {               state.permissions = permissions;           }       },          // vueX异步修改数据       actions: {           // 登录           Login({commit}, userInfo) {               const username = userInfo.username.trim();               const password = userInfo.password;               const code = userInfo.code;               const uuid = userInfo.uuid;               return new Promise(((resolve, reject) =&gt; {                   login(username, password, code, uuid).then(res =&gt; {                       setToken(res.token);// 将token存储进cookie                       commit('SET_TOKEN', res.token);// 调用maintainer方法，将token存储进vueX                       resolve();                   }).catch(error =&gt; {                       reject(error);                   })               }))           },       }   }      export default user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>​    <code>user</code>中定义了多个<code>state</code>，<code>mutations</code>允许我们操作数据，<code>actions</code>允许我们异步操作数据。</p></blockquote></li><li><p>暴露<code>state</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> user <span class="token keyword">from</span> <span class="token string">'./module/user'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>    user  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用State</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 调用user暴露的actions Login， 并传递参数loginForm</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"Login"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loginForm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="5-Vue-Router"><a href="#5-Vue-Router" class="headerlink" title="5. Vue Router"></a>5. Vue Router</h2><p><code>Vue Router</code>可以用于构建单页面应用，它很方便的能够帮助我们做页面的跳转</p><p>使用：</p><ol><li><p>在vue cli初始化时，选择了<code>Vue Router</code>，会有以下初始化配置</p><ul><li><p>```javascript<br>main.js</p><p>import router from ‘./router’<br>new Vue({<br>  router,<br>  store,<br>  render: h =&gt; h(App)<br>}).$mount(‘#app’)</p><pre class="line-numbers language-none"><code class="language-none">   - ![vue router](前端工程化/image-20220915233427013.png)   2. 定义router.index.js文件   ```javascript   import Vue from 'vue'   import VueRouter from 'vue-router'   import Login from '../views/login.vue'   import HelloWorld from "@/components/HelloWorld";      Vue.use(VueRouter)      const routes = [     {       path: '/',       name: 'login',       component: Login     },     {       path: '/helloWorld',       name: 'hello',       component: HelloWorld     }   ]      const router = new VueRouter({     routes   })      export default router   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>​    我们定义了两个路由，分别为<code>/</code>以及<code>/helloWorld</code>,分别对应组件<code>Login</code>以及<code>Helloworld</code>跳转。</p></blockquote></li><li><p>路由跳转</p><ul><li><p>标签跳转</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link-type"</span> <span class="token operator">:</span>to<span class="token operator">=</span><span class="token string">"'/register'"</span><span class="token operator">&gt;</span>立即注册<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>代码跳转</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h2 id="6-注册登陆"><a href="#6-注册登陆" class="headerlink" title="6. 注册登陆"></a>6. 注册登陆</h2><h3 id="Base64图片"><a href="#Base64图片" class="headerlink" title="Base64图片"></a>Base64图片</h3><p>前端展示后端返回的<code>Base64</code>编码图片</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> 定义标签<span class="token operator">&lt;</span>img <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"codeUrl"</span> @click<span class="token operator">=</span><span class="token string">"getCode"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"login-code-img"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token number">2.</span> 处理响应<span class="token keyword">this</span><span class="token punctuation">.</span>codeUrl <span class="token operator">=</span> <span class="token string">"data:image/gif;base64,"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>img<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>基于<code>js</code>加密配置</p><blockquote><p>​    <code>jsencrypt</code>使用<code>rsa</code>进行加密，需要配置<code>公钥</code>以及<code>私钥</code>，可以用于一些私密信息的加密，如<code>cookie</code>中的<code>password</code></p></blockquote><ol><li><p>安装<code>jsencrypt</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install jsencrypt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用公钥进行加密，私钥进行解密</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>JSEncrypt<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"jsencrypt"</span><span class="token punctuation">;</span><span class="token keyword">const</span> publicKey <span class="token operator">=</span> <span class="token string">"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAMt/0hWutMESq4oYwPpxNznX1VuivPXw\n"</span> <span class="token operator">+</span>    <span class="token string">"k7Td7gMxsXU/03EVr1KBx9xWheFrvZeGUgb9WRJ7OSec2npBF1IGpv0CAwEAAQ=="</span><span class="token keyword">const</span> privateKey <span class="token operator">=</span> <span class="token string">"MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAy3/SFa60wRKrihjA\n"</span> <span class="token operator">+</span>    <span class="token string">"+nE3OdfVW6K89fCTtN3uAzGxdT/TcRWvUoHH3FaF4Wu9l4ZSBv1ZEns5J5zaekEX\n"</span> <span class="token operator">+</span>    <span class="token string">"Ugam/QIDAQABAkEAjLbNCUsuF9eWID6vqj2BJ5E0KlIkgZeiO02+mBzTjbOhvXXN\n"</span> <span class="token operator">+</span>    <span class="token string">"9Kto6QctctJAAWUgIAmegkSoh3dHI7rNZRJc7QIhAO8erxtycQit73Q2izlucaZK\n"</span> <span class="token operator">+</span>    <span class="token string">"j5QujzhHJ5zYZOw+J1w/AiEA2d1pGEPGiAhGwOWRMVGJ7/zLxzrMYYVSfWBo8tpX\n"</span> <span class="token operator">+</span>    <span class="token string">"3cMCIHiKIkGWzi5O6C/QMxzPdREb8wcC9YWsMObbGv0QU+0nAiBvAisXiwkwrQ7o\n"</span> <span class="token operator">+</span>    <span class="token string">"INDvUT24g5WNiT80fYs/iQ1QmMJmowIhAOk+I8X4aj39UfY2AcztW3gL9AlHDhbu\n"</span> <span class="token operator">+</span>    <span class="token string">"e7eu59mbudDL"</span><span class="token comment">// 使用公钥进行加密</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> encrypt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    encrypt<span class="token punctuation">.</span><span class="token function">setPublicKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    encrypt<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 使用私钥进行解密</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> encrypt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    encrypt<span class="token punctuation">.</span><span class="token function">setPrivateKey</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    encrypt<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p><code>background-size</code>：设置背景图片的尺寸</p><table><thead><tr><th><em>length</em></th><th>设置背景图像的高度和宽度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。</th></tr></thead><tbody><tr><td><em>percentage</em></td><td>以父元素的百分比来设置背景图像的宽度和高度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。</td></tr><tr><td>cover</td><td>把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。</td></tr><tr><td>contain</td><td>把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。</td></tr></tbody></table><p>问题1：页面存在下拉框、有白边。</p><blockquote><p>​    解决：设置<code>index.html  body</code>的<code>margin</code>为<code>0px</code></p></blockquote><p>问题2：两个<code>div</code>如何并排显示</p><blockquote><p>​    解决：</p><p>​        方式1： 设置<code>float</code></p><p>​        方式2：设置<code>div</code>为行内样式<code>display:inline-block</code></p></blockquote><h3 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element-UI"></a>Element-UI</h3><h4 id="多个组件在同一排"><a href="#多个组件在同一排" class="headerlink" title="多个组件在同一排"></a><strong>多个组件在同一排</strong></h4><p>使用<code>el-row</code>，<code>gutter</code>为组件间间隔，<code>el-col.span</code>为所占栅栏个数（总计24）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span> <span class="token attr-name">:gutter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>20</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>12</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin-right</span><span class="token punctuation">:</span> 10px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emailCheckForm.code<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>8</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendEmailCheck<span class="token punctuation">"</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cantEmail<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>发送验证码 ({{ emailCoolingTime }})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-col</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Validate"><a href="#Validate" class="headerlink" title="Validate"></a>Validate</h4><p>作用于<code>form</code>中，用于校验表单输入元素的合法性</p><blockquote><p>​    支持常见的<code>必填</code>，<code>长度</code>以及自定义的校验规则，使用时需要在表单中定义<code>rules</code>，并在<code>data</code>中声明<code>rules</code>；需要注意的是，表单提交的<code>validate api显示校验</code>需要保证每个输入元素的自定义校验最终必须调用<code>callback</code></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>form <span class="token operator">:</span>rules<span class="token operator">=</span><span class="token string">"registerRules"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">&gt;</span><span class="token operator">...</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token function-variable function">checkUsername</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z][a-zA-Z0-9]{4,10}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"用户名必须以字母开头"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token literal-property property">registerForm</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">registerRules</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span><span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">"blur"</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"请输入您的账号"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span><span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"用户账号长度必须介于 5 和 11 之间"</span><span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">"blur"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span><span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">validator</span><span class="token operator">:</span> checkUsername<span class="token punctuation">,</span> <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">"blur"</span><span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>registerForm<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token parameter">valid</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token operator">...</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输入框跳转"><a href="#输入框跳转" class="headerlink" title="输入框跳转"></a>输入框跳转</h4><p>表单输入中，可能需要监听<code>enter</code>便于输入框的跳转</p><p>使用时需要声明<code>enter 事件</code>，并给输入框注册上<code>ref</code>，跳转api传入参数<code>ref</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>input    v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"registerForm.username"</span>    type<span class="token operator">=</span><span class="token string">"text"</span>    auto<span class="token operator">-</span>complete<span class="token operator">=</span><span class="token string">"off"</span>placeholder<span class="token operator">=</span><span class="token string">"请输入用户名"</span>    ref<span class="token operator">=</span><span class="token string">"username"</span>    @keyup<span class="token punctuation">.</span>enter<span class="token punctuation">.</span>native<span class="token operator">=</span><span class="token string">"jumpNext('email')"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">&gt;</span><span class="token comment">/*** 跳转下一输入框*/</span><span class="token function">jumpNext</span><span class="token punctuation">(</span><span class="token parameter">jumpRef</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>jumpRef <span class="token operator">===</span> <span class="token string">'register'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>jumpRef<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h3><h4 id="字母开头5-11"><a href="#字母开头5-11" class="headerlink" title="字母开头5~11"></a>字母开头5~11</h4><p><code>/^[a-zA-Z][a-zA-Z0-9]{4,10}/;</code></p><h4 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h4><p><code>/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/;</code></p><h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><h4 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 倒计时发送邮件冷却时间*/</span>    <span class="token function">countDownEmailCoolingTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> coolingTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>emailCoolingTime<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>coolingTime <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 允许重新发送邮件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cantEmail <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>emailCoolingTime <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 设置定时器，coolingTime - 1;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          coolingTime <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>emailCoolingTime <span class="token operator">=</span> coolingTime<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countDownEmailCoolingTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dxf-spring-02-ormapping</title>
      <link href="/2022/07/20/java/kuang-jia/dxf-spring-02-ormapping/"/>
      <url>/2022/07/20/java/kuang-jia/dxf-spring-02-ormapping/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    <code>ORM</code>框架</p></blockquote><h1 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h1><h2 id="JPA、Hibenate、Mybatis"><a href="#JPA、Hibenate、Mybatis" class="headerlink" title="JPA、Hibenate、Mybatis"></a>JPA、Hibenate、Mybatis</h2><p>JPA是一种ORM思想的规范，类似于接口。而Hibenate是基于JPA的实现，类似于实现类。SpringData JPA是在Hibenate的基础上，对其更上层的封装实现。</p><p>Mybatis是一种半自动化的ORM框架，相较于JPA而言更灵活</p><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>使用场景：</p><ul><li>读写比较高</li></ul><h1 id="NOSQL"><a href="#NOSQL" class="headerlink" title="NOSQL"></a>NOSQL</h1><table><thead><tr><th>类型</th><th>示例</th></tr></thead><tbody><tr><td>KEY-VALUE</td><td>redis</td></tr><tr><td>Document</td><td>Mongo</td></tr><tr><td>列存储</td><td>Hbase</td></tr><tr><td>图数据库</td><td></td></tr></tbody></table><h2 id="Mongo"><a href="#Mongo" class="headerlink" title="Mongo"></a>Mongo</h2><blockquote><p>1.简要介绍一下<code>MongoDB</code>在Docker中的安装</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">1</span>. 拉取镜像<span class="token function">docker</span> pull mongo<span class="token number">2</span>. 启动镜像<span class="token function">docker</span> run --name mongo -p <span class="token number">27017</span>:27017 -v ~/docker-data/mongo:/data/db -e <span class="token assign-left variable">MONGO_INITDB_ROOT_USERNAME</span><span class="token operator">=</span>root -e <span class="token assign-left variable">MONGO_INITDB_ROOT_PASSWORD</span><span class="token operator">=</span>root -d mongo<span class="token number">3</span>.进入镜像<span class="token function">docker</span> ex -it mongo <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>2.mongo常用命令</p></blockquote><pre class="line-numbers language-none"><code class="language-none">1. 登陆mongomongo -u root -p root2. 查看库show dbs3.创建库use springbucks；4.创建用户db.createUser (    {        user: "root",        pwd: "root",        roles: [            {role: "readWrite", db: "springbucks"}        ]    })5. 查询用户show users;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol start="3"><li>测试当前用户是否能够登陆某个数据库</li></ol></blockquote><pre class="line-numbers language-none"><code class="language-none">1. 切换库use springbucks;2. 使用某个用户登录db.auth("username", "password");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol start="4"><li>查询某个文档</li></ol></blockquote><pre class="line-numbers language-none"><code class="language-none">db.documentName.find();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="操作Redis的手段"><a href="#操作Redis的手段" class="headerlink" title="操作Redis的手段"></a>操作Redis的手段</h3><ul><li>jedis<ul><li>非线程安全</li><li>一般使用jedis pool</li></ul></li><li>spring data redis</li></ul><h3 id="操作Redis步骤"><a href="#操作Redis步骤" class="headerlink" title="操作Redis步骤"></a>操作Redis步骤</h3><ol><li><p>导入依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>增加配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">redis.host<span class="token operator">=</span><span class="token number">192.168</span>.56.10redis.maxTotal<span class="token operator">=</span><span class="token number">5</span>redis.maxIdle<span class="token operator">=</span><span class="token number">5</span>redis.testOnBorrow<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取Jedis Pool</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token keyword">public</span> <span class="token class-name">JedisPoolConfig</span> <span class="token function">jedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>destroyMethod <span class="token operator">=</span> <span class="token string">"close"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">JedisPool</span> <span class="token function">jedisPool</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${redis.host}"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> host<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>jedisPoolConfig<span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取Jedis连接客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="Spring-cache"><a href="#Spring-cache" class="headerlink" title="Spring cache"></a>Spring cache</h2><p><code>JVM</code>缓存</p><p><img src="/2022/07/20/java/kuang-jia/dxf-spring-02-ormapping/1658827531335.png" alt="spring缓存抽象"></p><p><img src="/2022/07/20/java/kuang-jia/dxf-spring-02-ormapping/1658827618805.png" alt="基于注解的缓存"></p><p>本质是基于AOP进行缓存</p><p>可以配置缓存类型：包括JVM（默认）、Redis等</p>]]></content>
      
      
      <categories>
          
          <category> 丁雪峰spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 丁雪峰spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oracle</title>
      <link href="/2022/07/18/shu-ju-ku/oracle/"/>
      <url>/2022/07/18/shu-ju-ku/oracle/</url>
      
        <content type="html"><![CDATA[<p>根据表名，获取引用了该表的视图</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_dependencies <span class="token keyword">where</span> REFERENCED_NAME<span class="token operator">=</span><span class="token string">'ELE_VD14025'</span> <span class="token operator">and</span> <span class="token keyword">TYPE</span><span class="token operator">=</span><span class="token string">'VIEW'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/18/shu-ju-ku/oracle/image-20220718152237996.png" alt="表用到的视图"></p><p>查看当前被锁的表 以及解锁</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--锁表查询SQL</span><span class="token keyword">SELECT</span> object_name<span class="token punctuation">,</span> machine<span class="token punctuation">,</span> s<span class="token punctuation">.</span>sid<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token keyword">serial</span><span class="token comment"># </span><span class="token keyword">FROM</span> gv$locked_object l<span class="token punctuation">,</span> dba_objects o<span class="token punctuation">,</span> gv$<span class="token keyword">session</span> s <span class="token keyword">WHERE</span> l<span class="token punctuation">.</span>object_id　<span class="token operator">=</span> o<span class="token punctuation">.</span>object_id <span class="token operator">AND</span> l<span class="token punctuation">.</span>session_id <span class="token operator">=</span> s<span class="token punctuation">.</span>sid<span class="token punctuation">;</span><span class="token comment">--释放SESSION SQL: </span><span class="token comment">--alter system kill session 'sid, serial#'; </span><span class="token keyword">ALTER</span> system <span class="token keyword">kill</span> <span class="token keyword">session</span> <span class="token string">'235, 49711'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dxf-spring-01_datasource</title>
      <link href="/2022/07/17/java/kuang-jia/dxf-spring-01-datasource/"/>
      <url>/2022/07/17/java/kuang-jia/dxf-spring-01-datasource/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    datasource 篇讲解了单数据源以及多数据源的配置，还有一些数据库连接池如<code>hikari</code>、<code>druid</code>，并对<code>spring</code>中事务的传播行为以及异常抽象进行了讲解</p></blockquote><h1 id="Datasource"><a href="#Datasource" class="headerlink" title="Datasource"></a>Datasource</h1><h2 id="Actuator"><a href="#Actuator" class="headerlink" title="Actuator"></a>Actuator</h2><h3 id="什么是actuator"><a href="#什么是actuator" class="headerlink" title="什么是actuator"></a>什么是actuator</h3><p><code>actuator</code>给我们提供了一系列<code>endpoint（端点）</code>允许我们在启动<code>springboot web</code>项目后，能够看到如<code>url资源</code>、<code>beans</code>、<code>健康状态</code>等等，如下图所示：</p><p>通过访问路径：<code>http://127.0.0.1:8080/actuator</code>能够查看默认情况下能够访问的资源</p><p><img src="/2022/07/17/java/kuang-jia/dxf-spring-01-datasource/image-20220717171001478.png" alt="默认开启的actuator"></p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>通过引入pom文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何开启更多的actuator"><a href="#如何开启更多的actuator" class="headerlink" title="如何开启更多的actuator"></a>如何开启更多的actuator</h3><p>默认情况下，只开启了以上三个<code>endpoint</code>，（每个<code>springboot</code>版本不一致），如果需要开启更多的<code>endpoint</code>，可以通过以下配置进行按需开启</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 可以這樣寫，就會開啟所有endpoints(不包含shutdown)</span>management.endpoints.web.exposure.include<span class="token operator">=</span>*<span class="token comment"># 也可以這樣寫，就只會開啟指定的endpoint，因此此處只會再額外開啟/actuator/beans和/actuator/mappings</span>management.endpoints.web.exposure.include<span class="token operator">=</span>beans,mappings<span class="token comment"># exclude可以用來關閉某些endpoints</span><span class="token comment"># exclude通常會跟include一起用，就是先include了全部，然後再exclude /actuator/beans這個endpoint</span>management.endpoints.web.exposure.exclude<span class="token operator">=</span>beansmanagement.endpoints.web.exposure.include<span class="token operator">=</span>*<span class="token comment"># 如果要開啟/actuator/shutdown，要額外再加這一行</span>management.endpoint.shutdown.enabled<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/07/17/java/kuang-jia/dxf-spring-01-datasource/image-20220717172542280.png" alt="开启全部actuator"></p><h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><p>由于<code>endpoint</code>给予了用户查看<code>web</code>服务核心信息的能力，因此不建议开启太多的<code>endpoint</code>，开启时也要充分考虑到安全问题，特别的<code>shutdown endpont</code>允许了用户通过该<code>endpoint</code>关闭应用程序，这个是相当危险的</p><h3 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h3><p>详细内容可以参考这些博文：</p><p><a href="https://www.cnblogs.com/caoweixiong/p/15325382.html">Spring Boot-Actuator详解</a></p><p><a href="https://blog.csdn.net/An1090239782/article/details/107249394">十五：SpringBoot-配置Actuator组件,实现系统监控</a></p><h2 id="H2数据库"><a href="#H2数据库" class="headerlink" title="H2数据库"></a>H2数据库</h2><p><code>H2</code>是一个内存级别的数据库，采用纯<code>JAVA</code>语言编写，在<code>Spring Boot</code>中，可以很方便对其进行集成</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h3><p>在不用做任何配置（仅仅引入依赖）的情况下，我们可以自动连接该数据库（基于内存的，<code>spring boot</code>项目一启动该数据库便会运行）</p><p>可以打印其连接信息：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">HikariProxyConnection@1729904998 wrapping conn0: <span class="token assign-left variable">url</span><span class="token operator">=</span>jdbc:h2:mem:879a3d17-80c8-4733-a7c7-5b50f74755e9 <span class="token assign-left variable">user</span><span class="token operator">=</span>SA<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>spring boot</code> 2以上默认是<code>hikari</code>连接池，打印的是<code>H2</code>数据库的<code>0号连接</code>，地址为<code>url</code>内容，用户名为<code>SA</code></p><h3 id="定义schema"><a href="#定义schema" class="headerlink" title="定义schema"></a>定义schema</h3><p>由于<code>H2</code>数据库是内存数据库，因此我们需要定义好表结构，应用启动后，直接读取<code>schema</code>配置并创建相关表</p><p>配置路径位于<code>resoucre文件夹下的schema.sql</code>文件（需要我们创建）</p><p><img src="/2022/07/17/java/kuang-jia/dxf-spring-01-datasource/image-20220717173656756.png" alt="schema.sql"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> foo<span class="token punctuation">(</span>    id  <span class="token keyword">int</span><span class="token punctuation">,</span>    bar <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义data"><a href="#定义data" class="headerlink" title="定义data"></a>定义data</h3><p>创建完表之后，可能需要对数据进行初始化，我们可以通过定义<code>data.sql</code>文件，对刚才创建的表插入部分数据</p><p><img src="/2022/07/17/java/kuang-jia/dxf-spring-01-datasource/image-20220717173754911.png" alt="data.sql"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> foo<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用H2"><a href="#使用H2" class="headerlink" title="使用H2"></a>使用H2</h3><p>执行查询</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">showData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from foo"</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>row <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">2022</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">17</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">53.938</span>  INFO <span class="token number">7612</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>s<span class="token punctuation">.</span>g<span class="token punctuation">.</span></span>Ge01DatasourceApplication</span>          <span class="token operator">:</span> <span class="token punctuation">{</span>ID<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> BAR<span class="token operator">=</span>张三<span class="token punctuation">}</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">17</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">53.938</span>  INFO <span class="token number">7612</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>s<span class="token punctuation">.</span>g<span class="token punctuation">.</span></span>Ge01DatasourceApplication</span>          <span class="token operator">:</span> <span class="token punctuation">{</span>ID<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> BAR<span class="token operator">=</span>李四<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="多数据源配置"><a href="#多数据源配置" class="headerlink" title="多数据源配置"></a>多数据源配置</h2><p>开发场景中，我们可能有多个数据源，数据源的配置本质上也就是<code>bean</code>的配置，可以具体为<code>DataSource</code>、<code>JDBCTemplate</code>、<code>TransactionManage</code>的配置；其中<code>JDBCTemplate</code>、<code>TransactionManage</code>都是基于<code>DataSource</code>而确定的，本质上还是配置多个的<code>DataSource</code></p><h3 id="配置多数据源"><a href="#配置多数据源" class="headerlink" title="配置多数据源"></a>配置多数据源</h3><ol><li><p>在配置文件中，声明多个<code>DataSource</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 数据源1 foo</span>foo.datasource.url<span class="token operator">=</span>jdbc:h2:mem:foofoo.datasource.username<span class="token operator">=</span>safoo.datasource.password<span class="token operator">=</span><span class="token comment"># 数据源2 bar</span>bar.datasource.url<span class="token operator">=</span>jdbc:h2:mem:barbar.datasource.username<span class="token operator">=</span>sabar.datasource.password<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写配置类，声明多个<code>DataSource</code>以及对应的<code>TransactionManage</code>等</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MutiDataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"foo.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceProperties</span> <span class="token function">fooDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * foo数据源     *     * @return {@link DataSource }     * @author zhuzy     * @date 2022/07/17 20:01     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">fooDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DataSourceProperties</span> dataSourceProperties <span class="token operator">=</span> <span class="token function">fooDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"foo dataSourceProperties: {}"</span><span class="token punctuation">,</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * foo 事务管理器     *     * @param fooDataSource foo数据源     * @return {@link PlatformTransactionManager }     * @author zhuzy     * @date 2022/07/17 20:03     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">public</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token function">fooTxManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> fooDataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>fooDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">JdbcTemplate</span> <span class="token function">fooJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token function">fooDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"bar.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceProperties</span> <span class="token function">barDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * bar数据源     *     * @return {@link DataSource }     * @author zhuzy     * @date 2022/07/17 20:02     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">barDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DataSourceProperties</span> dataSourceProperties <span class="token operator">=</span> <span class="token function">barDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"bar dataSourceProperties: {}"</span><span class="token punctuation">,</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * bar 事务管理器     *     * @param barDataSource bar数据源     * @return {@link PlatformTransactionManager }     * @author zhuzy     * @date 2022/07/17 20:03     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">public</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token function">barTxManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> barDataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>barDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">JdbcTemplate</span> <span class="token function">barJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token function">barDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    这里我声明了两个数据源，并针对<code>foo</code>以及<code>bar</code>数据源，分别声明了他们的<code>事务管理器</code>以及<code>JdbcTemplate</code></p></blockquote></li></ol><h3 id="使用多数据源"><a href="#使用多数据源" class="headerlink" title="使用多数据源"></a>使用多数据源</h3><p>多数据源有两种方式可以进行使用</p><ul><li><p>方法1：声明其中一组数据源（<code>DataSource</code>、<code>TransactionManager</code>、<code>JdbcTemplate</code>）作为<code>Primary</code>的<code>bean</code>，让Spring Boot在注入Bean的时候，优先注入他们，解决二义性问题。</p><blockquote><p>​    该方法适用于在某一个数据源是主数据源时</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** foo数据源** @return {@link DataSource }* @author zhuzy* @date 2022/07/17 20:01*/</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Primary</span><span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">fooDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DataSourceProperties</span> dataSourceProperties <span class="token operator">=</span> <span class="token function">fooDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"foo dataSourceProperties: {}"</span><span class="token punctuation">,</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dataSourceProperties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法2：排除掉<code>DataSourceAutoConfiguration</code>、<code>DataSourceTransactionManagerAutoConfiguration</code>、<code>JdbcTemplateAutoConfiguration</code>，手动选择对应的数据源</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 多数据源需要排除数据源自动配置类,以及事务管理器自动配置类</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        <span class="token class-name">DataSourceTransactionManagerAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        <span class="token class-name">JdbcTemplateAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ge01DatasourceApplication</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"fooDataSource"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    对应的代码如上</p></blockquote><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><h3 id="HikariCP"><a href="#HikariCP" class="headerlink" title="HikariCP"></a>HikariCP</h3><p><code>Spring Boot 2.0</code>默认连接池，是一位在日本工作的白人大爷发明的，中文名为光，特点就是快</p><p><img src="/2022/07/17/java/kuang-jia/dxf-spring-01-datasource/image-20220717210408786.png" alt="速度对比图"></p><p>快的原因：</p><ul><li>很多api没有实现，基于字节码级别优化，通过<code>JavaAssist</code>生成</li><li>大量小的改进<ul><li>FastStatementList代替ArrayList</li><li>无锁集合ConcurrentBag</li><li>代理类优化，用invokestatic代替invokevitrual</li></ul></li></ul><h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><p>特点：</p><ul><li>具备强大的监控功能</li><li>针对主流数据库返回码都有支持</li><li>SQL防注入</li><li>内置加密配置</li><li>众多拓展点，方便进行定制</li></ul><p>如何进行拓展：</p><p>​    通过继承<code>FilterEventAdapter</code>，并修改<code>META-INFO/druid-filter.properties</code></p><p>如何使用druid：</p><p>​    需要在<code>spring-boot-starter-jdbc</code>中排除掉<code>HikariCP</code>，并导入依赖<code>druid-srping-boot-starter</code></p><h2 id="动态数据源"><a href="#动态数据源" class="headerlink" title="动态数据源"></a>动态数据源</h2><h3 id="方式一：自定义DataSource"><a href="#方式一：自定义DataSource" class="headerlink" title="方式一：自定义DataSource"></a>方式一：自定义DataSource</h3><p><img src="/2022/07/17/java/kuang-jia/dxf-spring-01-datasource/image-20220717204414376.png" alt="Spring JDBC原理"></p><p><img src="/2022/07/17/java/kuang-jia/dxf-spring-01-datasource/image-20220717204759642.png" alt="自定义DataSource"></p><blockquote><p>​    通过自定义<code>DataSource</code>，对<code>n</code>个数据源进行聚合，并基于操作类型，返回对应的数据源。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token annotation punctuation">@Primary</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DymicDataSource</span> <span class="token keyword">implements</span> <span class="token class-name">DataSource</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"fooDataSource"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> fooDataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"barDataSource"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> barDataSource<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> operType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> fooDataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> barDataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：<strong>DataSourc中有很多个api需要进行实现，直接实现DataSource而不实现其他方法完全是不行的，开发环境中也不可能采用这种方法</strong></p><h3 id="方式二：AbstractRoutingDataSource"><a href="#方式二：AbstractRoutingDataSource" class="headerlink" title="方式二：AbstractRoutingDataSource"></a>方式二：AbstractRoutingDataSource</h3><blockquote><p>​    由于方式一的缺点显而易见，我们根本不需要关心很多其他的api，因此<code>Spring</code>对<code>DataSource</code>又进行了抽象，我们直接继承``即可实现上述功能</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token annotation punctuation">@Primary</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DymicDataSource02</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"fooDataSource"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> fooDataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"barDataSource"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> barDataSource<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> operType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> operType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> targetDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetDataSource<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> fooDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        targetDataSource<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">,</span> barDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化targetDataSource</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setTargetDataSources</span><span class="token punctuation">(</span>targetDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置默认数据源</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setDefaultTargetDataSource</span><span class="token punctuation">(</span>fooDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    需要注意的是：</p><ul><li>数据源均存储在<code>targetDataSource</code>中，通过<code>api - determineCurrentLookupKey</code>，返回的标识码，返回<code>targetDataSource</code>对应的<code>DataSource</code></li></ul></blockquote><h2 id="Spring事务传播特性"><a href="#Spring事务传播特性" class="headerlink" title="Spring事务传播特性"></a>Spring事务传播特性</h2><p><img src="/2022/07/17/java/kuang-jia/dxf-spring-01-datasource/image-20220717230849260.png" alt="事务传播特性"></p><p><code>spring文档中</code>只提到了三项</p><h2 id="Spirng事务"><a href="#Spirng事务" class="headerlink" title="Spirng事务"></a>Spirng事务</h2><h3 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h3><p><img src="/2022/07/17/java/kuang-jia/dxf-spring-01-datasource/image-20220718172618421.png" alt="编程式事务"></p><h3 id="声明式事务配置"><a href="#声明式事务配置" class="headerlink" title="声明式事务配置"></a>声明式事务配置</h3><p><img src="/2022/07/17/java/kuang-jia/dxf-spring-01-datasource/image-20220718172642791.png" alt="声明式事务"></p>]]></content>
      
      
      <categories>
          
          <category> 丁雪峰spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 丁雪峰spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马-javascript</title>
      <link href="/2022/07/11/qian-duan/hei-ma-javascript/"/>
      <url>/2022/07/11/qian-duan/hei-ma-javascript/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/07/11/qian-duan/hei-ma-javascript/image-20181231161326146.png" alt="image-20181231161326146"></p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><ol><li><p>弹出输入框：</p><pre class="line-numbers language-none"><code class="language-none">prompt("")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/11/qian-duan/hei-ma-javascript/image-20220711171539284.png" alt="image-20220711171539284"></p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s</title>
      <link href="/2022/07/05/yun-wei/k8s/"/>
      <url>/2022/07/05/yun-wei/k8s/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    深入剖析<code>k8s</code></p></blockquote><h1 id="K8S"><a href="#K8S" class="headerlink" title="K8S"></a>K8S</h1><h2 id="1-历史"><a href="#1-历史" class="headerlink" title="1. 历史"></a>1. 历史</h2><p>​    云计算与pass</p><p><code>Cloud Foundry</code>为何被后起之秀<code>Docker</code>替代。</p><blockquote><p>​    docker项目给PaaS世界带来的“降维打击”，其实是提供了一种非常便利的打包机制。这种机制直接打包了应用运行所需要的整个文件系统，从而保证了本地环境和云端环境的高度一致.</p></blockquote><h2 id="2-容器的本质"><a href="#2-容器的本质" class="headerlink" title="2. 容器的本质"></a>2. 容器的本质</h2><p><img src="/2022/07/05/yun-wei/k8s/image-20220705192343427.png" alt="虚拟机与Docker"></p><p>相信大家都看过这样一张图，对比的是虚拟机和<code>docker</code>技术</p><ul><li>虚拟机技术：本质是通过<code>Hypervisor</code>软件虚拟化操作系统的各个硬件如<code>CPU</code>、<code>内存</code>、<code>I/O设备</code>等等，然后在这些虚拟硬件上安装了一个新的操作系统<code>Guest OS</code></li><li>Docker技术：<code>Docker</code>容器本质上是一个进程，通过<code>Namespace</code>技术，对进程进行了隔离，<strong>以一种障眼法的形式，让容器中的进程好像是独立的（如PID=1)，而不是依附于宿主机</strong></li></ul><p>Docker 容器这个听起来玄而又玄的概念，实际上是在创建容器进程时，指定了这个进程所需要启用的一组 Namespace 参数。<strong>容器，其实是一种特殊的进程而已</strong></p><pre class="line-numbers language-none"><code class="language-none"># 通过指定Namespace参数为`CLONE_NEWPID`，设置创建一个全新的进程空间int pid = clone(main_function, stack_size, CLONE_NEWPID | SIGCHLD, NULL); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-容器的核心技术"><a href="#3-容器的核心技术" class="headerlink" title="3. 容器的核心技术"></a>3. 容器的核心技术</h2><h3 id="NameSpace"><a href="#NameSpace" class="headerlink" title="NameSpace"></a>NameSpace</h3><ul><li><p><code>Namepsace</code>：前面我们说过，容器的本质就是一个运行在宿主机中的进程，只是通过<code>Namespace</code>技术将该<code>进程</code>进行隔离。由此会带来几个问题：</p><blockquote><ol><li>​    共用宿主机的操作系统内核</li><li>​    很多资源和对象无法<code>Namespace</code>化，最典型的例子如<code>时间</code></li><li>​    如何保证<code>容器的资源隔离性</code>（如何防止宿主机其他进程或容器这个进程吃掉了过多的资源）（<code>Cgroups</code>）</li></ol></blockquote></li></ul><h3 id="Cgroups"><a href="#Cgroups" class="headerlink" title="Cgroups"></a>Cgroups</h3><p><code>Linux Cgroups</code>：全称是<code>Linux Control Group</code>，最重要的功能是能够限制一个<strong>进程组</strong>能够使用资源的上限，如CPU、磁盘、内存、网络带宽等</p><p><strong>剖析Cgroups</strong></p><p>​    <code>Linux Cgroups</code>的功能是能够限制进程组能够使用资源的上限，那它是怎么限制的呢？</p><p>​    在<code>Linux</code>中<code>Cgroups</code>给用户暴露的操作接口是文件系统，即它以文件和目录的方式组织在操作系统的<code>/sys/fs/cgroup</code>路径下（在centos中，目录情况如下）</p><p><img src="/2022/07/05/yun-wei/k8s/image-20220706105238684.png" alt="cgroups文件夹"></p><p>​    该文件夹下展示了很多子文件夹，实际上每一个子目录都是一个子系统，我们可以<code>通过cgroups对这些子系统的资源进行限制</code>，如<code>cpu</code>、<code>memory</code>、<code>cpuset</code>等等</p><ul><li>blkio，为块设备设定I/O 限制，一般用于磁盘等设备；</li><li>cpu，为进程分配cpu的资源占用上限等；</li><li>cpuset，为进程分配单独的 CPU 核和对应的内存节点；</li><li>memory，为进程设定内存使用的限制。</li></ul><p><strong>使用Cgroups</strong></p><p>​    很清楚的可以看到<code>cgroup</code>能够限制的子系统资源，那如何进行使用呢？以<code>cpu</code>为例，我们可以到<code>cpu</code>目录下创建一个子目录<code>test_container</code>，创建完毕后，可以发现该目录会自动创建所属<code>cpu</code>的资源限制文件，对这些文件的操作就是对这个新创建目录（<code>子系统</code>）资源限制的操作。</p><p><img src="/2022/07/05/yun-wei/k8s/image-20220706105633813.png" alt="对子系统test_container cpu相关资源限制的配置文件"></p><p>​    我们可以在该<code>目录（子系统）</code>下写一个死循环进程，占用完毕所有的<code>cpu</code>资源</p><p><img src="/2022/07/05/yun-wei/k8s/image-20220706105916310.png" alt="容器占用了所有的cpu资源"></p><p>​    基于上面对<code>cgroup</code>的讲解，我们可以通过<code>限制该目录下的cpu资源配置文件</code>，来控制<code>cpu可占用上限</code></p><p>​    我们先看一下默认的配置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost test_container]# cat cpu.cfs_quota_us-1[root@localhost test_container]# cat cpu.cfs_periodus100000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    该配置的含义是在<code>每cfs_periodus（us）的单位时间内，该目录（容器）能够使用cpu的时间为quota_us(-1即为不限制)</code></p><p>​    我们可以修改一下<code>cfs_quota_us</code>为<code>20000</code>，这样我们只能占用<code>20%</code>的cpu资源，并将该<code>pid</code>添加至该进程组的<code>tasks</code>中，并用top命令进行检验</p><p><img src="/2022/07/05/yun-wei/k8s/image-20220706111407546.png" alt="使用cgroups限制cpu资源后"></p><p><strong>docker中cgroup的使用</strong></p><p>回到docker中，本质上也是基于对<code>资源文件</code>的配置以实现资源隔离</p><pre class="line-numbers language-none"><code class="language-none">docker run -it --cpu-period=100000 --cpu-quota=20000 ubuntu /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>cgroup的不完善</strong></p><p>由于<code>top</code>命令显示的内核信息是<code>/proc</code>文件系统之中，而<code>/proc</code>文件系统并不清楚<code>Cgroups限制的存在</code>，因此在容器中执行的<code>top</code>命令，仍然显示的是宿主机的数据。这个问题在生产环境中必须需要修复</p><blockquote><p>​    解决方案：使用<code>lxcfx</code>将宿主机的<code>/var/lib/lxcfx/proc/*</code>文件挂载到容器的<code>/proc/*</code></p><p><a href="https://juejin.cn/post/6847902216511356936">https://juejin.cn/post/6847902216511356936</a></p></blockquote><h3 id="Rootfs"><a href="#Rootfs" class="headerlink" title="Rootfs"></a>Rootfs</h3><blockquote><p>​    Rootfs是根文件系统，包含操作系统的所有文件、配置和目录，并不包括操作系统内核。在容器中执行命令<code>ls</code>，如果不切换<code>Rootfs</code>的情况下，会展示宿主机的文件内容，这应该是不正确的。因此我们需要对容器的文件系统进行重新挂载。</p></blockquote><p><strong>重新挂载文件系统</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"none"</span><span class="token punctuation">,</span> <span class="token string">"/tmp"</span><span class="token punctuation">,</span> <span class="token string">"tmpfs"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过<code>c语言代码</code>，可以将磁盘<code>/tmp</code>重新挂载在<code>tmpfs内存盘</code>中</p><p><code>docker</code>使用<code>pivot_root</code>或者<code>chroot</code>这两个系统调用重挂载<code>Rootfs根文件系统</code></p><p>基于这种能力，容器解决了<code>pass</code>的难题，如何打包操作系统，一起发布。</p><h3 id="Union-FS"><a href="#Union-FS" class="headerlink" title="Union FS"></a>Union FS</h3><p>镜像还有一个问题便是在于，每次更新<code>rootfs</code>后，需要重新复制并制作新的<code>rootfs</code>嘛，如何保留<code>rootfs</code>的版本信息。</p><p>一个直观的做法便是每做一次更新，便只做增量更新。</p><blockquote><p>​    Docker 在镜像的设计中，引入了层（layer）的概念。也就是说，用户制作镜像的每一步操作，都会生成一个层，也就是一个增量 rootfs。</p><p>当然，这个想法不是凭空臆造出来的，而是用到了一种叫作联合文件系统（Union File System）的能力。</p><p>Union File System 也叫 UnionFS，最主要的功能是将多个不同位置的目录联合挂载（union mount）到同一个目录下。比如，我现在有两个目录 A 和 B，它们分别有两个文件：</p><pre class="line-numbers language-none"><code class="language-none">$ tree.├── A│  ├── a│  └── x└── B  ├── b  └── x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我使用联合挂载的方式，将这两个目录挂载到一个公共的目录 C 上：</p><pre class="line-numbers language-none"><code class="language-none">$ mkdir C$ mount -t aufs -o dirs=./A:./B none ./C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时，我再查看目录 C 的内容，就能看到目录 A 和 B 下的文件被合并到了一起：</p><pre class="line-numbers language-none"><code class="language-none">$ tree ./C./C├── a├── b└── x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker镜像都是由多个层组成的</p><pre class="line-numbers language-none"><code class="language-none">$ docker image inspect ubuntu:latest...     "RootFS": {      "Type": "layers",      "Layers": [        "sha256:f49017d4d5ce9c0f544c...",        "sha256:8f2b771487e9d6354080...",        "sha256:ccd4d61916aaa2159429...",        "sha256:c01d74f99de40e097c73...",        "sha256:268a067217b5fe78e000..."      ]    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数元科技开发规范</title>
      <link href="/2022/07/05/gong-zuo/202207-bei-jing-da-shu-yuan/da-shu-yuan-ke-ji-kai-fa-gui-fan/"/>
      <url>/2022/07/05/gong-zuo/202207-bei-jing-da-shu-yuan/da-shu-yuan-ke-ji-kai-fa-gui-fan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    本篇博文介绍并记录一部分公司的开发规范</p></blockquote><h3 id="Java规范"><a href="#Java规范" class="headerlink" title="Java规范"></a>Java规范</h3><h4 id="指定序列化ID"><a href="#指定序列化ID" class="headerlink" title="指定序列化ID"></a>指定序列化ID</h4><p>实现序列化接口的类要指定成员变量 <strong>serialVersionUID</strong> ，以便实现新老版本之间的 <strong>兼容</strong>。<br>如果不指定 serialVersionUID ，Java 编译器会根据类的成员变量和一定的算法生成用来表达对象的 serialVersionUID，当这个类中内容发生变化时，Java 自动计算出的 serialVersionUID 会发生变量，这样就无法读取之前版本所存储的数据。<br>一般情况下，建议将 serialVersionUID 指定为 1L，当此值没有变动时，就可以保护后续版本和之前版本的兼容，如果要强制和之前版本不兼容，此值可以每次增加 1。</p><p><strong>示例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【正确用法】 <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoClass</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="路径分隔符和文件分隔符"><a href="#路径分隔符和文件分隔符" class="headerlink" title="路径分隔符和文件分隔符"></a>路径分隔符和文件分隔符</h4><p>在 Windows 中，路径与路径之间的路径分隔符是 ‘;’ ，而在 Linux 中是 ‘:’ 。<br>在 Windows 中，路径中的文件分隔符是 ‘' ，而在 Linux 中是 ‘/‘ 。<br>所以，考虑到代码在不同平台的可移植性，代码中在使用到路径分隔符和文件分隔符的地方，不要写死，必须要使用 File 类的字符串常量 File.path.Separator 和 File.separator ， File 类可以根据当前的平台，提供该平台所对应的分隔符。</p><p><strong>示例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【 错误用法】 <span class="token comment">/* 错误的文件分隔符使用方式 */</span> <span class="token class-name">String</span> sysPath <span class="token operator">=</span> <span class="token string">"/root"</span><span class="token punctuation">;</span> <span class="token class-name">String</span> javaPath <span class="token operator">=</span> <span class="token string">"/java/bin"</span><span class="token punctuation">;</span>   <span class="token comment">/* 错误的路径分隔符使用方式 */</span> <span class="token class-name">String</span> path <span class="token operator">=</span> sysPath <span class="token operator">+</span> <span class="token string">";"</span> <span class="token operator">+</span> javaPath<span class="token punctuation">;</span>   【正确用法】 <span class="token class-name">String</span> sptor <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">;</span> <span class="token class-name">String</span> pathSptor <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span>pathSep a rator<span class="token punctuation">;</span>   <span class="token comment">/* 正确文件分隔符使用方式 */</span> <span class="token class-name">String</span> sysPath <span class="token operator">=</span> sptor <span class="token operator">+</span> <span class="token string">"root"</span><span class="token punctuation">;</span> <span class="token class-name">String</span> javaPath <span class="token operator">=</span> sptor <span class="token operator">+</span> <span class="token string">"java"</span> <span class="token operator">+</span> sptor <span class="token operator">+</span> <span class="token string">"bin"</span><span class="token punctuation">;</span>   <span class="token comment">/* 正确路径分隔符使用方式 */</span> <span class="token class-name">String</span> path <span class="token operator">=</span> sysPath <span class="token operator">+</span> pathSptor <span class="token operator">+</span> javaPath<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正则表达式预编译"><a href="#正则表达式预编译" class="headerlink" title="正则表达式预编译"></a>正则表达式预编译</h4><p>推荐使用正则表达式的预编译功能，可以有效加快正则匹配速度。<br>Pattern 要定义为 static final 静态变量， 以避免执行多次预编译。</p><p><strong>示例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【错误用法】 <span class="token comment">// 没有使用预编译 </span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regexRule<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span class="token comment">// 多次预编译 </span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regexRule<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Matcher</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>   【正确用法】 <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regexRule<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">Matcher</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="集合转数组"><a href="#集合转数组" class="headerlink" title="集合转数组"></a>集合转数组</h4><p>使用集合转数组的方法，必须使用集合的 toArray(T[] array) ，传入的是类型完全一样的数组，大小就是 list.size() 。<br>使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配 内存空间，并返回新数组地址；如果数组元素个数大于实际所需，下标为 [list.size()] 的数组元素将被置为 null ，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。</p><p><strong>示例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【错误用法】 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 最后一行会出现 <span class="token class-name">ClassCastException</span> 错误。   【正确用法】 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"guan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> array <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组转集合"><a href="#数组转集合" class="headerlink" title="数组转集合"></a>数组转集合</h4><p>使用工具类 Arrays.asList() 把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。<br>说明 asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。 Arrays.asList 体现的是适配器模式，只是转换接口，后台的数据仍是数组。</p><p><strong>示例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【错误用法】 <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"you"</span><span class="token punctuation">,</span> <span class="token string">"wu"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 运行时异常 </span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span> <span class="token punctuation">;</span> <span class="token comment">// list.get(0)也会随之改变 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调试信息"><a href="#调试信息" class="headerlink" title="调试信息"></a>调试信息</h3><h4 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h4><ul><li>不要直接使用日志系统 ( Log4j、Logback )中的 API ，更不要直接使用 System.out 与 System.err 进行控制台打印，应该使用日志框架 SLF4J 中的 API 来输出日志。使用 门面模式的日志框架，有利于系统维护和各个类的日志处理方式统一</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【正确用法】 <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTest</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Abc</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>日志文件推荐至少保留 15 天， 放置有些异常具备以 “ 周 ” 发生的特点</li><li>对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。 这是因为如果在在日志中有字符串拼接动作，即使日志没有打印数据，也会执行字符串拼接操作 ，如果日志中有对象，会执行对象的 toString() 方法 ，浪费了系统资源，执行了上述操作，最终却不需要打印日志</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">【错误用法】 <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTest</span> <span class="token punctuation">{</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"x Processing trade with id: "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" and symbol ： "</span> <span class="token operator">+</span> symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>   【正确用法】 <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTest</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Abc</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token comment">// 采用有条件输出方式 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">" xProcessing trade with id: "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" and symbol ： "</span> <span class="token operator">+</span> symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>           <span class="token comment">// 采用占位符方式 </span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"xProcessing trade with id: {} and symbol ： {} "</span> <span class="token punctuation">,</span> id<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx静态资源服务器及代理</title>
      <link href="/2022/07/04/yun-wei/nginx-jing-tai-zi-yuan-fu-wu-qi-ji-dai-li/"/>
      <url>/2022/07/04/yun-wei/nginx-jing-tai-zi-yuan-fu-wu-qi-ji-dai-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    本篇博文介绍并演示一下<code>nginx</code>的最常见用途：</p><ol><li>静态资源服务器</li><li>跨域解决</li></ol></blockquote><p>演示的场景如下：</p><p>​    写了一个静态页面，在本地，通过idea直接访问的，所以路径看起来是这样（localhost：63342）</p><p><img src="/2022/07/04/yun-wei/nginx-jing-tai-zi-yuan-fu-wu-qi-ji-dai-li/image-20220704161211185.png" alt="本地访问静态页面"></p><p>我们知道<code>nginx</code>有一个强大的功能，即静态资源服务器。能够把我们的静态资源以服务的方式，通过一个端口进行暴露。同时，对于文件树以及页面都能够很好的展示。</p><p><img src="/2022/07/04/yun-wei/nginx-jing-tai-zi-yuan-fu-wu-qi-ji-dai-li/image-20220704161425355.png" alt="文件树"></p><p><img src="/2022/07/04/yun-wei/nginx-jing-tai-zi-yuan-fu-wu-qi-ji-dai-li/image-20220704161445842.png" alt="静态页面"></p><h2 id="静态资源服务器"><a href="#静态资源服务器" class="headerlink" title="静态资源服务器"></a>静态资源服务器</h2><p>我们便可以通过端口的方式，以http协议去访问这个资源</p><p>具体的<code>nginx.conf</code>如下：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">server {        listen    8001;        server_name demo;        location / {            root D:/Git/dsy-git/svn/szfwpt/trunk/digital_platform_staticPage;            index projectDemo.html;            autoindex on;        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拆解一下配置：</p><p>​    该配置位于http{}标签下，我们在<code>nginx</code>服务器中，提供了一个<code>server服务</code>，其中该服务暴露的端口为<code>8001</code>，</p><p>有一个路径映射规则，对于访问的根路径<code>/</code>，会映射到本地文件夹，<code>D:/Git/dsy-git/svn/szfwpt/trunk/digital_platform_staticPage</code></p><blockquote><p>​    这里需要注意一点<code>root</code>和<code>alais</code>的区别：</p><ul><li><code>root</code>：在映射完毕后，会追加location的值，即会在<code>root</code>路径的后面追加上面写的<code>/</code></li><li><code>alais</code>：在映射完毕后，不会追加location的值</li></ul></blockquote><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>​    上文我们在<code>8001</code>端口起了一个静态资源服务器，该页面的所有请求都是类似这样发送的</p><p><img src="/2022/07/04/yun-wei/nginx-jing-tai-zi-yuan-fu-wu-qi-ji-dai-li/image-20220704163256768.png" alt="请求发送"></p><p>很明显的可见，发送的请求将是<code>localhost:8001/projectDemo/UserInfo/info/id</code>，而我的后端资源起的端口是<code>8003</code>，因此肯定会发生跨域情况，我们要做的便是基于<code>nginx</code>，解决跨域</p><p>解决的方法也很简单，只需要对该接口进行转换代理，配置如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">location <span class="token operator">/</span>projectDemo <span class="token punctuation">{</span>proxy_pass http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8003</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个配置也是配置在我们上面声明的<code>server</code>中，含义是将</p><p><code>/projectDemo</code>路径的资源，代理到<code>http://127.0.0.1:8003/projectDemo</code>中</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora过期</title>
      <link href="/2022/06/28/gong-ju/typora-guo-qi/"/>
      <url>/2022/06/28/gong-ju/typora-guo-qi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    今天突然发现<code>Markdown</code>编辑器<code>typora</code>不能用了，之前其实就有过，当时更新后告知需要收费，于是立马换了个低的版本，现在突然发现低版本居然也弹窗提示不能用，这哪里能忍。</p><p>​    转自博客：<a href=""></a><a href="https://www.cnblogs.com/qzx712/p/16372952.html">一文解决Typora无法打开之”this beta version of Typora is expired”的问题</a></p></blockquote><p>typora,个人认为是世界上最好用的markdown语法编辑器(虽然也没用过多少个)最近官宣要收费了(89r),果不其然,今天打开的时候我的beta版typora弹出了如下错误:”This beta version of Typora is expired, please…”</p><p><img src="/2022/06/28/gong-ju/typora-guo-qi/2754689-20220614014345828-141952461.png" alt="image-20181231005146712"></p><p>简单来说就是这个旧版不让用了,让你氪金(我自己的版本是0.11.13).</p><p>但是官网被墙了我也懒得上去下新版了,还能省钱(doge) ,于是在网上浏览到更改系统时间可以骗过typora从而就能用了</p><p>最后一个免费版链接自取(有条件一定要支持收费版啊)：<br>链接：<a href="https://pan.baidu.com/s/1jb3XiJ8Dr8dOrD8Ms2795w?pwd=xbkd">https://pan.baidu.com/s/1jb3XiJ8Dr8dOrD8Ms2795w?pwd=xbkd</a><br>提取码：xbkd</p><p>首先声明这个方法适用的条件是 你的typora必须得是0.11.18版本之前的, 不过它既然弹出了这个error框, 那你的软件应该就是这个版本之前的</p><p>右键时间位置, 调整时间到很久之前, 手动试了一下还真行</p><p><img src="/2022/06/28/gong-ju/typora-guo-qi/2754689-20220614014352245-556785052.png" alt="image-20220614005550974"></p><p>但是每次打开typora都要调时间并且用完了还得调回来未免也太麻烦了!</p><p>我又想起以前用Xshell7和Xftp7的时候网上整了个批处理文件,原理就是把系统时间调到好久以前, 打开程序后再把系统时间改回来, <strong>这样就不用自己把时间调回来了</strong>!</p><p>代码原理很简单,而套用到typora上也很简单,只要<strong>把start的路径改成你电脑上的typora路径</strong>,注释和title改不改都无所谓,即</p><pre class="line-numbers language-vb" data-language="vb"><code class="language-vb">##################################begin####################@echo off%1 mshta vbscript:CreateObject("Shell.Application").ShellExecute("cmd.exe","/c%~s0::","","runas",1)(window.close)title Typora启动器set atime=%date:~0,4%-%date:~5,2%-%date:~8,2%#设置系统时间date 2018-12-31    #改成你的typora启动路径    start ""  "Path_TO_Your_Typora\Typora.exe"echo 启动软件中...ping 0.0.0.0 -n 10&gt; nullecho 同步时间中，完成后自动关闭窗口...date %atime%exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体操作如下:</p><p>在桌面 <strong>新建</strong> 一个批处理文件(后缀为.bat的文件),用一个文本编辑器打开,并将上面的代码<strong>复制</strong>进去(当然你要<strong>将里面的typora路径改成你自己电脑里的路径</strong>)</p><p>现在我们得到了一个批处理文件, 我们发现直接运行它还是会报错, 原因在于没有给他管理员权限, 但是我又不想每次打开这个批处理文件都要右键一下以管理员身份运行, 而我在属性里没有找到能每次以管理员身份运行的开关, 但是有另一种方法解决这个问题</p><p>将这个<strong>批处理文件</strong>随意的<strong>放到某个地方</strong>, 最好是和typora.exe文件同目录,这样不会误删, 然后再右键它, 选择<strong>发送到-&gt;桌面快捷方式</strong></p><p><img src="/2022/06/28/gong-ju/typora-guo-qi/2754689-20220614014359029-740562028.png" alt="image-20220614011327696"></p><p>我们再右键这个批处理文件的<strong>桌面快捷方式</strong>, 点击其属性,再点击高级,现在里面有选择框”<strong>用管理员身份运行</strong>“, 我们将其打上钩,点击 <strong>确定</strong> ,点击 <strong>应用</strong> (一定要点),然后点 <strong>确定</strong> 关闭窗口</p><p><img src="/2022/06/28/gong-ju/typora-guo-qi/2754689-20220614014400663-850022268.png" alt="image-20220614011227173"></p><p>然后点一下我们桌面上的<strong>批处理快捷方式</strong>, 怎么样, 现在是不是可以正常运行typora了?以后每次打开typora我们就点这个批处理文件就行</p><p>但是还有一点我不能忍受, <strong>这个批处理文件的图标不是typora的</strong>!</p><p>所谓”做戏就要做全套”, 咱高低得把它改咯!</p><p>方法如下:</p><p>仍然是右键批处理文件后点击 <strong>属性</strong> , 点击 <strong>更改图标</strong></p><p><img src="/2022/06/28/gong-ju/typora-guo-qi/2754689-20220614014402669-1782558387.png" alt="image-20220614012041048"></p><p>将下面框框的路径<strong>改成你的typora.exe的路径</strong>,选中第一个图标然后点<strong>确定</strong>,然后点<strong>应用</strong>在点<strong>确定</strong>.</p><p><img src="/2022/06/28/gong-ju/typora-guo-qi/2754689-20220614014404316-1384252052.png" alt="image-20220614012149572"></p><p><strong>这样我们就彻底完成辣!</strong></p><p><img src="/2022/06/28/gong-ju/typora-guo-qi/2754689-20220614014406710-125334998.png" alt="image-20220614012351302"></p><p>ps: 不过最好的话打开typora后把偏好设置里的自动检查更新给关了<br>而且只要typora进程存在, 你打开markdown文件typora是不会检测得到你软件是过期的</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城</title>
      <link href="/2022/06/28/xiang-mu/gu-li-shang-cheng/"/>
      <url>/2022/06/28/xiang-mu/gu-li-shang-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="一、项目架构"><a href="#一、项目架构" class="headerlink" title="一、项目架构"></a>一、项目架构</h1><img src="/2022/06/28/xiang-mu/gu-li-shang-cheng/image-20181231162312680.png" alt="image-20181231162312680" style="zoom:200%;"><h2 id="1-1-数据库与模块对应关系"><a href="#1-1-数据库与模块对应关系" class="headerlink" title="1.1 数据库与模块对应关系"></a>1.1 数据库与模块对应关系</h2><table><thead><tr><th>数据库</th><th>模块</th><th>解释(端口)</th></tr></thead><tbody><tr><td>sms</td><td>coupon</td><td>优惠(7000)</td></tr><tr><td>ums</td><td>member</td><td>会员(8000)</td></tr><tr><td>oms</td><td>order</td><td>订单(9000)</td></tr><tr><td>pms</td><td>product</td><td>商品(10000)</td></tr><tr><td>wms</td><td>ware</td><td>仓储(11000)</td></tr></tbody></table><h1 id="二、虚拟机安装"><a href="#二、虚拟机安装" class="headerlink" title="二、虚拟机安装"></a>二、虚拟机安装</h1><h2 id="2-1-安装VisualBox"><a href="#2-1-安装VisualBox" class="headerlink" title="2.1 安装VisualBox"></a>2.1 安装VisualBox</h2><p>下载链接：<a href="https://www.virtualbox.org/wiki/Downloads![img](https://cdn.nlark.com/yuque/0/2022/png/22792222/1642154999691-229ada95-1f0f-4a01-a81a-e74bcaeb3699.png)">https://www.virtualbox.org/wiki/Downloads![img](https://cdn.nlark.com/yuque/0/2022/png/22792222/1642154999691-229ada95-1f0f-4a01-a81a-e74bcaeb3699.png)</a></p><p>备注：安装该软件需要开启CPU虚拟化（必须得安装）</p><h2 id="2-2-安装vagrant"><a href="#2-2-安装vagrant" class="headerlink" title="2.2 安装vagrant"></a>2.2 安装vagrant</h2><p>官网链接：<a href="https://www.vagrantup.com/">https://www.vagrantup.com/</a> </p><p>下载特别慢，使用以下下载途径</p><p>csdn博客，vagrant2.2.7云盘地址：<a href="https://blog.csdn.net/yuanjianhua77/article/details/104143240">https://blog.csdn.net/yuanjianhua77/article/details/104143240</a></p><p>注：已保存至百度网盘中</p><p>根据提示安装完成后，重启机器，打开命令行</p><pre class="line-numbers language-none"><code class="language-none">vagrant -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642155218861-7740e393-6528-4049-a41a-5ac8e95ba031.png" alt="img"></p><p>出现以上提示则安装成功</p><h2 id="2-3-安装centos-x2F-7（自动方式）"><a href="#2-3-安装centos-x2F-7（自动方式）" class="headerlink" title="2.3 安装centos/7（自动方式）"></a>2.3 安装centos/7（自动方式）</h2><p>在任意文件夹打开cmd控制台窗口</p><p>输入以下命令：</p><ol><li>初始化镜像</li></ol><pre class="line-numbers language-none"><code class="language-none">vagrant init centos/7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化之后， 会在当前文件夹生成Vagrantfile文件，该文件即是当前镜像配置</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642157855036-18f5ff40-53ce-45ea-a2c0-0b4b89604e7b.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642157872829-b8399e8f-beb8-4229-80fc-e2f34cac9543.png" alt="img"></p><ol><li>安装镜像（使用官方渠道下载镜像， 速度特别慢）</li></ol><pre class="line-numbers language-none"><code class="language-none">vagrant up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-3-安装centos-x2F-7（手动方式）"><a href="#2-3-安装centos-x2F-7（手动方式）" class="headerlink" title="2.3 安装centos/7（手动方式）"></a>2.3 安装centos/7（手动方式）</h2><ol><li>下载镜像</li></ol><p>centos/7 box镜像下载链接: <a href="https://app.vagrantup.com/centos/boxes/7">https://app.vagrantup.com/centos/boxes/7</a></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642156690152-0b59c04d-3086-4908-be14-ea138ec881e8.png" alt="img"></p><ol><li>添加镜像至box</li></ol><pre class="line-numbers language-none"><code class="language-none">vagrant box add imageName imagePath<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中： imageName为要取的名字，不能加/，加/的话默认找的是官方镜像</p><p>​     imagePath为镜像的路径，记得写成绝对路径</p><p>镜像管理其他命令：</p><p>vagrant box list ： 列出所有镜像</p><p>vagrant box remove imageName ： 移出镜像</p><ol><li>安装镜像</li></ol><pre class="line-numbers language-none"><code class="language-none">vagrant init imageNamevagrant up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-4-虚拟机网络配置"><a href="#2-4-虚拟机网络配置" class="headerlink" title="2.4 虚拟机网络配置"></a>2.4 虚拟机网络配置</h2><p>在2.3中，我们使用<code>vagrant init</code>命令生成了VagrantFile文件，该文件即保存了该虚拟机的基本信息</p><p>如果我们想让Win10 本机与 centos虚拟机互相ping 通， 需要<strong>二者在同一网段中</strong></p><p>步骤如下：</p><ol><li>查看本机VisualBoxIP 网段</li></ol><p>cmd控制台输入<code>ipconfig</code></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642158069906-7e81983e-e337-401e-aa85-226027eb07e5.png" alt="img"></p><p>网段处于：192.168.56.1</p><ol><li>配置VagrantFile文件（具体位置详见2.3）</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642157996907-47c47147-f780-4acb-bdc6-24a8065edc71.png" alt="img"></p><ol><li>修改第35行，该行默认为注释状态，打开注释之后， 修改ip地址，使其与Win10 本机位于同一网段之中</li><li>重新启动虚拟机</li></ol><pre class="line-numbers language-none"><code class="language-none">vagrant reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-5-如何修改vagrant系统的root用户密码"><a href="#2-5-如何修改vagrant系统的root用户密码" class="headerlink" title="2.5 如何修改vagrant系统的root用户密码"></a>2.5 如何修改vagrant系统的root用户密码</h2><ol><li><p>先使用vagrant 用户登录。</p></li><li><p>$sudo passwd root #按照提示输入两次新的密码，并加以确认。</p></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html">然后就可以修改root用户密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如何使用Xhsll连接Vagrant</p><ol><li><p>修改 /etc/ssh/sshd_config 文件，（注意，vagrant用户下这个文件是只读的，可能什么也看不见）<br>修改 ssd_config 里 PermitRootLogin属性 改为yes ，并把前面的# 去掉</p><p><img src="/2022/06/28/xiang-mu/gu-li-shang-cheng/image-20181231213338306.png" alt="image-20181231213338306"></p></li><li><p>PasswordAuthentication 改为yes 并且去掉 #</p><p><img src="/2022/06/28/xiang-mu/gu-li-shang-cheng/image-20220815213354128.png" alt="image-20220815213354128"></p></li><li><p>保存退出，重启sshd服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="三、Docker及相关软件安装"><a href="#三、Docker及相关软件安装" class="headerlink" title="三、Docker及相关软件安装"></a>三、Docker及相关软件安装</h1><h2 id="3-1-Docker安装及加速配置"><a href="#3-1-Docker安装及加速配置" class="headerlink" title="3.1 Docker安装及加速配置"></a>3.1 Docker安装及加速配置</h2><ol><li>删除旧版本docker</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>安装docker仓库</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum install -y yum-utils  sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>安装docker引擎</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置docker镜像加速</strong></p><ol><li>打开阿里云镜像加速服务地址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></li><li>点击镜像工具-&gt;镜像加速器</li><li>按照提示输入命令<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642158637599-060cd627-7867-4a2f-8717-f69f3c6fca76.png" alt="img"></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["https://249x3agn.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设置docker自启动</strong></p><pre class="line-numbers language-none"><code class="language-none">systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-2-安装Mysql"><a href="#3-2-安装Mysql" class="headerlink" title="3.2 安装Mysql"></a>3.2 安装Mysql</h2><ol><li><p>下载Mysql5.7镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>查看已安装镜像</p><pre class="line-numbers language-none"><code class="language-none">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642158768143-71f3f3d9-f5d3-46b1-bd11-a7ef618d9879.png" alt="img"></p><ol><li>启动Mysql</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -p 3306:3306 --name gulimall-mysql \-v /home/gulimall/mydata/mysql/log:/var/log/mysql \-v /home/gulimall/mydata/mysql/data:/var/lib/mysql \-v /home/gulimall/mydata/mysql/conf/my.cnf:/etc/mysql/my.cnf \-v /home/gulimall/mydata/mysql/conf:/etc/mysql \-e MYSQL_ROOT_PASSWORD=root \-d mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数解释：</p><p>-p ： 设置端口关联， 虚拟机端口3306映射到docker容器端口3306</p><p>-v：目录挂载，虚拟机目录/mydata/mysql…映射到docker容器目录/var/…</p><p>-d：指定image镜像</p><ol><li>查看Mysql容器<br><code>docker ps</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642159387950-bdfcd0a7-204f-41e3-a5be-80fdb4864e0e.png" alt="img"></li><li>修改Mysql配置<br>由于我们已经将配置目录映射到虚拟机的/mydata/mysql/conf目录，因此现在只需要<strong>创建并编辑my.cnf文件即可</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">vim /home/gulimall/mydata/mysql/conf/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加一下内容：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[client]default-character-set=utf8[mysql]default-character-set=utf8[mysqld]init_connect='SET collation_connection = utf8_unicode_ci'init_connect='SET NAMES utf8'character-set-server=utf8collation-server=utf8_unicode_cisecure_file_priv=/var/lib/mysqlexpire_logs_days=7sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTIONmax_connections=1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Mysql重启<code>docker restart mysql</code></p><ol><li>进入容器内部<br>启动容器后， 使用<code>docker exec -it mysql /bin/bash</code>进入容器内部<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642159698746-1d7e79b2-8a7d-40d4-ae16-3e31e2536ad7.png" alt="img"></li><li>进入mysql<br><code>mysql -uroot -p</code></li><li>或者不进入容器直接进入mysql<br><code>docker exec -it mysql mysql -uroot -p</code></li></ol><p>**远程连接<code>mysql**</code></p><ol><li><p>登陆容器内部执行以下命令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">select</span> Host<span class="token punctuation">,</span><span class="token keyword">User</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> Host<span class="token operator">=</span><span class="token string">'*'</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>即可远程连接</p></li></ol><p><strong>修改远程登陆root密码</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mysql；<span class="token comment"># 查询authentication_string是否为空</span><span class="token keyword">select</span> host<span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">,</span>authentication_string <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span class="token comment"># 若不为空 还需要执行</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string<span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span class="token comment">--将字段置为空</span><span class="token comment"># 否则直接执行</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">user</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'MBGpDKacnhfrlusTjL7qoCF6ySiWxXkO'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-安装Redis"><a href="#3-3-安装Redis" class="headerlink" title="3.3 安装Redis"></a>3.3 安装Redis</h2><ol><li>下载Redis镜像 <code>docker pull redis</code></li><li>创建实例并启动redis</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir -p /home/gulimall/mydata/redis/conftouch /home/gulimall/mydata/redis/conf/redis.confdocker run -p 6379:6379 --name gulimall-redis -v /home/gulimall/mydata/redis/data:/data \-v /home/gulimall/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \-d redis redis-server /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>为了保证redis重启后数据不丢失， 修改redis.conf配置文件， 启用AOF模式</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">appendonly yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-4-Docker容器自启动"><a href="#3-4-Docker容器自启动" class="headerlink" title="3.4 Docker容器自启动"></a>3.4 Docker容器自启动</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">docker update containerName --restart=always<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="四、开发环境"><a href="#四、开发环境" class="headerlink" title="四、开发环境"></a>四、开发环境</h1><h2 id="4-1-JDK版本"><a href="#4-1-JDK版本" class="headerlink" title="4.1 JDK版本"></a>4.1 JDK版本</h2><p>统一在JDK1.8</p><h2 id="4-2-Maven配置"><a href="#4-2-Maven配置" class="headerlink" title="4.2 Maven配置"></a>4.2 Maven配置</h2><ol><li>本机Maven版本是3.6<br><code>mvn -version</code></li><li>配置Maven阿里云镜像</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 阿里云仓库-public --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 阿里云仓库-central --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://maven.aliyun.com/reposit  ory/central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置Maven使用JDK1.8编译项目</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-IDEA配置"><a href="#4-3-IDEA配置" class="headerlink" title="4.3 IDEA配置"></a>4.3 IDEA配置</h2><ol><li>本地Maven配置<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642237192788-5c88a531-56b7-4c35-9649-2f6943396e8e.png" alt="img"></li><li>插件安装<br>Lombok</li></ol><p>MyBatisx</p><p>在安装插件时， 如果Idea Plugins打不开或者下载速度过慢， 可以直接去Idea 插件商城手动下载并导入插件</p><p>插件商城地址：<a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></p><p>从磁盘导入插件<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642237958399-35fdd1f1-3349-4717-a653-932a14da4462.png" alt="img"></p><h2 id="4-4-VsCode配置"><a href="#4-4-VsCode配置" class="headerlink" title="4.4 VsCode配置"></a>4.4 VsCode配置</h2><ol><li>下载地址： <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li><li>下载速度过慢：<a href="https://zhuanlan.zhihu.com/p/112215618">https://zhuanlan.zhihu.com/p/112215618</a></li><li>安装VsCode插件<br>Auto Close Tag<br>Auto Rename Tag<br>Chinese<br>ESLint<br>HTML CSS Support<br>HTML Snippets<br>JavaScript<br>Live Server<br>Open in brower<br>Vetur</li></ol><h2 id="4-5-Git配置以及绑定码云"><a href="#4-5-Git配置以及绑定码云" class="headerlink" title="4.5 Git配置以及绑定码云"></a>4.5 Git配置以及绑定码云</h2><ol><li>下载git：<a href="https://www.git-scm.com/download/win">https://www.git-scm.com/download/win</a></li><li>配置git， 进入git bash</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"># 配置用户名git config --global user.name “username”# 配置邮箱git config --global user.email "username@email.com" // 注册时用的邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置ssh免密登陆</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"># 生成ssh密钥ssh-keygen -t rsa -C "username@email.com" // 注册时用的邮箱# 连续三次回车# 会生成id_rsa 与 id_rsa.pub文件# 登陆进入gitee， 在设置里面找到SSH KEY将.pub文件内容粘贴进去ssh -T git@gitee.com 测试是否成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-6-初始化项目"><a href="#4-6-初始化项目" class="headerlink" title="4.6 初始化项目"></a>4.6 初始化项目</h2><ol><li>于码云创建仓库， 注意配置以下两点</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642239589555-3007753f-56b6-489e-92f6-1d54f07280bf.png" alt="img"></p><ol><li>创建成功后， 复制仓库ssh地址， 将项目克隆至Idea</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642239643214-66f27b70-c68c-4540-b20d-c8fb175e0dbe.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642239662307-afad60bc-642a-4fbc-9d59-83bb4176c9be.png" alt="img"></p><h2 id="4-7-创建服务"><a href="#4-7-创建服务" class="headerlink" title="4.7 创建服务"></a>4.7 创建服务</h2><p>商品服务、仓储服务、订单服务、优惠券服务、用户服务</p><p><strong>示例：创建商品服务</strong></p><ol><li>创建Project， 使用Spring 初始化项目</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642239963464-b8f03279-4dc5-4dd7-9d6d-7c18cd661aaa.png" alt="img"></p><p>这一步可能初始化失败， 设置代理即可<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642240009596-0d89d14d-a725-4b6d-8ea7-bfb713aed6e0.png" alt="img"></p><p>详见：<a href="https://blog.csdn.net/qq_42815122/article/details/85551956">https://blog.csdn.net/qq_42815122/article/details/85551956</a></p><ol><li>设置Module信息</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642239979897-c7421139-1c5d-4b22-8aaa-62803ebe5d7a.png" alt="img"></p><ol><li>勾选依赖</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642240121809-bc3477d3-ef30-44b9-b165-4713ba6705c6.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642240129040-148a4a68-e56f-4182-8f90-801e09725096.png" alt="img"></p><h2 id="4-8-聚合服务"><a href="#4-8-聚合服务" class="headerlink" title="4.8 聚合服务"></a>4.8 聚合服务</h2><p>创建所有子模块之后， 将任意一个pom文件拷贝到父项目</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642243290464-d4e27841-3283-400e-be68-03a34851713d.png" alt="img"></p><p>修改为</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>聚合服务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>gulimall-coupon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>gulimall-member<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>gulimall-order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>gulimall-product<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>gulimall-ware<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作为聚合项目， 并将聚合项目添加至maven， 点击 + 之后， 找到新复制后修改的pom.xml</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642243330043-a212c74b-1fdb-431b-8c42-6425f5e2f5bd.png" alt="img"></p><p>作用： 用于将所有子模块聚合在一起， 使用root模块的LifeCycle命令所有子模块都会执行， 比如clean。。。</p><h2 id="4-9-配置git-ignore"><a href="#4-9-配置git-ignore" class="headerlink" title="4.9 配置git ignore"></a>4.9 配置git ignore</h2><p>修改root项目的 .gitignore文件，添加以下内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"># 忽略所有项目（包括子项目），mvnw文件**/mvnw# 忽略所有项目（包括子项目），mvnw.cmd文件**/mvnw.cmd# 忽略所有项目（包括子项目），.mvn文件**/.mvn# 忽略所有项目（包括子项目），target文件**/target# 忽略所有项目（包括子项目），.gitignore文件**/.gitignore# 当前目录下，.idea文件.idea<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看local changes， 目前只有以下文件才会被监控是否存在修改</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642244373623-5fd27219-826f-41c7-9819-df7cee9aad7d.png" alt="img"></p><p>注：如果点击Git之后没有Local Changes， 这个是Idea2020版以后才有的问题， 修改以下设置即可（链接：<a href="https://blog.csdn.net/boxifeng/article/details/108868855%EF%BC%89">https://blog.csdn.net/boxifeng/article/details/108868855）</a></p><p>取消勾选该选项</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642244253380-4549b88d-b134-45c2-a825-68f1eea21ce3.png" alt="img"></p><h2 id="4-10-初次提交至码云"><a href="#4-10-初次提交至码云" class="headerlink" title="4.10 初次提交至码云"></a>4.10 初次提交至码云</h2><ol><li>将需要追踪变化的文件添加至VCS</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642244578001-55b6c279-4e5d-4d93-aecc-8c35413db494.png" alt="img"></p><ol><li>下载码云Idea插件（gitee）</li><li>项目提交</li></ol><p>同上图， 点击commit files</p><p>点击之后出现：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642244710741-bde78eac-be19-4881-8296-4782b2d3917a.png" alt="img"></p><p>点击commit</p><p><strong>提交成功！！！</strong></p><h2 id="4-11-配置人人开源后台管理系统"><a href="#4-11-配置人人开源后台管理系统" class="headerlink" title="4.11 配置人人开源后台管理系统"></a>4.11 配置人人开源后台管理系统</h2><ol><li>renren-fast 后台管理系统地址：<a href="https://gitee.com/renrenio/renren-fast">https://gitee.com/renrenio/renren-fast</a></li><li>git clone</li><li>删除项目.gitignore</li><li>修改root pom文件， 导入renren-fast项目</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642247498167-550e1a85-e88d-4792-9986-bee359c76efe.png" alt="img"></p><ol><li>初始化renren-fast数据库</li></ol><p>创建数据库：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642247532970-58ffe626-81c4-4543-94d3-7e526031d3cf.png" alt="img"></p><p>运行sql文件：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642247711020-21122e42-c2c1-47f7-97e4-6fe0b25943e4.png" alt="img"></p><ol><li>修改application.yml文件， 查看之后发现使用的dev版本配置文件</li></ol><p>修改数据库配置：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642247797312-0e865f22-72c9-4b83-bafc-9b059b2b9fc5.png" alt="img"></p><ol><li>测试是否后台部署成功， 访问<a href="http://localhost:8080/renren-fast/">http://localhost:8080/renren-fast/</a></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642247921662-8a78a28a-23f6-4a92-9f68-beada3e2f7de.png" alt="img"></p><h2 id="4-12-配置人人开源前台界面"><a href="#4-12-配置人人开源前台界面" class="headerlink" title="4.12 配置人人开源前台界面"></a>4.12 配置人人开源前台界面</h2><ol><li>将项目导入至VScode（直接将文件夹拖入即可）</li><li>安装Node.js，下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a> （<a href="https://www.jb51.net/article/126744.htm%EF%BC%89">https://www.jb51.net/article/126744.htm）</a></li><li>配置npm镜像（淘宝）</li></ol><pre class="line-numbers language-none"><code class="language-none">npm config set registry http://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>VScode中下载依赖</li></ol><pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642248680902-18fe27d9-a649-4102-9e7c-a2f05944bf6e.png" alt="img"></p><ol><li>VScode中启动项目</li></ol><pre class="line-numbers language-none"><code class="language-none">npm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>记录一下安装步骤：</p><ol><li>根据人人开源Github提示， 使用cnpm下载依赖</li></ol><p><a href="https://github.com/renrenio/renren-fast-vue/wiki/Getting-started">https://github.com/renrenio/renren-fast-vue/wiki/Getting-started</a></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642299860260-4ee88537-657d-4dc8-9446-2e6ffdbf9cae.png" alt="img"></p><p>在安装过程中，都是由于node-sass下载不成功导致的错误</p><ol><li>修改项目中node-sass版本（要与Node.js对应）</li></ol><p><a href="https://www.npmjs.com/package/node-sass">https://www.npmjs.com/package/node-sass</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642299959835-dd225114-6668-40ef-8f74-3cf836190a92.png" alt="img"></p><p>这里我的node.js版本是Node16， 因此需要修改成6.0以上， 我改成了6.0.1<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642299999097-c0422342-8092-4850-a3a1-7f619ad88dda.png" alt="img"></p><ol><li>除此之外，还需要手动修改node-sass下载源（好像前面配置的源在下载node-sass时不起作用）</li></ol><pre class="line-numbers language-none"><code class="language-none">npm config set sass_binary _site=https://npm.taobao.org/mirrors/node-sass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>使用cnpm 下载依赖</li></ol><pre class="line-numbers language-none"><code class="language-none">cnpm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>运行项目</li></ol><pre class="line-numbers language-none"><code class="language-none">cnpm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-13-人人开源逆向工程（代码生成器）"><a href="#4-13-人人开源逆向工程（代码生成器）" class="headerlink" title="4.13 人人开源逆向工程（代码生成器）"></a>4.13 人人开源逆向工程（代码生成器）</h2><p>在开发后台代码时，使用人人开源renren-generator代码生成器生成所有实体类，controller等代码</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642319117485-f94ee6bf-7af8-4243-8a8d-2c496997ba69.png" alt="img"></p><p>记录一下使用流程</p><ol><li>下载开源项目：renren-generator（这里和前面的人人开源后台、前台方式一样）</li><li>配置renren-generator基本信息与生成模板</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642319320200-e807b8f1-805c-41a9-bf7e-6863db68f77c.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642319335119-517129be-5edc-4df2-af92-7d53d31dc92a.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642319346879-31e51c61-5b50-4df2-abbb-7bde56fdd246.png" alt="img"></p><ol><li>进入网页</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642319240559-88fa4261-608f-43b4-bd96-e363dbdd6c36.png" alt="img"></p><ol><li>选中需要生成的表之后， 点击生成代码即可</li></ol><h1 id="五、-其他整合配置"><a href="#五、-其他整合配置" class="headerlink" title="五、 其他整合配置"></a>五、 其他整合配置</h1><h2 id="5-1-Spring-Boot整合Mybatis-plus"><a href="#5-1-Spring-Boot整合Mybatis-plus" class="headerlink" title="5.1 Spring Boot整合Mybatis-plus"></a>5.1 Spring Boot整合Mybatis-plus</h2><ol><li>导入依赖mybatis-plus依赖以及mysql-driver依赖</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        mybatis-plus--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        mysql驱动--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置application.yml数据源以及其他信息</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.56.10<span class="token punctuation">:</span>3306/gulimall_pms    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token comment"># 告诉mapper配置文件在哪里(xxx.xml) 若在classpath后面加个*，表示连所依赖的其他module也扫描</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/<span class="token important">**/*.xml</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642318820727-1a391144-3b58-44ce-9f45-a13e928641ab.png" alt="img"></p><ol><li>配置Mapper扫描</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642318713819-9b1b0308-e017-41f6-a2d2-199f939f1bb4.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642318731105-4c723852-11d8-427b-bab9-21187b192ed6.png" alt="img"></p><h2 id="5-2-Spring-Cloud-alibaba"><a href="#5-2-Spring-Cloud-alibaba" class="headerlink" title="5.2 Spring Cloud alibaba"></a>5.2 Spring Cloud alibaba</h2><p>绑定依赖即可</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3-服务注册发现Nacos-discover"><a href="#5-3-服务注册发现Nacos-discover" class="headerlink" title="5.3 服务注册发现Nacos-discover"></a>5.3 服务注册发现Nacos-discover</h2><ol><li>添加Nacos依赖</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>下载并开启Nacos Server（这里为了方便使用Docker部署Nacos Server）</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull nacos/nacos-serverdocker run \--name gulimall-nacos \-e MODE=standalone \-p 8848:8848 \-p 9848:9848 \-e JVM_XMS=256m \-e JVM_XMX=256m \-d nacos/nacos-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置Spring Boot服务yml文件，进行服务注册，并添加注解，配置完毕后启动项目</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642334090183-6dba1356-ec31-477f-81bf-e464e8141a7b.png" alt="img"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cloud:    nacos:      discovery:        server-addr: 192.168.56.10:8848application:    name: gulimall-coupon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642337618054-93a55119-5cf8-4ec5-abad-307c4e40295e.png" alt="img"></p><ol><li>访问nacos页面（在虚拟机上，且暴露的docker端口是8848，链接:192.168.56.10:8848/nacos)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642340646596-8b1f94f1-e492-4d22-8789-d5dfa8f14295.png" alt="img"></p><ol><li>查看已注册的服务</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642340830248-86567ed9-495e-4d61-8740-af67d52014a5.png" alt="img"></p><p>记录一个问题，报错</p><p>生成configDataContextRefres失败：Error creating bean with name ‘configDataContextRefresher</p><p>加上依赖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>bootstrap<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.0</span><span class="token number">.3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-4-远程调用open-fengn"><a href="#5-4-远程调用open-fengn" class="headerlink" title="5.4 远程调用open-fengn"></a>5.4 远程调用open-fengn</h2><ol><li>引入依赖open-feign</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>创建feign接口，添加注解</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"gulimall-coupon"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CouponFeignService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/coupon/coupon/member/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">membercoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642425389697-4252fb4a-7969-496a-ae0f-f6aa2a710170.png" alt="img"></p><ol><li><p>注解FeignClient：此注解是调用的其他微服务名字，可以前往nacos注册中心查看</p></li><li><p>注解RequestMapping：该注解时调用的微服务的路径<img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642425474617-c4cb9c76-d694-4fd6-80cb-79b6861dcb94.png" alt="img"></p></li><li><p>配置Application开启远程调用功能</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642425960505-e93dbb0d-36a4-4a69-aa70-661fcb11f54b.png" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.atguigu.gulimall.member.feign"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>记录一个问题，报错</p><p>java.lang.AbstractMethodError: org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient.cho</p><p>原因：没有loadbalanc，或者nacos中<a href="https://so.csdn.net/so/search?q=ribbon&amp;spm=1001.2101.3001.7020">ribbon</a>造成loadbalanc包失效</p><p>我这里是已经导入了loadbalanc，所以就是导致失效的问题， 将ribbon包排除即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>alibaba<span class="token operator">-</span>nacos<span class="token operator">-</span>discovery<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>exclusions<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>exclusion<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>ribbon<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-5-配置中心Nacos-config"><a href="#5-5-配置中心Nacos-config" class="headerlink" title="5.5 配置中心Nacos-config"></a>5.5 配置中心Nacos-config</h2><ol><li>导入依赖</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>alibaba<span class="token operator">-</span>nacos<span class="token operator">-</span>config<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置Bootstarp.propertise配置文件</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642429254293-2e6c0116-267b-4ea5-a162-114eb5fd102a.png" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># 应用名spring<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token operator">=</span>gulimall<span class="token operator">-</span>coupon# nacos地址spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>config<span class="token punctuation">.</span>server<span class="token operator">-</span>addr<span class="token operator">=</span><span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.10</span><span class="token operator">:</span><span class="token number">8848</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Nacos网页添加配置</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642428814621-6370fc9a-1db4-4f33-b63d-594d15a2b834.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642428879003-a8f5bc8c-aa99-41a4-b07f-8d17031533a3.png" alt="img"></p><ol><li>使用配置</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642428934711-6471ffa2-1649-45bc-b215-afefb337101b.png" alt="img"></p><ol><li>配置自动刷新（修改网页配置值之后， 能动态刷新）</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642428969932-1566fc3d-adc9-4546-8bde-0bcac4114dea.png" alt="img"></p><h3 id="5-5-1-Nacos-Config基本概念"><a href="#5-5-1-Nacos-Config基本概念" class="headerlink" title="5.5.1 Nacos-Config基本概念"></a>5.5.1 Nacos-Config基本概念</h3><ul><li><strong>命令空间</strong>：配置隔离</li></ul><p>默认：public（保留空间）；默认新增的所有配置都在public空间</p><ol><li><ol><li>开发、测试、生产（利用命名空间来做环境隔离）</li></ol></li></ol><p>在不指定命名空间的前提下，默认使用的是public命名空间，可以在bootstrap.properties中指定命名空间（唯一ID）</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642476085432-9c383de3-81db-42b4-9455-6e2630a6300c.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642476059000-f188ac59-8923-4ad6-9065-dffc1083ed1c.png" alt="img"></p><ol><li><ol><li>基于每一个微服务之间， 互相隔离配置，每一个微服务都创建自己的命名空间</li></ol></li></ol><ul><li><strong>配置集</strong>：所有的配置的集合就叫做配置集</li><li><strong>配置集ID</strong>：类似于配置文件名</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642476987804-918e0171-913f-4bbb-a155-0b10121b1a90.png" alt="img"></p><ul><li><strong>配置分组</strong>：默认所有的配置集都属于：DEFAULT_GROUP</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642477028555-1803941d-4ac4-46c2-807e-aa2c21ce37cb.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642477269715-f2221c5d-b0cc-4553-8b8a-3f44624e9750.png" alt="img"></p><h3 id="5-5-2-Nacos-Config使用示例"><a href="#5-5-2-Nacos-Config使用示例" class="headerlink" title="5.5.2 Nacos-Config使用示例"></a>5.5.2 Nacos-Config使用示例</h3><p>开发环境中，我们application.yml文件是不配置的，所有的配置都会进行拆分（数据源、mybatis、其他。。。），并且根据不同的运行环境(设置不同的分组)，配置不同的配置文件</p><p>例如：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642479268085-f952fb13-7524-4142-aa30-813cc8a1e712.png" alt="img"></p><p>另外，还需要在bootstarp.properties中进行声明，使用配置中心的配置</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642479302099-c5c9cd7e-810d-44e2-85b5-576ab076beb4.png" alt="img"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">spring.cloud.nacos.config.extension-configs[0].data-id=datasource.ymlspring.cloud.nacos.config.extension-configs[0].group=devspring.cloud.nacos.config.extension-configs[0].refresh=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-6-Gateway网关"><a href="#5-6-Gateway网关" class="headerlink" title="5.6 Gateway网关"></a>5.6 Gateway网关</h2><p>用于拦截所有请求，经过网关的过滤之后，才转发到指定的路由</p><p>配置步骤：</p><ol><li>导入依赖</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&lt;dependency&gt;&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置映射</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642490361991-4a96798b-2a85-4f8a-b2c3-84781ec02dfa.png" alt="img"></p><h2 id="5-7-jsckson日期格式化配置"><a href="#5-7-jsckson日期格式化配置" class="headerlink" title="5.7 jsckson日期格式化配置"></a>5.7 jsckson日期格式化配置</h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">jackson</span><span class="token punctuation">:</span>    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="六、知识预备"><a href="#六、知识预备" class="headerlink" title="六、知识预备"></a>六、知识预备</h1><h2 id="6-1-ES6"><a href="#6-1-ES6" class="headerlink" title="6.1 ES6"></a>6.1 ES6</h2><ol><li>let</li></ol><p>let用于声明变量，有三个特性：</p><ul><li>声明的变量严格限制在作用域内</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642492505138-271ae8c5-1ec5-4bde-9a4f-5d5f308374f0.png" alt="img"></p><ul><li>let变量只能声明一次</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642492539255-db295de5-3e1e-4911-8bed-4d005c50ef66.png" alt="img"></p><ul><li>let变量不存在变量提升</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642492564225-f07d8c54-73df-436e-b24f-aab4ac191d42.png" alt="img"></p><ol><li>const</li></ol><p>用于声明只读常量，声明后无法修改</p><ol><li>解构表达式（支持数组解构、对象解构）</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642492691987-5b29148e-e3f6-42af-ac36-b5e44c54a071.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642492806412-95d4b09e-bcb7-4a29-af3a-6b58ce8e507a.png" alt="img"></p><ol><li>字符串扩展（提供了几个方法）</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642492845911-ea6f4d92-8385-440d-9d00-69fee9381914.png" alt="img"></p><ol><li>字符串模板</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642492924767-e4f11b51-63d1-4492-9950-1e70a1b8dfb2.png" alt="img"></p><ol><li>插值语法</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642493029990-e8a871c2-9d64-4524-84bc-c72b56da147d.png" alt="img"></p><ol><li>函数优化</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642493091883-1c4fa13a-4f65-4c3f-95a7-3e3fdd73525c.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642493214488-ba3fa0d8-35a7-4622-a007-aea5604a3368.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642493226942-0557abf7-c018-4992-9b16-b68e699ad1b3.png" alt="img"></p><ol><li>对象优化</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642493532582-ac45c2f6-11a2-4418-a520-3c2bdeb2f37d.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642493583069-8dccff11-e63a-4f2e-b9ca-709ead45932c.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642493739609-9a7a8341-e51c-4ec9-9f5b-d5327ba467ce.png" alt="img"></p><ol><li>promise</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642494631156-8c0fcb59-539f-4238-9a3b-7eed871fe89b.png" alt="img"></p><h2 id="6-2-Vue集成Element-UI"><a href="#6-2-Vue集成Element-UI" class="headerlink" title="6.2 Vue集成Element-UI"></a>6.2 Vue集成Element-UI</h2><ol><li>cnpm安装element-ui</li></ol><pre class="line-numbers language-none"><code class="language-none">cnpm i element-ui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>引入element-ui， main.js文件中，添加以下内容</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">import ElementUI from 'element-ui'Vue.use(ElementUI)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-3-网关统一解决跨域问题"><a href="#6-3-网关统一解决跨域问题" class="headerlink" title="6.3 网关统一解决跨域问题"></a>6.3 网关统一解决跨域问题</h2><p>链接：<a href="https://blog.csdn.net/chengqiuming/article/details/109272812">https://blog.csdn.net/chengqiuming/article/details/109272812</a></p><h2 id="6-4-Mybatis-Plus逻辑删除"><a href="#6-4-Mybatis-Plus逻辑删除" class="headerlink" title="6.4 Mybatis-Plus逻辑删除"></a>6.4 Mybatis-Plus逻辑删除</h2><ol><li>配置文件配置全局删除与不删除对应的值（删除为1，不删除为0）</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642745915179-3d655799-f2ef-4fd3-85e2-d8aec24156ee.png" alt="img"></p><ol><li>找到对应实体类， 配置逻辑删除对应的字段（这里也可以配置局部具体逻辑删除代表的值）</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642745998044-1115811d-607f-4667-9cb1-023f0edd812a.png" alt="img"></p><ol><li>调用mapper进行删除</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642746152779-8b30031a-9f71-4c35-b71f-b1480372512b.png" alt="img"></p><p>逻辑删除本质是将是否显示字段从显示（0），置为不显示（1）， 并不是将其删除</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642747802392-e909017e-d0b8-4702-88e5-629f22c721f5.png" alt="img"></p><h2 id="6-5-Mybatis-Plus分页"><a href="#6-5-Mybatis-Plus分页" class="headerlink" title="6.5 Mybatis-Plus分页"></a>6.5 Mybatis-Plus分页</h2><p><a href="https://baomidou.com/pages/8f40ae/">https://baomidou.com/pages/8f40ae/</a></p><h2 id="6-6-Mysql不使用开窗获取行号"><a href="#6-6-Mysql不使用开窗获取行号" class="headerlink" title="6.6 Mysql不使用开窗获取行号"></a>6.6 Mysql不使用开窗获取行号</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>cat_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token variable">@rowNum</span>:<span class="token operator">=</span><span class="token variable">@rowNum</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> rowNo<span class="token keyword">FROM</span> pms_category a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token variable">@rowNum</span> :<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> b<span class="token keyword">WHERE</span> a<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>parent_cid<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token string">'0'</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>cat_id <span class="token keyword">ASC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22792222/1642776910789-1e220d55-8502-4c42-a927-a5d59af2d5ff.png" alt="img"></p><h1 id="七、云存储"><a href="#七、云存储" class="headerlink" title="七、云存储"></a>七、云存储</h1><h2 id="7-1-两种存储模式对比"><a href="#7-1-两种存储模式对比" class="headerlink" title="7.1 两种存储模式对比"></a>7.1 两种存储模式对比</h2><blockquote><p>​    整体上存在两种存储模式，<code>前端直传</code>以及<code>后端间接传</code>。简单来说：前端直传的模式是，前端调用后端policy接口获取临时密钥，再通过临时密钥将文件直接传出到云存储；而后端简介传模式时，前端将文件传输到后端之后，再借助于后端去传递给云存储。</p><p>两种模式的区别主要在于：</p><p>​    <strong>后台上传</strong>：用户-&gt;云服务器-&gt;对象存储</p><ul><li>优点：可利用已有的用户认证机制，安全性更好做。</li><li>缺点：占用云服务器的入站带宽，如果上传占有带宽太大，可能会是瓶颈。</li></ul><p>​    <strong>前端直传</strong>：用户-&gt;对象存储</p><ul><li>优点：不占用云服务器带宽。</li><li>缺点：需要考虑安全、不完整上传等问题，对技术方案要求更高。（主要需要注意临时密钥的授权策略）</li></ul></blockquote><p>一般来说采用的都是前端直传的方式。</p><h2 id="7-2-OSS与COS"><a href="#7-2-OSS与COS" class="headerlink" title="7.2 OSS与COS"></a>7.2 OSS与COS</h2><p>阿里云与腾讯云在使用前端直传模式上有细微区别，主要是：</p><ol><li><p>获取Policy临时密钥API不一致（可参考OssService）</p></li><li><p>前端上传图片模式不一致</p><blockquote><p>​    阿里云可以通过post请求将临时密钥等信息放进data中。</p><p>而腾讯云需要修改请求头等信息，且需要引入前端依赖sdk：import COS from ‘cos-js-sdk-v5’</p><p>具体区别可以参考前端组件<code>singleUpload</code></p></blockquote></li></ol><p>cos使用可以参考：<a href="https://blog.csdn.net/zhengjiacheng2016/article/details/120464025">vue案例</a>, <a href="https://cloud.tencent.com/document/product/436/9067">官方资料</a>, <a href="https://github.com/tencentyun/qcloud-cos-sts-sdk/commits/master/java/src/test/java/com/tencent/cloud/CosStsClientTest.java?author=dt3310321">policy接入</a></p>]]></content>
      
      
      <categories>
          
          <category> 谷粒商城 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring回炉重造</title>
      <link href="/2022/06/13/java/kuang-jia/spring-hui-lu-chong-zao/"/>
      <url>/2022/06/13/java/kuang-jia/spring-hui-lu-chong-zao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博文记录一下在浏览博客过程中<code>spring</code>基础遗漏点的记载</p><p>博客地址:</p><p><a href="https://itsoku.blog.csdn.net/article/details/118246360?spm=1001.2014.3001.5502">spring高手系列</a></p></blockquote><h3 id="Spring容器基本使用"><a href="#Spring容器基本使用" class="headerlink" title="Spring容器基本使用"></a><code>Spring</code>容器基本使用</h3><p><a href="https://itsoku.blog.csdn.net/article/details/104243424">Spring系列第3篇：Spring容器基本使用及原理</a></p><p>要点:</p><ul><li><code>BeanFactory</code>、<code>ApplicationContext</code>、<code>ClassPathXmlApplicationContext</code>几者区别</li><li>spring项目构建</li></ul><p><strong>笔记:</strong></p><p>​    <code>BeanFactory</code>是Spring顶层接口，定义了获取Bean的方法，<code>ApplicationContext</code>是继承了<code>BeanFactory</code>的接口，而<code>ClassPathXmlApplicationContext</code>则是<code>ApplicationContext</code>具体实现</p><h3 id="xml-bean定义"><a href="#xml-bean定义" class="headerlink" title="xml bean定义"></a><code>xml bean</code>定义</h3><p><a href="https://itsoku.blog.csdn.net/article/details/104284839">Spring系列第4篇：xml中bean定义详解</a></p><p>要点: </p><ul><li>如何定义别名</li><li>如何定义多个别名</li><li>如何获取bean的所有别名以及所有的bean</li><li>如何定义多个<code>xml</code></li></ul><p><strong>笔记</strong>:</p><p>​    记录一下[如何获取bean的所有别名以及所有的bean]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1.bean配置文件位置</span>        <span class="token class-name">String</span> beanXml <span class="token operator">=</span> <span class="token string">"classpath:/com/javacode2018/lesson001/demo2/beans.xml"</span><span class="token punctuation">;</span>         <span class="token comment">//2.创建ClassPathXmlApplicationContext容器，给容器指定需要加载的bean配置文件</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>beanXml<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span> <span class="token string">"user2"</span><span class="token punctuation">,</span> <span class="token string">"user3"</span><span class="token punctuation">,</span> <span class="token string">"user4"</span><span class="token punctuation">,</span> <span class="token string">"user5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//获取bean的别名</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aliases <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"beanName:%s,别名:[%s]"</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> aliases<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spring容器中所有bean如下："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//getBeanDefinitionNames用于获取容器中所有bean的名称</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//获取bean的别名</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aliases <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"beanName:%s,别名:[%s]"</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> aliases<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bean创建"><a href="#bean创建" class="headerlink" title="bean创建"></a><code>bean</code>创建</h3><p><a href="https://itsoku.blog.csdn.net/article/details/104284840">Spring系列第5篇：创建bean实例这些方式你们都知道？</a></p><p>要点:</p><ul><li>反射构造<ul><li>构造方法构造</li><li>setter构造</li></ul></li><li>静态工厂方法构造</li><li>实例工厂方法创建</li><li>FactoryBean构造</li><li><code>FactoryBean</code>和<code>BeanFactory</code>区别</li></ul><p><strong>笔记</strong>:</p><p>​    记录一下[<code>FactoryBean</code>和<code>BeanFactory</code>区别]，还比较重要。</p><p>其中，<code>BeanFactory</code>是spring容器的顶层接口，定义了一系列获取<code>bean</code>的方法，而<code>FactoryBean</code>可以让spring容器通过这个接口的实现来创建我们需要的bean对象。</p><p>​    两个接口定义如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 返回创建好的对象     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">T</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>        <span class="token comment">/**     * 返回需要创建的对象的类型     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**    * bean是否是单例的    **/</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">BeanFactory</span>常用几个接口<span class="token comment">//按bean的id或者别名查找容器中的bean</span><span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token comment">//这个是一个泛型方法，按照bean的id或者别名查找指定类型的bean，返回指定类型的bean对象</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token comment">//返回容器中指定类型的bean对象</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span class="token comment">//获取指定类型bean对象的获取器，这个方法比较特别，以后会专门来讲</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBeanProvider</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC Web项目搭建</title>
      <link href="/2022/06/13/java/kuang-jia/springmvc-web-xiang-mu-da-jian/"/>
      <url>/2022/06/13/java/kuang-jia/springmvc-web-xiang-mu-da-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    最近在测试<code>websocket</code>，准备搭建个<code>web</code>项目，突然发现<code>spring mvc</code>项目不会搭了， 查阅资料后，记录下来搭建步骤。</p><p>参考文档:</p><p>​    <a href="https://www.jianshu.com/p/1baf0e26afe0">Maven+Web+Spring项目搭建</a></p><p>​    <a href="https://blog.csdn.net/yongbutingxide/article/details/106770624">SpringMVC框架搭建流程（完整详细版）</a></p></blockquote><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>整体而言有两种搭建步骤</p><ul><li>第一种是<code>maven</code>直接初始化为<code>webapp</code>项目，这样的话会简单一些， 可以参考    <a href="https://blog.csdn.net/yongbutingxide/article/details/106770624">SpringMVC框架搭建流程（完整详细版）</a></li></ul><p><img src="/2022/06/13/java/kuang-jia/springmvc-web-xiang-mu-da-jian/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTIzMDAwMy8yMDIwMDYvMTIzMDAwMy0yMDIwMDYxNTIwMjI0OTMxOS02Njc2NTA4OTgucG5n.png" alt="初始化为web项目"></p><ul><li>第二种的话就是创建普通的<code>maven</code>项目，然后引入<code>spring</code>依赖并增加<code>web</code> <code>support</code>本次演示的方式便是这种</li></ul><h2 id="2-搭建步骤"><a href="#2-搭建步骤" class="headerlink" title="2. 搭建步骤"></a>2. 搭建步骤</h2><ol><li><p>添加依赖(<code>websocket</code>的可以忽略)</p><p><img src="/2022/06/13/java/kuang-jia/springmvc-web-xiang-mu-da-jian/1655083030677.png" alt="添加的依赖"></p></li><li><p>添加<code>web</code>支持</p><p><img src="/2022/06/13/java/kuang-jia/springmvc-web-xiang-mu-da-jian/1655083094055.png" alt="web支持"></p><p>添加完依赖后，应该只会有<code>spring</code>的支持，需要添加web支持</p><p>点击<code>module</code>后，点击加号，增加<code>web</code>支持</p><p><img src="/2022/06/13/java/kuang-jia/springmvc-web-xiang-mu-da-jian/1655083160094.png" alt="添加web支持"></p></li><li><p><code>lib</code>增加到<code>classpath</code></p><p><img src="/2022/06/13/java/kuang-jia/springmvc-web-xiang-mu-da-jian/1655083293201.png" alt="增加lib"></p><p>如上所示， 如果第二点没有<code>war</code>包的话，先点加号，增加<code>war</code>包</p><p><img src="/2022/06/13/java/kuang-jia/springmvc-web-xiang-mu-da-jian/1655083349959.png" alt="增加war包"></p><p>有了之后，在第三点新建一个<code>lib</code>目录，并按以下操作，加载所有<code>lib</code>到<code>classpath</code></p><p><img src="/2022/06/13/java/kuang-jia/springmvc-web-xiang-mu-da-jian/1655083422624.png" alt="添加lib"></p><p>选中所有后，点击<code>ok</code></p><p><img src="/2022/06/13/java/kuang-jia/springmvc-web-xiang-mu-da-jian/1655083443157.png" alt="添加lib"></p></li><li><p>创建<code>web.xml</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath*:spring/application-context-springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建<code>application-context-springmvc.xml</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>       http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--包扫描--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.p01.p01_websocket_01<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--注解解析器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--视图解析器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/view/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--        &lt;property name="suffix" value=".jsp"/&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--静态资源访问--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上配置不懂的可自行百度</p></li></ol><h2 id="3-项目结构"><a href="#3-项目结构" class="headerlink" title="3. 项目结构"></a>3. 项目结构</h2><p><img src="/2022/06/13/java/kuang-jia/springmvc-web-xiang-mu-da-jian/1655083628245.png" alt="项目结构"></p><h2 id="4-启动项目"><a href="#4-启动项目" class="headerlink" title="4. 启动项目"></a>4. 启动项目</h2><p><img src="/2022/06/13/java/kuang-jia/springmvc-web-xiang-mu-da-jian/1655083655409.png" alt="tomcat启动项目"></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket实战</title>
      <link href="/2022/06/06/java/ji-chu/websocket-shi-zhan/"/>
      <url>/2022/06/06/java/ji-chu/websocket-shi-zhan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博文记录一下一种全新的前后端通信方式<code>websocket</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> websocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git提交规范</title>
      <link href="/2022/06/02/gong-ju/git-ti-jiao-gui-fan/"/>
      <url>/2022/06/02/gong-ju/git-ti-jiao-gui-fan/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Git</code>提交规范</p></blockquote><h2 id="规范的作用"><a href="#规范的作用" class="headerlink" title="规范的作用"></a>规范的作用</h2><p>大多数情况下，看提交历史的人跟提交代码的人都不是同一个人，当别人阅读你的提交历史时，他很可能是不知道具体代码细节的，你如何在最短的时间内让他一眼知道每次提交的意义：</p><ul><li>每次提交影响的具体范围？</li><li>这个bug在哪次提交中被修复了？</li><li>这个新功能是在哪次提交中增加的？</li><li>修改是否向下兼容？</li><li>是否回滚了代码？</li><li>是否只是修改了文档、调整了代码格式？</li><li>是否修改了测试、是否进行了重构？</li><li>是否对代码进行了性能优化？</li></ul><p>这些都是提交规范的作用。</p><h2 id="提交消息格式"><a href="#提交消息格式" class="headerlink" title="提交消息格式"></a>提交消息格式</h2><p>每个提交消息都由一个标题、一个正文和一个页脚组成。而标题又具有特殊格式，包括修改类型、影响范围和内容主题：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">修改类型(影响范围): 标题&lt;--空行--&gt;[正文]&lt;--空行--&gt;[页脚]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标题是<strong>强制性</strong>的，但标题的<strong>范围是可选的</strong>。</p><p>提交消息的任何一行都不能超过100个字符！这是为了让消息在GitHub以及各种Git工具中都更容易阅读。</p><h2 id="修改类型"><a href="#修改类型" class="headerlink" title="修改类型"></a>修改类型</h2><p>每个类型值都表示了不同的含义，类型值必须是以下的其中一个：</p><ul><li><strong>feat：</strong>提交新功能</li><li><strong>fix</strong>：修复了bug</li><li><strong>docs</strong>：只修改了文档</li><li><strong>style</strong>：调整代码格式，未修改代码逻辑（比如修改空格、格式化、缺少分号等）</li><li><strong>refactor</strong>：代码重构，既没修复bug也没有添加新功能</li><li><strong>perf</strong>：性能优化，提高性能的代码更改</li><li><strong>test</strong>：添加或修改代码测试</li><li><strong>chore</strong>：对构建流程或辅助工具和依赖库（如文档生成等）的更改</li></ul><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>范围不是固定值，它可以是你提交代码实际影响到的任何内容。例如$location、$browser、$compile、$rootScope、ngHref、ngClick、ngView等，唯一需要注意的是它必须足够简短。</p><p>当修改影响多个范围时，也可以使用“*”。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring组件过滤</title>
      <link href="/2022/06/01/java/kuang-jia/spring-zu-jian-guo-lu/"/>
      <url>/2022/06/01/java/kuang-jia/spring-zu-jian-guo-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Spring</code>中排除某些<code>Bean</code>、配置的注入</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>ASSIGNABLE_TYPE<span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">GlobalExceptionHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>REGEX<span class="token punctuation">,</span> pattern <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"com.gangling.architecture.boot.web.exception.handler"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两种写法， 一种是类的， 一种是路径的</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot全局异常处理器</title>
      <link href="/2022/06/01/java/kuang-jia/springboot-quan-ju-yi-chang-chu-li-qi/"/>
      <url>/2022/06/01/java/kuang-jia/springboot-quan-ju-yi-chang-chu-li-qi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    记录一次全局异常处理器的使用</p></blockquote><p>处理器代码:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yaoex<span class="token punctuation">.</span>pis<span class="token punctuation">.</span>web<span class="token punctuation">.</span>handler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>yaoex<span class="token punctuation">.</span>pis<span class="token punctuation">.</span>model<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">ArgumentException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>yaoex<span class="token punctuation">.</span>pis<span class="token punctuation">.</span>model<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">BusinessException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>yaoex<span class="token punctuation">.</span>pis<span class="token punctuation">.</span>model<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">ServerException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>yaoex<span class="token punctuation">.</span>pis<span class="token punctuation">.</span>model<span class="token punctuation">.</span>common<span class="token punctuation">.</span>resp<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnWebApplication</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span><span class="token punctuation">;</span><span class="token comment">/** * @author zhuzhiyong * @date 2022/6/1 9:37 * 全局异常处理器 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">GlobalExceptionHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 生产环境     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> ENV_PROD <span class="token operator">=</span> <span class="token string">"prod"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 当前环境     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.profiles.active}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> activeProfile<span class="token punctuation">;</span>    <span class="token comment">/**     * 业务异常     *     * @param e 异常     * @return 异常结果     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">BusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">handleBusinessException</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"业务异常: {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">wrapErrorResult</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 参数绑定异常     *     * @param e 异常     * @return 异常结果     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">handleBindException</span><span class="token punctuation">(</span><span class="token class-name">ArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"参数绑定校验异常: {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">wrapErrorResult</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 服务器异常     *     * @param e 异常     * @return 异常结果     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ServerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">handleServerException</span><span class="token punctuation">(</span><span class="token class-name">ServerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"参数绑定校验异常: {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">wrapErrorResult</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 未定义异常     *     * @param e 异常     * @return 异常结果     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"未定义异常:{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ENV_PROD<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>activeProfile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 当为生产环境, 不适合把具体的异常信息展示给用户, 比如数据库异常信息.</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">wrapErrorResult</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"异常，请稍后再试！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">wrapErrorResult</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SpringBoot</code>环境配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot解决跨域</title>
      <link href="/2022/05/30/java/kuang-jia/springboot-jie-jue-kua-yu/"/>
      <url>/2022/05/30/java/kuang-jia/springboot-jie-jue-kua-yu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>解决跨域问题</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token comment">//*号表示对所有请求都允许跨域访问</span>        <span class="token class-name">HttpServletResponse</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Credentials"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"GET, POST, DELETE, PUT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"Content-Type,X-CAF-Authorization-Token,sessionToken,X-TOKEN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Cors </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cors </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yyf-javascript</title>
      <link href="/2022/05/27/qian-duan/yyf-javascript/"/>
      <url>/2022/05/27/qian-duan/yyf-javascript/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    <code>JavaScript</code></p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1.如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为<code>false</code>，其他值都视为<code>true</code>。</p><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>false</code></li><li><code>0</code></li><li><code>NaN</code></li><li><code>""</code>或<code>''</code>（空字符串）</li></ul>]]></content>
      
      
      <categories>
          
          <category> yyf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yyf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>content-type详解</title>
      <link href="/2022/05/24/java/ji-chu/content-type-xiang-jie/"/>
      <url>/2022/05/24/java/ji-chu/content-type-xiang-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博文讲解一下常用的<code>content-type</code></p><p>转自<a href="https://www.jianshu.com/p/de5845b4c095">content-type详解</a></p></blockquote><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>在HTTP协议消息头中，使用Content-Type来表示请求和响应中的媒体类型信息。它用来告诉服务端如何处理请求的数据，以及告诉客户端（一般是浏览器）如何解析响应的数据，比如显示图片，解析并展示html等等。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p><strong>Content-Type：type/subtype ;parameter</strong></p><ol><li><code>type</code>：主类型，任意的字符串，如text，如果是*号代表所有；</li><li><code>subtype</code>：子类型，任意的字符串，如html，如果是*号代表所有，用“/”与主类型隔开；</li><li><code>parameter</code>：可选参数，如charset，boundary等。</li></ol><h2 id="常见的Content-Type"><a href="#常见的Content-Type" class="headerlink" title="常见的Content-Type"></a>常见的Content-Type</h2><p>常见的Content-Type有数百个，下面例举了一些</p><ul><li>HTML文档标记：<code>text/html</code>;</li><li>普通ASCII文档标记：<code>text/plain</code>;</li><li>JPEG图片标记：<code>image/jpeg</code>;</li><li>GIF图片标记：<code>image/gif</code>;</li><li>js文档标记：<code>application/javascript</code>;</li><li>xml文件标记：<code>application/xml</code>;</li></ul><h2 id="几个关键的Content-Type"><a href="#几个关键的Content-Type" class="headerlink" title="几个关键的Content-Type"></a>几个关键的Content-Type</h2><h3 id="application-x2F-x-www-form-urlencoded"><a href="#application-x2F-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h3><p><code>application/x-www-form-urlencoded</code>是默认的请求方式。HTTP会将请求参数用key1=val1&amp;key2=val2的方式进行组织，并放到请求实体里面，注意如果是中文或特殊字符如”/“、”,”、“:” 等会自动进行URL转码。不支持文件，一般用于表单提交。<br> 下面是一个例子：</p><ul><li><p>请求参数</p><p><img src="/2022/05/24/java/ji-chu/content-type-xiang-jie/image-20220524220402066.png" alt="postman请求参数"></p></li><li><p>http 请求报文</p><p><img src="/2022/05/24/java/ji-chu/content-type-xiang-jie/image-20220524220421789.png" alt="http请求报文"></p></li></ul><h5 id="前端传入方式"><a href="#前端传入方式" class="headerlink" title="前端传入方式"></a>前端传入方式</h5><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">let formData = new FormData();formData.append("key", "value");fetch(url, {        method: "POST",        credentials: "include",        body: formData,        headers: {            'content-type': 'application/x-www-form-urlencoded' // 或者不填        },}).then(...)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="后端接收方式"><a href="#后端接收方式" class="headerlink" title="后端接收方式"></a>后端接收方式</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/test1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>                    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"收到的参数：username: {}, password: {}"</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"leihou"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="application-x2F-json"><a href="#application-x2F-json" class="headerlink" title="application/json"></a>application/json</h3><p>JSON 是一种轻量级的数据格式，以“键-值”对的方式组织的数据。这个使用这个类型，需要参数本身就是json格式的数据，参数会被直接放到请求实体里，不进行任何处理。服务端/客户端会按json格式解析数据（约定好的情况下）。</p><ul><li><p>请求参数</p><p><img src="/2022/05/24/java/ji-chu/content-type-xiang-jie/image-20220524221054508.png" alt="postman传参"></p></li><li><p>http 请求报文</p><p><img src="/2022/05/24/java/ji-chu/content-type-xiang-jie/image-20220524221124040.png" alt="http报文"></p></li></ul><h5 id="前端传入方式-1"><a href="#前端传入方式-1" class="headerlink" title="前端传入方式"></a>前端传入方式</h5><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">let modelData= new ModelData();fetch(url, {        method: "POST",        credentials: "include",        body: JSON.stringify(modelData),        headers: {            'content-type': 'application/json'        },}).then(...)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="后端接收方式-1"><a href="#后端接收方式-1" class="headerlink" title="后端接收方式"></a>后端接收方式</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/test2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test2</span><span class="token punctuation">(</span> <span class="token comment">/* @Validated */</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"收到的参数：username: {}, password: {}"</span><span class="token punctuation">,</span>                 user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"leihou"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token annotation punctuation">@Data</span><span class="token comment">/*@Setter@Getter@ToString*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> deptId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotEmpty</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="multipart-x2F-form-data"><a href="#multipart-x2F-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h3><h2 id="开发过程中的注意事项"><a href="#开发过程中的注意事项" class="headerlink" title="开发过程中的注意事项"></a>开发过程中的注意事项</h2><ol><li><p><code>request</code>：由于在<code>ajax</code>请求中,需要设置<code>content-type</code>,因此一定要注意前端的<code>ajax</code>请求是否和后端接收的一致。若不一致,后端则会响应<code>415 Unsupported media type</code>错误。</p><blockquote><ul><li><code>@RequestBody</code>: 基于<code>Spring</code>强大的自动解析功能,会自动将请求实体内容转换为<code>Bean</code>,但前提是<code>Content-Type</code>必须是<code>application/json</code></li><li>文件上传场景中,一般Content-Type设置为multipart/form-data</li><li>普通表单提交，一般Content-Type设置为application/x-www-form-urlencoded</li></ul></blockquote></li><li><p><code>response</code>：服务端响应（Response）的Content-Type最好也保持准确，虽然一般web开发中，前端解析响应的数据不会根据Content-Type，并且服务端一般能自动设置准确的Content-Type，但是如果乱设置某些情况下可能会有问题，比如导出文件，打开图片等。如果在spring项目里使用@ResponseBody，spring会将响应的Content-Type设置为application/json;charset=UTF-8;，可能会导致文件无法导出，需要注意下。</p><blockquote><ul><li>​    一般情况下不需要显示设置；</li><li>如果是文件导出，Content-Type 设置为 multipart/form-data，并且添加一个Content-Disposition设置为attachment;fileName=文件.后缀。<br> 注：Content-Disposition是Content-Type的扩展，告诉浏览器弹窗下载框，而不是直接在浏览器里展示文件。因为一般浏览器对于它能够处理的文件类型，如txt，pdf 等，它都是直接打开展示，而不是弹窗下载框。</li></ul></blockquote></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java注解</title>
      <link href="/2022/05/19/java/ji-chu/java-zhu-jie/"/>
      <url>/2022/05/19/java/ji-chu/java-zhu-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博文介绍一下Java注解的基础和部分用法</p></blockquote><h2 id="一-概念和基本注解"><a href="#一-概念和基本注解" class="headerlink" title="一.  概念和基本注解"></a>一.  概念和基本注解</h2><p>从JDK1.5开始，引入了<code>注解</code>这一机制， 使得Java代码不但可以包含功能性实现代码，还可以包含元数据。</p><h3 id="1-注解的分类"><a href="#1-注解的分类" class="headerlink" title="1.    注解的分类"></a>1.    注解的分类</h3><p>如上图，注解实际分为三类:</p><ul><li><p><strong>元注解</strong>: 元注解即描述注解的注解，有以下几种</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Target</td><td>定义注解的作用目标，也就是可以定义注解具体作用在类上，方法上，还是变量上                                                          * ElementType.ANNOTATION_TYPE : 限制此注解用于注解类<br> * ElementType.CONSTRUCTOR : 限制此注解用于构造方法<br> * ElementType.FIELD : 限制此注解用于字段属性（包括枚举变量）<br> * ElementType.LOCAL_VARIABLE : 限制此注解用于局部变量声明<br> * ElementType.METHOD : 限制此注解用于方法声明<br> * ElementType.PACKAGE : 限制此注解用于包声明<br> * ElementType.PARAMETER : 限制此注解用于参数声明<br> * ElementType.TYPE : 限制此注解用于类、接口（包括注解类型）或枚举声明</td></tr><tr><td>@Retention</td><td>RetentionPolicy.CLASS : 编译器将把注解记录在 class 文件中，当运行 Java 程序时，虚拟机不再保留注解。<br> RetentionPolicy.RUNTIME : 编译器将把注解记录在 class 文件中，当运行 Java 程序时，虚拟机保留注解，程序可以通过反射获得该注解。<br> RetentionPolicy.SOURCE : 编译器将直接丢弃被修饰的注解</td></tr><tr><td>@Document</td><td>在默认的情况下，使用 javadoc 工具自动生成文档时，注解将被忽略掉。如果想在文档中也包含注解，必须使用 @Documented 注解。</td></tr><tr><td>@Inherited</td><td>默认情况下，父类的注解不被子类继承，如果要想继承父类注解，就必须使用  @Inherited 注解。</td></tr></tbody></table></li><li><p>**标准注解: **Java标准注解提供了三个，定义在java.lang中的注解，这三个注解的作用更多的是一种注释</p><ul><li>@Override 表示当前方法覆盖父类中的方法。</li><li>@Deprecated 标记一个元素为已过期，避免使用</li></ul><p>支持的元素类型为：CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE</p><ul><li>@SuppressWarnings 不输出对应的编译警告</li></ul></li><li><p><strong>自定义注解:</strong> 使用自定义注解 + 反射， 能够实现很多功能</p></li></ul><h2 id="二-实战"><a href="#二-实战" class="headerlink" title="二. 实战"></a>二. 实战</h2><p>在公司中， 有个业务需求是将下拉框都抽象为枚举， 并提供统一接口，能够将枚举转换为Map， 让前端构造下拉框。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumRemoteApiImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EnumRemoteApi</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"optionalEnumMap"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> optionalEnumMap<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">PlainResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getEnumByClassName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">PlainResultUtil</span><span class="token punctuation">.</span><span class="token function">buildSuccessResult</span><span class="token punctuation">(</span>optionalEnumMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@OptionalEnumScan</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"com.gangling.scm.wms.common.enums"</span><span class="token punctuation">,</span>        <span class="token string">"com.gangling.scm.wms.delivery.order.enums"</span><span class="token punctuation">,</span>        <span class="token string">"com.gangling.scm.wms.pick.enums"</span><span class="token punctuation">,</span>        <span class="token string">"com.gangling.scm.wms.wave.enums"</span><span class="token punctuation">,</span>        <span class="token string">"com.gangling.scm.wms.warehouse.enums"</span><span class="token punctuation">,</span>        <span class="token string">"com.gangling.scm.wms.alc.strategy.enums"</span><span class="token punctuation">,</span>        <span class="token string">"com.gangling.scm.wms.replenish.enums"</span><span class="token punctuation">,</span>        <span class="token string">"com.gangling.scm.wms.receive.asn.enums"</span><span class="token punctuation">,</span>        <span class="token string">"com.gangling.scm.wms.doexp.enums"</span><span class="token punctuation">,</span>        <span class="token string">"com.gangling.scm.wms.rejection.enums"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumScanConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"optionalEnumMap"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">optionalEnumMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从注解中获取要扫描的包</span>        <span class="token class-name">OptionalEnumScan</span> annotation <span class="token operator">=</span> <span class="token class-name">EnumScanConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">OptionalEnumScan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> pkgName <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> pkgPath <span class="token operator">=</span> pkgName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">&gt;</span></span> urls <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>pkgPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">URL</span> url <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token class-name">File</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classFiles <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span>file <span class="token operator">-&gt;</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>classFiles <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> classFiles<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> classFile <span class="token operator">:</span> classFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                        <span class="token class-name">String</span> className <span class="token operator">=</span> classFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> classFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token function">resolveClass</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> pkgName<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"jar"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token class-name">JarFile</span> jarFile <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JarURLConnection</span><span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJarFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JarEntry</span><span class="token punctuation">&gt;</span></span> entries <span class="token operator">=</span> jarFile<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">while</span> <span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token class-name">JarEntry</span> jarEntry <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token class-name">String</span> name <span class="token operator">=</span> jarEntry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span> <span class="token operator">+</span> pkgPath<span class="token punctuation">)</span> <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>pkgPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>jarEntry<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                        <span class="token class-name">String</span> className <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token function">resolveClass</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> pkgName<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"optionalEnumMap"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token class-name">String</span> pkgName<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>pkgName <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Optional</span> optional <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">==</span> <span class="token class-name">BaseEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseEnum</span><span class="token punctuation">&gt;</span></span> enumClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseEnum</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> aClass<span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">lowerFirst</span><span class="token punctuation">(</span>enumClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getEnumByClassName</span><span class="token punctuation">(</span>enumClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"optionalEnumMap"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">lowerFirst</span><span class="token punctuation">(</span><span class="token class-name">String</span> fromStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> fromStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getEnumByClassName</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseEnum</span><span class="token punctuation">&gt;</span></span> enumClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 1.得到枚举类对象</span>       <span class="token class-name">BaseEnum</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> enumClass<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>objects <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> objects<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BaseEnum</span> obj <span class="token operator">:</span> objects<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">try</span> <span class="token punctuation">{</span>                   <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                   map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"label"</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"getEnumByClassName error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> list<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">OptionalEnumScan</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java注解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis配置</title>
      <link href="/2022/05/19/java/kuang-jia/mybatis-pei-zhi/"/>
      <url>/2022/05/19/java/kuang-jia/mybatis-pei-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    记录一下mybatis的配置， 如日志打印SQL</p></blockquote><h2 id="Mybatis日志打印"><a href="#Mybatis日志打印" class="headerlink" title="Mybatis日志打印"></a>Mybatis日志打印</h2><p>新增配置文件<code>mybatis-config.xml</code></p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD SQL MAP Config 3.1//EN""http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt;   &lt;!-- settings 一定要配置在plugins标签前面，有顺序讲究 --&gt;   &lt;settings&gt;      &lt;setting name="callSettersOnNulls" value="true" /&gt;      &lt;!-- 配置全局性 cache 的 ( 开 / 关) default:true --&gt;      &lt;setting name="cacheEnabled" value="false" /&gt;      &lt;!-- 是否使用 懒加载 关联对象  同 hibernate中的延迟加载 一样  default:true  --&gt;      &lt;setting name="lazyLoadingEnabled" value="false" /&gt;      &lt;!--当对象使用延迟加载时 属性的加载取决于能被引用到的那些延迟属性,否则,按需加载(需要的是时候才去加载)--&gt;      &lt;setting name="aggressiveLazyLoading" value="true" /&gt;      &lt;!--SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING--&gt;      &lt;setting name="logImpl" value="STDOUT_LOGGING" /&gt;   &lt;/settings&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring-Boot"></a>Spring-Boot</h2><p>增加配置</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">com.yaoex.pis.dao</span><span class="token punctuation">:</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis分页助手"><a href="#Mybatis分页助手" class="headerlink" title="Mybatis分页助手"></a>Mybatis分页助手</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--page-helper--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis-Generate配置"><a href="#Mybatis-Generate配置" class="headerlink" title="Mybatis Generate配置"></a>Mybatis Generate配置</h2><p>pom文件配置（可配置是否覆盖生成的源文件）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">添加依赖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>没有连接驱动的话加连接驱动添加插件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>Generate MyBatis Artifacts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>generate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 输出详细信息 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>verbose</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>verbose</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 覆盖生成文件 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>overwrite</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>overwrite</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 定义配置文件 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configurationFile</span><span class="token punctuation">&gt;</span></span>${basedir}/src/main/resources/mybatis-generate-core.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configurationFile</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写xml文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--        context标签：最重要的配置项 对应编码类org.mybatis.generator.config.Context            id:Context示例的唯一ID，用于输出错误信息时候作为唯一标记            targetRuntime:代码的生成模式                MyBatis3提供基本的基于动态SQL的CRUD方法和XXXByExample方法，会生成XML映射文件                MyBatis3Simple提供基本的基于动态SQL的CRUD方法，会生成XML映射文件                MyBatis3DynamicSql默认值，兼容JDK8+和MyBatis 3.4.2+，不会生成XML映射文件，忽略&lt;sqlMapGenerator&gt;的配置项，也就是Mapper全部注解化，依赖于MyBatis Dynamic SQL类库            defaultModelType:实体的生成行为，默认conditional，targetRuntime为MyBatis3DynamicSql或者MyBatis3Kotlin时忽略此配置    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysqlGenerator<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--覆盖原来生成的文件--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--            零个或者多个property，对应属性如下，一般用不到            &lt;property name="" value=""/&gt;                autoDelimitKeywords是否使用分隔符号括住数据库关键字false例如MySQL中会使用反引号括住关键字                beginningDelimiter分隔符号的开始符号"                endingDelimiter分隔符号的结束号"                javaFileEncoding文件的编码系统默认值来源于java.nio.charset.Charset                javaFormatter类名和文件格式化器DefaultJavaFormatter见JavaFormatter和DefaultJavaFormatter                targetJava8是否JDK8和启动其特性true                kotlinFileEncodingKotlin文件编码系统默认值来源于java.nio.charset.Charset                kotlinFormatterKotlin类名和文件格式化器DefaultKotlinFormatter见KotlinFormatter和DefaultKotlinFormatter                xmlFormatterXML文件格式化器DefaultXmlFormatter见XmlFormatter和DefaultXmlFormatter        --&gt;</span>        <span class="token comment">&lt;!--            plugin:用于引入一些插件对代码生成的一些特性进行扩展                例如：引入org.mybatis.generator.plugins.SerializablePlugin插件会让生成的实体类                     自动实现java.io.Serializable接口并且添加serialVersionUID属性。              可选插件地址：http://mybatis.org/generator/reference/plugins.html        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.generator.plugins.SerializablePlugin<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--            commentGenerator:标签是可选的，用于控制生成的实体的注释内容            有四个属性：                suppressAllComments是否生成注释false                suppressDate是否在注释中添加生成的时间戳false                dateFormat配合suppressDate使用，指定输出时间戳的格式java.util.Date#toString()                addRemarkComments是否输出表和列的Comment信息false        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.dasytech.digtal_platform.project_demo.config.MybatisGenerateComment<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token comment">&lt;!-- 是否去除自动生成的时间戳 true：是 ： false:否 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressDate<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token comment">&lt;!-- 是否添加数据表中字段的注释 true：是 ： false:否 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addRemarkComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 数据库链接URL、用户名、密码 对应编码类JDBCConnectionConfiguration--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span>                <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span>                <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://192.168.2.4:3306/dsy_server_dev?useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=UTF-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=UTC<span class="token punctuation">"</span></span>                <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DASYtech$41707<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--生成注释--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useInformationSchema<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--&lt;jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver" connectionURL="jdbc:oracle:thin:@localhost:1521:orcl" userId="msa" password="msa"/&gt;--&gt;</span>        <span class="token comment">&lt;!--            javaTypeResolver：用于解析和计算数据库列类型和Java类型的映射关系，可以不配置            有两个属性：                forceBigDecimals  是否强制把所有的数字类型强制使用java.math.BigDecimal类型表示false                useJSR310Types是否支持JSR310，主要是JSR310的新日期类型false                    数据库（JDBC）类型        Java类型                        DATE            java.time.LocalDate                         TIME            java.time.LocalTime                       TIMESTAMP        java.time.LocalDateTime                      TIME_WITH_TIMEZONEjava.time.OffsetTime                  TIMESTAMP_WITH_TIMEZONEjava.time.OffsetDateTime        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaTypeResolver</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>forceBigDecimals<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaTypeResolver</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--            javaModelGenerator：主要用于控制实体（Model）类的代码生成行为                targetPackage:生成的实体类的包名                targetProject:生成的实体类文件相对于项目（根目录）的位置                可配置属性：                    constructorBased:是否生成一个带有所有字段属性的构造函数，默认false，MyBatis3Kotlin模式下忽略此属性配置                    enableSubPackages:是否允许通过Schema生成子包,默认false，如果为true，                        例如包名为club.throwable，如果Schema为xyz，那么实体类文件最终会生成在club.throwable.xyz目录，不存在创建                    exampleTargetPackage：生成的伴随实体类的Example类的包名                    exampleTargetProject：生成的伴随实体类的Example类文件相对于项目（根目录）的位置                    immutable：是否不可变false，如果为true，则不会生成Setter方法，所有字段都使用final修饰，提供一个带有所有字段属性的构造函数                    rootClass：为生成的实体类添加父类，通过value指定父类的全类名即可                    trimStrings：Setter方法是否对字符串类型进行一次trim操作，默认false        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.dasytech.digtal_platform.project_demo.po<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project_demo/src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>constructorBased<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--            sqlMapGenerator：主要用于控制XML映射文件的代码生成行为                targetPackage生成的XML映射文件的包名                targetProject生成的XML映射文件相对于项目（根目录）的位置              如下配置，相当于在resources目录下创建mapper目录存放生成的*.xml文件            enableSubPackages:创建子包        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_info<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project_demo/src/main/resources/mapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--            javaClientGenerator：主要用于控制Mapper接口的代码生成行为            三个属性：                type：Mapper接口生成策略                    ANNOTATEDMAPPER：Mapper接口生成的时候依赖于注解和SqlProviders（也就是纯注解实现），不会生成XML映射文件。                    XMLMAPPER：Mapper接口生成接口方法，对应的实现代码生成在XML映射文件中（也就是纯映射文件实现）。                    MIXEDMAPPER：Mapper接口生成的时候复杂的方法实现生成在XML映射文件中，                                 而简单的实现通过注解和SqlProviders实现（也就是注解和映射文件混合实现）                targetPackage：生成的Mapper接口的包名                targetProject：生成的Mapper接口文件相对于项目（根目录）的位置Y例如src/main/java             注意：                &lt;context&gt;标签的targetRuntime属性指定为MyBatis3Simple的时候，type只能选用ANNOTATEDMAPPER或者XMLMAPPER。                &lt;context&gt;标签的targetRuntime属性指定为MyBatis3的时候，type可以选用ANNOTATEDMAPPER、XMLMAPPER或者MIXEDMAPPER。            property：                enableSubPackages：是否允许通过Schema生成子包，默认false，自动创建不存在的包                useLegacyBuilder：是否通过SQL Builder生成动态SQL，默认false                rootInterface为生成的Mapper接口添加父接口        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span>                             <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.dasytech.digtal_platform.project_demo.mapper<span class="token punctuation">"</span></span>                             <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project_demo/src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useLegacyBuilder<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--            table：要生成的目标表                常用属性：                tableName：数据库表名称                alias：表别名，如果指定了此值，则查询列的时候结果格式为【别名+列名】                domainObjectName：表对应的实体类名称，可以通过.指定包路径，如果指定了bar.User，则包名为bar，实体类名称为User                mapperName：表对应的Mapper接口类名称，可以通过.指定包路径，如果指定了bar.UserMapper，则包名为bar，Mapper接口类名称为UserMapper                delimitAllColumns：是否所有的列都添加分隔符，默认值为false，如果设置为true，所有列名会添加起始和结束分隔符                还有一些默认属性，生成方法true的不配置了                表的property                    constructorBased，是否为实体类生成一个带有所有字段的构造函数，默认false                    ignoreQualifiersAtRuntime：是否在运行时忽略别名                    useActualColumnNames：是否使用列名作为实体类的属性名        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basis_user_info<span class="token punctuation">"</span></span>               <span class="token attr-name">enableCountByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableUpdateByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableDeleteByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableSelectByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">selectByExampleQueryId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- &lt;table tableName="course_info" domainObjectName="CourseInfo" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false" /&gt;        &lt;table tableName="course_user_info" domainObjectName="CourseUserInfo" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false" /&gt; --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义注释生成配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dasytech<span class="token punctuation">.</span>digtal_platform<span class="token punctuation">.</span>project_demo<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtility</span><span class="token punctuation">.</span>isTrue<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">CommentGenerator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">IntrospectedColumn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">IntrospectedTable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>api<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>api<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>xml<span class="token punctuation">.</span></span><span class="token class-name">XmlElement</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">MergeConstants</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">PropertyRegistry</span><span class="token punctuation">;</span><span class="token comment">/** * @author zhuzy * @Title MybatisGenerateComment 自定义Mybatis注释生成 * @create 2022-07-02 13:07:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisGenerateComment</span> <span class="token keyword">implements</span> <span class="token class-name">CommentGenerator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Properties</span> properties<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Properties</span> systemPro<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> suppressDate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> suppressAllComments<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> currentDateStr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisGenerateComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        systemPro <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        suppressDate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        suppressAllComments <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        currentDateStr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        suppressDate <span class="token operator">=</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">PropertyRegistry</span><span class="token punctuation">.</span>COMMENT_GENERATOR_SUPPRESS_DATE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        suppressAllComments <span class="token operator">=</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">PropertyRegistry</span><span class="token punctuation">.</span>COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * This method adds the custom javadoc tag for. You may do nothing if you do     * not wish to include the Javadoc tag - however, if you do not include the     * Javadoc tag then the Java merge capability of the eclipse plugin will     * break.     *     * @param javaElement the java element     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addJavadocTag</span><span class="token punctuation">(</span><span class="token class-name">JavaElement</span> javaElement<span class="token punctuation">,</span> <span class="token keyword">boolean</span> markAsDoNotDelete<span class="token punctuation">)</span> <span class="token punctuation">{</span>        javaElement<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">" *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" * "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">MergeConstants</span><span class="token punctuation">.</span>NEW_ELEMENT_TAG<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>markAsDoNotDelete<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" do_not_delete_during_merge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token function">getDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        javaElement<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * This method returns a formated date string to include in the Javadoc tag     * and XML comments. You may return null if you do not want the date in     * these documentation elements.     *     * @return a string representing the current timestamp, or null     */</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">getDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>suppressDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> currentDateStr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addClassComment</span><span class="token punctuation">(</span><span class="token class-name">InnerClass</span> innerClass<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>suppressAllComments<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" * "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>introspectedTable<span class="token punctuation">.</span><span class="token function">getFullyQualifiedTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">getDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">" */"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEnumComment</span><span class="token punctuation">(</span><span class="token class-name">InnerEnum</span> innerEnum<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>suppressAllComments<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerEnum<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//addJavadocTag(innerEnum, false);</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" * "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>introspectedTable<span class="token punctuation">.</span><span class="token function">getFullyQualifiedTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerEnum<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerEnum<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">" */"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFieldComment</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">,</span>                                <span class="token class-name">IntrospectedColumn</span> introspectedColumn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>suppressAllComments<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" * "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>introspectedColumn<span class="token punctuation">.</span><span class="token function">getRemarks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//addJavadocTag(field, false);</span>        field<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">" */"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFieldComment</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>suppressAllComments<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" * "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>introspectedTable<span class="token punctuation">.</span><span class="token function">getFullyQualifiedTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">" */"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addGeneralMethodComment</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>suppressAllComments<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addGetterComment</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">,</span>                                 <span class="token class-name">IntrospectedColumn</span> introspectedColumn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>suppressAllComments<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        method<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" * "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>introspectedColumn<span class="token punctuation">.</span><span class="token function">getRemarks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" * @return "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>introspectedColumn<span class="token punctuation">.</span><span class="token function">getActualColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>introspectedColumn<span class="token punctuation">.</span><span class="token function">getRemarks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">" */"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addSetterComment</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">,</span>                                 <span class="token class-name">IntrospectedColumn</span> introspectedColumn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>suppressAllComments<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        method<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" * "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>introspectedColumn<span class="token punctuation">.</span><span class="token function">getRemarks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Parameter</span> parm <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" * @param "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>parm<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>introspectedColumn<span class="token punctuation">.</span><span class="token function">getRemarks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">" */"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addClassComment</span><span class="token punctuation">(</span><span class="token class-name">InnerClass</span> innerClass<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">,</span> <span class="token keyword">boolean</span> markAsDoNotDelete<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>suppressAllComments<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" * "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>introspectedTable<span class="token punctuation">.</span><span class="token function">getFullyQualifiedTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" * @author "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>systemPro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>currentDateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">" */"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addJavaFileComment</span><span class="token punctuation">(</span><span class="token class-name">CompilationUnit</span> compilationUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addComment</span><span class="token punctuation">(</span><span class="token class-name">XmlElement</span> xmlElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addRootComment</span><span class="token punctuation">(</span><span class="token class-name">XmlElement</span> rootElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addGeneralMethodAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FullyQualifiedJavaType</span><span class="token punctuation">&gt;</span></span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addGeneralMethodAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">,</span> <span class="token class-name">IntrospectedColumn</span> introspectedColumn<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FullyQualifiedJavaType</span><span class="token punctuation">&gt;</span></span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFieldAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FullyQualifiedJavaType</span><span class="token punctuation">&gt;</span></span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFieldAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">,</span> <span class="token class-name">IntrospectedColumn</span> introspectedColumn<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FullyQualifiedJavaType</span><span class="token punctuation">&gt;</span></span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addClassAnnotation</span><span class="token punctuation">(</span><span class="token class-name">InnerClass</span> innerClass<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FullyQualifiedJavaType</span><span class="token punctuation">&gt;</span></span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addModelClassComment</span><span class="token punctuation">(</span><span class="token class-name">TopLevelClass</span> topLevelClass<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dasytech<span class="token punctuation">.</span>digtal_platform<span class="token punctuation">.</span>project_demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">MyBatisGenerator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>xml<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationParser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span><span class="token class-name">DefaultShellCallback</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * @author zhuzy * @Title MybatisGenerateMain Mybatis逆向启动类 * @create 2022/7/2 12:46 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisGenerateMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 执行中的异常信息会保存在warnings中</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> warnings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// true:生成的文件覆盖之前的</span>            <span class="token keyword">boolean</span> overwrite <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment">// 读取配置,构造 Configuration 对象.</span>            <span class="token comment">// 如果不想使用配置文件的话,也可以直接来 new Configuration(),然后给相应属性赋值.</span>            <span class="token class-name">File</span> configFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\Git\\dsy-git\\svn\\szfwpt\\trunk\\digtal_platform_cloud\\project_demo\\src\\main\\resources\\mybatis-generate-core.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ConfigurationParser</span> cp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationParser</span><span class="token punctuation">(</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Configuration</span> config <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">parseConfiguration</span><span class="token punctuation">(</span>configFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DefaultShellCallback</span> callback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultShellCallback</span><span class="token punctuation">(</span>overwrite<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MyBatisGenerator</span> myBatisGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBatisGenerator</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>            myBatisGenerator<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> warning <span class="token operator">:</span> warnings<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>warning<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作常用易忘remark</title>
      <link href="/2022/05/16/gong-zuo/gong-zuo-chang-yong-yi-wang-remark/"/>
      <url>/2022/05/16/gong-zuo/gong-zuo-chang-yong-yi-wang-remark/</url>
      
        <content type="html"><![CDATA[<blockquote><p>工作常用易忘点</p></blockquote><h3 id="解析JSON为对象"><a href="#解析JSON为对象" class="headerlink" title="解析JSON为对象"></a>解析<code>JSON</code>为对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> dataworksMonitorConfig <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token class-name">ApolloUtil</span><span class="token punctuation">.</span><span class="token function">getDefaultInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"dataworksMonitor"</span><span class="token punctuation">,</span> <span class="token string">"{\"bd_transaction_recent_mult_bind\":{\"count\":\"100\"}, \"bd_transaction_recent_mult_bind2\":{\"count\":\"1000\"}}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="开启异步线程"><a href="#开启异步线程" class="headerlink" title="开启异步线程"></a>开启异步线程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"********dataworks导出监控， 邮件提醒异步线程异常， 异常:{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    threadPoolTaskExecutor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拉数据"><a href="#拉数据" class="headerlink" title="拉数据"></a>拉数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 负毛订单总数<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_order_negative_margin <span class="token keyword">where</span> order_time <span class="token operator">&gt;</span> <span class="token string">'2022-05-01'</span> <span class="token operator">and</span> examine_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 审核通过数量<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> t_order_negative_margin <span class="token keyword">where</span> order_time <span class="token operator">&gt;</span> <span class="token string">'2022-05-01'</span> <span class="token operator">and</span> examine_status<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 审核不通过数量<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>order_money<span class="token punctuation">)</span> <span class="token keyword">from</span> t_order_negative_margin <span class="token keyword">where</span> order_time <span class="token operator">&gt;</span> <span class="token string">'2022-05-01'</span> <span class="token operator">and</span> examine_status<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 审核不通过订单GMV<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>margin<span class="token punctuation">)</span> <span class="token keyword">from</span> t_order_negative_margin <span class="token keyword">where</span> order_time <span class="token operator">&gt;</span> <span class="token string">'2022-05-01'</span> <span class="token operator">and</span> examine_status<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 审核不通过订单毛利额<span class="token keyword">from</span> t_order_negative_margin <span class="token keyword">where</span> order_time <span class="token operator">&gt;=</span> <span class="token string">'2022-05-01'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="低代码"><a href="#低代码" class="headerlink" title="低代码"></a>低代码</h3><h4 id="1-根据状态显示不同的操作栏"><a href="#1-根据状态显示不同的操作栏" class="headerlink" title="1. 根据状态显示不同的操作栏"></a>1. 根据状态显示不同的操作栏</h4><p>低代码这种操作列 根据行的状态展示不同的按钮 是怎么操作的吗</p><p><img src="/2022/05/16/gong-zuo/gong-zuo-chang-yong-yi-wang-remark/1654495609834.png" alt="1654495609834"></p><p><img src="/2022/05/16/gong-zuo/gong-zuo-chang-yong-yi-wang-remark/1654495618984.png" alt="1654495618984"></p><p>要点: 后端返回<code>operations</code>数组， 其中数组的值包含操作栏的<code>key</code>， 如果对应操作栏的<code>key</code>存在于<code>operations</code>数组中，则显示该操作栏。通过数组返回的<code>key</code>的多少，展示几个操作栏</p><h4 id="2-单元格数据换行"><a href="#2-单元格数据换行" class="headerlink" title="2. 单元格数据换行"></a>2. 单元格数据换行</h4><p><img src="/2022/05/16/gong-zuo/gong-zuo-chang-yong-yi-wang-remark/1654495789072.png" alt="1654495789072"></p><p><img src="/2022/05/16/gong-zuo/gong-zuo-chang-yong-yi-wang-remark/1654495800923.png" alt="1654495800923"></p><p><img src="/2022/05/16/gong-zuo/gong-zuo-chang-yong-yi-wang-remark/1654495810780.png" alt="1654495810780"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>商家订单号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{record.orderId ? record.orderId : '-'}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>订单下单时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{record.createOrderTime ? record.createOrderTime : '-'}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> remark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> remark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oracle时间筛选</title>
      <link href="/2022/05/13/shu-ju-ku/oracle-shi-jian-shai-xuan/"/>
      <url>/2022/05/13/shu-ju-ku/oracle-shi-jian-shai-xuan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    Oracle时间筛选</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span> <span class="token operator">and</span> t1<span class="token punctuation">.</span>CREATE_TIME <span class="token operator">&gt;=</span> to_date<span class="token punctuation">(</span><span class="token comment">#{param.rejectTimeFrom, jdbcType=DATE},'yyyy-mm-dd hh24:mi:ss') ]]&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合等份切割算法</title>
      <link href="/2022/05/11/java/ji-chu/ji-he-deng-fen-qie-ge-suan-fa/"/>
      <url>/2022/05/11/java/ji-chu/ji-he-deng-fen-qie-ge-suan-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>集合等切算法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 将一组数据平均分成n组** @param source 要分组的数据源* @param n      平均分成n组* @return {@link List }&lt;{@link List }&lt;{@link T }&gt;&gt;* @author zhuzhiyong*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">equalitySplitList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">||</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 多余元素数量</span>    <span class="token keyword">int</span> remainder <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>    <span class="token comment">// 每组元素数量</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> n<span class="token punctuation">;</span>    <span class="token comment">// 偏移量</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 多余元素未均匀放置完毕，多放置一个</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainder <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>i <span class="token operator">*</span> size <span class="token operator">+</span> offset<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> size <span class="token operator">+</span> offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            remainder<span class="token operator">--</span><span class="token punctuation">;</span>            offset<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>i <span class="token operator">*</span> size <span class="token operator">+</span> offset<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> size <span class="token operator">+</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>navicat15破解</title>
      <link href="/2022/05/10/gong-ju/navicat15-po-jie/"/>
      <url>/2022/05/10/gong-ju/navicat15-po-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    记录一下navicat破解步骤</p></blockquote><h1 id="1、下载Navicat-Premium"><a href="#1、下载Navicat-Premium" class="headerlink" title="1、下载Navicat Premium#"></a>1、下载Navicat Premium<a href="https://www.cnblogs.com/laoshuai/p/13517172.html#1011852408">#</a></h1><p>官网<a href="https://www.navicat.com.cn/%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">https://www.navicat.com.cn/下载最新版本下载安装</a></p><h1 id="2、链接：https-pan-baidu-com-s-1T-AM8tubtUOBZn3PMhYLYA"><a href="#2、链接：https-pan-baidu-com-s-1T-AM8tubtUOBZn3PMhYLYA" class="headerlink" title="2、链接：https://pan.baidu.com/s/1T-AM8tubtUOBZn3PMhYLYA#"></a>2、链接：<a href="https://pan.baidu.com/s/1T-AM8tubtUOBZn3PMhYLYA">https://pan.baidu.com/s/1T-AM8tubtUOBZn3PMhYLYA</a><a href="https://www.cnblogs.com/laoshuai/p/13517172.html#2380837098">#</a></h1><p>提取码：zo5g（安装包和破解包都有）</p><h1 id="3、激活Navicat-Premium"><a href="#3、激活Navicat-Premium" class="headerlink" title="3、激活Navicat Premium#"></a>3、激活Navicat Premium<a href="https://www.cnblogs.com/laoshuai/p/13517172.html#732702945">#</a></h1><p>先把Navicat安装好<br>然后把破解工具Navicat_Keygen_Patch解压， 以管理员身份运行<br><a href="https://img2020.cnblogs.com/blog/1407082/202008/1407082-20200817134342865-212514800.png"><img src="/2022/05/10/gong-ju/navicat15-po-jie/1407082-20200817134342865-212514800.png" alt="img"></a></p><h1 id="4-点击patch-弹出窗口，找到navicat下载的目录选择navicat，点击打开"><a href="#4-点击patch-弹出窗口，找到navicat下载的目录选择navicat，点击打开" class="headerlink" title="4.点击patch 弹出窗口，找到navicat下载的目录选择navicat，点击打开#"></a>4.点击patch 弹出窗口，找到navicat下载的目录选择navicat，点击打开<a href="https://www.cnblogs.com/laoshuai/p/13517172.html#1745567602">#</a></h1><p><a href="https://img2020.cnblogs.com/blog/1407082/202008/1407082-20200817134421848-814137324.png"><img src="/2022/05/10/gong-ju/navicat15-po-jie/1407082-20200817134421848-814137324.png" alt="img"></a></p><h1 id="5-显示为下图就是破解成功了"><a href="#5-显示为下图就是破解成功了" class="headerlink" title="5.显示为下图就是破解成功了#"></a>5.显示为下图就是破解成功了<a href="https://www.cnblogs.com/laoshuai/p/13517172.html#3371019325">#</a></h1><p><a href="https://img2020.cnblogs.com/blog/1407082/202008/1407082-20200817134433244-918413008.png"><img src="/2022/05/10/gong-ju/navicat15-po-jie/1407082-20200817134433244-918413008.png" alt="img"></a></p><h2 id="5-1-点击Generate"><a href="#5-1-点击Generate" class="headerlink" title="5.1.点击Generate#"></a>5.1.点击Generate<a href="https://www.cnblogs.com/laoshuai/p/13517172.html#273903308">#</a></h2><h2 id="5-2-出现序列码"><a href="#5-2-出现序列码" class="headerlink" title="5.2.出现序列码#"></a>5.2.出现序列码<a href="https://www.cnblogs.com/laoshuai/p/13517172.html#941592296">#</a></h2><h2 id="5-3-点击Copy"><a href="#5-3-点击Copy" class="headerlink" title="5.3.点击Copy#"></a>5.3.点击Copy<a href="https://www.cnblogs.com/laoshuai/p/13517172.html#3796141478">#</a></h2><p><a href="https://img2020.cnblogs.com/blog/1407082/202008/1407082-20200817134445278-689681058.png"><img src="/2022/05/10/gong-ju/navicat15-po-jie/1407082-20200817134445278-689681058.png" alt="img"></a></p><h1 id="6-然后打开navicat"><a href="#6-然后打开navicat" class="headerlink" title="6.然后打开navicat#"></a>6.然后打开navicat<a href="https://www.cnblogs.com/laoshuai/p/13517172.html#31343350">#</a></h1><p><a href="https://img2020.cnblogs.com/blog/1407082/202008/1407082-20200817134458436-319113361.png"><img src="/2022/05/10/gong-ju/navicat15-po-jie/1407082-20200817134458436-319113361.png" alt="img"></a></p><h1 id="7-第一次打开会提示注册和试用，由于作者是破解过了，我就不截图了，你们第一次打开的时候点击注册，然后把刚才copy的序列码复制进去，点击激活。"><a href="#7-第一次打开会提示注册和试用，由于作者是破解过了，我就不截图了，你们第一次打开的时候点击注册，然后把刚才copy的序列码复制进去，点击激活。" class="headerlink" title="7.第一次打开会提示注册和试用，由于作者是破解过了，我就不截图了，你们第一次打开的时候点击注册，然后把刚才copy的序列码复制进去，点击激活。#"></a>7.第一次打开会提示注册和试用，由于作者是破解过了，我就不截图了，你们第一次打开的时候点击注册，然后把刚才copy的序列码复制进去，点击激活。<a href="https://www.cnblogs.com/laoshuai/p/13517172.html#3304660800">#</a></h1><p><a href="https://img2020.cnblogs.com/blog/1407082/202008/1407082-20200817134505826-2129085652.png"><img src="/2022/05/10/gong-ju/navicat15-po-jie/1407082-20200817134505826-2129085652.png" alt="img"></a></p><h1 id="8-选择手动激活"><a href="#8-选择手动激活" class="headerlink" title="8.选择手动激活#"></a>8.选择手动激活<a href="https://www.cnblogs.com/laoshuai/p/13517172.html#2885426325">#</a></h1><p><a href="https://img2020.cnblogs.com/blog/1407082/202008/1407082-20200817134514334-944341877.png"><img src="/2022/05/10/gong-ju/navicat15-po-jie/1407082-20200817134514334-944341877.png" alt="img"></a></p><h1 id="9-然后会生成一大串请求码"><a href="#9-然后会生成一大串请求码" class="headerlink" title="9.然后会生成一大串请求码#"></a>9.然后会生成一大串请求码<a href="https://www.cnblogs.com/laoshuai/p/13517172.html#622373602">#</a></h1><p><a href="https://img2020.cnblogs.com/blog/1407082/202008/1407082-20200817134522149-1369727733.png"><img src="/2022/05/10/gong-ju/navicat15-po-jie/1407082-20200817134522149-1369727733.png" alt="img"></a></p><h1 id="10-复制请求码到注册机中的Request-Code中，点击Activation-Code下的generate，生成激活码"><a href="#10-复制请求码到注册机中的Request-Code中，点击Activation-Code下的generate，生成激活码" class="headerlink" title="10.复制请求码到注册机中的Request Code中，点击Activation Code下的generate，生成激活码#"></a>10.复制请求码到注册机中的Request Code中，点击Activation Code下的generate，生成激活码<a href="https://www.cnblogs.com/laoshuai/p/13517172.html#1606978895">#</a></h1><p><a href="https://img2020.cnblogs.com/blog/1407082/202008/1407082-20200817134531876-1265159097.png"><img src="/2022/05/10/gong-ju/navicat15-po-jie/1407082-20200817134531876-1265159097.png" alt="img"></a><br><a href="https://img2020.cnblogs.com/blog/1407082/202008/1407082-20200817134543144-345547815.png"><img src="/2022/05/10/gong-ju/navicat15-po-jie/1407082-20200817134543144-345547815.png" alt="img"></a><br><a href="https://img2020.cnblogs.com/blog/1407082/202008/1407082-20200817134554359-145466432.png"><img src="/2022/05/10/gong-ju/navicat15-po-jie/1407082-20200817134554359-145466432.png" alt="img"></a></p><p>点击激活！！！<br>然后再次打开就可以啦，破解成功，嘿嘿！</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bigdecimal精度转换</title>
      <link href="/2022/05/10/java/ji-chu/bigdecimal-jing-du-zhuan-huan/"/>
      <url>/2022/05/10/java/ji-chu/bigdecimal-jing-du-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>贴一个<code>Bigdecimal</code>保留小数点后<code>n</code>位的案例， 直接贴代码了</p></blockquote><p>保留小数点后两位</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">parseBigDecimalInPrecision</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> num<span class="token punctuation">,</span> <span class="token class-name">String</span> precision<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DecimalFormat</span> df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span>precision<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        res <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"按照精度解析BigDecimal异常{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven打包下载源码及多数据源配置</title>
      <link href="/2022/05/09/gong-ju/maven-da-bao-xia-zai-yuan-ma/"/>
      <url>/2022/05/09/gong-ju/maven-da-bao-xia-zai-yuan-ma/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    使用<code>Maven</code>时，有时下载<code>jar</code>需要源码， 需要加以下<code>Maven</code>插件</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-source-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attach</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attach</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    另外,可通过以下命令, 手动下载源码</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mvn dependency:sourcesmvn dependency:resolve -Dclassifier<span class="token operator">=</span>javadoc<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>```xml<span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- Licensed to the Apache Software Foundation <span class="token punctuation">(</span>ASF<span class="token punctuation">)</span> under one or <span class="token function">more</span> contributor license agreements. See the NOTICE <span class="token function">file</span> distributed with this work <span class="token keyword">for</span> additional information regarding copyright ownership. The ASF licenses this <span class="token function">file</span> to you under the Apache License, Version <span class="token number">2.0</span> <span class="token punctuation">(</span>the <span class="token string">"License"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> you may not use this <span class="token function">file</span> except <span class="token keyword">in</span> compliance with the License. You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to <span class="token keyword">in</span> writing, software distributed under the License is distributed on an <span class="token string">"AS IS"</span> BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License <span class="token keyword">for</span> the specific language governing permissions and limitations under the License. --<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>--<span class="token operator">|</span> This is the configuration <span class="token function">file</span> <span class="token keyword">for</span> Maven. It can be specified at two levels:<span class="token operator">||</span> <span class="token number">1</span>. User Level. This settings.xml <span class="token function">file</span> provides configuration <span class="token keyword">for</span> a single user,<span class="token operator">|</span> and is normally provided <span class="token keyword">in</span> <span class="token variable">${user.home}</span>/.m2/settings.xml.<span class="token operator">||</span> NOTE: This location can be overridden with the CLI option:<span class="token operator">||</span> -s /path/to/user/settings.xml<span class="token operator">||</span> <span class="token number">2</span>. Global Level. This settings.xml <span class="token function">file</span> provides configuration <span class="token keyword">for</span> all Maven<span class="token operator">|</span> <span class="token function">users</span> on a machine <span class="token punctuation">(</span>assuming they<span class="token string">'re all using the same Maven| installation). It'</span>s normally provided <span class="token keyword">in</span><span class="token operator">|</span> <span class="token variable">${maven.home}</span>/conf/settings.xml.<span class="token operator">||</span> NOTE: This location can be overridden with the CLI option:<span class="token operator">||</span> -gs /path/to/global/settings.xml<span class="token operator">||</span> The sections <span class="token keyword">in</span> this sample <span class="token function">file</span> are intended to give you a running start at<span class="token operator">|</span> getting the <span class="token function">most</span> out of your Maven installation. Where appropriate, the default<span class="token operator">|</span> values <span class="token punctuation">(</span>values used when the setting is not specified<span class="token punctuation">)</span> are provided.<span class="token operator">||</span>--<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>settings xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span> xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="token assign-left variable">xmlns</span><span class="token operator">=</span><span class="token string">"http://maven.apache.org/SETTINGS/1.0.0"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- localRepository<span class="token operator">|</span> The path to the <span class="token builtin class-name">local</span> repository maven will use to store artifacts.<span class="token operator">||</span> Default: ~/.m2/repository<span class="token operator">&gt;</span> --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>localRepository<span class="token operator">&gt;</span>D:<span class="token punctuation">\</span>devSoftware<span class="token punctuation">\</span>Java<span class="token punctuation">\</span>Maven<span class="token punctuation">\</span>mavenDependence<span class="token operator">&lt;</span>/localRepository<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- interactiveMode<span class="token operator">|</span> This will determine whether maven prompts you when it needs input. If <span class="token builtin class-name">set</span> to false,<span class="token operator">|</span> maven will use a sensible default value, perhaps based on some other setting, <span class="token keyword">for</span><span class="token operator">|</span> the parameter <span class="token keyword">in</span> question.<span class="token operator">||</span> Default: true<span class="token operator">&lt;</span>interactiveMode<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/interactiveMode<span class="token operator">&gt;</span> --<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- offline<span class="token operator">|</span> Determines whether maven should attempt to connect to the network when executing a build.<span class="token operator">|</span> This will have an effect on artifact downloads, artifact deployment, and others.<span class="token operator">||</span> Default: false<span class="token operator">&lt;</span>offline<span class="token operator">&gt;</span>false<span class="token operator">&lt;</span>/offline<span class="token operator">&gt;</span> --<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- pluginGroups<span class="token operator">|</span> This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.<span class="token operator">|</span> when invoking a <span class="token builtin class-name">command</span> line like <span class="token string">"mvn prefix:goal"</span><span class="token builtin class-name">.</span> Maven will automatically <span class="token function">add</span> the group identifiers<span class="token operator">|</span> <span class="token string">"org.apache.maven.plugins"</span> and <span class="token string">"org.codehaus.mojo"</span> <span class="token keyword">if</span> these are not already contained <span class="token keyword">in</span> the list.<span class="token operator">|</span>--<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>pluginGroups<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- pluginGroup<span class="token operator">|</span> Specifies a further group identifier to use <span class="token keyword">for</span> plugin lookup.<span class="token operator">&lt;</span>pluginGroup<span class="token operator">&gt;</span>com.your.plugins<span class="token operator">&lt;</span>/pluginGroup<span class="token operator">&gt;</span> --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>pluginGroup<span class="token operator">&gt;</span>org.mortbay.jetty<span class="token operator">&lt;</span>/pluginGroup<span class="token operator">&gt;</span><span class="token operator">&lt;</span>pluginGroup<span class="token operator">&gt;</span>org.codehaus.cargo<span class="token operator">&lt;</span>/pluginGroup<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/pluginGroups<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- proxies<span class="token operator">|</span> This is a list of proxies <span class="token function">which</span> can be used on this machine to connect to the network.<span class="token operator">|</span> Unless otherwise specified <span class="token punctuation">(</span>by system property or command-line switch<span class="token punctuation">)</span>, the first proxy<span class="token operator">|</span> specification <span class="token keyword">in</span> this list marked as active will be used.<span class="token operator">|</span>--<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>proxies<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- proxy<span class="token operator">|</span> Specification <span class="token keyword">for</span> one proxy, to be used <span class="token keyword">in</span> connecting to the network.<span class="token operator">|</span><span class="token operator">&lt;</span>proxy<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>optional<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>active<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/active<span class="token operator">&gt;</span><span class="token operator">&lt;</span>protocol<span class="token operator">&gt;</span>http<span class="token operator">&lt;</span>/protocol<span class="token operator">&gt;</span><span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>proxyuser<span class="token operator">&lt;</span>/username<span class="token operator">&gt;</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>proxypass<span class="token operator">&lt;</span>/password<span class="token operator">&gt;</span><span class="token operator">&lt;</span>host<span class="token operator">&gt;</span>proxy.host.net<span class="token operator">&lt;</span>/host<span class="token operator">&gt;</span><span class="token operator">&lt;</span>port<span class="token operator">&gt;</span><span class="token number">8</span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/port<span class="token operator">&gt;</span><span class="token operator">&lt;</span>nonProxyHosts<span class="token operator">&gt;</span>local.net<span class="token operator">|</span>some.host.com<span class="token operator">&lt;</span>/nonProxyHosts<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/proxy<span class="token operator">&gt;</span> --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/proxies<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- servers<span class="token operator">|</span> This is a list of authentication profiles, keyed by the server-id used within the system.<span class="token operator">|</span> Authentication profiles can be used whenever maven must <span class="token function">make</span> a connection to a remote server.<span class="token operator">|</span>--<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>servers<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- server<span class="token operator">|</span> Specifies the authentication information to use when connecting to a particular server, identified by<span class="token operator">|</span> a unique name within the system <span class="token punctuation">(</span>referred to by the <span class="token string">'id'</span> attribute below<span class="token punctuation">)</span>.<span class="token operator">||</span> NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are<span class="token operator">|</span> used together.<span class="token operator">|</span><span class="token operator">&lt;</span>server<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>deploymentRepo<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>repouser<span class="token operator">&lt;</span>/username<span class="token operator">&gt;</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>repopwd<span class="token operator">&lt;</span>/password<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/server<span class="token operator">&gt;</span> --<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- Another sample, using keys to authenticate.<span class="token operator">&lt;</span>server<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>siteServer<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>privateKey<span class="token operator">&gt;</span>/path/to/private/key<span class="token operator">&lt;</span>/privateKey<span class="token operator">&gt;</span><span class="token operator">&lt;</span>passphrase<span class="token operator">&gt;</span>optional<span class="token punctuation">;</span> leave empty <span class="token keyword">if</span> not used.<span class="token operator">&lt;</span>/passphrase<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/server<span class="token operator">&gt;</span> --<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>--<span class="token operator">&lt;</span>server<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>nexus-releases<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>feiya<span class="token operator">&lt;</span>/username<span class="token operator">&gt;</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>yyw,12<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/password<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/server<span class="token operator">&gt;</span><span class="token operator">&lt;</span>server<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>nexus-snapshots<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>feiya<span class="token operator">&lt;</span>/username<span class="token operator">&gt;</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>yyw,12<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/password<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/server<span class="token operator">&gt;</span><span class="token operator">&lt;</span>server<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>nexus<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>feiya<span class="token operator">&lt;</span>/username<span class="token operator">&gt;</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>yyw,12<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/password<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/server<span class="token operator">&gt;</span> --<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>server<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>nexus-releases<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>lujun<span class="token operator">&lt;</span>/username<span class="token operator">&gt;</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>lujun<span class="token operator">&lt;</span>/password<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/server<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>server<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>nexus-snapshots<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>lujun<span class="token operator">&lt;</span>/username<span class="token operator">&gt;</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>lujun<span class="token operator">&lt;</span>/password<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/server<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>server<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>nexus<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>lujun<span class="token operator">&lt;</span>/username<span class="token operator">&gt;</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>lujun<span class="token operator">&lt;</span>/password<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/server<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>server<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>yiyaowang-snapshots<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>lujun<span class="token operator">&lt;</span>/username<span class="token operator">&gt;</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>lujun<span class="token operator">&lt;</span>/password<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/server<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/servers<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- mirrors<span class="token operator">|</span> This is a list of mirrors to be used <span class="token keyword">in</span> downloading artifacts from remote repositories.<span class="token operator">||</span> It works like this: a POM may <span class="token builtin class-name">declare</span> a repository to use <span class="token keyword">in</span> resolving certain artifacts.<span class="token operator">|</span> However, this repository may have problems with heavy traffic at times, so people have mirrored<span class="token operator">|</span> it to several places.<span class="token operator">||</span> That repository definition will have a unique id, so we can create a mirror reference <span class="token keyword">for</span> that<span class="token operator">|</span> repository, to be used as an alternate download site. The mirror site will be the preferred<span class="token operator">|</span> server <span class="token keyword">for</span> that repository.<span class="token operator">|</span>--<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>mirrors<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>mirror<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>mirrorId<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>mirrorOf<span class="token operator">&gt;</span>central<span class="token operator">&lt;</span>/mirrorOf<span class="token operator">&gt;</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>Human Readable Name <span class="token keyword">for</span> this Mirror.<span class="token operator">&lt;</span>/name<span class="token operator">&gt;</span><span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>http://central.maven.org/maven2/<span class="token operator">&lt;</span>/url<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/mirror<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token operator">&lt;</span>mirror<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>aliyunmaven<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>mirrorOf<span class="token operator">&gt;</span>*<span class="token operator">&lt;</span>/mirrorOf<span class="token operator">&gt;</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>阿里云公共仓库<span class="token operator">&lt;</span>/name<span class="token operator">&gt;</span><span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>https://maven.aliyun.com/repository/public<span class="token operator">&lt;</span>/url<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/mirror<span class="token operator">&gt;</span><span class="token operator">&lt;</span>mirror<span class="token operator">&gt;</span> 　　<span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>huaweicloud<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>华为云 maven<span class="token operator">&lt;</span>/name<span class="token operator">&gt;</span><span class="token operator">&lt;</span>mirrorOf<span class="token operator">&gt;</span>*<span class="token operator">&lt;</span>/mirrorOf<span class="token operator">&gt;</span><span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>https://mirrors.huaweicloud.com/repository/maven/<span class="token operator">&lt;</span>/url<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/mirror<span class="token operator">&gt;</span> --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/mirrors<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>profiles<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- profiles<span class="token operator">|</span> This is a list of profiles <span class="token function">which</span> can be activated <span class="token keyword">in</span> a variety of ways, and <span class="token function">which</span> can modify<span class="token operator">|</span> the build process. Profiles provided <span class="token keyword">in</span> the settings.xml are intended to provide <span class="token builtin class-name">local</span> machine- <span class="token operator">|</span> specific paths and repository locations <span class="token function">which</span> allow the build to work <span class="token keyword">in</span> the <span class="token builtin class-name">local</span> environment.<span class="token operator">||</span> For example, <span class="token keyword">if</span> you have an integration testing plugin - like cactus - that needs to know where<span class="token operator">|</span> your Tomcat instance is installed, you can provide a variable here such that the variable is<span class="token operator">|</span> dereferenced during the build process to configure the cactus plugin.<span class="token operator">||</span> As noted above, profiles can be activated <span class="token keyword">in</span> a variety of ways. One way - the activeProfiles<span class="token operator">|</span> section of this document <span class="token punctuation">(</span>settings.xml<span class="token punctuation">)</span> - will be discussed later. Another way essentially<span class="token operator">|</span> relies on the detection of a system property, either matching a particular value <span class="token keyword">for</span> the property,<span class="token operator">|</span> or merely testing its existence. Profiles can also be activated by JDK version prefix, where a<span class="token operator">|</span> value of <span class="token string">'1.4'</span> might activate a profile when the build is executed on a JDK version of <span class="token string">'1.4.2_07'</span><span class="token builtin class-name">.</span><span class="token operator">|</span> Finally, the list of active profiles can be specified directly from the <span class="token builtin class-name">command</span> line.<span class="token operator">||</span> NOTE: For profiles defined <span class="token keyword">in</span> the settings.xml, you are restricted to specifying only artifact<span class="token operator">|</span> repositories, plugin repositories, and free-form properties to be used as configuration<span class="token operator">|</span> variables <span class="token keyword">for</span> <span class="token for-or-select variable">plugins</span> <span class="token keyword">in</span> the POM.<span class="token operator">||</span>--<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>profile<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>myProfile<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>repositories<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>nexus-snapshots<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>company Nexus Repository<span class="token operator">&lt;</span>/name<span class="token operator">&gt;</span><span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>http://maven.yiyaowang.com/nexus/content/groups/public/<span class="token operator">&lt;</span>/url<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>releases<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/releases<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>snapshots<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/snapshots<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/repository<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/repositories<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>pluginRepositories<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>pluginRepository<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>nexus-snapshots<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>company Nexus Repository<span class="token operator">&lt;</span>/name<span class="token operator">&gt;</span><span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>http://maven.yiyaowang.com/nexus/content/groups/public/<span class="token operator">&lt;</span>/url<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>releases<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/releases<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>snapshots<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/snapshots<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/pluginRepository<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/pluginRepositories<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>--<span class="token operator">&lt;</span>activation<span class="token operator">&gt;</span><span class="token operator">&lt;</span>activeByDefault<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/activeByDefault<span class="token operator">&gt;</span><span class="token operator">&lt;</span>jdk<span class="token operator">&gt;</span><span class="token number">1</span>.<span class="token operator"><span class="token file-descriptor important">6</span>&lt;</span>/jdk<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/activation<span class="token operator">&gt;</span><span class="token operator">&lt;</span>properties<span class="token operator">&gt;</span><span class="token operator">&lt;</span>maven.compiler.source<span class="token operator">&gt;</span><span class="token number">1</span>.<span class="token operator"><span class="token file-descriptor important">6</span>&lt;</span>/maven.compiler.source<span class="token operator">&gt;</span><span class="token operator">&lt;</span>maven.compiler.target<span class="token operator">&gt;</span><span class="token number">1</span>.<span class="token operator"><span class="token file-descriptor important">6</span>&lt;</span>/maven.compiler.target<span class="token operator">&gt;</span><span class="token operator">&lt;</span>maven.compiler.compilerVersion<span class="token operator">&gt;</span><span class="token number">1</span>.<span class="token operator"><span class="token file-descriptor important">6</span>&lt;</span>/maven.compiler.compilerVersion<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/properties<span class="token operator">&gt;</span> --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/profile<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>profile<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>oschina<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>repositories<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>nexus<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>company Nexus Repository<span class="token operator">&lt;</span>/name<span class="token operator">&gt;</span><span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>http://maven.oschina.net/content/groups/public/<span class="token operator">&lt;</span>/url<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>releases<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/releases<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>snapshots<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/snapshots<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/repository<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/repositories<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>pluginRepositories<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>pluginRepository<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>nexus<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>company Nexus Repository<span class="token operator">&lt;</span>/name<span class="token operator">&gt;</span><span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>http://maven.oschina.net/content/groups/public/<span class="token operator">&lt;</span>/url<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>releases<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/releases<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>snapshots<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/snapshots<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/pluginRepository<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/pluginRepositories<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>--<span class="token operator">&lt;</span>activation<span class="token operator">&gt;</span><span class="token operator">&lt;</span>activeByDefault<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/activeByDefault<span class="token operator">&gt;</span><span class="token operator">&lt;</span>jdk<span class="token operator">&gt;</span><span class="token number">1</span>.<span class="token operator"><span class="token file-descriptor important">6</span>&lt;</span>/jdk<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/activation<span class="token operator">&gt;</span><span class="token operator">&lt;</span>properties<span class="token operator">&gt;</span><span class="token operator">&lt;</span>maven.compiler.source<span class="token operator">&gt;</span><span class="token number">1</span>.<span class="token operator"><span class="token file-descriptor important">6</span>&lt;</span>/maven.compiler.source<span class="token operator">&gt;</span><span class="token operator">&lt;</span>maven.compiler.target<span class="token operator">&gt;</span><span class="token number">1</span>.<span class="token operator"><span class="token file-descriptor important">6</span>&lt;</span>/maven.compiler.target<span class="token operator">&gt;</span><span class="token operator">&lt;</span>maven.compiler.compilerVersion<span class="token operator">&gt;</span><span class="token number">1</span>.<span class="token operator"><span class="token file-descriptor important">6</span>&lt;</span>/maven.compiler.compilerVersion<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/properties<span class="token operator">&gt;</span>--<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/profile<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>profile<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>Ali<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>repositories<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>nexus<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>company Nexus Repository<span class="token operator">&lt;</span>/name<span class="token operator">&gt;</span><span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>https://maven.aliyun.com/repository/public<span class="token operator">&lt;</span>/url<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>releases<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/releases<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>snapshots<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/snapshots<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/repository<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/repositories<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>pluginRepositories<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>pluginRepository<span class="token operator">&gt;</span><span class="token operator">&lt;</span>id<span class="token operator">&gt;</span>nexus<span class="token operator">&lt;</span>/id<span class="token operator">&gt;</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>company Nexus Repository<span class="token operator">&lt;</span>/name<span class="token operator">&gt;</span><span class="token operator">&lt;</span>url<span class="token operator">&gt;</span>https://maven.aliyun.com/repository/public<span class="token operator">&lt;</span>/url<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>releases<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/releases<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>snapshots<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/snapshots<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/pluginRepository<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/pluginRepositories<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>properties<span class="token operator">&gt;</span><span class="token operator">&lt;</span>maven.compiler.source<span class="token operator">&gt;</span><span class="token number">1</span>.<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/maven.compiler.source<span class="token operator">&gt;</span><span class="token operator">&lt;</span>maven.compiler.target<span class="token operator">&gt;</span><span class="token number">1</span>.<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/maven.compiler.target<span class="token operator">&gt;</span><span class="token operator">&lt;</span>maven.compiler.compilerVersion<span class="token operator">&gt;</span><span class="token number">1</span>.<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/maven.compiler.compilerVersion<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/properties<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/profile<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/profiles<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- activeProfiles<span class="token operator">|</span> List of profiles that are active <span class="token keyword">for</span> all builds.<span class="token operator">|</span> --<span class="token operator">&gt;</span>-<span class="token operator">&lt;</span>activeProfiles<span class="token operator">&gt;</span><span class="token operator">&lt;</span>activeProfile<span class="token operator">&gt;</span>myProfile<span class="token operator">&lt;</span>/activeProfile<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/activeProfiles<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/settings<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库新增列、删除列</title>
      <link href="/2022/05/07/shu-ju-ku/shu-ju-ku-xin-zeng-lie-shan-chu-lie/"/>
      <url>/2022/05/07/shu-ju-ku/shu-ju-ku-xin-zeng-lie-shan-chu-lie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下数据库表新增、删除一列的命令</p></blockquote><h3 id="新增列"><a href="#新增列" class="headerlink" title="新增列"></a>新增列</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_order_resume_mlv<span class="token punctuation">`</span></span><span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> <span class="token identifier"><span class="token punctuation">`</span>order_sku_amount_ext_info<span class="token punctuation">`</span></span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单sku底价、移动价信息，数据结构: {skuNo:skuNo,floorPrice:floorPrice,moveAvgPrcNotax:moveAvgPrcNotax,moveAvgPrc:moveAvgPrc}'</span> <span class="token keyword">AFTER</span> <span class="token identifier"><span class="token punctuation">`</span>remark<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tb_emp1 <span class="token keyword">DROP</span> col2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git bash 中文乱码</title>
      <link href="/2022/05/05/gong-ju/git-bash-zhong-wen-luan-ma/"/>
      <url>/2022/05/05/gong-ju/git-bash-zhong-wen-luan-ma/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    转自<a href="https://jingyan.baidu.com/article/c35dbcb0b12d848917fcbc5b.html#:~:text=Git%20Bash%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%96%87%E8%BE%93%E5%87%BA%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%3F%E7%AE%80%E5%8D%95%E5%87%A0%E6%AD%A5%EF%BC%8C%E8%AE%A9%E4%BD%A0%E8%BD%BB%E6%9D%BE%E8%A7%A3%E5%86%B3%E3%80%82%201.%20%E7%82%B9%E5%87%BB%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E6%90%9C%E7%B4%A2%E7%AA%97%E5%8F%A3%EF%BC%8C%E8%BE%93%E5%85%A5git%EF%BC%88%E9%9C%80%E8%A6%81%E5%85%88%E5%AE%89%E8%A3%85%E8%AF%A5%E8%BD%AF%E4%BB%B6%EF%BC%89%EF%BC%8C%E7%84%B6%E5%90%8E%E7%82%B9%E5%87%BB%E5%9B%BE%E6%A0%87%E6%89%93%E5%BC%80%E8%BD%AF%E4%BB%B6%202.,%E6%89%93%E5%BC%80%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BB%88%E7%AB%AF%E5%90%8E%EF%BC%8C%E8%BE%93%E5%85%A5%E6%8C%87%E4%BB%A4%E5%90%8E%EF%BC%8C%E6%9F%A5%E7%9C%8B%E5%88%B0%E5%A6%82%E5%9B%BE%E6%89%80%E7%A4%BA%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E6%83%85%E5%86%B5%203.%20%E5%9C%A8%E5%A4%9A%E7%BB%88%E7%AB%AF%E7%9A%84%E7%A9%BA%E7%99%BD%E5%A4%84%EF%BC%8C%E7%82%B9%E5%87%BB%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%EF%BC%8C%E5%BC%B9%E5%87%BA%E7%9A%84%E8%8F%9C%E5%8D%95%E4%B8%AD%E9%80%89%E6%8B%A9%E3%80%90options...%E3%80%91%204.%20%E5%BC%B9%E5%87%BA%E7%9A%84%E8%8F%9C%E5%8D%95%E4%B8%AD%E6%89%BE%E5%88%B0%E3%80%90Text%E3%80%91-%3E%E3%80%90Local%E3%80%91%EF%BC%8C%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E4%B8%AD%E9%80%89%E6%8B%A9zh_CN%205.">Git Bash终端中文输出显示乱码解决方案</a></p></blockquote><ol><li><p>打开<code>git  bash</code>， 右键选择<code>options</code></p><p><img src="/2022/05/05/gong-ju/git-bash-zhong-wen-luan-ma/939c2d40b6f39187b5f1e87424fce186252fef41.jpg" alt="选择options"></p></li><li><p>弹出菜单找到<code>Text</code>， 修改<code>local</code>以及<code>character set</code>，修改为内容如下所示</p><p><img src="/2022/05/05/gong-ju/git-bash-zhong-wen-luan-ma/1651712258800.png" alt="修改配置"></p></li><li><p>执行命令， 生效配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> config --global core.quotepath <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea 全局搜索之按照文件后缀过滤</title>
      <link href="/2022/04/29/gong-ju/idea-quan-ju-sou-suo-zhi-an-zhao-wen-jian-hou-zhui-guo-lu/"/>
      <url>/2022/04/29/gong-ju/idea-quan-ju-sou-suo-zhi-an-zhao-wen-jian-hou-zhui-guo-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在使用<code>Idea</code>过程中，在找一个类或者配置的需求是很常见的， 有时候我们需要根据<code>文件后缀来过滤</code>，因此需要使用到全局搜索的<code>File mask</code>，本篇博文主要是讲解<code>File mask</code>下拉框选项的配置</p></blockquote><p>全局搜索的快捷键是</p><p><code>ctrl + shift + F</code></p><p>打开后界面如图所示:</p><p><img src="/2022/04/29/gong-ju/idea-quan-ju-sou-suo-zhi-an-zhao-wen-jian-hou-zhui-guo-lu/1651204523996.png" alt="全局搜索界面"></p><p>在使用时，可能我们想要的文件后缀不存在，因此可以手动添加</p><p>配置文件在</p><p><code>C:\Users\zhuzhiyong\AppData\Roaming\JetBrains\IntelliJIdea2021.2\options\find.xml</code>中</p><p><img src="/2022/04/29/gong-ju/idea-quan-ju-sou-suo-zhi-an-zhao-wen-jian-hou-zhui-guo-lu/1651204733083.png" alt="mask添加"></p><p>大家可以参考我的配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FindSettings<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>customScope<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>All Places<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultScopeName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>All Places<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SEARCH_SCOPE<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>All Places<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE_MASK<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mask</span><span class="token punctuation">&gt;</span></span>*.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mask</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mask</span><span class="token punctuation">&gt;</span></span>*.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mask</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mask</span><span class="token punctuation">&gt;</span></span>*.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mask</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mask</span><span class="token punctuation">&gt;</span></span>*.css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mask</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mask</span><span class="token punctuation">&gt;</span></span>*.js<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mask</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mask</span><span class="token punctuation">&gt;</span></span>*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mask</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mask</span><span class="token punctuation">&gt;</span></span>*.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mask</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mask</span><span class="token punctuation">&gt;</span></span>*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mask</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成的效果:</p><p><img src="/2022/04/29/gong-ju/idea-quan-ju-sou-suo-zhi-an-zhao-wen-jian-hou-zhui-guo-lu/1651209875283.png" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SimpleDateFormat踩坑之旅</title>
      <link href="/2022/04/28/java/ji-chu/simpledateformat-cai-keng-zhi-lu/"/>
      <url>/2022/04/28/java/ji-chu/simpledateformat-cai-keng-zhi-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    今天<code>codereview</code>，直接被教育了， 好家伙， 我在代码中将<code>simpledateformart</code>定义为了全局变量，美名其曰节约内存，然后未留意到<code>simpledateformat</code>是线程不安全的， 直接被大哥教育了！！！</p><p>​    在搜索相关资料时，发现本文，觉得写得不错，冒昧转载之</p><p><a href="https://www.cnblogs.com/niceyoo/p/13672913.html">为什么SimpleDateFormat不是线程安全的? </a></p></blockquote><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a><strong>一、前言</strong></h3><p>日期的转换与格式化在项目中应该是比较常用的了，最近同事小刚出去面试实在是没想到被 SimpleDateFormat 给摆了一道…</p><p>面试官：项目中的日期转换怎么用的？SimpleDateFormat 用过吗？能说一下 SimpleDateFormat 线程安全问题吗，以及如何解决？</p><p>同事小刚：用过的，平时就是在全局定义一个 static 的 SimpleDateFormat，然后在业务处理方法（controller）中直接使用，至于线程安全… 这个… 倒是没遇到过线程安全问题。</p><p>哎，面试官的考察点真的是难以捉摸，吐槽归吐槽，一起来看看这个类吧。</p><h3 id="二、概述"><a href="#二、概述" class="headerlink" title="二、概述"></a><strong>二、概述</strong></h3><p>SimpleDateFormat 类主要负责日期的转换与格式化等操作，在多线程的环境中，使用此类容易造成数据转换及处理的不正确，因为 SimpleDateFormat 类并不是线程安全的，但在单线程环境下是没有问题的。</p><p>SimpleDateFormat 在类注释中也提醒大家不适用于多线程场景：</p><pre class="line-numbers language-mipsasm" data-language="mipsasm"><code class="language-mipsasm">Date formats are not synchronized.It is recommended to create separate format instances for each thread.If multiple threads access a format concurrently, it must be synchronizedexternally.日期格式不同步。建议为每个线程创建单独的格式实例。 如果多个线程同时访问一种格式，则必须在外部同步该格式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看看阿里巴巴 java 开发规范是怎么描述 SimpleDateFormat 的：</p><p><img src="/2022/04/28/java/ji-chu/simpledateformat-cai-keng-zhi-lu/image-202009142151023762.png" alt="img"></p><h3 id="三、模拟线程安全问题"><a href="#三、模拟线程安全问题" class="headerlink" title="三、模拟线程安全问题"></a><strong>三、模拟线程安全问题</strong></h3><p>无码无真相，接下来我们创建一个线程来模拟 SimpleDateFormat 线程安全问题：</p><p>创建 MyThread.java 类：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> SimpleDateFormat simpleDateFormat<span class="token punctuation">;</span>    <span class="token comment">/* 要转换的日期字符串 */</span>    <span class="token keyword">private</span> String dateString<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>SimpleDateFormat simpleDateFormat<span class="token punctuation">,</span> String dateString<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>simpleDateFormat <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dateString <span class="token operator">=</span> dateString<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Date date <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">;</span>            String newDate <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>newDate<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ThreadName="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">" 报错了，日期字符串："</span> <span class="token operator">+</span> dateString                    <span class="token operator">+</span> <span class="token string">" 转换成的日期为："</span> <span class="token operator">+</span> newDate<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>ParseException e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建执行类 Test.java 类：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token comment">// 一般我们使用SimpleDateFormat的时候会把它定义为一个静态变量，避免频繁创建它的对象实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SimpleDateFormat simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> dateStringArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"2020-09-10"</span><span class="token punctuation">,</span> <span class="token string">"2020-09-11"</span><span class="token punctuation">,</span> <span class="token string">"2020-09-12"</span><span class="token punctuation">,</span> <span class="token string">"2020-09-13"</span><span class="token punctuation">,</span> <span class="token string">"2020-09-14"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        MyThread<span class="token punctuation">[</span><span class="token punctuation">]</span> myThreads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 创建线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            myThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">,</span> dateStringArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 启动线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            myThreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行截图如下：</p><p><img src="/2022/04/28/java/ji-chu/simpledateformat-cai-keng-zhi-lu/image-20200914221953406.png" alt="img"></p><p>从控制台打印的结果来看，使用单例的 SimpleDateFormat 类在多线程的环境中处理日期转换，极易出现转换异常（java.lang.NumberFormatException:multiple points）以及转换错误的情况。</p><h3 id="四、线程不安全的原因"><a href="#四、线程不安全的原因" class="headerlink" title="四、线程不安全的原因"></a><strong>四、线程不安全的原因</strong></h3><p>这个时候就需要看看源码了，format() 格式转换方法：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// 成员变量 Calendar</span><span class="token keyword">protected</span> <span class="token class-name">Calendar</span> calendar<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token return-type class-name">StringBuffer</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">,</span> <span class="token class-name">StringBuffer</span> toAppendTo<span class="token punctuation">,</span>                                FieldDelegate <span class="token keyword">delegate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Convert input date to time field list</span>    calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">boolean</span> useDateFormatSymbols <span class="token operator">=</span> <span class="token function">useDateFormatSymbols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> compiledPattern<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name"><span class="token keyword">int</span></span> tag <span class="token operator">=</span> compiledPattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">int</span></span> count <span class="token operator">=</span> compiledPattern<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">=</span> compiledPattern<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>            count <span class="token operator">|=</span> compiledPattern<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> TAG_QUOTE_ASCII_CHAR<span class="token punctuation">:</span>            toAppendTo<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> TAG_QUOTE_CHARS<span class="token punctuation">:</span>            toAppendTo<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>compiledPattern<span class="token punctuation">,</span> i<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">+=</span> count<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token function">subFormat</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> count<span class="token punctuation">,</span> <span class="token keyword">delegate</span><span class="token punctuation">,</span> toAppendTo<span class="token punctuation">,</span> useDateFormatSymbols<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> toAppendTo<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们把重点放在 <strong>calendar</strong> ，这个 format 方法在执行过程中，会操作成员变量 calendar 来保存时间 <code>calendar.setTime(date)</code> 。</p><p>但由于在声明 SimpleDateFormat 的时候，使用的是 static 定义的，那么这个 SimpleDateFormat 就是一个共享变量，SimpleDateFormat 中的 calendar 也就可以被多个线程访问到，所以问题就出现了，举个例子：</p><p>假设线程 A 刚执行完 <code>calendar.setTime(date)</code> 语句，把时间设置为 2020-09-01，但线程还没执行完，线程 B 又执行了 <code>calendar.setTime(date)</code> 语句，把时间设置为 2020-09-02，这个时候就出现幻读了，线程 A 继续执行下去的时候，拿到的 <code>calendar.getTime</code> 得到的时间就是线程B改过之后的。</p><p>除了 format() 方法以外，SimpleDateFormat 的 parse 方法也有同样的问题。</p><p>至此，我们发现了 SimpleDateFormat 的弊端，所以为了解决这个问题就是不要把 SimpleDateFormat 当做一个共享变量来使用。</p><h3 id="五、如何解决线程安全"><a href="#五、如何解决线程安全" class="headerlink" title="五、如何解决线程安全"></a><strong>五、如何解决线程安全</strong></h3><h5 id="1、每次使用就创建一个新的-SimpleDateFormat"><a href="#1、每次使用就创建一个新的-SimpleDateFormat" class="headerlink" title="1、每次使用就创建一个新的 SimpleDateFormat"></a>1、每次使用就创建一个新的 SimpleDateFormat</h5><p>创建全局工具类 DateUtils.java</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">parse</span><span class="token punctuation">(</span>String formatPattern<span class="token punctuation">,</span> String dateString<span class="token punctuation">)</span> throws ParseException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>formatPattern<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String  <span class="token function">format</span><span class="token punctuation">(</span>String formatPattern<span class="token punctuation">,</span> Date date<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>formatPattern<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有用到 SimpleDateFormat 的地方全部用 DateUtils 替换，然后看一下执行结果：</p><p><img src="/2022/04/28/java/ji-chu/simpledateformat-cai-keng-zhi-lu/image-20200915113216020.png" alt="img"></p><p>好家伙，异常+错误终于是没了，这种解决处理错误的原理就是创建了多个 SimpleDateFormat 类的实例，在需要用到的地方创建一个新的实例，就没有线程安全问题，不过也加重了创建对象的负担，会频繁地创建和销毁对象，效率较低。</p><h5 id="2、synchronized-锁"><a href="#2、synchronized-锁" class="headerlink" title="2、synchronized 锁"></a>2、synchronized 锁</h5><p>synchronized 就不展开介绍了，不了解的小伙伴请移步 &gt; <a href="https://www.cnblogs.com/niceyoo/p/12549327.html">synchronized的底层原理？</a></p><p>变更一下 DateUtils.java</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> final SimpleDateFormat simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">parse</span><span class="token punctuation">(</span>String formatPattern<span class="token punctuation">,</span> String dateString<span class="token punctuation">)</span> throws ParseException <span class="token punctuation">{</span>        <span class="token function">synchronized</span> <span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">format</span><span class="token punctuation">(</span>String formatPattern<span class="token punctuation">,</span> Date date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">synchronized</span> <span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单粗暴，synchronized 往上一套也可以解决线程安全问题，缺点自然就是并发量大的时候会对性能有影响，因为使用了 synchronized 加锁后的多线程就相当于串行，线程阻塞，执行效率低。</p><h5 id="3、ThreadLocal（最佳MVP）"><a href="#3、ThreadLocal（最佳MVP）" class="headerlink" title="3、ThreadLocal（最佳MVP）"></a>3、ThreadLocal（最佳MVP）</h5><p>ThreadLocal 是 java 里一种特殊的变量，ThreadLocal 提供了线程本地的实例，它与普通变量的区别在于，每个使用该线程变量的线程都会初始化一个完全独立的实例副本。</p><p>继续改造 DateUtils.java</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>DateFormat<span class="token operator">&gt;</span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal<span class="token operator">&lt;</span>DateFormat<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token decorator"><span class="token at operator">@</span><span class="token function">Override</span></span>        <span class="token keyword">protected</span> DateFormat <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">parse</span><span class="token punctuation">(</span>String formatPattern<span class="token punctuation">,</span> String dateString<span class="token punctuation">)</span> throws ParseException <span class="token punctuation">{</span>        <span class="token keyword">return</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">format</span><span class="token punctuation">(</span>String formatPattern<span class="token punctuation">,</span> Date date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ThreadLocal 可以确保每个线程都可以得到单独的一个 SimpleDateFormat 的对象，那么就不会存在竞争问题。</p><p>如果项目中还在使用 SimpleDateFormat 的话，推荐这种写法，但这样就结束了吗？</p><p>显然不是…</p><h3 id="六、项目中推荐的写法"><a href="#六、项目中推荐的写法" class="headerlink" title="六、项目中推荐的写法"></a><strong>六、项目中推荐的写法</strong></h3><p>上边提到的阿里巴巴 java 开发手册给出了说明：如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释：simple beautiful strong immutable thread-safe。</p><p>日期转换，SimpleDateFormat 固然好用，但是现在我们已经有了更好地选择，Java 8 引入了新的日期时间 API，并引入了线程安全的日期类，一起来看看。</p><ul><li>Instant：瞬时实例。</li><li>LocalDate：本地日期，不包含具体时间 例如：2014-01-14 可以用来记录生日、纪念日、加盟日等。</li><li>LocalTime：本地时间，不包含日期。</li><li>LocalDateTime：组合了日期和时间，但不包含时差和时区信息。</li><li>ZonedDateTime：最完整的日期时间，包含时区和相对UTC或格林威治的时差。</li></ul><p>新API还引入了 ZoneOffSet 和 ZoneId 类，使得解决时区问题更为简便。</p><p>解析、格式化时间的 DateTimeFormatter 类也进行了全部重新设计。</p><p>例如，我们使用 LocalDate 代替 Date，使用 DateTimeFormatter 代替 SimpleDateFormat，如下所示:</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// 当前日期和时间</span><span class="token class-name">String</span> DateNow <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>DateNow<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就避免了 SimpleDateFormat 的线程不安全问题啦。</p><p>此时的 DateUtils.java</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> final DateTimeFormatter <span class="token constant">DATE_TIME_FORMATTER</span> <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LocalDate <span class="token function">parse</span><span class="token punctuation">(</span>String dateString<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateString<span class="token punctuation">,</span> <span class="token constant">DATE_TIME_FORMATTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">format</span><span class="token punctuation">(</span>LocalDate target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">DATE_TIME_FORMATTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、最后总结"><a href="#七、最后总结" class="headerlink" title="七、最后总结"></a><strong>七、最后总结</strong></h3><p><code>SimpleDateFormart 线程不安全问题</code></p><p>SimpleDateFormart 继承自 DateFormart，在 DataFormat 类内部有一个 Calendar 对象引用，SimpleDateFormat 转换日期都是靠这个 Calendar 对象来操作的，比如 parse(String)，format(date) 等类似的方法，Calendar 在用的时候是直接使用的，而且是改变了 Calendar 的值，这样情况在多线程下就会出现线程安全问题，如果 SimpleDateFormart 是静态的话，那么多个 thread 之间就会共享这个 SimpleDateFormart，同时也会共享这个 Calendar 引用，那么就出现数据赋值覆盖情况，也就是线程安全问题。(现在项目中用到日期转换，都是使用的 java 8 中的 LocalDate，或者 LocalDateTime，本质是这些类是不可变类，不可变一定程度上保证了线程安全)。</p><p><code>解决方式</code></p><p>在多线程下可以使用 ThreadLocal 修饰 SimpleDateFormart，ThreadLocal 可以确保每个线程都可以得到单独的一个 SimpleDateFormat 的对象，那么就不会存在竞争问题。</p><p><code>项目中推荐的写法</code></p><p>java 8 中引入新的日期类 API，这些类是不可变的，且线程安全的。</p><p>以后面试官再问项目中怎么使用日期转换的，尽量就不要说 SimpleDateFormat 了。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 解析tr、td</title>
      <link href="/2022/04/28/qian-duan/javascript-jie-xi-tr-td/"/>
      <url>/2022/04/28/qian-duan/javascript-jie-xi-tr-td/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    转自<a href="https://www.jb51.net/article/121223.htm">JavaScript获取tr td 的三种方式全面总结（推荐）</a></p></blockquote><ol><li><p>第一种，原生的js，先获取table然后获取tr标签，然后遍历td </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#selectIds'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> table <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tb_table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取第一个表格 </span>  <span class="token keyword">var</span> trArray <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//所有tr</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> trArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> tdTag <span class="token operator">=</span> trArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span> <span class="token comment">// 获取td</span>   <span class="token keyword">var</span> tdText <span class="token operator">=</span> id<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>jQuery的写法，获取到tr然后遍历所有的td。注意td获取值是.text()</p></li></ol>   <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#selectIds'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> isFirst <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tb_table"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> tdArr <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> idtext <span class="token operator">=</span> tdArr<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>idtext <span class="token operator">!=</span> <span class="token string">'人员ID'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isFirst<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#selectIds'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#selectIds'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> idtext<span class="token punctuation">)</span><span class="token punctuation">;</span>     isFirst <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#selectIds'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#selectIds'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> idtext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"idtext"</span><span class="token punctuation">,</span>idtext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>原生js获取所有行，再获取每个单元格</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> table <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tb_table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> rows <span class="token operator">=</span> table<span class="token punctuation">.</span>rows<span class="token punctuation">;</span><span class="token comment">//获取所有行</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lenth"</span><span class="token punctuation">,</span>rows<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> row <span class="token operator">=</span> rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取每一行</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> row<span class="token punctuation">.</span>cells<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span><span class="token comment">//获取具体单元格</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>方法1亲测可用</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql表定义操作</title>
      <link href="/2022/04/27/shu-ju-ku/mysql-biao-ding-yi-cao-zuo/"/>
      <url>/2022/04/27/shu-ju-ku/mysql-biao-ding-yi-cao-zuo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下容易忘记的一些表定义操作， 如修改表结构，定义索引等等</p></blockquote><h3 id="修改列类型"><a href="#修改列类型" class="headerlink" title="修改列类型"></a>修改列类型</h3><p>语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> <span class="token keyword">column</span> 列名 类型<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实战：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> doc_info <span class="token keyword">modify</span> <span class="token keyword">column</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上操作将表<code>doc_info</code>的<code>name</code>列的数据类型修改为<code>varcahr(1024)</code></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口文档smart-doc</title>
      <link href="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/"/>
      <url>/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    最近接触到了一个很不错的接口文档解决方案，即<code>EasyJavaDoc</code> + <code>smart-doc</code> + <code>torna</code></p><p>通过<code>EasyJavaDoc</code> + <code>smart-doc</code>可以很方便的<code>无侵入</code>的给接口，类等添加注释。相较于<code>swagger</code>，不必写繁琐的<code>注解</code>，直接通过快捷键，能够生成相关注释。</p><p>结合<code>torna</code>，能够极其方便的将文档发布在文档后台系统中，并支持权限管理，很适合企业级应用。</p><p>本篇博文便介绍<code>smart-doc</code> + <code>torna</code>的配置与部署。</p><p><code>EasyJavaDoc</code>官方文档：<a href="https://github.com/starcwang/easy_javadoc">https://github.com/starcwang/easy_javadoc</a></p><p><code>smart-doc</code>官方文档：<a href="https://smart-doc-group.github.io/#/zh-cn/start/quickstart">https://smart-doc-group.github.io/#/zh-cn/start/quickstart</a></p><p><code>torna</code>官方文档：<a href="http://www.torna.cn/">http://www.torna.cn/</a></p></blockquote><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><ul><li>Java8</li><li>Maven3</li><li>node.js16</li><li>mysql5.7</li></ul><h2 id="torna安装"><a href="#torna安装" class="headerlink" title="torna安装"></a>torna安装</h2><h4 id="特性及效果"><a href="#特性及效果" class="headerlink" title="特性及效果"></a>特性及效果</h4><p><code>torna</code>提供的是文档管理后台，提供<code>web</code>平台供小组其他成员访问，并支持权限配置及管理，有以下特性</p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/arc2.png" alt="特性"></p><p>安装完毕后集成<code>smart-doc</code>的效果图如下：</p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/table.png" alt="效果图"></p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><p><code>tonna</code>官方支持本地及<code>docker</code>运行，这里介绍本地运行的相关安装，对<code>docker</code>运行更感兴趣可以参考<code>gitte</code>上的介绍，贴个链接：<a href="https://gitee.com/durcframework/torna#%E6%96%B9%E5%BC%8F1%E4%B8%8B%E8%BD%BDzip%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C">https://gitee.com/durcframework/torna#%E6%96%B9%E5%BC%8F1%E4%B8%8B%E8%BD%BDzip%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C</a></p><ol><li><p>下载安装包</p><p>下载地址：<a href="https://gitee.com/durcframework/torna/releases">https://gitee.com/durcframework/torna/releases</a></p></li><li><p>导入数据库</p><p><code>sql</code>脚本地址：<a href="https://gitee.com/durcframework/torna/blob/master/mysql.sql">https://gitee.com/durcframework/torna/blob/master/mysql.sql</a></p></li><li><p>配置数据库</p><p>打开``application.properties`配置文件，修改数据库连接配置</p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/1651041824886.png" alt="配置数据库连接"></p></li><li><p>运行</p><p><code>windos</code>环境执行<code>startup.bat</code>, <code>linux</code>环境执行<code>startip.sh</code></p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/1651042084717.png" alt="运行"></p></li><li><p>访问</p><p><code>http://ip:7700</code></p><p>用户名：<code>admin</code>，密码：<code>123456</code></p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/1651042577934.png" alt="效果图"></p></li></ol><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><code>torna</code>的使用需要结合<code>smart-doc</code>进行文档推送，在详细讲解<code>smart-doc</code>的安装及配置之后再予以实操，这里先贴一个很重要的配置，为<code>smart-doc</code>的推送做准备</p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/1651043222003.png" alt="重要配置项"></p><h2 id="EasyJavaDoc"><a href="#EasyJavaDoc" class="headerlink" title="EasyJavaDoc"></a>EasyJavaDoc</h2><p><code>EasyJavaDoc</code>在这个搭配里扮演的角色是一键生成注释，省的我们一点点的写注释，减轻写注释的负担。</p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/1651046513945.png" alt="接口无文档图"></p><p>一键生成文档</p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/1651046533424.png" alt="生成文档"></p><p>效果如图，通过一个组合键：<code>ctrl</code>  + <code>\</code>即可生成以上文档，该文档完美符合<code>smart-doc</code>接口标准，因此选择<code>EasyJavaDoc</code>+<code>smart-doc</code>组合生成文档，真觉得这两天生是一对</p><h4 id="安装步骤-1"><a href="#安装步骤-1" class="headerlink" title="安装步骤"></a>安装步骤</h4><p><code>EasyJavaDoc</code>是一个<code>Idea</code>插件，因此可以直接在<code>Idea</code>插件市场进行搜索</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>在<code>接口</code>、<code>类</code>、<code>属性</code>上使用<code>ctrl</code> + <code>\</code>一键生成文档</p><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><p>在方法注释模板中，默认并没有增加上<code>@author</code>注解，生成的<code>smart-doc</code>接口上也不会有作者信息</p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/1651046907469.png" alt="会没有维护人信息"></p><p>因此选择自定义模板，修改位置在<code>Idea</code> -&gt; <code>Settings</code> -&gt;<code>Other Settings</code>，直接贴图吧</p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/1651046963849.png" alt="EasyJavaDoc配置"></p><p>其他配置大家可以自己研究，展示一下我自定义的方法注释模板</p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/1651047019352.png" alt="自定义配置"></p><p>其中，作者等自定义变量需要手动添加，提供以下内置变量</p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/1651047080231.png" alt="内置变量"></p><p>配置详情如下</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token comment">/** *$DOC$ * *$PARAMS$ *$RETURN$ *$THROWS$ *@author $AUTHOR$ */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Smart-doc"><a href="#Smart-doc" class="headerlink" title="Smart-doc"></a>Smart-doc</h2><p><code>smart-doc</code>是重头戏了，我们接口文档页面上所有能看到的配置项如维护者、接口请求参数、响应参数等等，都是<code>smart-doc</code>帮我们解析然后生成页面的。</p><p>因此<code>smart-doc</code>有相当之多的约定配置需要我们遵守，我们添加的<code>标签与注释</code>决定了文档页面上展示的内容与效果</p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/1651047332861.png" alt="smart-doc标签"></p><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p><code>smart-doc</code>支持生成<code>html</code>、<code>markdown</code>、<code>web</code>等等形式的文档，这里贴一个<code>html</code>的吧</p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/1651049492448.png" alt="文档效果"></p><h4 id="安装步骤-2"><a href="#安装步骤-2" class="headerlink" title="安装步骤"></a>安装步骤</h4><p>具体配置还是参考官方文档， 可以基于<code>maven</code>或者<code>gradle</code>插件进行安装，这里只讲解自己的安装步骤</p><p><a href="https://smart-doc-group.github.io/#/zh-cn/start/quickstart">samrt-doc官方文档</a></p><ol><li><p>添加<code>maven</code>插件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.shalousun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>smart-doc-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>[最新版本]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--指定生成文档的使用的配置文件,配置文件放在自己的项目中--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configFile</span><span class="token punctuation">&gt;</span></span>./src/main/resources/smart-doc.json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configFile</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--指定项目名称--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>projectName</span><span class="token punctuation">&gt;</span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>projectName</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--smart-doc实现自动分析依赖树加载第三方依赖的源码，如果一些框架依赖库加载不到导致报错，这时请使用excludes排除掉--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--格式为：groupId:artifactId;参考如下--&gt;</span>            <span class="token comment">&lt;!--也可以支持正则式如：com.alibaba:.* --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>com.alibaba:fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--includes配置用于配置加载外部依赖源码,配置后插件会按照配置项加载外部源代码而不是自动加载所有，因此使用时需要注意--&gt;</span>        <span class="token comment">&lt;!--smart-doc能自动分析依赖树加载所有依赖源码，原则上会影响文档构建效率，因此你可以使用includes来让插件加载你配置的组件--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--格式为：groupId:artifactId;参考如下--&gt;</span>            <span class="token comment">&lt;!--也可以支持正则式如：com.alibaba:.* --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>com.alibaba:fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--如果不需要在执行编译时启动smart-doc，则将phase注释掉--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!--smart-doc提供了html、openapi、markdown等goal，可按需配置--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有个坑，如果自己的工程依赖到了其他工程的类，如入参、响应等，这里典型应用有<code>dubbo</code>接口，就需要去掉上文的<code>&lt;excludes&gt;</code>及<code>&lt;includes&gt;</code>标签，具体配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.shalousun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>smart-doc-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--指定生成文档的使用的配置文件,配置文件放在自己的项目中--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configFile</span><span class="token punctuation">&gt;</span></span>./src/main/resources/smart-doc.json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configFile</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--指定项目名称--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>projectName</span><span class="token punctuation">&gt;</span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>projectName</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--如果不需要在执行编译时启动smart-doc，则将phase注释掉--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!--smart-doc提供了html、openapi、markdown等goal，可按需配置--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置配置文件</p><p>在<code>pom</code>中，我们配置了<code>configFile</code>的文件路径，因此我们需要在该路径下创建该配置文件</p><p>具体含义就不解释了， 大家可以参考官方文档，我先贴一个自己的配置</p><p>该配置是配合<code>torna</code>使用的，能直接将文档推送至<code>torna</code>中</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"serverUrl"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1"</span><span class="token punctuation">,</span>  <span class="token property">"outPath"</span><span class="token operator">:</span> <span class="token string">"D://md2"</span><span class="token punctuation">,</span>  <span class="token property">"pathPrefix"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"isStrict"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"allInOne"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"coverOld"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"createDebugPage"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"packageFilters"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"md5EncryptedHtmlName"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"style"</span><span class="token operator">:</span> <span class="token string">"xt256"</span><span class="token punctuation">,</span>  <span class="token property">"projectName"</span><span class="token operator">:</span> <span class="token string">"wms-front"</span><span class="token punctuation">,</span>  <span class="token property">"skipTransientField"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"sortByTitle"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"showAuthor"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"inlineEnum"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"recursionLimit"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token property">"allInOneDocFileName"</span><span class="token operator">:</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span>  <span class="token property">"displayActualType"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"replace"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"tornaDebug"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"appToken"</span><span class="token operator">:</span> <span class="token string">"9b463431df2c4bb48edaae5feb64ca22"</span><span class="token punctuation">,</span>  <span class="token property">"openUrl"</span><span class="token operator">:</span> <span class="token string">"http://localhost:7700/api"</span><span class="token punctuation">,</span>  <span class="token property">"debugEnvUrl"</span><span class="token operator">:</span><span class="token string">"http://127.0.0.1"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在贴一个官方的、完整的配置文件示例</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"serverUrl"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1"</span><span class="token punctuation">,</span> <span class="token comment">//服务器地址,非必须。导出postman建议设置成http://{{server}}方便直接在postman直接设置环境变量</span>  <span class="token property">"pathPrefix"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment">//设置path前缀,非必须。如配置Servlet ContextPath 。@since 2.2.3</span>  <span class="token property">"isStrict"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//是否开启严格模式</span>  <span class="token property">"allInOne"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//是否将文档合并到一个文件中，一般推荐为true</span>  <span class="token property">"outPath"</span><span class="token operator">:</span> <span class="token string">"D://md2"</span><span class="token punctuation">,</span> <span class="token comment">//指定文档的输出路径</span>  <span class="token property">"coverOld"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//是否覆盖旧的文件，主要用于mardown文件覆盖</span>  <span class="token property">"createDebugPage"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//@since 2.0.0 smart-doc支持创建可以测试的html页面，仅在AllInOne模式中起作用。</span>  <span class="token property">"packageFilters"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token comment">//controller包过滤，多个包用英文逗号隔开，2.2.2开始需要采用正则：com.test.controller.*</span>  <span class="token property">"md5EncryptedHtmlName"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//只有每个controller生成一个html文件是才使用</span>  <span class="token property">"style"</span><span class="token operator">:</span><span class="token string">"xt256"</span><span class="token punctuation">,</span> <span class="token comment">//基于highlight.js的代码高设置,可选值很多可查看码云wiki，喜欢配色统一简洁的同学可以不设置</span>  <span class="token property">"projectName"</span><span class="token operator">:</span> <span class="token string">"smart-doc"</span><span class="token punctuation">,</span><span class="token comment">//配置自己的项目名称，不设置则插件自动获取pom中的projectName</span>  <span class="token property">"framework"</span><span class="token operator">:</span> <span class="token string">"spring"</span><span class="token punctuation">,</span><span class="token comment">//smart-doc默认支持spring和dubbo框架的文档，使用默认框架不用配置，当前支持spring、dubbo、JAX-RS、solon </span>  <span class="token property">"skipTransientField"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//目前未实现</span>  <span class="token property">"sortByTitle"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//接口标题排序，默认为false,@since 1.8.7版本开始</span>  <span class="token property">"showAuthor"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//是否显示接口作者名称，默认是true,不想显示可关闭</span>  <span class="token property">"requestFieldToUnderline"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//自动将驼峰入参字段在文档中转为下划线格式,//@since 1.8.7版本开始</span>  <span class="token property">"responseFieldToUnderline"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//自动将驼峰入参字段在文档中转为下划线格式,//@since 1.8.7版本开始</span>  <span class="token property">"inlineEnum"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//设置为true会将枚举详情展示到参数表中，默认关闭，//@since 1.8.8版本开始</span>  <span class="token property">"recursionLimit"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token comment">//设置允许递归执行的次数用于避免一些对象解析卡主，默认是7，正常为3次以内，//@since 1.8.8版本开始</span>  <span class="token property">"allInOneDocFileName"</span><span class="token operator">:</span><span class="token string">"index.html"</span><span class="token punctuation">,</span><span class="token comment">//自定义设置输出文档名称, @since 1.9.0</span>  <span class="token property">"requestExample"</span><span class="token operator">:</span><span class="token string">"true"</span><span class="token punctuation">,</span><span class="token comment">//是否将请求示例展示在文档中，默认true，@since 1.9.0</span>  <span class="token property">"responseExample"</span><span class="token operator">:</span><span class="token string">"true"</span><span class="token punctuation">,</span><span class="token comment">//是否将响应示例展示在文档中，默认为true，@since 1.9.0</span>  <span class="token property">"urlSuffix"</span><span class="token operator">:</span><span class="token string">".do"</span><span class="token punctuation">,</span><span class="token comment">//支持SpringMVC旧项目的url后缀,@since 2.1.0</span>  <span class="token property">"displayActualType"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//配置true会在注释栏自动显示泛型的真实类型短类名，@since 1.9.6</span>  <span class="token property">"appKey"</span><span class="token operator">:</span> <span class="token string">"20201216788835306945118208"</span><span class="token punctuation">,</span><span class="token comment">// torna平台对接appKey,, @since 2.0.9</span>  <span class="token property">"appToken"</span><span class="token operator">:</span> <span class="token string">"c16931fa6590483fb7a4e85340fcbfef"</span><span class="token punctuation">,</span> <span class="token comment">//torna平台appToken,@since 2.0.9</span>  <span class="token property">"secret"</span><span class="token operator">:</span> <span class="token string">"W.ZyGMOB9Q0UqujVxnfi@.I#V&amp;tUUYZR"</span><span class="token punctuation">,</span><span class="token comment">//torna平台secret，@since 2.0.9</span>  <span class="token property">"openUrl"</span><span class="token operator">:</span> <span class="token string">"http://localhost:7700/api"</span><span class="token punctuation">,</span><span class="token comment">//torna平台地址，填写自己的私有化部署地址@since 2.0.9</span>  <span class="token property">"debugEnvName"</span><span class="token operator">:</span><span class="token string">"测试环境"</span><span class="token punctuation">,</span> <span class="token comment">//torna环境名称</span>  <span class="token property">"debugEnvUrl"</span><span class="token operator">:</span><span class="token string">"http://127.0.0.1"</span><span class="token punctuation">,</span><span class="token comment">//推送torna配置接口服务地址</span>  <span class="token property">"tornaDebug"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//启用会推送日志</span>  <span class="token property">"ignoreRequestParams"</span><span class="token operator">:</span><span class="token punctuation">[</span> <span class="token comment">//忽略请求参数对象，把不想生成文档的参数对象屏蔽掉，@since 1.9.2</span>     <span class="token string">"org.springframework.ui.ModelMap"</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"dataDictionaries"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token comment">//配置数据字典，没有需求可以不设置</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"http状态码字典"</span><span class="token punctuation">,</span> <span class="token comment">//数据字典的名称</span>      <span class="token property">"enumClassName"</span><span class="token operator">:</span> <span class="token string">"com.power.common.enums.HttpCodeEnum"</span><span class="token punctuation">,</span> <span class="token comment">//数据字典枚举类名称</span>      <span class="token property">"codeField"</span><span class="token operator">:</span> <span class="token string">"code"</span><span class="token punctuation">,</span><span class="token comment">//数据字典字典码对应的字段名称</span>      <span class="token property">"descField"</span><span class="token operator">:</span> <span class="token string">"message"</span><span class="token comment">//数据字典对象的描述信息字典</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"errorCodeDictionaries"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token comment">//错误码列表，没有需求可以不设置</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>    <span class="token property">"enumClassName"</span><span class="token operator">:</span> <span class="token string">"com.power.common.enums.HttpCodeEnum"</span><span class="token punctuation">,</span> <span class="token comment">//错误码枚举类</span>    <span class="token property">"codeField"</span><span class="token operator">:</span> <span class="token string">"code"</span><span class="token punctuation">,</span><span class="token comment">//错误码的code码字段名称</span>    <span class="token property">"descField"</span><span class="token operator">:</span> <span class="token string">"message"</span><span class="token comment">//错误码的描述信息对应的字段名</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"revisionLogs"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token comment">//文档变更记录，非必须</span>      <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span> <span class="token comment">//文档版本号</span>      <span class="token property">"revisionTime"</span><span class="token operator">:</span> <span class="token string">"2020-12-31 10:30"</span><span class="token punctuation">,</span> <span class="token comment">//文档修订时间</span>      <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"update"</span><span class="token punctuation">,</span> <span class="token comment">//变更操作状态，一般为：创建、更新等</span>      <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token comment">//文档变更作者</span>      <span class="token property">"remarks"</span><span class="token operator">:</span> <span class="token string">"desc"</span> <span class="token comment">//变更描述</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"customResponseFields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token comment">//自定义添加字段和注释，一般用户处理第三方jar包库，非必须</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"code"</span><span class="token punctuation">,</span><span class="token comment">//覆盖响应码字段</span>      <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"响应代码"</span><span class="token punctuation">,</span><span class="token comment">//覆盖响应码的字段注释</span>      <span class="token property">"ownerClassName"</span><span class="token operator">:</span> <span class="token string">"org.springframework.data.domain.Pageable"</span><span class="token punctuation">,</span> <span class="token comment">//指定你要添加注释的类名</span>      <span class="token property">"ignore"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//设置true会被自动忽略掉不会出现在文档中</span>      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"00000"</span><span class="token comment">//设置响应码的值</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"customRequestFields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token comment">//自定义请求体的注释，@since 2.1.3，非必须</span>       <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token comment">//属性名</span>       <span class="token property">"desc"</span><span class="token operator">:</span><span class="token string">"状态码"</span><span class="token punctuation">,</span> <span class="token comment">//描述</span>       <span class="token property">"ownerClassName"</span><span class="token operator">:</span><span class="token string">"com.xxx.constant.entity.Result"</span><span class="token punctuation">,</span> <span class="token comment">//属性对应的类全路径</span>       <span class="token property">"value"</span><span class="token operator">:</span><span class="token string">"200"</span><span class="token punctuation">,</span> <span class="token comment">//默认值或者mock值</span>       <span class="token property">"required"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否必填</span>       <span class="token property">"ignore"</span><span class="token operator">:</span><span class="token boolean">false</span> <span class="token comment">//是否忽略</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"requestHeaders"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token comment">//设置请求头，没有需求可以不设置</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"token"</span><span class="token punctuation">,</span><span class="token comment">//请求头名称</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span><span class="token comment">//请求头类型</span>      <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"desc"</span><span class="token punctuation">,</span><span class="token comment">//请求头描述信息</span>      <span class="token property">"value"</span><span class="token operator">:</span><span class="token string">"token请求头的值"</span><span class="token punctuation">,</span><span class="token comment">//不设置默认null</span>      <span class="token property">"required"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否必须</span>      <span class="token property">"since"</span><span class="token operator">:</span> <span class="token string">"-"</span><span class="token punctuation">,</span><span class="token comment">//什么版本添加的改请求头</span>      <span class="token property">"pathPatterns"</span><span class="token operator">:</span> <span class="token string">"/app/test/**"</span><span class="token punctuation">,</span><span class="token comment">//请看https://smart-doc-group.github.io/#/zh-cn/diy/advancedFeatures?id=公共请求头</span>      <span class="token property">"excludePathPatterns"</span><span class="token operator">:</span><span class="token string">"/app/page/**"</span><span class="token comment">//请看https://smart-doc-group.github.io/#/zh-cn/diy/advancedFeatures?id=公共请求头</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"appkey"</span><span class="token punctuation">,</span><span class="token comment">//请求头</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span><span class="token comment">//请求头类型</span>      <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"desc"</span><span class="token punctuation">,</span><span class="token comment">//请求头描述信息</span>      <span class="token property">"value"</span><span class="token operator">:</span><span class="token string">"appkey请求头的值"</span><span class="token punctuation">,</span><span class="token comment">//不设置默认null</span>      <span class="token property">"required"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否必须</span>      <span class="token property">"pathPatterns"</span><span class="token operator">:</span> <span class="token string">"/test/add,/testConstants/1.0"</span><span class="token punctuation">,</span><span class="token comment">//正则表达式过滤请求头,url匹配上才会添加该请求头，多个正则用分号隔开</span>      <span class="token property">"since"</span><span class="token operator">:</span> <span class="token string">"-"</span><span class="token comment">//什么版本添加的改请求头</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"requestParams"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">//公共请求参数(通过拦截器处理的场景)，@since 2.2.3,没有需求请不要设置</span>    <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"configPathParam"</span><span class="token punctuation">,</span><span class="token comment">//请求参数名称</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span><span class="token comment">//请求参数类型</span>      <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"desc"</span><span class="token punctuation">,</span><span class="token comment">//请求参数描述信息</span>      <span class="token property">"paramIn"</span><span class="token operator">:</span> <span class="token string">"path"</span><span class="token punctuation">,</span>      <span class="token property">"value"</span><span class="token operator">:</span><span class="token string">"testPath"</span><span class="token punctuation">,</span><span class="token comment">//不设置默认null</span>      <span class="token property">"required"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否必须</span>      <span class="token property">"since"</span><span class="token operator">:</span> <span class="token string">"-"</span><span class="token punctuation">,</span><span class="token comment">//什么版本添加的改请求参数</span>      <span class="token property">"pathPatterns"</span><span class="token operator">:</span> <span class="token string">"**"</span><span class="token punctuation">,</span><span class="token comment">//正则表达式过滤请求参数</span>      <span class="token property">"excludePathPatterns"</span><span class="token operator">:</span><span class="token string">"/app/page/**"</span> <span class="token comment">//参考请求头中的用法</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"configQueryParam"</span><span class="token punctuation">,</span><span class="token comment">//请求参数名称</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span><span class="token comment">//请求参数类型</span>      <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"desc"</span><span class="token punctuation">,</span><span class="token comment">//请求参数描述信息</span>      <span class="token property">"paramIn"</span><span class="token operator">:</span> <span class="token string">"query"</span><span class="token punctuation">,</span>      <span class="token property">"value"</span><span class="token operator">:</span><span class="token string">"testQuery"</span><span class="token punctuation">,</span><span class="token comment">//不设置默认null</span>      <span class="token property">"required"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否必须</span>      <span class="token property">"since"</span><span class="token operator">:</span> <span class="token string">"-"</span><span class="token punctuation">,</span><span class="token comment">//什么版本添加的改请求参数</span>      <span class="token property">"pathPatterns"</span><span class="token operator">:</span> <span class="token string">"**"</span><span class="token punctuation">,</span><span class="token comment">//正则表达式过滤请求参数</span>      <span class="token property">"excludePathPatterns"</span><span class="token operator">:</span><span class="token string">"/app/page/**"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"rpcApiDependencies"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token comment">// 项目开放的dubbo api接口模块依赖，配置后输出到文档方便使用者集成</span>        <span class="token property">"artifactId"</span><span class="token operator">:</span><span class="token string">"SpringBoot2-Dubbo-Api"</span><span class="token punctuation">,</span>        <span class="token property">"groupId"</span><span class="token operator">:</span><span class="token string">"com.demo"</span><span class="token punctuation">,</span>        <span class="token property">"version"</span><span class="token operator">:</span><span class="token string">"1.0.0"</span>   <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"rpcConsumerConfig"</span><span class="token operator">:</span> <span class="token string">"src/main/resources/consumer-example.conf"</span><span class="token punctuation">,</span><span class="token comment">//文档中添加dubbo consumer集成配置，用于方便集成方可以快速集成</span>  <span class="token property">"apiObjectReplacements"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token comment">// 自smart-doc 1.8.5开始你可以使用自定义类覆盖其他类做文档渲染，非必须</span>      <span class="token property">"className"</span><span class="token operator">:</span> <span class="token string">"org.springframework.data.domain.Pageable"</span><span class="token punctuation">,</span>      <span class="token property">"replacementClassName"</span><span class="token operator">:</span> <span class="token string">"com.power.doc.model.PageRequestDto"</span> <span class="token comment">//自定义的PageRequestDto替换Pageable做文档渲染</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"apiConstants"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token comment">//smart-doc在解析到常量时自动替换为具体的值，非必须，2.4.2开始不用配置，smart-doc支持自动解析常用</span>        <span class="token property">"constantsClassName"</span><span class="token operator">:</span> <span class="token string">"com.power.doc.constants.RequestParamConstant"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"responseBodyAdvice"</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">//自smart-doc 1.9.8起，非必须项，ResponseBodyAdvice统一返回设置(不要随便配置根据项目的技术来配置)，可用ignoreResponseBodyAdvice tag来忽略</span>          <span class="token property">"className"</span><span class="token operator">:</span><span class="token string">"com.power.common.model.CommonResult"</span> <span class="token comment">//通用响应体</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"requestBodyAdvice"</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">////自smart-doc 2.1.4 起，支持设置RequestBodyAdvice统一请求包装类，非必须</span>         <span class="token property">"className"</span><span class="token operator">:</span><span class="token string">"com.power.common.model.CommonResult"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"groups"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// @since 2.2.5, 对不同的controller进行分组</span>    <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"测试分组"</span><span class="token punctuation">,</span>      <span class="token property">"apis"</span><span class="token operator">:</span> <span class="token string">"com.power.doc.controller.app.*"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"requestParamsTable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否将请求参数表展示在文档中，默认true，@since 2.2.5</span>  <span class="token property">"responseParamsTable"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">//是否将响应参数表展示在文档中, 默认true，@since 2.2.5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用</p><p>以上便算安装及配置好了，使用需要通过<code>Maven</code>执行，位置如下图，可以选择多种形式进行推送</p><p><img src="/2022/04/27/java/ji-chu/java-jie-kou-wen-dang-smart-doc/1651050128268.png" alt="推送"></p></li></ol><p>上面可以选择直接生成<code>doc</code>、<code>html</code>、<code>markdown</code>等等，这里由于搭载了<code>torna</code>，因此选择推送至<code>torna</code></p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>文档的内容解析便是基于标签，这里就不在讲解了，仅列举几个，可以参考官方文档</p><p><a href="https://smart-doc-group.github.io/#/zh-cn/start/javadoc?id=javadoc%e4%bd%bf%e7%94%a8">smart-doc标签</a></p><ul><li>@ignore</li><li>@required</li><li>@mock</li><li>@download</li></ul><h4 id="使用规范"><a href="#使用规范" class="headerlink" title="使用规范"></a>使用规范</h4><ul><li><strong>强制</strong>：实体类(特别是<code>入参</code>和<code>响应</code>)字段一定要有注释，如果是入参建议加上@mock，便于前端联调</li><li><strong>强制</strong>：<code>controller</code>及每个接口必须添加描述信息</li><li><strong>建议</strong>：<code>controlelr</code>每个接口加上<code>@author</code>，方便前端找人联调</li></ul><p>以上规范均为个人使用过程中习惯与思考，因人而异</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文完整描述了<code>easyjavadoc + smart-doc + torna</code>生成并部署接口文档的解决方案，以供同学们参考。</p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> smart-doc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html回炉重造</title>
      <link href="/2022/04/26/qian-duan/html-hui-lu-chong-zao/"/>
      <url>/2022/04/26/qian-duan/html-hui-lu-chong-zao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    最近准备重新过一遍前端，跟着<a href="https://www.freecodecamp.org/learn/responsive-web-design/">freecodecamp</a>练习</p><p>本篇博文主要记录实践过程中一些不知道的、遗漏的知识点</p></blockquote><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p>a标签</p><p>以前经常用<code>a</code>标签作为超链接， 今天在练习时发现一个新的用法</p><pre class="line-numbers language-hjtml" data-language="hjtml"><code class="language-hjtml">&lt;a href="https://www.freecatphotoapp.com" target="_blank"&gt;cat photos&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传统<code>a</code>标签使用方式如上，<code>href</code>贴上跳转的连接，<code>target</code>是用于指定新连接打开方式，有以下选项。</p><table><thead><tr><th><code>标签</code></th><th><code>含义</code></th></tr></thead><tbody><tr><td>_blank</td><td>在新窗口中打开链接</td></tr><tr><td>_parent</td><td>在父窗体中打开链接</td></tr><tr><td>_self</td><td>在当前窗体打开链接,此为默认值</td></tr><tr><td>_top</td><td>在当前窗体打开链接，并替换当前的整个窗体</td></tr></tbody></table><p><em><strong>今天学会了新的用法</strong></em></p><p>如果需要跳转到当前页的其他元素，可以这样写</p><pre class="line-numbers language-none"><code class="language-none">&lt;a href="#footer"&gt;Jump to Bottom&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>#footer</code>是当前页其他组件的<code>id</code>，另外还需要去掉<code>target</code></p><h3 id="ul与ol"><a href="#ul与ol" class="headerlink" title="ul与ol"></a>ul与ol</h3><p>记录一下<code>ul</code>和<code>ol</code>标签的区别，其中<code>ul</code>是无序列表，<code>ol</code>是有序列表，类似于如下区别</p><blockquote><ul><li>​    无序列表1</li><li>无序列表2</li></ul><ol><li>有序列表1</li><li>有序列表2</li></ol></blockquote><p>二者的子元素都是使用<code>li</code>标签,以上效果对应代码如下</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>无序列表1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>无序列表2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>有序列表1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>有序列表2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h3 id="引入字体并使用"><a href="#引入字体并使用" class="headerlink" title="引入字体并使用"></a>引入字体并使用</h3><p>通过<code>link</code>标签可以引入<code>css</code>库， 并设置字体， 贴一个<code>case</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Lobster<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">h2</span> <span class="token punctuation">{</span><span class="token property">font-family</span><span class="token punctuation">:</span>Lobster<span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VO/DTO/BO/DO..几者区别</title>
      <link href="/2022/04/25/java/ji-chu/vo-dto-bo-do-ji-zhe-qu-bie/"/>
      <url>/2022/04/25/java/ji-chu/vo-dto-bo-do-ji-zhe-qu-bie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    本篇来介绍几种数据对象的命名规范，如<code>VO</code>、<code>PO</code>、<code>DTO</code>等等</p></blockquote><p><img src="/2022/04/25/java/ji-chu/vo-dto-bo-do-ji-zhe-qu-bie/v2-24e3ed681c02b6434681719753c53b40_r.jpg" alt="总览图"></p><p>由底层到上层：</p><h3 id="PO"><a href="#PO" class="headerlink" title="PO"></a>PO</h3><p>数据库表对象，通常和数据库字段一一对应，且仅存在<code>get</code>，<code>set</code>方法</p><h3 id="BO"><a href="#BO" class="headerlink" title="BO"></a>BO</h3><p>业务对象，可能由多个PO聚合而成，可以有业务操作方法</p><h3 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h3><p>指的是前后端数据传输对象，对于前端入参即<code>@RequestBody</code>对于后端响应即<code>ResponseBody</code></p><h3 id="VO"><a href="#VO" class="headerlink" title="VO"></a>VO</h3><p>视图对象，对DTO的封装，如果较简单的话可以使用DTO</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea Serializable id</title>
      <link href="/2022/04/25/gong-ju/idea-serializable-id/"/>
      <url>/2022/04/25/gong-ju/idea-serializable-id/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下<code>Idea</code>在实现<code>Serializable</code>接口未设置<code>serialVersionUID</code>提示功能</p></blockquote><p>如图，搜索<code>serialVersionUID </code>，勾选上<code>serializable class withor serialVersionUID </code>即可</p><p><img src="/2022/04/25/gong-ju/idea-serializable-id/1650869077606.png" alt="1650869077606"></p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gitte搭建图床</title>
      <link href="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/"/>
      <url>/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自：<a href="https://cloud.tencent.com/developer/article/1873180">使用gitee搭建自己的图床</a></p></blockquote><h1 id="单独使用Gitee"><a href="#单独使用Gitee" class="headerlink" title="单独使用Gitee"></a>单独使用Gitee</h1><p> 最近发现自己博客中的图片全部消失,很苦恼.当时用的是七牛云,花好长时间弄好的,当时用的还是很顺畅的,但有一个坑,就是需要配置自定义域名(当时没有注意到这一点), CSDN博客专家的推荐下搭建图床的方式 – 使用github page搭建图床.</p><p>大体步骤如下:</p><h2 id="1-创建gitee-码云-账号"><a href="#1-创建gitee-码云-账号" class="headerlink" title="1.创建gitee(码云)账号"></a>1.创建gitee(码云)账号</h2><p>1.1 登陆码云官网进行注册  <a href="https://gitee.com/">https://gitee.com/</a></p><p>1.2 进行注册</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/4f6ac8e6bcd92bd5445210655be76c4f.png" alt="img"></p><h2 id="2-创建工程"><a href="#2-创建工程" class="headerlink" title="2. 创建工程"></a>2. 创建工程</h2><p>2.1 创建一个新工程</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/ce26b2ba87dc6a4570b954040e4a8ab2.png" alt="img"></p><p>  2.2 填写项目信息  ![新建仓库 - 码云 Gitee.com](<a href="http://zi1.gitee.io/picture/tc/01/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93">http://zi1.gitee.io/picture/tc/01/新建仓库</a> - 码云 Gitee.com.png)</p><h2 id="3-搭建你的项目"><a href="#3-搭建你的项目" class="headerlink" title="3. 搭建你的项目"></a>3. 搭建你的项目</h2><p>现在我们需要做的就是将刚才新建好的项目down下来</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/000d93e07ac8fae5259ab3700ed30173.png" alt="img"></p><p>拉取代码到本地(这是git的基本操作,如果会就直接跳过)</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/e8efb9c53f520c60645da7081f03c633.png" alt="img"></p><p>复制图1 中的地址到地址栏点击确定</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/884119f40acf5fbf0de43d4032c1ead0.png" alt="img"></p><p>拉取下来后我们会看到这样的目录</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/c82f38ca0a4073e4517051a50eb13c44.png" alt="img"></p><p>现在我们在目录中建立一个文件夹如:picture ,并在其中随意放入一张图片</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/e1f1888b242623e575246a6b21d90e31.png" alt="img"></p><p>将新创建的文件纳入版本控制</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/0b82631e409e44ae58aada7d7afb5442.png" alt="img"></p><p>点击确定</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/a1640347f40561df1ccc6667c9a85d33.png" alt="img"></p><p>提交 </p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/9196db1ab63543fb5f13f5107062f9e8.png" alt="img"></p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/caab0862699afeec4d75a391c0b08f8c.png" alt="img"></p><p>提交到主分支上 </p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/b9c35663fa9cf4b84e7745d626635d7e.png" alt="img"></p><p>再次推送 </p><p>注意:这里可能需要你输入gitee的账号密码 </p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/4d6d20859afc78872abbbc647d0f3bb2.png" alt="img"></p><p>当你看到这一步的时候就可以说是推送完成了 </p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/bcf2f36fc1f74a2c46993b9b012bd66a.png" alt="img"></p><h2 id="4-启用gitpage服务"><a href="#4-启用gitpage服务" class="headerlink" title="4. 启用gitpage服务"></a>4. 启用gitpage服务</h2><p>这时我们再次打开我们的gitee项目,选择右侧的服务下Gitee Pages</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/ecadfd11531a7b348bdbe1bd81833bb2.png" alt="img"></p><p>打开后我们点击启动</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/52167668490ac8a457cd07aeca8e74a4.png" alt="img"></p><p>当我们点击启动后,启动成功的画面如下,我们点击下面的这个地址</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/2c77ae9a0e26efb453304b12e1015963.png" alt="img"></p><p>  还记得我们当时创建的文件夹名字和图片名字吗?  在项目名下加上文件夹(也就是路径)名字 再加上你的图片全面(加后缀)</p><p>我的路径是:</p><p><a href="http://zi1.gitee.io/pic/picture/1.jpg">http://zi1.gitee.io/pic/picture/1.jpg</a></p><p>当做到这里你的图床路就搭建成功了!</p><p>此时你可以直接引用此路径,但稍微比较麻烦.</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/f0fa2c747485364591a0522f8255e585.png" alt="img"></p><h2 id="5-修改引用路径"><a href="#5-修改引用路径" class="headerlink" title="5.修改引用路径"></a>5.修改引用路径</h2><p>如果你也是用Typora进行博客创作可以进行如下设置,可提高你的创作效率</p><p>将typora中图片保存设置为你的git存放图片的目录</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/a2e60945457b1636d75c590ec193c46e.png" alt="img"></p><p>  那么此时,你的图片文件已经保存了一份在你的git本地,直接推送到远程仓库就可以了.操作与第三步一样,纳入版本控制后一顺推上去</p><p>推送完成后可以验证一下是否推送成功,在地址栏输入图片路径,进行验证</p><p>注意: 此时我们的图片引用的还是本地的路径,下面我们将图片改成gitee上的路径</p><p>我们将内容复制为markdown格式</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/6c9068e19c595d54aff60b28bde5916c.png" alt="img"></p><p>  我们将所有的内容黏贴到文本编辑器中,此处建议使用notepad++  将所有的上斜线替换成下斜线</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/da564dfb9c7de314e6bc4d6fc8a7db1b.png" alt="img"></p><p>  替换成gitee的路径</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/57921a9a72a295fafd34bd7726d1763c.png" alt="img"></p><p>  替换的时候我们只需要将本地路径替换成gitee路径即可.</p><p>验证我们的地址是否成功 – &gt; 将替换后的文本全选黏贴到一个新的markdown中,如果图片可以显示出来,说明没有问题</p><p>** 注意: 建议将全文写完后再进行路径的替换**</p><h2 id="6-修改gitee主页"><a href="#6-修改gitee主页" class="headerlink" title="6. 修改gitee主页"></a>6. 修改gitee主页</h2><p>有朋友看到第一眼觉得这个主页很丑,你可以替换成你喜欢的主页都可以.这里推荐一个地址:</p><p><a href="http://www.cssmoban.com/">http://www.cssmoban.com/</a></p><p>下载自己喜欢的模板.</p><p>或者</p><p>打开你想要的页面,ctrl + s 保存网页(以百度主页为例<a href="http://www.baidu.com/">www.baidu.com</a>)</p><p>你会得到这样两个文件</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/ddb49a4617b4218283d6077b17b0de2f.png" alt="img"></p><p>将html文件名修改为index.hmtl</p><p>然后将这两个文件放如你的本地工程中</p><p>纳入版本控制,一顺上推就ok了.</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/ed87fc69e85d4a002499338a875982e7.png" alt="img"></p><p>在网上下载下来的模板也是一样的玩法.</p><h1 id="结合Picgo"><a href="#结合Picgo" class="headerlink" title="结合Picgo"></a>结合Picgo</h1><h3 id="创建私人令牌"><a href="#创建私人令牌" class="headerlink" title="创建私人令牌"></a>创建私人令牌</h3><p>点击头像 —&gt; 设置 —&gt; 私人令牌 —&gt; 新生成令牌</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/11c9249a488a3ae3203d60336bcb5b4f.png" alt="img"></p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/fc021fea25328236cd84e61253a0ce8c.png" alt="img"></p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/70ed0e227fe1e00d0fac5f14a330d802.png" alt="img"></p><p>点击提交，输入当前账号密码后，<strong>注意出现的令牌码一定要复制下来!!!</strong></p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/1a5213cd6e7df5769cd1ef0e39a4ef70.png" alt="img"></p><p>到这里gitee就OK了！！！</p><h3 id="安装picGo插件"><a href="#安装picGo插件" class="headerlink" title="安装picGo插件"></a>安装picGo插件</h3><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/facdee57fa062a14bf3549fc13bbead4.png" alt="img"></p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/7e138d6ed3b00781cb3330f3dfc89e75.png" alt="img"></p><p><strong>【注】如果没有Node.js就要先安装完Node.js，然后退掉PicGo再重新安装一次插件</strong></p><h3 id="图床设置"><a href="#图床设置" class="headerlink" title="图床设置"></a>图床设置</h3><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/6c541ddf87687ea03dfa5b24cf9fde8c.png" alt="img"></p><p>找到刚刚安装好的gitee</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/5696e92ef3848bdf5e85ab3fe85a1573.png" alt="img"></p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/d48e69193dbf7f0b5c3ec4b475681493.png" alt="img"></p><p><strong>友情提示</strong></p><p>厂库地址：</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/614512eab106a5e3dbb2152d9a1650dc.png" alt="img"></p><p>私人令牌：如果没有复制的话，那就重新创建一个在复制。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/9a908e24dadbbe504eb58f1df8b68c25.png" alt="img"></p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/d483c2ba60abf0041aaa3b777b56f1d5.png" alt="img"></p><h2 id="picGo配合Typora使用"><a href="#picGo配合Typora使用" class="headerlink" title="picGo配合Typora使用"></a>picGo配合Typora使用</h2><h3 id="配置Typora"><a href="#配置Typora" class="headerlink" title="配置Typora"></a>配置Typora</h3><p>Typora进入偏好设置</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/4fa6957f8f29da789ad84c5ff13b329e.png" alt="img"></p><p>点击图像，进行如下配置</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/e2c5003c90a3f36855f50d4c3418eb1f.png" alt="img"></p><h3 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h3><p>配置完成后点击<code>验证图片上传选项</code></p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/3c867934193511807a6c412d5c056aea.png" alt="img"></p><p>发生错误，提示<code>Failed to fetch</code></p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/ac7647b5478a2fa56dceb0f92b48664b.png" alt="img"></p><p><strong>解决方案</strong></p><p>获取失败的原因：找不到路径。这里发现Typora的请求路径的端口是36677，而PicGo的端口是36679，所以会找不到路径。</p><p>解决：把PicGo的端口改成36677。</p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/c5af7e1eaaa883d31697d63230bd410f.png" alt="img"></p><p><img src="/2022/04/24/gong-ju/shi-yong-gitte-da-jian-tu-chuang/45f3a759240db185737f22ce37e3af0e.png" alt="img"></p><h1 id="其他图床工具"><a href="#其他图床工具" class="headerlink" title="其他图床工具"></a>其他图床工具</h1><p><a href="https://github.com/zzzzbw/gitpic">https://github.com/zzzzbw/gitpic</a></p><p><a href="https://github.com/xiebruce/PicUploader">https://github.com/xiebruce/PicUploader</a></p><p>参考：</p><p><a href="https://blog.csdn.net/u010654995/article/details/88383995">https://blog.csdn.net/u010654995/article/details/88383995</a></p><p><a href="https://gitee.com/ningboyun/PicGo_img?_from=gitee_search">https://gitee.com/ningboyun/PicGo_img?_from=gitee_searc</a></p>]]></content>
      
      
      <categories>
          
          <category> 图床搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能测试之Jmeter</title>
      <link href="/2022/04/24/gong-ju/xing-neng-ce-shi-zhi-jmeter/"/>
      <url>/2022/04/24/gong-ju/xing-neng-ce-shi-zhi-jmeter/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在针对毕业设计 <em><strong>基于第三方支付的风险控制系统的设计与实现</strong></em>测试中，需要对核心接口进行压力测试， 这里选择使用了<code>Jmeter</code></p><p>本篇文章便对<code>Jmeter</code>的安装及使用进行详细讲解</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里下载的版本是<code>Jmeter5.1.1</code>，以下链接是百度网盘链接</p><pre class="line-numbers language-none"><code class="language-none">链接：https://pan.baidu.com/s/1iW4CmlMnrqiBGx5zDVpQLQ 提取码：sved<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下载完毕后，需要配置<code>JDK环境变量</code>，这里大家应该都已经配置过了，不详细赘述</p><h2 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h2><p>设置永久默认汉化：在Jmeter的安装目录下的bin目录中找到 jmeter.properties这个文件，用文本编辑器打开。在#language=en下面插入一行<br><code>language=zh_CN</code></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><code>windows</code>版启动入口是位于<code>bin</code>目录下的，<code>jmeter.bat</code>文件， 双击打开即可</p><p>主界面如图所示</p><p><img src="/2022/04/24/gong-ju/xing-neng-ce-shi-zhi-jmeter/1650766882907.png" alt="Jmeter主界面"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>这里就我对交易接口的压力测试做一次使用步骤的解析</p><ol><li><p>添加并配置线程组</p><p>线程组是当前压力测试需要多少个线程同时运行，一共运行多少次</p><p><img src="/2022/04/24/gong-ju/xing-neng-ce-shi-zhi-jmeter/1650766981040.png" alt="添加线程组"></p><p><img src="/2022/04/24/gong-ju/xing-neng-ce-shi-zhi-jmeter/1650767046073.png" alt="线程组配置"></p><p>这里我一共配置了总计20个线程，每个线程执行450次，总计9000次</p></li><li><p>配置HTTP请求头</p><p>有关请求头的配置需要配置<code>Content-Type</code>，保证响应可以解析，以及可能存在的鉴权数据，如我这里的<code>token</code>，按需配置即可</p><p><img src="/2022/04/24/gong-ju/xing-neng-ce-shi-zhi-jmeter/1650767159444.png" alt="请求头配置"></p></li><li><p>配置cookie</p><p>一般而言，<code>cookie</code>是用来做鉴权的，这里我的<code>cookie</code>中需要保存<code>token</code>，因此也需要进行配置</p><p><img src="/2022/04/24/gong-ju/xing-neng-ce-shi-zhi-jmeter/1650767221180.png" alt="1650767221180"></p><p>这里还需要注意的是<code>域</code>的配置，<code>域</code>是当前HTTP请求所在的<code>IP</code>地址，我这里测试的是本机服务，因此是<code>127.0.0.1</code></p></li><li><p>随机参数的配置(可选)</p><p>在交易接口压测中，我选择了两个随机参数，一个是随机收款人，另一个是随机交易金额。对于交易金额而言，随机数即可满足，而随机收款人需要随机的项比较多，而且不能完全随机，得都是数据库测数据。</p><p>随机收款人从数据库拿到后，<code>Csv</code>配置及<code>Jmeter</code>配置如下图所示。</p><p><img src="/2022/04/24/gong-ju/xing-neng-ce-shi-zhi-jmeter/1650767509142.png" alt="Jmeter配置"></p><p><code>Jmeter</code>配置需要注意文件名、文件编码、变量名称、分隔符</p><p><img src="/2022/04/24/gong-ju/xing-neng-ce-shi-zhi-jmeter/1650767550478.png" alt="Csv文件"></p><p>随机数的配置比较简单，需要配置 最大值、最小值、变量名称</p><p><img src="/2022/04/24/gong-ju/xing-neng-ce-shi-zhi-jmeter/1650767627138.png" alt="随机数"></p><p>除了随机数和随机csv之外，还有计数器可以使用</p><p><img src="/2022/04/24/gong-ju/xing-neng-ce-shi-zhi-jmeter/1650767664348.png" alt="计数器"></p><p>具体需要配置，开始值，最大值，递增，变量名称</p><blockquote><p>​    配置完参数后，需要使用<code>${arg}</code>使用参数，其中<code>arg</code>是变量名称</p></blockquote></li><li><p>请求配置</p><p>做好准备工作后，便可以配置HTTP请求了</p><p><img src="/2022/04/24/gong-ju/xing-neng-ce-shi-zhi-jmeter/1650767914448.png" alt="请求配置"></p><p>具体配置可参考上图，主要需配置：协议、IP、端口、方法、路径、内容编码、参数/消息体</p><p>其中，内容编码与入参有关，如果携带中文，需要配置为<code>utf-8</code></p><p>消息体值可以写死，也可以引用配置好的随机参数(上图便是进行引用)</p></li><li><p>配置监听器</p><p>监听器的作用是查看请求的实时分析图，可在监听器中配置</p><p><img src="/2022/04/24/gong-ju/xing-neng-ce-shi-zhi-jmeter/1650768186441.png" alt="监听器"></p><p>建议配置：查看结果树、图形结果、响应时间图、汇总图、汇总报告</p></li><li><p>发起请求</p><p>点击菜单下启动即可</p><h2 id="Jmeter其他配置"><a href="#Jmeter其他配置" class="headerlink" title="Jmeter其他配置"></a>Jmeter其他配置</h2><p>在使用过程中，发现响应的中文是乱码的，查阅资料后，需要修改配置</p><p>配置步骤如下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">1</span>、打开 jmeter.properties 配置文件<span class="token function">vi</span> jmeter.properties <span class="token number">2</span>、找到 sampleresult.default.encoding，将原来<span class="token comment">#sampleresult.default.encoding=ISO-8859-1</span>改为sampleresult.default.encoding<span class="token operator">=</span>UTF-8 <span class="token number">3</span>、保存退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.cnblogs.com/rslai/p/11661003.html">JMeter中文乱码的解决 </a></p><p><a href="https://cloud.tencent.com/developer/article/1683888">Jmeter系列（48）- 详解 Random Variable 随机变量</a></p><p><a href="https://cloud.tencent.com/developer/article/1633626">Jmeter(一) - 从入门到精通 - 环境搭建（详解教程）</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> Jmeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 技巧小能手</title>
      <link href="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/"/>
      <url>/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    转自：</p><p><a href="https://xie.infoq.cn/article/6f601b253528091a3988f95f6">Git技巧小能手</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Git 是当前最流行的代码版本管理工具，相较于 SVN 功能更强大。因为 Git 属于分布式，离线模式下仍然可以工作。且团队合作时，SVN 像条单行道，Git 更像高速公路。福兮，祸之所伏。Git 功能强大的同时，也伴随着更加繁琐的使用命令。</p><hr><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/cbdf9d5cf267202bd6a773ed6293b823.png" alt="img"></p><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/be7006d6fda4d4a6fd3fabf4ab44e87f.png" alt="img"></p><h1 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h1><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/f578ca661af9e1fd1fd911fc23752315.png" alt="img"></p><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/124ba9f836cd60d0f4ac5d9422bc6778.png" alt="img"></p><hr><h2 id="本地库"><a href="#本地库" class="headerlink" title="本地库"></a>本地库</h2><h3 id="1、创建本地仓库"><a href="#1、创建本地仓库" class="headerlink" title="1、创建本地仓库"></a>1、创建本地仓库</h3><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/c6260f379a347e0a946774d7a2e77110.png" alt="img"></p><h3 id="2、提交本地库"><a href="#2、提交本地库" class="headerlink" title="2、提交本地库"></a>2、提交本地库</h3><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/c1205c7efc71879262ae1346b276ba92.png" alt="img"></p><h3 id="3、仓库状态"><a href="#3、仓库状态" class="headerlink" title="3、仓库状态"></a>3、仓库状态</h3><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/a5727c2411e414a46a2ca7e4c1dc9383.png" alt="img"></p><h3 id="4、版本回退"><a href="#4、版本回退" class="headerlink" title="4、版本回退"></a>4、版本回退</h3><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/a5029df126273d389312fbcf436e35f4.png" alt="img"></p><h3 id="5、撤销更改"><a href="#5、撤销更改" class="headerlink" title="5、撤销更改"></a>5、撤销更改</h3><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/5096008dcddc1a3018ab3a1b8665451f.png" alt="img"></p><h3 id="6、命令回退-后悔药"><a href="#6、命令回退-后悔药" class="headerlink" title="6、命令回退(后悔药)"></a>6、命令回退(后悔药)</h3><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/f7975397b15075555060cee91fcf1564.png" alt="img"></p><hr><h2 id="远程库"><a href="#远程库" class="headerlink" title="远程库"></a>远程库</h2><h3 id="1、安全通信"><a href="#1、安全通信" class="headerlink" title="1、安全通信"></a>1、安全通信</h3><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/d1aa61599e72703204560a341308ba9c.png" alt="img"></p><ul><li><strong>生成 ssh-key</strong></li></ul><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/7b2d5bc32348940b1eebb91c81e672a5.png" alt="img"></p><ul><li><strong>添加 id_rsa</strong></li></ul><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/a8753706c41a0d1799c6d31d7a1243e4.png" alt="img"></p><ul><li><strong>将生成的公钥配置到 GitHub、Gitee 中。</strong></li></ul><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/9170fbc408a77cb89310806524f20400.png" alt="img"></p><ul><li><strong>验证连通性</strong></li></ul><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/e6905aa7be4347661e9c3d9cfe2ea5c4.png" alt="img"></p><h3 id="2、创建远程库"><a href="#2、创建远程库" class="headerlink" title="2、创建远程库"></a>2、创建远程库</h3><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/cbe69c2c10b3b8b71d080d12a306116a.png" alt="img"></p><h3 id="3、本地仓库-–-gt-拉取-x2F-同步-x2F-解绑-–-gt-远程仓库"><a href="#3、本地仓库-–-gt-拉取-x2F-同步-x2F-解绑-–-gt-远程仓库" class="headerlink" title="3、本地仓库 –> 拉取/同步/解绑 –> 远程仓库"></a>3、本地仓库 –&gt; 拉取/同步/解绑 –&gt; 远程仓库</h3><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/07ac6dbefd8595ad86f37fd276c9d46c.png" alt="img"></p><h3 id="4、提交远程仓库"><a href="#4、提交远程仓库" class="headerlink" title="4、提交远程仓库"></a>4、提交远程仓库</h3><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/e4960e226ff57b94313caac17e91609a.png" alt="img"></p><ul><li><strong>non-fast-forward 问题</strong></li></ul><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/de5e50876c719827b9197b45530b10f7.png" alt="img"></p><ul><li><strong>fatal: refusing to merge unrelated histories</strong></li></ul><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/a33305523e2a04ffc14bd94eb5dce953.png" alt="img"></p><h3 id="5、远程库信息查看"><a href="#5、远程库信息查看" class="headerlink" title="5、远程库信息查看"></a>5、远程库信息查看</h3><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/99256571991fce4cc7230f4c8ebac203.png" alt="img"></p><hr><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/9ab693f4befb233cdb858dcfcfbf445e.png" alt="img"></p><ul><li><strong>分支冲突</strong></li></ul><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/c433211400a3988708fb47166773d590.png" alt="img"></p><ul><li><strong>临时 BUG 分支</strong></li></ul><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/07792ce93e6358b982109973a1354b14.png" alt="img"></p><ul><li><strong>分支移植</strong></li></ul><p><img src="/2022/04/22/gong-ju/git-ji-qiao-xiao-neng-shou/5b4c50f02697121f155c4b0236e36cc8.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dns 解析较慢</title>
      <link href="/2022/04/22/gong-ju/dns-jie-xi-jiao-man/"/>
      <url>/2022/04/22/gong-ju/dns-jie-xi-jiao-man/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    转自：</p><p><a href="https://xie.infoq.cn/article/15911ac886165b658846827b7">踩了个 DNS 解析的坑，但我还是没想通</a></p></blockquote><p>最近踩了个 DNS 解析的小坑，虽然问题解决了，但排查过程比较曲折，最后还是有一点没有想通，整个过程分享给大家。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近负责的服务要置换机器。置换机器可能很多小伙伴不知道是干啥，因为大家平时接触不到，我简单解释一下什么是机器置换以及为什么需要机器置换。</p><p>机器置换通俗地讲就是更换机器，把服务从一台机器迁移到另一台上去。</p><p>为什么要机器置换呢？ 表面原因可能是机器硬件故障、或者机器过了保修期。</p><p>有些小伙伴可能就想问，我在公司也负责了很多服务，为啥从来没有置换过机器呢？原因可能是用了容器，没有直接部署在物理机上，置换机器的任务被转移给了云平台的运维人员；还可能是你们有专门的运维帮忙做了这件事，对开发人员来说几乎是透明的。</p><p>我负责的服务为啥要置换呢？因为机器过保了。服务为啥部署在物理机上呢？因为它是个基础服务，和一般服务不太一样，有一些限制，只能在物理机上部署。为啥没有运维人员帮忙呢？因为公司很多基础服务是自运维，开发者既做开发又是运维。</p><p><img src="/2022/04/22/gong-ju/dns-jie-xi-jiao-man/2905deda5f38fc780cf5118046c40f88.jpeg" alt="img"></p><p>说完机器置换，再来聊聊这个基础服务，它是一个 Go 写的服务，不停地发送 HTTP 请求，记住这点就好，其他不重要。</p><p>这个服务在置换机器后，<strong>HTTP 请求的耗时慢了不少</strong>，如下图，黄色为老机器，蓝色为新机器，指标的值就是 HTTP 请求的耗时（毫秒），大概 1.5 倍的差距。这就是今天要分享的问题，接下来说说我的排查过程。</p><p><img src="/2022/04/22/gong-ju/dns-jie-xi-jiao-man/a2a1586d8ebfca0acc59ef6590198ab1.png" alt="img"></p><h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><p>这种情况，先去看了机器的各项指标，如 CPU、网络情况等等，看看是否有异常，确认是否被其他指标影响了。但看了一圈下来，发现新机器的各项指标甚至还优于老机器。</p><p>接着去询问了提供机器的同学，看看机器是否有异常，结果也是没有。</p><p>既然 HTTP 请求变慢，就想到看看是请求的哪个环节变慢了，用如下的命令来测试下，域名我用百度的域名来代替：</p><blockquote><p>curl  -o /dev/null -s -w %{time_namelookup}::%{time_connect}::%{time_total}”\n” <a href="http://www.baidu.com/">http://www.baidu.com</a></p></blockquote><p>这里的各个参数代表含义（还有一些其他参数也可用）：</p><ul><li>time_total 总时间，按秒计。精确到小数点后三位。</li><li>time_namelookup DNS 解析时间,从请求开始到 DNS 解析完毕所用时间。</li><li>time_connect 连接时间,从开始到建立 TCP 连接完成所用时间,包括前边 DNS 解析时间，如果需要单纯的得到连接时间，用这个 time_connect 时间减去前边 time_namelookup 时间。以下同理，不再赘述。</li><li>time_appconnect 连接建立完成时间，如 SSL/SSH 等建立连接或者完成三次握手时间。</li><li>time_pretransfer 从开始到准备传输的时间。</li><li>time_redirect 重定向时间，包括到最后一次传输前的几次重定向的 DNS 解析，连接，预传输，传输时间。</li><li>time_starttransfer 开始传输时间。在 client 发出请求之后，Web 服务器返回数据的第一个字节所用的时间</li></ul><p>这样能看到域名解析、连接、传输各个阶段的耗时情况，新老机器对比，如果有一项特别高，那么这项肯定有问题</p><ul><li>新机器：0.001484::0.001743::0.007489</li><li>老机器：0.000681::0.000912::0.002475</li></ul><p>简单计算一下：</p><ul><li>新机器：DNS 解析耗时 0.001484 秒，连接建立耗时 0.000258 秒，总耗时 0.007489 秒</li><li>老机器：DNS 解析耗时 0.000681 秒，连接建立耗时 0.000231 秒，总耗时 0.002475 秒</li></ul><p>虽然从这次的测试数据来看，新机器 DNS 解析似乎慢了一点，但你仔细看这个数值，几乎对请求的总体耗时没啥影响，而且多测试几次，发现这两台机器的 DNS 解析其实差不多。</p><p>但还是不放心，验证 DNS 是否存在问题，再用 dig 命令去试一下</p><blockquote><p>dig <a href="http://www.baidu.com/">www.baidu.com</a></p></blockquote><p>执行时，明显感觉到了卡顿，确定是 DNS 有问题了。</p><p><img src="/2022/04/22/gong-ju/dns-jie-xi-jiao-man/0058e7c61b383d5631c517a84aadded4.jpeg" alt="img"></p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>一开始，我去网上搜索了一下 DNS 慢的相关文章，找到了一篇文章《记一次 Go net 库 DNS 问题排查》，但稍微验证了下，和我的 case 没啥关系，文章是好文章，所以也贴个链接，感兴趣可以读读。</p><blockquote><p>《记一次 Go net 库 DNS 问题排查》<a href="https://juejin.cn/post/6948469896007122974">https://juejin.cn/post/6948469896007122974</a></p></blockquote><p>接着就去找了网络组的同学，网络组的同学稍微看了一眼就知道原因了，说新机器没有安装 DNSmasq，这又是个啥？不要慌，先去网上查下再接话。</p><p><img src="/2022/04/22/gong-ju/dns-jie-xi-jiao-man/11161179bcfeedf9194f0171040b67e3.jpeg" alt="img"></p><blockquote><p>DNSmasq 提供 DNS 缓存和 DHCP 服务功能。作为域名解析服务器(DNS)，DNSmasq 可以通过缓存 DNS 请求来提高对访问过的网址的连接速度。作为 DHCP 服务器，DNSmasq 可以用于为局域网电脑分配内网 ip 地址和提供路由。DNS 和 DHCP 两个功能可以同时或分别单独实现。DNSmasq 轻量且易配置，适用于个人用户或少于 50 台主机的网络。此外它还自带了一个 PXE 服务器。</p></blockquote><p>简单来说，这里它扮演的是一个 DNS 缓存的角色，提高 DNS 的查询速度。</p><p>说到这里，插播一个小知识，我一直以为 DNS 会被操作系统缓存，不知道你们有没有这样的错觉，但实际上，Linux 下如果没有特殊处理，每一次 DNS 解析都要查询 DNS 服务器。很好证明，可以用 tcpdump 抓 DNS 的包试试，我当时也试了下，每次都会去远程拿 DNS 解析结果。这个结论在《TCP/IP 详解卷 1》中也能找到相关的描述：</p><p><img src="/2022/04/22/gong-ju/dns-jie-xi-jiao-man/b8b8b3d61f20ac748fda103e4bc446a7.png" alt="img"></p><p>只有 Windows 和比较新的 Linux 系统可以在客户端缓存 DNS，而且 Linux 系统是需要手动开启的，所以默认情况下都要去远程获取 DNS 缓存。</p><p>言归正传，网络组同学说要么装一个 DNSmasq，要么改下 DNS 服务器的配置，也就是<code>/etc/resolv.conf</code>文件，由于机器上已经有服务了，所以选择了改配置这种比较安全的方式。</p><p>没改之前，/etc/resolv.conf 的第一行是 127.0.0.1，也就是将本地也作为 DNS 服务器，但实际上本地没有开启 DNS 服务，网络组同学说，去掉第一行配置或者安装 DNSmasq 都可以。</p><p>先是去掉了 127.0.0.1 的配置，结果耗时不变！</p><p><img src="/2022/04/22/gong-ju/dns-jie-xi-jiao-man/5bf8f2b1716d1c76cb4f9a9ed65f35ba.jpeg" alt="img"></p><p>随后加上 127.0.0.1 的配置，又安装了 DNSmasq 后，耗时就降下去了。</p><p><img src="/2022/04/22/gong-ju/dns-jie-xi-jiao-man/abbe3f789442aeaa013cbe73ce8108c9.jpeg" alt="img"></p><p>整个解决的过程，程序没有重启，唯一的变量是安装了 DNSmasq，所以这一定是 DNS 的锅了。</p><h3 id="问题反思"><a href="#问题反思" class="headerlink" title="问题反思"></a>问题反思</h3><p>虽然问题解决了，但我还有几个疑问：</p><ol><li>为什么配置了 127.0.0.1 的 DNS server，但没有开启 DNSmasq 呢？</li><li>为什么去掉 127.0.0.1 配置会无效呢？</li></ol><p>第 1 个问题比较好搞清楚，问了下系统部的同学，他说本来是应该开启 DNSmasq 的，但出了一点点小差错，结果只配置了 127.0.0.1。</p><p><img src="/2022/04/22/gong-ju/dns-jie-xi-jiao-man/86c369ec65da22bb12bcfbf6e9a52d70.jpeg" alt="img"></p><p>再看第 2 个问题，DNS 本地缓存和远程查询差距这么大吗？据网络组同学说 DNS server 是公司内自建的，内网传输，实际并不慢，用 dig 也好测试，使用第 2、3 行的 DNS server 测试下，发现 dig 的速度都很快。</p><blockquote><p>dig <a href="http://www.baidu.com/">www.baidu.com</a> @host</p></blockquote><p>为什么有了 127.0.0.1 的配置就变得很慢呢？下面就从我的几个猜测入手，一个个证明，但在猜测之前，我们先了解一下 Go 程序解析 DNS 的流程。</p><h3 id="Go-的-DNS-解析流程"><a href="#Go-的-DNS-解析流程" class="headerlink" title="Go 的 DNS 解析流程"></a>Go 的 DNS 解析流程</h3><p>Go 的 DNS 解析分为两种：</p><ul><li>cgo 方式，调用 c 语言标准库的实现</li><li>纯 Go 代码实现</li></ul><p>由于要适配各个平台，所以又有了各个平台的实现。</p><p>这部分代码位于<code>net</code>包下，想要跟踪也很简单，写个建立连接的代码，一步步 debug，找到域名解析的地方。</p><p>我直接告诉你从<code>lookup_unix.go</code>文件的<code>lookupIP</code>方法看起，当然这只是 Unix 系统，包括 Mac 和 Linux，不过 Mac 不走纯 Go 的代码，它被强制走到 cgo 了，在 Linux 上没有特殊配置是走纯 Go 实现的 DNS 解析，以下代码以 Linux 为例：</p><pre class="line-numbers language-none"><code class="language-none">func (r *Resolver) lookupIP(ctx context.Context, network, host string) (addrs []IPAddr, err error) {  // ①强制走纯Go的DNS解析器  if r.preferGo() {    return r.goLookupIP(ctx, host)  }  // ②根据解析顺序解析  order := systemConf().hostLookupOrder(r, host)  if order == hostLookupCgo {    if addrs, err, ok := cgoLookupIP(ctx, network, host); ok {      return addrs, err    }    // cgo not available (or netgo); fall back to Go's DNS resolver    // ③如果cgo搞不定，降级到先文件再DNS    order = hostLookupFilesDNS  }  ips, _, err := r.goLookupIPCNAMEOrder(ctx, host, order)  return ips, err}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 order 有如下几种</p><pre class="line-numbers language-none"><code class="language-none">hostLookupCgo      hostLookupOrder = iota // cgohostLookupFilesDNS                 // 文件优先hostLookupDNSFiles                 // DNS优先hostLookupFiles                    // 只查文件hostLookupDNS                      // 只查DNS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的文件也就是<code>/etc/hosts</code>，goLookupIP 最终也调用了 goLookupIPCNAMEOrder，但 goLookupIPCNAMEOrder 这个方法的代码太长，所以我这里只讲一下大致的流程：</p><ol><li>如果需要先查询 hosts 文件，则先查，查到直接返回</li><li>读取/etc/resolv.conf 文件，拿出 DNS server 的配置，并且每 5 秒更新一次</li><li>构造 DNS 请求并向服务器发送，UDP 读取的超时时间默认为 5 秒，可在/etc/resolv.conf 文件中配置，同一个域名的不同类型（如 ipv4 和 ipv6）的查询可配置为并行或串行</li><li>向 DNS server 发送请求采用的是轮询机制，如果其中一个 server 请求出错，则顺延至下一个，重试次数默认为 2，可在/etc/resolv.conf 文件中配置</li><li>最后解析查询结果并返回，如果结果为空，且配置了 hosts 文件兜底，则查询一次文件</li></ol><p>好了，流程简单介绍到这里，接下来验证我的几个猜想。</p><h3 id="猜想一：Go-是否只在程序启动时读取一次-x2F-etc-x2F-resolv-conf-文件"><a href="#猜想一：Go-是否只在程序启动时读取一次-x2F-etc-x2F-resolv-conf-文件" class="headerlink" title="猜想一：Go 是否只在程序启动时读取一次/etc/resolv.conf 文件"></a>猜想一：Go 是否只在程序启动时读取一次/etc/resolv.conf 文件</h3><p>这个猜想的依据是，如果查询 DNS 时拿到了 127.0.0.1 的 DNS server，且本地未开启 DNS 服务时，可能会慢，且配置文件如果修改了，Go 程序如果只在初始化时读一次文件，那自然改配置文件无效。</p><p>但事实并非如此，上面也说了，Go 在读取 DNS 配置文件时是惰性地每隔 5 秒更新一次</p><pre class="line-numbers language-none"><code class="language-none">func (conf *resolverConfig) tryUpdate(name string) {  // 初始化，只做一次  conf.initOnce.Do(conf.init)  // ...  now := time.Now()  if conf.lastChecked.After(now.Add(-5 * time.Second)) {    return  }  conf.lastChecked = now  // ...   dnsConf := dnsReadConfig(name)  conf.mu.Lock()  conf.dnsConfig = dnsConf  conf.mu.Unlock()}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制代码</p><p>而且我做了个实验，写了个 DNS 解析的测试代码，放在有 127.0.0.1 配置但未开启 DNSmasq 的服务器上跑，抓 127.0.0.1 53 端口（DNS 默认端口）的包，发现是有流量的，然后修改/etc/resolv.conf 配置，去掉 127.0.0.1，发现抓不到 127.0.0.1 53 端口的流量了，这证明和代码逻辑一致，本猜想不成立。</p><h3 id="猜想二：DNS-查询远程比本地慢很多"><a href="#猜想二：DNS-查询远程比本地慢很多" class="headerlink" title="猜想二：DNS 查询远程比本地慢很多"></a>猜想二：DNS 查询远程比本地慢很多</h3><p>这个很好证明，还是用上面的程序</p><ol><li>放在无 127.0.0.1 配置的服务器上跑</li><li>放在有 127.0.0.1 配置且开启 DNSmasq 的服务器上跑</li></ol><p>结果两者耗时差不多，甚至他们和在有 127.0.0.1 配置但未开启 DNSmasq 的服务器上的耗时也基本一致。</p><p>这说明无论怎样查询 DNS 都不慢。</p><h3 id="猜想三：是否是并发太高导致"><a href="#猜想三：是否是并发太高导致" class="headerlink" title="猜想三：是否是并发太高导致"></a>猜想三：是否是并发太高导致</h3><p>为什么我会有这个猜想呢，一是线上的 QPS 大概是 50 左右，和上面测试的场景不太一样，二是我在上面的代码中看到了锁，是不是并发高了之后，锁带来的开销变大导致？</p><p>我写了个 100 并发的代码，去查询 DNS，结果发现这段代码在如下三种场景，耗时都差不多</p><ol><li>无 127.0.0.1 配置的服务器</li><li>有 127.0.0.1 配置且开启 DNSmasq 的服务器</li><li>有 127.0.0.1 配置且未开启 DNSmasq 的服务器</li></ol><p>同时我也去问了网络组的同学，他说 DNS server 能抗住百万 QPS，服务端没有压力。</p><p><img src="/2022/04/22/gong-ju/dns-jie-xi-jiao-man/297c3f83ab1c5582ad9f1584e0669121.jpeg" alt="img"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>写到最后，我 emo 了~虽然问题解决了，但为什么当时 DNS 查询慢还是不知道，如果你看了文章知道其中哪里有问题，或者有什么比较好的排查方法，欢迎来探讨，反正我是查不下去了。</p><p>最后再说一句，写文章很辛苦，需要点鼓励，来个<code>点赞</code>、<code>在看</code>、<code>关注</code>吧，我们下期再见。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狂野架构师01-互联网架构演变</title>
      <link href="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/"/>
      <url>/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/</url>
      
        <content type="html"><![CDATA[<h1 id="互联网架构演变"><a href="#互联网架构演变" class="headerlink" title="互联网架构演变"></a>互联网架构演变</h1><h2 id="1、-业务架构"><a href="#1、-业务架构" class="headerlink" title="1、 业务架构"></a>1、 业务架构</h2><h3 id="1-1-单体架构"><a href="#1-1-单体架构" class="headerlink" title="1.1 单体架构"></a>1.1 单体架构</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713590485231.png" alt="单体"></p><blockquote><p>单体架构的弊端：</p><ul><li>部分相同的功能或者资源无法互通，各个团队建设带来重复性投资（<strong>资源浪费</strong>）</li><li>业务系统间的集成和协作成本高昂（<strong>信息孤岛</strong>）</li><li>不利于业务的沉淀和持续发展</li></ul></blockquote><h3 id="1-2-中台"><a href="#1-2-中台" class="headerlink" title="1.2 中台"></a>1.2 中台</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713590664115.png" alt="中台"></p><blockquote><p>核心：<strong>共享</strong></p><p><strong>打通信息孤岛，共用基础设施包括业务上的基础数据（基础能力）；以及技术上的基础架构（治理、监控、测试等等）</strong></p></blockquote><h3 id="1-3-去中台"><a href="#1-3-去中台" class="headerlink" title="1.3 去中台"></a>1.3 去中台</h3><blockquote><p>中台的缺点：</p><ul><li>公司如果业务差异度过大，中台复用度不高，提炼和维护中台的成本过高，带不来复用的价值</li></ul></blockquote><h2 id="2、数据架构"><a href="#2、数据架构" class="headerlink" title="2、数据架构"></a>2、数据架构</h2><h3 id="2-1-单库"><a href="#2-1-单库" class="headerlink" title="2.1 单库"></a>2.1 单库</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713591289229.png" alt="单库"></p><blockquote><p>1 )方案<br>iava web项目直接通过jdbc，连接单一的数据库，读写扎堆在一块，单库上的机器io及cpu性能很快达到上限简单直接，小项目首选</p><p>数据库:mysql、oracle、sqlserver、db2等(课题:mysql性能调优)</p><p>持久层框架:idbc，hibernate，ipa，mybatis(课题:mybatis源码剖析)</p></blockquote><h3 id="2-2-读写分离"><a href="#2-2-读写分离" class="headerlink" title="2.2 读写分离"></a>2.2 读写分离</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713591239985.png" alt="读写分离"></p><blockquote><p>1）方案<br>java web应用层连接多个数据库，数据库之间形成主从关系，主库上写，从库上读。读写压力被分散数据库集群:一主多从、双主单写(课题:mysql千亿级数量线上扩容实战)</p><p>应用层开发:多数据源支持，Springmutidatasource</p><p>中间件:Sharding-JDBC，Mycat，Atlas</p><p>2）特点<br>数据延迟:从主库到从库之间数据需要经过网络传输，不可避免的有延迟</p><p>开发层面:需要开发框架具备多数据源的支持，以及自动化的数据源切换</p><p>单库瓶颈:业务越来越多，表数量越来越多。出现单个库几百张表的现象</p><p>数据局限:依然无法解决单表大数据的问题，比如订单积累达到亿级，即使在从库，关联查询依然奇无比</p></blockquote><h3 id="2-3-分库分表"><a href="#2-3-分库分表" class="headerlink" title="2.3 分库分表"></a>2.3 分库分表</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713591141288.png" alt="分库分表"></p><blockquote><p>1）方案<br>主从库的写入依然是有一个统一的主库入口。随着业务量的提升，继续细粒度化拆分</p><p>业务分库:订单库，产品库，活动库，会员库</p><p>横向分表:(拆记录)3个月内订单，半年内订单，更多订单</p><p>纵向分表:(拆字段)name、phone-张表，info、address一张表，俩表id一致</p><p>(课题:分库分表下每天亿级订单生成的痛点与架构)</p><p>2）特点</p><p>分库:不同的数据库，所以无法使用数据库事务，而分布式事务的效果并不理想，多采用幂等和最终一致性方案。(课题:多服务之间分布式事务的一站解决，业务幂等性技术架构体系)</p><p>分表:拆了再聚合是一对矛盾，例如按下单时间维度的分表，需要按用户排序统计变得异常困难。</p><p>中间件:Sharding-JDBC，Mycat,Atlas</p></blockquote><h3 id="2-4-高速缓存"><a href="#2-4-高速缓存" class="headerlink" title="2.4 高速缓存"></a>2.4 高速缓存</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713591340821.png" alt="高速缓存"></p><blockquote><p>1)方案<br>数据库往往是系统的瓶颈，根据数据的冷热划分，热点数据如类目、商品基础信息放在缓存中，其他数据延迟加载</p><p>ehcache:非分布式，简单，易维护，可用性一般memcache:性能可靠，纯内存，客户端需要自己实现，无持久化redis:性能可靠，纯内存，自带分片，集群，哨兵，支持持久化，标准方案。<br>(课题:MTD巨头高性能缓存代理方案实战)</p><p>2)特点<br>缓存策略:冷热数据的存放，缓存与db的边界需要架构师去把控，重度依赖可能引发问题(memcache造成db高压案例:redis短信平台故障案例)</p><p>缓存陷阱:击穿(单-key过期)，穿透(不存在的key)，雪崩(多个key 同时过期)</p><p>数据一致性:缓存和 db 之间因为同一份数据保存了两份，自然带来了一致性问题</p><p>(课题:redis高阶技术剖析)</p></blockquote><h3 id="2-5-数据多样性"><a href="#2-5-数据多样性" class="headerlink" title="2.5 数据多样性"></a>2.5 数据多样性</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713591455577.png" alt="数据多样性"></p><h4 id="2-5-1-分布式文件"><a href="#2-5-1-分布式文件" class="headerlink" title="2.5.1 分布式文件"></a>2.5.1 分布式文件</h4><h4 id="2-5-2-nosql"><a href="#2-5-2-nosql" class="headerlink" title="2.5.2 nosql"></a>2.5.2 nosql</h4><h4 id="2-5-3-搜索引擎"><a href="#2-5-3-搜索引擎" class="headerlink" title="2.5.3 搜索引擎"></a>2.5.3 搜索引擎</h4><h4 id="2-5-4-架构特点"><a href="#2-5-4-架构特点" class="headerlink" title="2.5.4 架构特点"></a>2.5.4 架构特点</h4><blockquote><p>开发框架支持:存储的数据多样化，要求开发框架架构层面要提供多样化的支撑，并确保访问易用性</p><p>数据运维:多种数据服务器对运维的要求提升，机器的数据维护与灾备工作量加大</p><p>数据安全:多种数据存储的权限，授权与访问隔离需要注意</p></blockquote><h2 id="3、应用架构"><a href="#3、应用架构" class="headerlink" title="3、应用架构"></a>3、应用架构</h2><h3 id="3-1-单机架构"><a href="#3-1-单机架构" class="headerlink" title="3.1 单机架构"></a>3.1 单机架构</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713591574296.png" alt="单机架构"></p><blockquote><p>1）特点<br>每个项目成一个mvc结构，部署在应用服务器上(tomcat、iboss、websphere，weblogic)(课题:tomcat源码剖析)<br>随着业务扩张，需求迭代，项目变得越来越大，一个war包动辄几百兆:崇尚调优，jvm单节点调优甚至接近于强迫症的地步。(课题:jvm性能调优)</p></blockquote><h3 id="3-2-动静分离"><a href="#3-2-动静分离" class="headerlink" title="3.2 动静分离"></a>3.2 动静分离</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713591671702.png" alt="动静分离"></p><blockquote><p>1)方案<br>静态响应:tomcat对静态文件响应一般，提取静态文件，直接由Nginx响应动态代理:后端api通过代理转发给tomcat应用机器<br>2)特点<br>开发层面调整:项目结构要同步调整，由原来的一体化mvc转换为后端api+前端形式。前后协调:前后端的分工变得更明确，互相并行开发，独立部署，但也带来了接口协调与约定等沟通问题跨域问题:后段与前端如果域名不同，可能存在跨域问题(head头，jsonp等手段可以解决)</p></blockquote><h3 id="3-3-SOA"><a href="#3-3-SOA" class="headerlink" title="3.3 SOA"></a>3.3 SOA</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713591713047.png" alt="SOA"></p><blockquote><p>1）方案<br>公共服务:重复开发的基础服务提取出来，形成服务中心，避免重复造轮子，降低成本，架构团队出现。独立性:各自服务独立部署升级，粒度更细，低耦合，高内聚SOA理念诞生:服务治理的范畴，重在服务之间的拆分与统一接口</p><p>2）技术手段<br>异步化:<br>rabbitmq(课题:超时架构设计)<br>rocketmg<br>kafka<br>RPC:<br>Dubbo(课题:Dubbo核心源码剖析)<br>RPC框架(课题:RPC核心源码与手写RPC，Netty通信与进阶)<br>3）特点<br>界限把控:服务的粒度、拆分和公共服务提炼需要架构师的全局把控。设计不好容易引发混乱<br>部署升级:服务数量增多，人工部署变的不现实，必须借助自动化运维(课题:高效运维篇，docker、k3s、jenkins、Apollo应用发布实战)<br>服务可用性:抽调的微服务因需要被多个上层业务共享，可用性等级变高，一旦down机就是灾难<br>熔断和限流:做好服务熔断和限流，提防服务单点瓶颈造成整个系统瘫痪。短信提醒失败不要影响下单<br>(课题:cloud alibaba，sentinel限流)</p></blockquote><h3 id="3-4-微服务"><a href="#3-4-微服务" class="headerlink" title="3.4 微服务"></a>3.4 微服务</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713591862346.png" alt="微服务"></p><blockquote><p>1）方案<br>微服务是基于SOA思想，将系统粒度进一步细化而诞生的一种手段中台化得以实现，各个中心以及前端业务拆解为多个小的服务单元</p><p>2)技术手段<br>微服务经历了从1.0(cloud)到2.0的演化(service mesh)，目前企业中主流的解决方案依然是cloud全家桶Spring Cloud(课题:Spring Cloud微服务前沿技术栈，Spring、Spring Boot源码剖析)</p><p>3)特点<br>服务拆分:粒度并非越小越好。太小会带来部署维护等一系列成本的上升。(课题:skywalking微服务监控)接口约束:系统增多，各个服务接口的规范化日益重要，要求有统一的服务接口规范，推动企业消息总线的建设权限约束:接口不是任意想调就可以调的，做好权限控制，借助oauth2等手段，实现服务之间的权限认证。</p></blockquote><h3 id="3-5-SAO和微服务的关系"><a href="#3-5-SAO和微服务的关系" class="headerlink" title="3.5 SAO和微服务的关系"></a>3.5 SAO和微服务的关系</h3><blockquote><p>SOA是一种面向服务的理念</p><p>微服务是目前主流的服务拆分和架构的方案</p></blockquote><h2 id="4、部署架构"><a href="#4、部署架构" class="headerlink" title="4、部署架构"></a>4、部署架构</h2><h3 id="4-1-单机架构"><a href="#4-1-单机架构" class="headerlink" title="4.1 单机架构"></a>4.1 单机架构</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713592016479.png" alt="单机"></p><blockquote><p>1)方案<br>单台机器的性能很快达到上限，就是所说的资源不足了然后开始提升配置，推动高配机器的发展，成本高昂</p><p>2)特点<br>部署简单:采用web包部署与发布，db等资源同台机器连接，简单易操作。(课题:tomcat源码剖析)<br>资源争夺:在业务发展的初始阶段尚可支撑，随着访问量的上升，单机性能很快会成为系统瓶颈。</p></blockquote><h3 id="4-2-角色划分"><a href="#4-2-角色划分" class="headerlink" title="4.2 角色划分"></a>4.2 角色划分</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713592054369.png" alt="组件拆分"></p><blockquote><p>1)方案<br>多台机器:tomcat与mysql各自独占机器资源针对性扩容:tomcat应用机更注重cpu的运算和内存，mysql更注重io与磁盘性能，针对各自情况扩容(课题:架构设计基础设施保障)</p><p>2)特点<br>数据维护:可以抽出单独的dba来维护数据库服务器数据安全:需要跨机器访问数据库，链接密码需要注意防范泄漏</p></blockquote><h3 id="4-3-应用集群"><a href="#4-3-应用集群" class="headerlink" title="4.3 应用集群"></a>4.3 应用集群</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713592184801.png" alt="集群部署"></p><blockquote><p>1)方案<br>apache:早期负载均衡方案，性能一般<br>Nginx:7层代理，性能强悍，配置简洁，当前不二之选(课题:openresty用户流量控制)<br>haproxy:性能同样可靠，可做7层或4层代理<br>Ivs:4层代理，性能最强，linux集成，配置麻烦(课题:Ivs+keepalived高可用部署实战<br>f5:4层，硬件负载，财大气粗的不二选择</p><p>2)特点<br>session保持:集群环境下，用户登陆需要分布式session做支撑(课题:多维系统下单点登录的深入讲解)<br>分布式协同:分布式环境下对资源的加锁要超出线程锁的范畴，上升为分布式锁<br>调度问题:调度程序不能多台部署，容易跑重复，除非使用分布式调度，如elastic-iob<br>机器状态管理:多台应用机的状态检测与替换需要做到及时性，一般niginx层做故障转移<br>服务升级:滚动升级成为可能，灰度发布<br>日志管理:日志文件分散在各个机器，促进集中式日志平台的产生(课题:集中式日志平台的深入应用)</p></blockquote><h3 id="4-4-异地访问"><a href="#4-4-异地访问" class="headerlink" title="4.4 异地访问"></a>4.4 异地访问</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713592332677.png" alt="异地多活"></p><blockquote><p>1)方案<br>dns轮询:通过配置多个ip将服务部署到多个机房，通过dns的策略轮询调用，可以实现机房层面的扩容<br>CDN:就近原则，使用户获得就近的机房访问相关资源，自己投资太大，购买他方需要付费。<br>2)特点<br>基本解决了机器部署的扩容问题，随着业务的发展，扩容与收缩变得困难，促进资源调度层面的技术发展</p></blockquote><h3 id="4-5-云平台"><a href="#4-5-云平台" class="headerlink" title="4.5 云平台"></a>4.5 云平台</h3><p><img src="/2022/04/20/ke-cheng/kuang-ye-jia-gou-shi/kuang-ye-jia-gou-shi-01-hu-lian-wang-jia-gou-yan-bian/1713592444229.png" alt="云部署"></p><blockquote><p>1)方案<br>虚拟化:vm方案，Openstack，Vmware，VirtualBox<br>容器化:docker<br>编排:swarm，k8s，k3s(课题:运维篇 docker，k8s深入原理与应用)云化:容器化解决了资源的快速伸缩，但仍需要企业自备大量机器资源。推动私有云到企业云进化<br>2)特点<br>资源预估:注意资源的回收，降低资源闲置和浪费，例如大促结束后要及时回收。运维要求:需要运维层面的高度支撑，门槛比较高<br>预估风险:云瘫痪的故障造成的损失不可估量，(openstack垮掉的事故案例)</p></blockquote><h2 id="架构思想"><a href="#架构思想" class="headerlink" title="架构思想"></a>架构思想</h2><p>任何体系的成型不是一蹴而就，随着访问量，数据量的增长，业务需求在推动技术架构的发展变革。<br><strong>1.知行合一，做之前，先考虑意义</strong><br><strong>2.原生优于定制，约定大于配置</strong><br><strong>3.什么都是，最后会沦落到什么都不是</strong><br><strong>4.控制技术欲，不要瞎折腾</strong><br><strong>5.留下扩展，但不要想到100年后</strong><br><strong>6.没有最好的，只有最合适的</strong><br><strong>7.够用就好，玩的越花，风险越大</strong><br><strong>8.简约最美</strong></p>]]></content>
      
      
      <categories>
          
          <category> 狂野架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax 传入数组参数</title>
      <link href="/2022/04/20/qian-duan/ajax-chuan-ru-shu-zu-can-shu/"/>
      <url>/2022/04/20/qian-duan/ajax-chuan-ru-shu-zu-can-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    记录一下<code>ajax</code>在使用数组作为参数时， 前端以及后端<code>ajax</code>请求应该怎么做</p></blockquote><p>前端<code>ajax</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> tssBdUsernames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/tss/customer/queryMerchantBD'</span><span class="token punctuation">,</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tssBdUsernames<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span><span class="token literal-property property">contentType</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span><span class="token literal-property property">traditional</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> htmlBds <span class="token operator">=</span> baseHtml<span class="token punctuation">;</span>bdNums <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> g <span class="token keyword">in</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>htmlBds <span class="token operator">+=</span> <span class="token string">'&lt;option value = "'</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">.</span>merchantInfoId <span class="token operator">+</span> <span class="token string">'"&gt;'</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">.</span>merchantInfoName <span class="token operator">+</span> <span class="token string">'&lt;/option&gt;'</span><span class="token punctuation">}</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#selectMerchantBD"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>htmlBds<span class="token punctuation">)</span><span class="token punctuation">;</span>form<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'select'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要渲染一下</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/customer/queryMerchantBD"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TssBindMerchantVo</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllMerchantInfoNameByTssUserName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tssBDs<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> tssCustomerService<span class="token punctuation">.</span><span class="token function">selectAllMerchantInfoNameByTssUserName</span><span class="token punctuation">(</span>tssBDs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：<code>JSON.parse(jsonstr)</code>是将<code>json</code>字符串转换为<code>json</code>对象</p><p>​                <code>JSON.stringify(jsonobj)</code>是将<code>json</code>对象转换为<code>json</code>字符串</p><p>大数元方案：</p><pre class="line-numbers language-none"><code class="language-none">let orderIds = [];for (let i in selRecords) {orderIds.push(selRecords[i].NT_PAY_VOUCHER_ID);}ivAjax.post(SERVICE_NAME + '/non-tax/push-tax', {nt_pay_voucher_ids: orderIds}@PostMapping("/push-tax")public Map pushNonTaxPay() throws Exception{    String[] paramsJson = getDebtRequestParameters("nt_pay_voucher_ids", -1, "string");    return nonTaxService.pushNonTaxPay(paramsJson);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web获取用户真实IP</title>
      <link href="/2022/04/19/java/ji-chu/web-huo-qu-yong-hu-zhen-shi-ip/"/>
      <url>/2022/04/19/java/ji-chu/web-huo-qu-yong-hu-zhen-shi-ip/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    记录一个获取当前用户的<code>IP</code>地址， 需要通过<code>HttpServletRequest</code></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getIp</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 多次反向代理后会有多个ip值，第一个ip才是真实ip</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> ip<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                ip <span class="token operator">=</span> ip<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"WL-Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"HTTP_CLIENT_IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"HTTP_X_FORWARDED_FOR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-Real-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0:0:0:0:0:0:0:1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取客户端ip: "</span> <span class="token operator">+</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端效验金额 - 正则</title>
      <link href="/2022/04/19/qian-duan/qian-duan-xiao-yan-jin-e-zheng-ze/"/>
      <url>/2022/04/19/qian-duan/qian-duan-xiao-yan-jin-e-zheng-ze/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    记录一条效验交易金额的正则</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> amountReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^[1-9](\d+)?(\.\d{1,2})?$)|(^[1-9]$)|(^\d\.[1-9]{1,2}$)|(^\d\.[0]{1}[1-9]{1}$|(^\d\.[1-9]{1}[0]{1}$)$)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>amountReg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'效验失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'效验成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去掉Vue warn</title>
      <link href="/2022/04/19/qian-duan/qu-diao-vue-warn/"/>
      <url>/2022/04/19/qian-duan/qu-diao-vue-warn/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下如何去掉非报错的 <code>vue warn</code>信息</p></blockquote><p>在main.js 文件中 添加</p><pre class="line-numbers language-none"><code class="language-none">Vue.config.silent = true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css实现居中的几种方案</title>
      <link href="/2022/04/15/qian-duan/css-shi-xian-ju-zhong-de-ji-chong-fang-an/"/>
      <url>/2022/04/15/qian-duan/css-shi-xian-ju-zhong-de-ji-chong-fang-an/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    转自</p><p><a href="http://nicethemes.cn/news/txtlist_i299722v.html#:~:text=css%E7%9A%84%E5%B1%85%E4%B8%AD%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%88%86%E4%B8%BA%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E5%92%8C%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%A7%8D%EF%BC%9A%201.,text-align%3Acenter%20%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%EF%BC%8C%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%20%28%E5%8F%AA%E9%80%82%E7%94%A8%E4%BA%8E%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%2C%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E5%86%85%E7%9A%84%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E5%8F%AF%E4%BB%A5%E5%B1%85%E4%B8%AD%E6%88%96%E8%80%85%E5%B0%86%E6%AD%A4%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E8%AE%BE%E7%BD%AE%E4%B8%BA%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%29">css实现居中的几种方案</a></p></blockquote><h2 id="css的居中，可以分为水平居中和垂直居中，实现居中的方式有以下几种："><a href="#css的居中，可以分为水平居中和垂直居中，实现居中的方式有以下几种：" class="headerlink" title="css的居中，可以分为水平居中和垂直居中，实现居中的方式有以下几种："></a>css的居中，可以分为水平居中和垂直居中，实现居中的方式有以下几种：</h2><p>1.<strong>text-align:center</strong> 块状元素，水平居中(<strong>只适用于块级元素,块级元素内的行内元素可以居中或者将此行内元素设置为块级元素</strong>)</p><p>2.<strong>margin:0 auto</strong> 水平居中 以外边框为参照物，上下外边框距为0，左右外边框距浏览器会自动计算平分</p><p>3.<strong>line-height</strong> 垂直居中 通过设置行间距。line-height只适用于<strong>单行文本</strong>的元素，多行元素不适用。</p><p>4.<strong>float属性+relative定位</strong> 给父元素设置float：left ,然后父元素整体向左移动50%（position:relative;left:50%），这时父元素要清除浮动（clear：both）,然后再给子元素整体向左移动50%(position:relative;left:-50%)</p><p>5.根据<strong>绝对定位absolute+margin</strong>实现水平居中 给父元素一个相对定位relative，利用绝对定位absolute，配合margin：auto自动计算外边距（position: absolute; top: 0;right: 0; bottom: 0; left: 0;margin: auto;）。相对于相对应于relative的绝对定位absolute，需要定宽。relative只是为了给子元素定位用的</p><p>6.使用<strong>absolute绝对定位+translate</strong> 移动转换，实现水平垂直居中 使用百分比来绝对定位一个元素，并配合使用translate，将元素移动定位居中（position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%)）。</p><p>7.利用<strong>table布局</strong>，默认垂直居中（vertical-align:middle） 如果不是table布局的话可以：仿table（display：table-cell）,一样使用vertical-align:middle实现居中对齐</p><p>8.<strong>flex布局</strong> 父元素使用display：flex,设置其属性<strong>justify-content.align-items都为cente</strong>r(display: flex; justify-content: center; align-items: center),实现水平居中</p><p>9.<strong>flex布局+margin</strong> 父元素使用flex布局（display：flex）,子元素使用margin：auto</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> fromt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue动态引入图片</title>
      <link href="/2022/04/15/qian-duan/vue-yin-ru-tu-pian/"/>
      <url>/2022/04/15/qian-duan/vue-yin-ru-tu-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    记录一下vue 在动态引入图片时踩的坑</p></blockquote><p>场景如下：</p><p>​    <code>vue</code> + <code>element ui</code>， 在使用<code>el-carousel</code>走马灯组件时， 想要绑定动态图片， 试了很多方案， 都不行</p><p>贴一个解决方案</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-carousel</span> <span class="token attr-name">trigger</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>click<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>450px<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-carousel-item</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in 4<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>          <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>../src/assets/img/<span class="token punctuation">'</span> + (item - 1) + <span class="token punctuation">'</span>.jpg<span class="token punctuation">'</span><span class="token punctuation">"</span></span>          <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span>        <span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-carousel-item</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-carousel</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图片和文件层级关系如下：</p><p><img src="/2022/04/15/qian-duan/vue-yin-ru-tu-pian/1649986954067.png" alt="层级关系"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> front </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务失效</title>
      <link href="/2022/04/14/java/kuang-jia/spring-transaction-01/"/>
      <url>/2022/04/14/java/kuang-jia/spring-transaction-01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    在工作开发中，遇到了一类奇怪的Bug， </p><p>bug1： 我在类中， 调用了本类的事务方法， 导致<code>Transaction synchronization is not active</code></p><p>事务并没有生效</p></blockquote><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>发生的原因即是再同一个类中， 方法<code>B</code>调用方法<code>A</code>， 调用的是原生方法， 而不是代理对象的方法，因此<code>Spring</code>无法捕获到这次调用，因此也就无法保证事务性。</p><h3 id="解决方法有4："><a href="#解决方法有4：" class="headerlink" title="解决方法有4："></a>解决方法有4：</h3><ul><li><p><code>外抛</code>：</p><p>将事务方法放到另一个类中（或者单独开启一层，取名“事务层”）进行调用，即符合了在对象之间调用的条件。</p></li><li><p><code>手动代理</code>：  </p><p>获取本对象的代理对象，再进行调用。具体操作如：</p><ol><li><p><code>Spring-content.xml</code>上下文中，增加配置：<code>&lt;aop:aspectj-autoproxy expose-proxy="true"/&gt;</code></p></li><li><p>在<code>xxxServiceImpl</code>中，用<code>(xxxService)(AopContext.currentProxy())</code>，获取到<code>xxxService</code>的代理类，再调用事务方法，强行经过代理类，激活事务切面。</p></li></ol></li><li><p><code>异步(类似于外抛)</code>：</p><p>将I/O做成异步操作（如加入线程池），而加入线程池的操作即便加入事务也不会导致事务太长，问题可以迎刃而解。</p></li><li><p><code>注入自己</code>：</p><p>用@Autowired 注入自己 然后在用注入的bean调用自己的方法也可以</p></li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><blockquote><p>​    转自：</p><p><a href="https://zhuanlan.zhihu.com/p/101396825">Spring事务失效的 8 大原因，这次可以吊打面试官了！</a></p></blockquote><h3 id="1、数据库引擎不支持事务"><a href="#1、数据库引擎不支持事务" class="headerlink" title="1、数据库引擎不支持事务"></a>1、数据库引擎不支持事务</h3><p>这里以 MySQL 为例，其 MyISAM 引擎是不支持事务操作的，InnoDB 才是支持事务的引擎，一般要支持事务都会使用 InnoDB。</p><p>根据 MySQL 的官方文档：</p><blockquote><p><a href="https://link.zhihu.com/?target=https://dev.mysql.com/doc/refman/5.5/en/storage-engine-setting.html">https://dev.mysql.com/doc/refman/5.5/en/storage-engine-setting.html</a></p></blockquote><p>从 MySQL 5.5.5 开始的默认存储引擎是：InnoDB，之前默认的都是：MyISAM，所以这点要值得注意，底层引擎不支持事务再怎么搞都是白搭。</p><h3 id="2、没有被-Spring-管理"><a href="#2、没有被-Spring-管理" class="headerlink" title="2、没有被 Spring 管理"></a>2、没有被 Spring 管理</h3><p>如下面例子所示：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">// @Servicepublic class OrderServiceImpl implements OrderService {    @Transactional    public void updateOrder(Order order) {        // update order    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果此时把 <code>@Service</code> 注解注释掉，这个类就不会被加载成一个 Bean，那这个类就不会被 Spring 管理了，事务自然就失效了。</p><h3 id="3、方法不是-public-的"><a href="#3、方法不是-public-的" class="headerlink" title="3、方法不是 public 的"></a>3、方法不是 public 的</h3><p>以下来自 Spring 官方文档：</p><blockquote><p>When using proxies, you should apply the @Transactional annotation only to methods with public visibility. If you do annotate protected, private or package-visible methods with the @Transactional annotation, no error is raised, but the annotated method does not exhibit the configured transactional settings. Consider the use of AspectJ (see below) if you need to annotate non-public methods.</p></blockquote><p>大概意思就是 <code>@Transactional</code> 只能用于 public 的方法上，否则事务不会失效，如果要用在非 public 方法上，可以开启 <code>AspectJ</code> 代理模式。</p><h3 id="4、自身调用问题"><a href="#4、自身调用问题" class="headerlink" title="4、自身调用问题"></a>4、自身调用问题</h3><p>来看两个示例：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">@Servicepublic class OrderServiceImpl implements OrderService {    public void update(Order order) {        updateOrder(order);    }    @Transactional    public void updateOrder(Order order) {        // update order    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>update方法上面没有加 <code>@Transactional</code> 注解，调用有 <code>@Transactional</code> 注解的 updateOrder 方法，updateOrder 方法上的事务管用吗？</p><p>再来看下面这个例子：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">@Servicepublic class OrderServiceImpl implements OrderService {    @Transactional    public void update(Order order) {        updateOrder(order);    }    @Transactional(propagation = Propagation.REQUIRES_NEW)    public void updateOrder(Order order) {        // update order    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次在 update 方法上加了 <code>@Transactional</code>，updateOrder 加了 <code>REQUIRES_NEW</code> 新开启一个事务，那么新开的事务管用么？</p><p>这两个例子的答案是：不管用！</p><p>因为它们发生了自身调用，就调该类自己的方法，而没有经过 Spring 的代理类，默认只有在外部调用事务才会生效，这也是老生常谈的经典问题了。</p><p>这个的解决方案之一就是在的类中注入自己，用注入的对象再调用另外一个方法，这个不太优雅，另外一个可行的方案可以参考《<a href="https://link.zhihu.com/?target=https://mp.weixin.qq.com/s/1TEBnmWynN4nwc6Q-oZfvw">Spring 如何在一个事务中开启另一个事务？</a>》这篇文章。</p><h3 id="5、数据源没有配置事务管理器"><a href="#5、数据源没有配置事务管理器" class="headerlink" title="5、数据源没有配置事务管理器"></a>5、数据源没有配置事务管理器</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">@Beanpublic PlatformTransactionManager transactionManager(DataSource dataSource) {    return new DataSourceTransactionManager(dataSource);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如上面所示，当前数据源若没有配置事务管理器，那也是白搭！</p><h3 id="6、不支持事务"><a href="#6、不支持事务" class="headerlink" title="6、不支持事务"></a>6、不支持事务</h3><p>来看下面这个例子：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">@Servicepublic class OrderServiceImpl implements OrderService {    @Transactional    public void update(Order order) {        updateOrder(order);    }    @Transactional(propagation = Propagation.NOT_SUPPORTED)    public void updateOrder(Order order) {        // update order    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Propagation.NOT_SUPPORTED：</strong> 表示不以事务运行，当前若存在事务则挂起，详细的可以参考《<a href="https://link.zhihu.com/?target=https://mp.weixin.qq.com/s/RTEMPBB6AFmmdj0uw1SDsg">事务隔离级别和传播机制</a>》这篇文章。</p><p>都主动不支持以事务方式运行了，那事务生效也是白搭！</p><h3 id="7、异常被吃了"><a href="#7、异常被吃了" class="headerlink" title="7、异常被吃了"></a>7、异常被吃了</h3><p>这个也是出现比较多的场景：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">// @Servicepublic class OrderServiceImpl implements OrderService {    @Transactional    public void updateOrder(Order order) {        try {            // update order        } catch {        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把异常吃了，然后又不抛出来，事务怎么回滚吧！</p><h3 id="8、异常类型错误"><a href="#8、异常类型错误" class="headerlink" title="8、异常类型错误"></a>8、异常类型错误</h3><p>上面的例子再抛出一个异常：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">// @Servicepublic class OrderServiceImpl implements OrderService {    @Transactional    public void updateOrder(Order order) {        try {            // update order        } catch {            throw new Exception("更新错误");        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样事务也是不生效的，因为默认回滚的是：RuntimeException，如果你想触发其他异常的回滚，需要在注解上配置一下，如：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">@Transactional(rollbackFor = Exception.class)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个配置仅限于 <code>Throwable</code> 异常类及其子类。</p>]]></content>
      
      
      <categories>
          
          <category> 事务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle更新超时 - 行锁</title>
      <link href="/2022/04/14/shu-ju-ku/dababase-oracle-linelock01/"/>
      <url>/2022/04/14/shu-ju-ku/dababase-oracle-linelock01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    记录一次更新数据库一直超时。</p><p>本质原因是因为事务未关闭， 导致行锁。。。</p></blockquote><h2 id="查看当前数据库存在行锁的用户、SQL等"><a href="#查看当前数据库存在行锁的用户、SQL等" class="headerlink" title="查看当前数据库存在行锁的用户、SQL等"></a>查看当前数据库存在行锁的用户、SQL等</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>sid<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token keyword">serial</span><span class="token comment">#, s.username, s.schemaname, s.osuser, s.process, s.machine, s.terminal, s.logon_time, l.type, a.sql_text, a.action</span><span class="token keyword">FROM</span> v$<span class="token keyword">session</span> s<span class="token punctuation">,</span> v$<span class="token keyword">lock</span> l<span class="token punctuation">,</span> v$sqlarea a<span class="token keyword">WHERE</span> s<span class="token punctuation">.</span>sid <span class="token operator">=</span> l<span class="token punctuation">.</span>sid <span class="token operator">AND</span> s<span class="token punctuation">.</span>username <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">and</span> s<span class="token punctuation">.</span>prev_sql_addr <span class="token operator">=</span> a<span class="token punctuation">.</span>address<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sid<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/14/shu-ju-ku/dababase-oracle-linelock01/1649923097204.png" alt="存在的行锁"></p><h2 id="解除行锁"><a href="#解除行锁" class="headerlink" title="解除行锁"></a>解除行锁</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> system <span class="token keyword">kill</span> <span class="token keyword">session</span><span class="token string">'sid,serial#'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo new 自动打开typora</title>
      <link href="/2022/04/13/gong-ju/build-blog4/"/>
      <url>/2022/04/13/gong-ju/build-blog4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    为了方便<code>hexo</code>的使用， 希望在使用<code>hexo new</code>命令之后， 立即打开<code>typora</code>软件，并显示刚创建的文档， 开始愉快的编辑！</p><p>本文参考：<a href="https://www.mobaijun.com/posts/2964207350.html">Hexo博客新建文章后自动打开编辑器</a> </p></blockquote><p>在<code>hexo</code>根目录中， 创建<code>scripts</code>文件夹(如果没有的话)</p><p>在<code>scripts</code>文件夹中， 任意新建<code>js</code>脚本如<code>auto_open.js</code></p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>编辑以下内容</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var spawn = require('child_process').exec;// Hexo 2.x 用户复制这段//hexo.on('new', function(path){//  spawn('start  "markdown编辑器绝对路径.exe" ' + path);//});//D:\WorkPlace\MarkdownPad\MarkdownPad2.exe 是MakdownPad编辑器在我本地的路径！// Hexo 3 用户复制这段hexo.on('new', function(data){  spawn('start  "markdown编辑器绝对路径.exe" ' + data.path);});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>注意自己的版本， 以及<code>markdown</code>编辑器的绝对路径</strong></em></p><h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> exec <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span><span class="token comment">// Hexo 2.x 用户复制这段</span><span class="token comment">// hexo.on('new', function(path){</span><span class="token comment">//    exec('open -a "markdown编辑器绝对路径.app" ' + path);</span><span class="token comment">//});</span><span class="token comment">// Hexo 3 用户复制这段</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'open -a "markdown编辑器绝对路径.app" '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora vue主题</title>
      <link href="/2022/04/13/gong-ju/typora-01/"/>
      <url>/2022/04/13/gong-ju/typora-01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    转自</p><p><a href="https://blinkfox.github.io/2018/11/19/ruan-jian-gong-ju/markdown/vue-wen-dang-feng-ge-de-typora-zhu-ti/">Vue 文档风格的 Typora 主题</a></p></blockquote><blockquote><p><a href="https://github.com/blinkfox/typora-vue-theme">typora-vue-theme</a> 是 Typora Markdown 文档编辑器中一款类似<a href="https://vuejs.org/">Vue</a>文档风格的主题。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://www.typora.io/">Typora</a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。**<a href="https://github.com/blinkfox/typora-vue-theme">typora-vue-theme</a>就是参考了<a href="https://vuejs.org/">Vue</a>文档风格而开发的一个 Typora 自定义主题**。</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><ol><li>下载本主题中的<code>vue.css</code>、<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹；</li><li>打开 Typora，点击“<strong>偏好设置</strong>” =&gt; “<strong>打开主题文件夹</strong>”按钮，将弹出 Typora 的主题文件夹；</li><li>将下载好的<code>vue.css</code>和<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹放到 Typora 的主题文件夹中；</li><li>关闭并重新打开 Typora，从菜单栏中选择 “<strong>主题</strong>” =&gt; “<strong>Vue</strong>” 或者 “<strong>Vue Dark</strong>” 即可。</li></ol><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/2022/04/13/gong-ju/typora-01/typora-vue-theme-screen-1.png" alt="vue主题效果图1"></p><h3 id="Vue-Dark"><a href="#Vue-Dark" class="headerlink" title="Vue Dark"></a>Vue Dark</h3><p><img src="/2022/04/13/gong-ju/typora-01/screenshot_02.png" alt="vue主题效果2"></p><blockquote><p><strong>感谢</strong>: 本主题中的<code>vue-dark.css</code>来自<a href="https://github.com/MamoruDS/typora-vue-dark-theme">typora-vue-dark-theme</a>.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git refusing to merge unrelated histories错误</title>
      <link href="/2022/04/13/gong-ju/git-02/"/>
      <url>/2022/04/13/gong-ju/git-02/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    转自</p><p><a href="https://cloud.tencent.com/developer/article/1640651">git 出现 fatal: refusing to merge unrelated histories 错误</a></p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>git pull失败，提示： fatal: refusing to merge unrelated histories </p><h2 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h2><p>因为两个根本不相干的 git 库， 一个是本地库， 一个是远端库， 然后本地要去推送到远端， 远端觉得这个本地库跟自己不相干， 所以告知无法合并</p><h2 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h2><p>git clone远程仓库到本地，将需要推送的内容放到该仓库下 ， 然后提交上去 ， 这样算是一次update操作</p><h2 id="解决方案二"><a href="#解决方案二" class="headerlink" title="解决方案二"></a>解决方案二</h2><p>使用强制命令</p><p>git pull origin master –allow-unrelated-historie </p><p>后面加上 –allow-unrelated-histories  ， 把两段不相干的分支进行强行合；这里可能会进入一个编辑页面，只需要先ESC，然后敲:q! 即可</p><p>后面再push就可以了 git push -u origin master </p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windwos bat编程</title>
      <link href="/2022/04/12/gong-ju/windwos-bat-01/"/>
      <url>/2022/04/12/gong-ju/windwos-bat-01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    在开发<code>squ.bat</code>批量压缩图片脚本的时候，属实被<code>bat</code>折磨到了。。。</p><p>查阅了无数的资料，这里简单记载一下吧！</p></blockquote><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><h3 id="普通传参"><a href="#普通传参" class="headerlink" title="普通传参"></a>普通传参</h3><p><code>bat</code>支持<code>%0</code> ~ <code>%9</code>总计十个参数，其中：</p><p><code>%0</code> ：该<code>bat</code>文件名</p><p><code>%1</code> ~ <code>%9</code> ：第<code>1</code>到第<code>9</code>个入参，</p><hr><p><code>%~1</code> ： 为第<code>1</code>个参数去掉空格</p><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p><code>bat</code>通过<code>set</code>命令定义变量</p><p><code>set N=1</code> ：设置变量<code>N</code>值为<code>1</code></p><p><code>set /p N=</code> ：等待用户输入，将用户输入赋值给<code>N</code></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="If-else"><a href="#If-else" class="headerlink" title="If - else"></a>If - else</h3><p>直接贴代码吧，建议就是能写一行就写一样，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo offrem 写一行比较简洁，缺点是每一种判断内不方便写多条语句<span class="token builtin class-name">set</span> <span class="token assign-left variable">varA</span><span class="token operator">=</span>B<span class="token keyword">if</span> <span class="token string">"%varA%"</span><span class="token operator">==</span><span class="token string">"A"</span> <span class="token punctuation">(</span>echo %varA% is A<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token string">"%varA%"</span><span class="token operator">==</span><span class="token string">"B"</span> <span class="token punctuation">(</span>echo %varA% is B<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>echo %varA% is C<span class="token punctuation">)</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo offrem 在这种写法可读性好，也能执行多语句，但兼容性不太好<span class="token builtin class-name">set</span> <span class="token assign-left variable">varA</span><span class="token operator">=</span>B<span class="token keyword">if</span> <span class="token string">"%varA%"</span><span class="token operator">==</span><span class="token string">"A"</span> <span class="token punctuation">(</span>    <span class="token builtin class-name">echo</span> %varA% is A    <span class="token builtin class-name">echo</span> AAA<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token string">"%varA%"</span><span class="token operator">==</span><span class="token string">"B"</span> <span class="token punctuation">(</span>    <span class="token builtin class-name">echo</span> %varA% is B    <span class="token builtin class-name">echo</span> BBB<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>    <span class="token builtin class-name">echo</span> %varA% is C    <span class="token builtin class-name">echo</span> CCC<span class="token punctuation">)</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="For"><a href="#For" class="headerlink" title="For"></a>For</h3><p>遍历字符串</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off<span class="token keyword">for</span>  %%i <span class="token keyword">in</span> <span class="token punctuation">(</span>ABC<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> %%ipause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>​    输出ABC，</p><p>拓展 : 可以通过逗号分隔括号里的内容， 实现打印多次如： (A,B,C)</p><p>输出：</p><p>​    A</p><p>​    B</p><p>​    C</p></blockquote><hr><p>遍历文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off<span class="token keyword">for</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span>*.txt<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> %%ipause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>会遍历当前文件夹所有<code>.txt</code>格式的文件，并打印文件名</p></blockquote><h3 id="获取文件后缀名，文件名等"><a href="#获取文件后缀名，文件名等" class="headerlink" title="获取文件后缀名，文件名等"></a>获取文件后缀名，文件名等</h3><p><a href="https://blog.csdn.net/albertsh/article/details/120818017?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=1">https://blog.csdn.net/albertsh/article/details/120818017?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=1</a></p>]]></content>
      
      
      <categories>
          
          <category> windwos批处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试基础</title>
      <link href="/2022/04/12/java/ji-chu/java-mian-shi-chong-nan-dian/"/>
      <url>/2022/04/12/java/ji-chu/java-mian-shi-chong-nan-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面试重难点"><a href="#Java面试重难点" class="headerlink" title="Java面试重难点"></a>Java面试重难点</h1><h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1. 面向对象"></a>1. 面向对象</h2><p><strong>三大特性:</strong></p><ul><li><p>封装: 利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体</p><blockquote><p>优点: </p><ul><li>减少耦合: 可以独立地开发、测试、优化、使用、理解和修改</li><li>减轻维护的负担: 可以更容易被程序员理解，并且在调试的时候可以不影响其他模块</li><li>有效地调节性能: 可以通过剖析确定哪些模块影响了系统的性能</li><li>提高软件的可重用性</li><li>降低了构建大型系统的风险: 即使整个系统不可用，但是这些独立的模块却有可能是可用的</li></ul></blockquote></li><li><p>继承: 通过继承父类，能够实现代码复用，并实现多态</p></li><li><p>多态: 分为编译时多态和运行时多态</p><blockquote><ul><li>​    编译时多态主要指方法的重载</li><li>​    运行时多态指程序中定义的对象引用所指向的具体类型在运行时才确定</li></ul><p>运行时多态有三个条件:</p><ul><li>继承</li><li>覆盖(重写)</li><li>向上转型</li></ul></blockquote></li></ul><h2 id="2-基础"><a href="#2-基础" class="headerlink" title="2. 基础"></a>2. 基础</h2><p><strong>Integer缓存池</strong></p><p><code>new Integer()</code>每次会新建一个对象，而<code>valueOf()</code>则会使用到缓存池中的对象(-128~127)，而在<code>自动装箱</code>时，调用的便是<code>valueOf()</code>方法，因此会使用缓存池的对象</p><p><strong>String不可变的好处</strong></p><p>由于String底层是<code>char[]</code>，同时使用了<code>final</code>关键字修饰，因此String是不可变的，不可变的好处有以下几点:</p><blockquote><p>​    <strong>1. 可以缓存 hash 值</strong></p><p>​    <strong>2. String Pool 的需要</strong></p><p>​    <strong>3. 安全性</strong></p><p>​    <strong>4. 线程安全</strong></p></blockquote><p><strong>String的intern()</strong></p><p>对于<code>new</code>的String对象，不会放入常量池中，而对于<code>=</code>赋值的字符串，会放入常量池中，<code>intern()</code>能够将一个<code>String</code>放入常量池中(如果不在)，并返回该String在常量池中的引用</p><p><strong>字符串常量池存储在哪</strong></p><p><img src="/2022/04/12/java/ji-chu/java-mian-shi-chong-nan-dian/1655175412396.png" alt="1655175412396"></p><p><strong>实现拷贝</strong></p><p><code>clone()</code>是<code>Object</code>的<code>protected</code>方法，若未实现<code>Cloneable</code>接口，则会抛出异常<code>CloneNotSupportedException </code>，<code>Cloneable</code>接口并未定义<code>clone()</code>方法，只是限制了若未实现该接口，无法使用<code>clone()</code>方法</p><blockquote><p>​    建议使用<code>拷贝构造函数</code>实现克隆，而不是<code>clone()</code>方法</p></blockquote><p><strong>初始化顺序</strong></p><p>静态变量&gt;静态代码块&gt;实例变量&gt;非静态代码块&gt;构造函数</p><p>且 父类&gt;子类</p><p><strong>注意点:</strong></p><blockquote><p><strong>怎么将 byte 转换为 String?</strong></p><p>可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。</p><p><strong>Java 中怎样将 bytes 转换为 long 类型?</strong></p><p>String接收bytes的构造器转成String，再Long.parseLong</p><p> <strong>a = a + b 与 a += b 的区别</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>b <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// error : cannot convert from int to byte</span>b <span class="token operator">+=</span> a<span class="token punctuation">;</span> <span class="token comment">// ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错</p></blockquote><p><strong>JDK1.7新特性</strong></p><blockquote><ul><li>try with resource</li><li>允许switch中存在string变量和文本</li><li>一个catch中可以捕获多个异常 <code>|</code></li></ul></blockquote><h2 id="3-泛型"><a href="#3-泛型" class="headerlink" title="3. 泛型"></a>3. 泛型</h2><p>**定义:**泛型本质是参数化类型，通过泛型形参限制具体的类型。Java中泛型是伪泛型，仅仅在编译前进行类型限制，编译期会进行<code>类型擦除</code>，替换为具体的参数化类型。</p><p><strong>泛型的上下限</strong>: 泛型的定义支持上下限，如下:</p><ul><li>泛型上限:<code> &lt;? extends A&gt;</code>表示泛型上限是A，类型擦除到类型A，用A来替换具体参数类型。参数化的类型可能是所指定的类型，或者是此类型的子类。</li><li>泛型下限:<code>&lt;? super E&gt;</code>表示泛型下限是E，参数化的类型可能是指定的类型，也可能是指定类型的父类。</li></ul><p><strong>多个泛型限制:</strong> <code>&lt;T extends Staff &amp; Passenger&gt;</code></p><p><strong>如何定义泛型数组:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> list11 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//编译错误，非法创建 </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> list12 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//编译错误，需要强转类型 </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> list13 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//OK，但是会有警告 </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> list14 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//编译错误，非法创建 </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> list15 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//OK </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> list6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//OK，但是会有警告</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合理使用:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ArrayWithTypeToken</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    array <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>泛型的类型擦除:</strong></p><ol><li><p>类型擦除原则:</p><ul><li><p>消除类型参数声明，即删除<code>&lt;&gt;</code>及其包围的部分。</p></li><li><p>根据类型参数的上下界推断并替换所有的类型参数为原生态类型：如果类型参数是无限制通配符或没有上下界限定则替换为Object，如果存在上下界限定则根据子类替换原则取类型参数的最左边限定类型（即父类）。</p></li><li><p>为了保证类型安全，必要时插入强制类型转换代码。</p></li><li><p>自动产生“桥接方法”以保证擦除类型后的代码仍然具有泛型的“多态性”。</p><p><img src="/2022/04/12/java/ji-chu/java-mian-shi-chong-nan-dian/1655169625120.png" alt="1655169625120"></p></li></ul></li><li><p>类型擦除口诀:<code>extends</code>擦除到泛型的下界，<code>super</code>时擦除到类型的上界，无上下界时均擦除为<code>Object</code></p><blockquote><p>如<code>&lt;T extends Number&gt;</code>和<code>&lt;? extends Number&gt;</code>的类型参数被替换为<code>Number</code>，<code>&lt;? super Number&gt;</code>被替换为Object。</p></blockquote></li><li><p>类型擦除验证:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> list2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于集合泛型为<code>T</code>，擦除为<code>Object</code>，因此两集合实际类型相同，都是<code>ArrayList&lt;Object&gt;</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//这样调用 add 方法只能存储整形，因为泛型类型的实例为 Integer</span>        list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"asd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于类型擦除，在编译期已经擦除为<code>Object</code>，在通过反射调用<code>add</code>时，能够绕过编译前检查，成功插入<code>String</code>类型的成员</p></blockquote></li></ol><p><strong>泛型类型检查是针对引用的</strong></p><pre class="line-numbers language-none"><code class="language-none">ArrayList&lt;String&gt; list1 = new ArrayList(); //第一种 情况ArrayList list2 = new ArrayList&lt;String&gt;(); //第二种 情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>​    在第一种情况中，泛型是有用的，因为泛型均是针对引用的，引用<code>list1</code>的泛型就是<code>&lt;String&gt;</code>，而在第二种情况中，引用<code>list2</code>不存在泛型，因此其实际类型是<code>Object</code></p></blockquote><p><strong>类型擦除与多态及桥方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DateInter</span> <span class="token keyword">extends</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Date</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于类型擦除的存在，父类泛型<code>Date</code>会被擦除为<code>Object</code>，因此实际上<code>setValue</code>和<code>getValue</code>的参数以及返回类型为<code>Object</code></p></blockquote><p>如何解决:</p><p>​    通过分析字节码，可以发现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>tao<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>DateInter</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>tao<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>tao<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>DateInter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Code</span><span class="token operator">:</span>         <span class="token number">0</span><span class="token operator">:</span> aload_0         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">8</span>                  <span class="token comment">// Method com/tao/test/Pair."&lt;init&gt;":()V  </span>       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//我们重写的setValue方法  </span>    <span class="token class-name">Code</span><span class="token operator">:</span>         <span class="token number">0</span><span class="token operator">:</span> aload_0         <span class="token number">1</span><span class="token operator">:</span> aload_1         <span class="token number">2</span><span class="token operator">:</span> invokespecial #<span class="token number">16</span>                 <span class="token comment">// Method com/tao/test/Pair.setValue:(Ljava/lang/Object;)V  </span>       <span class="token number">5</span><span class="token operator">:</span> <span class="token keyword">return</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//我们重写的getValue方法  </span>    <span class="token class-name">Code</span><span class="token operator">:</span>         <span class="token number">0</span><span class="token operator">:</span> aload_0         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">23</span>                 <span class="token comment">// Method com/tao/test/Pair.getValue:()Ljava/lang/Object;  </span>       <span class="token number">4</span><span class="token operator">:</span> checkcast     #<span class="token number">26</span>                 <span class="token comment">// class java/util/Date  </span>       <span class="token number">7</span><span class="token operator">:</span> areturn    <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//编译时由编译器生成的桥方法  </span>    <span class="token class-name">Code</span><span class="token operator">:</span>         <span class="token number">0</span><span class="token operator">:</span> aload_0         <span class="token number">1</span><span class="token operator">:</span> invokevirtual #<span class="token number">28</span>                 <span class="token comment">// Method getValue:()Ljava/util/Date 去调用我们重写的getValue方法;  </span>       <span class="token number">4</span><span class="token operator">:</span> areturn    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//编译时由编译器生成的桥方法  </span>    <span class="token class-name">Code</span><span class="token operator">:</span>         <span class="token number">0</span><span class="token operator">:</span> aload_0         <span class="token number">1</span><span class="token operator">:</span> aload_1         <span class="token number">2</span><span class="token operator">:</span> checkcast     #<span class="token number">26</span>                 <span class="token comment">// class java/util/Date  </span>       <span class="token number">5</span><span class="token operator">:</span> invokevirtual #<span class="token number">30</span>                 <span class="token comment">// Method setValue:(Ljava/util/Date; 去调用我们重写的setValue方法)V  </span>       <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    最后两个方法便是生成的桥方法</p></blockquote><p><strong>为什么泛型没有基本数据类型</strong></p><p>通过对泛型的学习，可以认识到，最后都会进行泛型擦除，比如<code>&lt;T&gt;</code>会擦除为<code>Objcet</code>，而基本数据类型不能被<code>Object</code>存储</p><p><strong>为什么泛型无法被实例化</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">T</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERROR</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>​    因为在编译期才能确定具体的类型，找不到对应的<code>.class</code>文件</p></blockquote><p><strong>如何获取泛型的参数类型</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">GenericType</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> genericType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericType</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Type</span> superclass <span class="token operator">=</span> genericType<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getActualTypeArguments 返回确切的泛型参数, 如Map&lt;String, Integer&gt;返回[String, Integer]</span><span class="token class-name">Type</span> type <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> superclass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//class java.lang.String</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    通过获取类的<code>class</code>再通过<code>getGenericSuperclass()</code>，能够获取<code>Type</code>对象，基于<code>Type</code>对象能够获取泛型的具体参数类型</p></blockquote><h2 id="4-注解"><a href="#4-注解" class="headerlink" title="4. 注解"></a>4. 注解</h2><p><strong>案例:AOP实现日志打印</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>PARAMETER<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 模块      */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 功能     */</span>    <span class="token keyword">public</span> <span class="token class-name">BusinessType</span> <span class="token function">businessType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">BusinessType</span><span class="token punctuation">.</span>OTHER<span class="token punctuation">;</span>    <span class="token comment">/**     * 操作人类别     */</span>    <span class="token keyword">public</span> <span class="token class-name">OperatorType</span> <span class="token function">operatorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">OperatorType</span><span class="token punctuation">.</span>MANAGE<span class="token punctuation">;</span>    <span class="token comment">/**     * 是否保存请求的参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSaveRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogAspect</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 配置织入点 - 自定义注解的包路径     *      */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.xxx.aspectj.lang.annotation.Log)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 处理完请求后执行     *     * @param joinPoint 切点     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">"logPointCut()"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"jsonResult"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> jsonResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleLog</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> jsonResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 拦截异常操作     *      * @param joinPoint 切点     * @param e 异常     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"logPointCut()"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterThrowing</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleLog</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleLog</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Exception</span> e<span class="token punctuation">,</span> <span class="token class-name">Object</span> jsonResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 获得注解</span>            <span class="token class-name">Log</span> controllerLog <span class="token operator">=</span> <span class="token function">getAnnotationLog</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>controllerLog <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 获取当前的用户</span>            <span class="token class-name">User</span> currentUser <span class="token operator">=</span> <span class="token class-name">ShiroUtils</span><span class="token punctuation">.</span><span class="token function">getSysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// *========数据库日志=========*//</span>            <span class="token class-name">OperLog</span> operLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            operLog<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">BusinessStatus</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 请求的地址</span>            <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token class-name">ShiroUtils</span><span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            operLog<span class="token punctuation">.</span><span class="token function">setOperIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 返回参数</span>            operLog<span class="token punctuation">.</span><span class="token function">setJsonResult</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>jsonResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            operLog<span class="token punctuation">.</span><span class="token function">setOperUrl</span><span class="token punctuation">(</span><span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                operLog<span class="token punctuation">.</span><span class="token function">setOperName</span><span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">getLoginName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeptName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    operLog<span class="token punctuation">.</span><span class="token function">setDeptName</span><span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeptName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                operLog<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">BusinessStatus</span><span class="token punctuation">.</span>FAIL<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                operLog<span class="token punctuation">.</span><span class="token function">setErrorMsg</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 设置方法名称</span>            <span class="token class-name">String</span> className <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            operLog<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>className <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">"()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置请求方式</span>            operLog<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 处理设置注解上的参数</span>            <span class="token function">getControllerMethodDescription</span><span class="token punctuation">(</span>controllerLog<span class="token punctuation">,</span> operLog<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 保存数据库</span>            <span class="token class-name">AsyncManager</span><span class="token punctuation">.</span><span class="token function">me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">AsyncFactory</span><span class="token punctuation">.</span><span class="token function">recordOper</span><span class="token punctuation">(</span>operLog<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 记录本地异常日志</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"==前置通知异常=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"异常信息:{}"</span><span class="token punctuation">,</span> exp<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exp<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取注解中对方法的描述信息 用于Controller层注解     *      * @param log 日志     * @param operLog 操作日志     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getControllerMethodDescription</span><span class="token punctuation">(</span><span class="token class-name">Log</span> log<span class="token punctuation">,</span> <span class="token class-name">OperLog</span> operLog<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 设置action动作</span>        operLog<span class="token punctuation">.</span><span class="token function">setBusinessType</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">businessType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置标题</span>        operLog<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置操作人类别</span>        operLog<span class="token punctuation">.</span><span class="token function">setOperatorType</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">operatorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 是否需要保存request，参数和值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isSaveRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 获取参数的信息，传入到数据库中。</span>            <span class="token function">setRequestValue</span><span class="token punctuation">(</span>operLog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取请求的参数，放到log中     *      * @param operLog     * @param request     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setRequestValue</span><span class="token punctuation">(</span><span class="token class-name">OperLog</span> operLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> map <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> params <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        operLog<span class="token punctuation">.</span><span class="token function">setOperParam</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 是否存在注解，如果存在就获取     */</span>    <span class="token keyword">private</span> <span class="token class-name">Log</span> <span class="token function">getAnnotationLog</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MethodSignature</span> methodSignature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> signature<span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> methodSignature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-异常"><a href="#5-异常" class="headerlink" title="5. 异常"></a>5. 异常</h2><p><strong>异常表</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">simpleTryCatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">testNPE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//javap -c Main</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">simpleTryCatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> invokestatic  #<span class="token number">3</span>                  <span class="token comment">// Method testNPE:()V</span>       <span class="token number">3</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">11</span>       <span class="token number">6</span><span class="token operator">:</span> astore_0       <span class="token number">7</span><span class="token operator">:</span> aload_0       <span class="token number">8</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment">// Method java/lang/Exception.printStackTrace:()V</span>      <span class="token number">11</span><span class="token operator">:</span> <span class="token keyword">return</span>    <span class="token class-name">Exception</span> table<span class="token operator">:</span>       from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type           <span class="token number">0</span>     <span class="token number">3</span>     <span class="token number">6</span>   <span class="token class-name">Class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Exception</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    异常表:</p><ul><li><strong>from</strong> 可能发生异常的起始点</li><li><strong>to</strong> 可能发生异常的结束点</li><li><strong>target</strong> 上述from和to之前发生异常后的异常处理者的位置</li><li><strong>type</strong> 异常处理者处理的异常的类信息</li></ul><p><strong>那么异常表用在什么时候呢</strong></p><p>答案是异常发生的时候，当一个异常发生时</p><ul><li>1.JVM会在当前出现异常的方法中，查找异常表，是否有合适的处理者来处理</li><li>2.如果当前方法异常表不为空，并且异常符合处理者的from和to节点，并且type也匹配，则JVM调用位于target的调用者来处理。</li><li>3.如果上一条未找到合理的处理者，则继续查找异常表中的剩余条目</li><li>4.如果当前方法的异常表无法处理，则向上查找（弹栈处理）刚刚调用该方法的调用处，并重复上面的操作。</li><li>5.如果所有的栈帧被弹出，仍然没有处理，则抛给当前的Thread，Thread则会终止。</li><li>6.如果当前Thread为最后一个非守护线程，且未处理异常，则会导致JVM终止运行。</li></ul></blockquote><h2 id="6-多线程"><a href="#6-多线程" class="headerlink" title="6. 多线程"></a>6. 多线程</h2><p><strong>线程安全问题的本质是什么</strong></p><ul><li>cpu增加了多级缓存，以平衡和内存的速度差异;               导致了<code>可见性</code>问题</li><li>操作系统增加了进程、线程，以分时复用cpu，以均衡cpu和I/O设备的差异;                导致了<code>原子性</code>问题</li><li>编译程序优化了指令执行顺序，使得缓存能够更合理利用;                              导致了<code>有序性</code>问题</li></ul><p><strong>如何解决可见性、原子性、有序性</strong></p><ul><li><p>Java保证了简单的读取以及赋值满足原子性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">//语句1: 直接将数值10赋值给x，也就是说线程执行这个语句的会直接将数值10写入到工作内存中</span>y <span class="token operator">=</span> x<span class="token punctuation">;</span>         <span class="token comment">//语句2: 包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 这2个操作都是原子性操作，但是合起来就不是原子性操作了。</span>x<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token comment">//语句3： x++包括3个操作：读取x的值，进行加1操作，写入新的值。</span>x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">//语句4： 同语句3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</p></blockquote></li><li><p>volatile可保证可见性</p><blockquote><p>​    volatile能够保证修改的值能够被立即刷新到主存中，同时synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。</p></blockquote></li><li><p>volatile可保证有序性</p><blockquote><p>​    另外可以通过synchronized和Lock来保证有序性</p></blockquote></li></ul><p><strong>happen-before</strong></p><blockquote><ul><li>单一线程规则:单线程中，前面的操作先于后面的操作</li><li>管程锁定规则:unlock操作先于lock操作</li><li>volatile规则:对volatile变量的写操作先于在这之后的读操作</li><li>线程启动规则:start()方法先于此线程的每个动作</li><li>线程加入规则:Thread对象结束先于join()方法返回</li><li>线程中断规则:对线程interrupt()调用先于检测中断事件发生</li><li>对线终结规则:对象初始化完成先于finalize()方法开始</li><li>传递性:如果操作A先于B，B先于C，那么操作A先于发生操作C</li></ul></blockquote><p><strong>线程安全</strong></p><ul><li><p>不可变对象</p><blockquote><ul><li>final修饰的变量</li><li>String</li><li>枚举类</li><li>Number部分子类(原子变量并非不可变变量)</li></ul></blockquote></li><li><p>绝对线程安全(如局部变量)</p></li><li><p>相对线程安全</p></li><li><p>线程兼容: 可通过锁机制保证线程安全</p></li><li><p>线程对立</p></li></ul><p><strong>线程安全的实现方法</strong></p><ul><li><p>互斥同步: synchronized及ReentrantLock</p></li><li><p>非阻塞同步:CAS</p><blockquote><p>​    ABA问题如何解决:  版本号</p><p>对应实现:<code>AtomicStampedReference </code></p></blockquote></li><li><p>无同步方案:栈封闭、ThreadLocal、可重入代码</p></li></ul><p><strong>Java中主流的锁</strong></p><p><img src="/2022/04/12/java/ji-chu/java-mian-shi-chong-nan-dian/1655192415494.png" alt="主流锁"></p><p><strong>为什么需要自旋锁</strong></p><blockquote><p>​    由于线程上下文切换太耗费时间，而大部分情况下<code>同步资源锁定</code>的时间很短，如果一没获取到资源，便上下文切换，可能得不偿失，而再占用一点点<code>CPU</code>时间片时间，可能就马上能获取到资源</p><p>​    但是自旋也应该有限制，否则<code>CPU</code>便会被无限制占用。</p><p>​    -XX:PreBlockSpin来更改自旋次数，默认是10次</p></blockquote><ul><li><p>熟练掌握Java开发,具备良好的编程习惯与思维,掌握Java常用技术栈Spring、SpringMVC、SpringBoot等，能够熟练进行Web开发</p></li><li><p>熟悉Linux常用命令,部署过大数据集群,使用过腾讯云/阿里云</p></li><li><p>熟练掌握MySQL的使用,了解其原理,并对索引、事务等有一定理解，熟练掌握常用ORM框架Mybatis及Mybatis的使用</p></li><li><p>熟悉前端技术Jquery及Vue,能独立进行网页开发,使用过Ecahrts及ElementUI、LayUI等框架</p></li><li><p>学习过大数据技术栈如Hadoop、Kafak、Flume、Squoop、Zookeeper、Spark等</p></li><li><p>熟练掌握开发工具Maven、Git、Idea等开发工具</p></li><li><p>掌握XXL-JOB、OSS、Apoll、Dubbo等组件使用</p></li><li><p>熟练掌握Java语言，有良好的编程习惯，熟悉常用Java类库API，对JVM内存模型、垃圾收集算法、并发编程等有一定了解</p></li><li><p>熟悉Linux常用命令、网络配置、软件包管理以及权限管理，了解Shell脚本编写，熟悉大数据集群配置以及部署，熟悉阿里云/腾讯云等云服务器的配置以及使用</p></li><li><p>熟悉Mysql基本语句的使用，并对事务索引等原理有一定理解；了解Hive基本原理，熟练掌握hql语句编写，了解数仓建模；了解Redis、Hbase等</p></li><li><p>熟悉Hadoop生态体系，对HDFS架构以及数据读写流程、MapReduce程序编写以及原理、Yarn资源调度、Azkaban任务调度工具、Kafka架构以及原理、Sqoop数据同步工具、Flume数据采集工具、Zookeeper等有一定理解并有过基本使用</p></li><li><p>熟悉Spark Core程序的开发， 熟悉常用算子以及基本原理；熟悉Flink程序开发，熟悉常用算子、自定义Function、Watermark与时间语义的使用与配置</p></li><li><p>熟悉并开发过Java Web项目， 对于基本数据栈HTML/CSS/JavaScript、Spring、Spring Boot、Mybatis-Plus、Vue有基本的了解与使用；对图表绘制工具Echarts、UI框架layui有过基本使用</p></li><li><p>熟练掌握Maven、Git、Idea、Docker等工具的配置以及使用</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis源码研究</title>
      <link href="/2022/04/12/java/kuang-jia/mybatis-yuan-ma-yan-jiu/"/>
      <url>/2022/04/12/java/kuang-jia/mybatis-yuan-ma-yan-jiu/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis源码研究"><a href="#Mybatis源码研究" class="headerlink" title="Mybatis源码研究"></a>Mybatis源码研究</h1><h2 id="1-引入Mybatis并配置"><a href="#1-引入Mybatis并配置" class="headerlink" title="1. 引入Mybatis并配置"></a>1. 引入Mybatis并配置</h2><ol><li>配置pom文件</li><li>配置jdbc.properties等连接信息</li><li>配置mybatis-config.xml核心配置文件</li><li>编写mapper接口类</li><li>配置mapper.xml配置</li></ol><h2 id="2-核心组件"><a href="#2-核心组件" class="headerlink" title="2. 核心组件"></a>2. 核心组件</h2><ul><li><strong>Configuration</strong> MyBatis所有的配置信息都保存在Configuration对象之中，配置文件中的大部分配置都会存储到该类中</li><li><strong>SqlSession</strong> 作为MyBatis工作的主要顶层API，表示和数据库交互时的会话，完成必要数据库增删改查功能</li><li><strong>Executor</strong> MyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护</li><li><strong>StatementHandler</strong> 封装了JDBC Statement操作，负责对JDBC statement 的操作，如设置参数等</li><li><strong>ParameterHandler</strong> 负责对用户传递的参数转换成JDBC Statement 所对应的数据类型</li><li><strong>ResultSetHandler</strong> 负责将JDBC返回的ResultSet结果集对象转换成List类型的集合</li><li><strong>TypeHandler</strong> 负责java数据类型和jdbc数据类型(也可以说是数据表列类型)之间的映射和转换</li><li><strong>MappedStatement</strong> MappedStatement维护一条&lt;select|update|delete|insert&gt;节点的封装</li><li><strong>SqlSource</strong> 负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中，并返回</li><li><strong>BoundSql</strong> 表示动态生成的SQL语句以及相应的参数信息</li></ul><p><img src="/2022/04/12/java/kuang-jia/mybatis-yuan-ma-yan-jiu/v2-2644b426ce5de72ac3166297eff08023_r.jpg" alt="preview"></p><h2 id="3-初始化源码解读-解析xml"><a href="#3-初始化源码解读-解析xml" class="headerlink" title="3. 初始化源码解读(解析xml)"></a>3. 初始化源码解读(解析<code>xml</code>)</h2><p>初始化需要做的工作主要是基于我们的配置<code>mybatis-config.xml</code>核心配置以及<code>xxxMapper.xml</code>的<code>SQL</code>配置,进行解析,并生成相关代理类.</p><ol><li><p>读取配置文件</p><blockquote><ul><li><code>SqlSessionFactoryBuilder.build()</code>:构造<code>XMLConfigBuilder</code>,解析<code>XML</code>配置</li></ul> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">XMLConfigBuilder</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p><strong>(partner_builder)</strong>: 所用设计模式<code>建造者模式</code>, 通过<code>SqlSessionFactoryBuilder</code>构造<code>SqlSessionFactory</code>工厂,将创建与实际构造进行解耦</p></li><li><p>解析配置文件</p><blockquote><ul><li><p>通过<code>parser.parse</code>方法,将<code>XML</code>配置解析为对象,<code>Configuration</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Configuration</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Each XMLConfigBuilder can only be used once."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  parsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token function">parseConfiguration</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"/configuration"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> configuration<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解析主要通过<code>parseConfiguration</code>方法进行解析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseConfiguration</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">// issue #117 read properties first</span>    <span class="token function">propertiesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Properties</span> settings <span class="token operator">=</span> <span class="token function">settingsAsProperties</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">loadCustomVfs</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">loadCustomLogImpl</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">typeAliasesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeAliases"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pluginElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"plugins"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">objectFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">objectWrapperFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectWrapperFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reflectorFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"reflectorFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">settingsElement</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// read it after objectFactory and objectWrapperFactory issue #631</span>    <span class="token function">environmentsElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"environments"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">databaseIdProviderElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"databaseIdProvider"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">typeHandlerElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeHandlers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mapperElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"mappers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing SQL Mapper Configuration. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到,会挨个对配置文件进行解析, 如<code>properties(数据连接配置)</code>, <code>tpeAliases(别名)</code>,<code>settings(缓存/日志)</code>,<code>environments(数据库连接以及事务)</code>… 会将解析好的配置赋值到<code>Configuration</code>属性中</p></li><li><p>解析完成基本配置后,核心需要解析<code>mappers</code>配置, 这里的解析详见<code>mapperElement</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mapperElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> parent<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> child <span class="token operator">:</span> parent<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> mapperPackage <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">addMappers</span><span class="token punctuation">(</span>mapperPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> resource <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> mapperClass <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">XMLMapperBuilder</span> mapperParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> configuration<span class="token punctuation">.</span><span class="token function">getSqlFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mapperParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getUrlAsStream</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">XMLMapperBuilder</span> mapperParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> url<span class="token punctuation">,</span> configuration<span class="token punctuation">.</span><span class="token function">getSqlFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mapperParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> mapperInterface <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">classForName</span><span class="token punctuation">(</span>mapperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>          configuration<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"A mapper element may only specify a url, resource or class, but not more than one."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>mappers</code>中包含多个<code>mapper</code>, 所以这个方法首先是一个循环. 而具体某个<code>mapper</code>的解析而言可以分为两大类</p><blockquote><p><code>mapper</code>包含两种</p><ol><li><p><code>package</code>: 多文件映射,通过制定一个<code>package</code>能够映射该包下的所有<code>mapper</code>配置</p></li><li><p><code>mapper</code>: 如果不是多文件映射,那么一定是单文件映射了,而单文件映射支持三种配置方式:</p></li></ol>   <pre class="line-numbers language-none"><code class="language-none">1. resource: 类路径下某个资源2. url:本地磁盘某个文件3. class:某个类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>以<code>resource</code>方式的<code>mapper</code>具体配置解析为例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">XMLMapperBuilder</span> mapperParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> configuration<span class="token punctuation">.</span><span class="token function">getSqlFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapperParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>**(incorrect)**首先会将当前的资源名称保存在<code>ErrorContext</code>上下文中.<code>ErrorContext</code>是通过<code>ThreadLocal</code>对象,获取的实例,因此每个线程的实际上下文都不一致,能够保证当前<code>上下文</code>是独立属于<code>当前线程</code>的,将<code>resource</code>进行保存之后,在解析<code>resource</code>出现异常的时候,能够提示具体某一个<code>mapper resource</code>出现了问题,方便找到错误.</li><li>得到文件流</li><li>**(partner_builder)**构造解析对象,类似于上面的<code>XMLConfigBuilder</code></li><li><code>parse</code>方法进行解析</li></ol></blockquote></li><li><p>解析<code>mapper</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configuration<span class="token punctuation">.</span><span class="token function">isResourceLoaded</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">configurationElement</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"/mapper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      configuration<span class="token punctuation">.</span><span class="token function">addLoadedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">bindMapperForNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">parsePendingResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parsePendingCacheRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parsePendingStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>判断该资源是否被解析</li><li>解析<code>mapper</code></li></ol></blockquote></li><li><p>解析<code>mapper</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">configurationElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token class-name">String</span> namespace <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"namespace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>namespace <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> namespace<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Mapper's namespace cannot be empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     builderAssistant<span class="token punctuation">.</span><span class="token function">setCurrentNamespace</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">cacheRefElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"cache-ref"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">cacheElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"cache"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">parameterMapElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"/mapper/parameterMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">resultMapElements</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"/mapper/resultMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">sqlElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"/mapper/sql"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"select|insert|update|delete"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing Mapper XML. The XML location is '"</span> <span class="token operator">+</span> resource <span class="token operator">+</span> <span class="token string">"'. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    解析<code>mapper</code>标签的配置项,如<code>namespace</code>,<code>parameterMap</code>,<code>resultMap</code>等,终点关注最后一句<code> buildStatementFromContext(context.evalNodes("select|insert|update|delete"));</code>,是对SQL语句的解析,进入该API</p></blockquote></li><li><p>解析<code>SQL</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getDatabaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> configuration<span class="token punctuation">.</span><span class="token function">getDatabaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">String</span> requiredDatabaseId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> context <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">XMLStatementBuilder</span> statementParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLStatementBuilder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> builderAssistant<span class="token punctuation">,</span> context<span class="token punctuation">,</span> requiredDatabaseId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            statementParser<span class="token punctuation">.</span><span class="token function">parseStatementNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncompleteElementException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            configuration<span class="token punctuation">.</span><span class="token function">addIncompleteStatement</span><span class="token punctuation">(</span>statementParser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    **(partner_builder)**对所有属于<code>select|insert|update|delete</code>的<code>SQL</code>进行循环解析,类似的,首先创建<code>XMLStatementBuilder</code>对象</p><p>​    **(incorrect)**同样的, 对于不合法的<code>SQL</code>会装进<code>configuration</code>中</p></blockquote></li><li><p>解析<code>SQL</code></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public void parseStatementNode() {    String id = context.getStringAttribute("id");    String databaseId = context.getStringAttribute("databaseId");    if (!databaseIdMatchesCurrent(id, databaseId, this.requiredDatabaseId)) {      return;    }    String nodeName = context.getNode().getNodeName();    SqlCommandType sqlCommandType = SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));    boolean isSelect = sqlCommandType == SqlCommandType.SELECT;    boolean flushCache = context.getBooleanAttribute("flushCache", !isSelect);    boolean useCache = context.getBooleanAttribute("useCache", isSelect);    boolean resultOrdered = context.getBooleanAttribute("resultOrdered", false);    // Include Fragments before parsing    XMLIncludeTransformer includeParser = new XMLIncludeTransformer(configuration, builderAssistant);    includeParser.applyIncludes(context.getNode());    String parameterType = context.getStringAttribute("parameterType");    Class&lt;?&gt; parameterTypeClass = resolveClass(parameterType);    String lang = context.getStringAttribute("lang");    LanguageDriver langDriver = getLanguageDriver(lang);    // Parse selectKey after includes and remove them.    processSelectKeyNodes(id, parameterTypeClass, langDriver);    // Parse the SQL (pre: &lt;selectKey&gt; and &lt;include&gt; were parsed and removed)    KeyGenerator keyGenerator;    String keyStatementId = id + SelectKeyGenerator.SELECT_KEY_SUFFIX;    keyStatementId = builderAssistant.applyCurrentNamespace(keyStatementId, true);    if (configuration.hasKeyGenerator(keyStatementId)) {      keyGenerator = configuration.getKeyGenerator(keyStatementId);    } else {      keyGenerator = context.getBooleanAttribute("useGeneratedKeys",          configuration.isUseGeneratedKeys() &amp;&amp; SqlCommandType.INSERT.equals(sqlCommandType))          ? Jdbc3KeyGenerator.INSTANCE : NoKeyGenerator.INSTANCE;    }    SqlSource sqlSource = langDriver.createSqlSource(configuration, context, parameterTypeClass);    StatementType statementType = StatementType.valueOf(context.getStringAttribute("statementType", StatementType.PREPARED.toString()));    Integer fetchSize = context.getIntAttribute("fetchSize");    Integer timeout = context.getIntAttribute("timeout");    String parameterMap = context.getStringAttribute("parameterMap");    String resultType = context.getStringAttribute("resultType");    Class&lt;?&gt; resultTypeClass = resolveClass(resultType);    String resultMap = context.getStringAttribute("resultMap");    String resultSetType = context.getStringAttribute("resultSetType");    ResultSetType resultSetTypeEnum = resolveResultSetType(resultSetType);    if (resultSetTypeEnum == null) {      resultSetTypeEnum = configuration.getDefaultResultSetType();    }    String keyProperty = context.getStringAttribute("keyProperty");    String keyColumn = context.getStringAttribute("keyColumn");    String resultSets = context.getStringAttribute("resultSets");    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,        resultSetTypeEnum, flushCache, useCache, resultOrdered,        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    这个方法很长,实际上就是从定义的<code>&lt;sql&gt;</code>标签中,解析出具体的属性,并通过<code>addMappedStatement</code>方法,将其封装为<code>MappedStatement</code>对象,该对象在第二部分<code>核心组件</code>中有过介绍,要牢记一个<code>SQL</code>语句就对应着一个<code>MapperdStatement</code>对象</p></blockquote></li><li><p>装配<code>SQL</code>(<code>MapperdStatement对象</code>)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">MappedStatement</span> <span class="token function">addMappedStatement</span><span class="token punctuation">(</span>    <span class="token class-name">String</span> id<span class="token punctuation">,</span>    <span class="token class-name">SqlSource</span> sqlSource<span class="token punctuation">,</span>    <span class="token class-name">StatementType</span> statementType<span class="token punctuation">,</span>    <span class="token class-name">SqlCommandType</span> sqlCommandType<span class="token punctuation">,</span>    <span class="token class-name">Integer</span> fetchSize<span class="token punctuation">,</span>    <span class="token class-name">Integer</span> timeout<span class="token punctuation">,</span>    <span class="token class-name">String</span> parameterMap<span class="token punctuation">,</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">,</span>    <span class="token class-name">String</span> resultMap<span class="token punctuation">,</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultType<span class="token punctuation">,</span>    <span class="token class-name">ResultSetType</span> resultSetType<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> flushCache<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> useCache<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> resultOrdered<span class="token punctuation">,</span>    <span class="token class-name">KeyGenerator</span> keyGenerator<span class="token punctuation">,</span>    <span class="token class-name">String</span> keyProperty<span class="token punctuation">,</span>    <span class="token class-name">String</span> keyColumn<span class="token punctuation">,</span>    <span class="token class-name">String</span> databaseId<span class="token punctuation">,</span>    <span class="token class-name">LanguageDriver</span> lang<span class="token punctuation">,</span>    <span class="token class-name">String</span> resultSets<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>unresolvedCacheRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IncompleteElementException</span><span class="token punctuation">(</span><span class="token string">"Cache-ref not yet resolved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    id <span class="token operator">=</span> <span class="token function">applyCurrentNamespace</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isSelect <span class="token operator">=</span> sqlCommandType <span class="token operator">==</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span>SELECT<span class="token punctuation">;</span>    <span class="token class-name">MappedStatement<span class="token punctuation">.</span>Builder</span> statementBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MappedStatement<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> id<span class="token punctuation">,</span> sqlSource<span class="token punctuation">,</span> sqlCommandType<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">fetchSize</span><span class="token punctuation">(</span>fetchSize<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">statementType</span><span class="token punctuation">(</span>statementType<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">keyGenerator</span><span class="token punctuation">(</span>keyGenerator<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">keyProperty</span><span class="token punctuation">(</span>keyProperty<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">keyColumn</span><span class="token punctuation">(</span>keyColumn<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">databaseId</span><span class="token punctuation">(</span>databaseId<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">lang</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">resultOrdered</span><span class="token punctuation">(</span>resultOrdered<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">resultSets</span><span class="token punctuation">(</span>resultSets<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">resultMaps</span><span class="token punctuation">(</span><span class="token function">getStatementResultMaps</span><span class="token punctuation">(</span>resultMap<span class="token punctuation">,</span> resultType<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">resultSetType</span><span class="token punctuation">(</span>resultSetType<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">flushCacheRequired</span><span class="token punctuation">(</span><span class="token function">valueOrDefault</span><span class="token punctuation">(</span>flushCache<span class="token punctuation">,</span> <span class="token operator">!</span>isSelect<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">useCache</span><span class="token punctuation">(</span><span class="token function">valueOrDefault</span><span class="token punctuation">(</span>useCache<span class="token punctuation">,</span> isSelect<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">cache</span><span class="token punctuation">(</span>currentCache<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ParameterMap</span> statementParameterMap <span class="token operator">=</span> <span class="token function">getStatementParameterMap</span><span class="token punctuation">(</span>parameterMap<span class="token punctuation">,</span> parameterType<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>statementParameterMap <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        statementBuilder<span class="token punctuation">.</span><span class="token function">parameterMap</span><span class="token punctuation">(</span>statementParameterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">MappedStatement</span> statement <span class="token operator">=</span> statementBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    configuration<span class="token punctuation">.</span><span class="token function">addMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> statement<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    这个API我们仅仅需要关注最后三行</p><ol><li><p>基于<code>构造者模式</code>的<code>statementBuilder</code>构造<code>MappedStatement</code>对象</p></li><li><p>装载<code>MappedStatement</code>对象到<code>configuration</code>中(本质上是一个<code>Map</code>)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMappedStatement</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>  mappedStatements<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>返回<code>MappedStatement</code></p></li></ol></blockquote></li></ul></blockquote><blockquote><ul><li><p>​    回到解析<code>Mapper</code>这一步</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configuration<span class="token punctuation">.</span><span class="token function">isResourceLoaded</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">configurationElement</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"/mapper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">addLoadedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bindMapperForNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">parsePendingResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parsePendingCacheRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parsePendingStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    刚才我们已经将<code>configurationElement(parser.evalNode("/mapper"));</code>执行完毕,接下来便是将以读取完毕的<code>mapper</code>资源进行标记, 避免重复读取</p></blockquote></li><li><p>绑定<code>mapper</code>和<code>namespace</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bindMapperForNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> namespace <span class="token operator">=</span> builderAssistant<span class="token punctuation">.</span><span class="token function">getCurrentNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>namespace <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> boundType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        boundType <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">classForName</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// ignore, bound type is not required</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>boundType <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>configuration<span class="token punctuation">.</span><span class="token function">hasMapper</span><span class="token punctuation">(</span>boundType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Spring may not know the real resource name so we set a flag</span>        <span class="token comment">// to prevent loading again this resource from the mapper interface</span>        <span class="token comment">// look at MapperAnnotationBuilder#loadXmlResource</span>        configuration<span class="token punctuation">.</span><span class="token function">addLoadedResource</span><span class="token punctuation">(</span><span class="token string">"namespace:"</span> <span class="token operator">+</span> namespace<span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span>boundType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>通过反射获取<code>namespace</code>的类</li><li>检查<code>configuration</code>中是否已经绑定该<code>namespace</code></li><li>标记<code>namespace</code>已装载,并装载该<code>namespace</code></li></ol></blockquote></li><li><p>添加<code>mapper</code>及其<code>代理类</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">addMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mapperRegistry<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">addMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Type "</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">" is already known to the MapperRegistry."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> loadCompleted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            knownMappers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// It's important that the type is added before the parser is run</span>            <span class="token comment">// otherwise the binding may automatically be attempted by the</span>            <span class="token comment">// mapper parser. If the type is already known, it won't try.</span>            <span class="token class-name">MapperAnnotationBuilder</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperAnnotationBuilder</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>            parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            loadCompleted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadCompleted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                knownMappers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过<code>XmlConfigBuilder</code>解析主配置文件，然后通过<code>XmlMapperBuild</code>解析<code>mappers</code>下映射的所有<code>mapper</code>文件（循环解析）。把每个<code>xml</code>中的各个<code>sql</code>解析成一个个<code>MapperStatement</code>对象装在<code>Configuration</code>维护的一个<code>Map</code>集合中，<code>key</code>值是<code>id</code>，<code>value</code>是<code>mapperstatement</code>对象—–然后把解析过的<code>xml</code>的名字和名称空间装在<code>set</code>集合中，通过名称空间反射生成的<code>mapper</code>的<code>class</code>对象以及<code>class</code>对象的代理对象装在<code>Configuration</code>对象维护的<code>mapperRegistry</code>中的<code>Map</code>中。</p><blockquote><p>​    注意, 以上步骤是<code>resoucre</code>方式的配置步骤.而我们知道,<code>mybatis</code>是支持三种配置的:<code>resouce</code>/<code>url</code>/<code>class</code>, 对于<code>url</code>而言, 本质上也是一个<code>xml</code>文件,实际上和<code>resource</code>引入方式是一致的. 特别的, <code>class</code>和<code>resource</code>/<code>url</code>步骤会相反. </p><p>也就是先生成<code>class</code>对象以及<code>代理对象</code>,再解析<code>mapper</code></p><p>对于多文件配置而言,会调用<code>addMappers</code>循环生成<code>class</code>对象以及<code>代理对象</code>,并解析<code>mapper</code>, 和<code>class</code>的步骤类似</p></blockquote></li></ol><h2 id="4-获取Session会话对象"><a href="#4-获取Session会话对象" class="headerlink" title="4. 获取Session会话对象"></a>4. 获取Session会话对象</h2><p><code>Session</code>是<code>Mybatis</code>的顶层接口,所有增删改查的<code>API</code>操作都要基于<code>Session</code></p><p>入口:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SqlSessionFactory</span> <span class="token punctuation">{</span>  <span class="token class-name">SqlSession</span> <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SqlSession</span> <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SqlSession</span> <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SqlSession</span> <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token class-name">TransactionIsolationLevel</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SqlSession</span> <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span> execType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SqlSession</span> <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span> execType<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SqlSession</span> <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span> execType<span class="token punctuation">,</span> <span class="token class-name">TransactionIsolationLevel</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SqlSession</span> <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span> execType<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Configuration</span> <span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SqlSessionFactory</code>是一个接口,其实现类<code>DefaultSqlSessionFactory</code>具体操作如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">SqlSession</span> <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getDefaultExecutorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">SqlSession</span> <span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span> execType<span class="token punctuation">,</span> <span class="token class-name">TransactionIsolationLevel</span> level<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Transaction</span> tx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">Environment</span> environment <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">TransactionFactory</span> transactionFactory <span class="token operator">=</span> <span class="token function">getTransactionFactoryFromEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        tx <span class="token operator">=</span> transactionFactory<span class="token punctuation">.</span><span class="token function">newTransaction</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Executor</span> executor <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newExecutor</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> execType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">closeTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// may have fetched a connection so lets call close()</span>        <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error opening session.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>创建<code>SqlSession</code></p><blockquote><p>​    如<code>openSessionFromDataSource</code>, 首先会从<code>configuration</code>中获取<code>Environemnt</code>对象.<code>configuration</code>中有我们详细的数据库配置信息.</p><p>​    在此之后, 会创建事务管理对象</p><p>​    最后,会创建<code>Executor</code>, 我们知道, <code>session</code>中会维护<code>Executor</code>来负责<code>sql</code>的执行和查询缓存等.</p></blockquote></li><li><p>创建<code>Executor</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">newExecutor</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span> transaction<span class="token punctuation">,</span> <span class="token class-name">ExecutorType</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> defaultExecutorType <span class="token operator">:</span> executorType<span class="token punctuation">;</span>    executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">ExecutorType</span><span class="token punctuation">.</span>SIMPLE <span class="token operator">:</span> executorType<span class="token punctuation">;</span>    <span class="token class-name">Executor</span> executor<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span>BATCH <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span>REUSE <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReuseExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    executor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Executor</span><span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> executor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    这段代码主要是判断需要生成什么类型的<code>Executor</code>, <code>Mybatis</code>中<code>Executor</code>包括三种, 分别为<code>SIMPLE</code>/<code>RESUME</code>/<code>BATCH</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ExecutorType</span> <span class="token punctuation">{</span>  SIMPLE<span class="token punctuation">,</span> REUSE<span class="token punctuation">,</span> BATCH<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>SimpleExecutor</strong>: 简单执行器，是 MyBatis 中默认使用的执行器，每执行一次 update 或 select，就开启一个 Statement 对象，用完就直接关闭 Statement 对象(可以是 Statement 或者是 PreparedStatment 对象)</p><p><strong>ReuseExecutor</strong>: 可重用执行器，这里的重用指的是重复使用 Statement，它会在内部使用一个 Map 把创建的 Statement 都缓存起来，每次执行 SQL 命令的时候，都会去判断是否存在基于该 SQL 的 Statement 对象，如果存在 Statement 对象并且<strong>对应的 connection 还没有关闭的情况下</strong>就继续使用之前的 Statement 对象，<strong>并将其缓存起来</strong>。</p><p>因为每一个 SqlSession 都有一个新的 Executor 对象，所以我们缓存在 ReuseExecutor 上的Statement 作用域是同一个 SqlSession。</p><p><strong>BatchExecutor</strong>: 批处理执行器，用于将多个SQL一次性输出到数据库</p><p>我们如果没有配置或者指定的话默认生成的就是SimpleExecutor。</p></blockquote></blockquote></li></ol><h2 id="5-执行SQL分析"><a href="#5-执行SQL分析" class="headerlink" title="5. 执行SQL分析"></a>5. 执行SQL分析</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> one <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"com.partner.p01.p01_mybatis.mapper.AgentUserMapper.selectAgentUserById"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"第一次查询: {}, Hash: {}"</span><span class="token punctuation">,</span> one<span class="token punctuation">,</span> one<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> two <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"com.partner.p01.p01_mybatis.mapper.AgentUserMapper.selectAgentUserById"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"第二次查询: {}, Hash: {}"</span><span class="token punctuation">,</span> two<span class="token punctuation">,</span> two<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两次查询实际上打印的对象是一致的, 这是因为<code>Mybatis</code>的缓存机制.</p><blockquote><p>​    <code>Mybatis</code>存在多级缓存:</p><p><code>一级缓存(默认开启)</code>: <code>Session</code>级别的缓存, 查询条件一致, 会从缓存中读取对象</p><p><code>二级缓存</code>:跨<code>Session</code>级别的缓存</p><p>另外, 任何的<code>update</code>/<code>delete</code>操作, 都会导致缓存刷新.</p></blockquote><ol><li><p><code>SelectOne</code>执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Popular vote was to return null on 0 results and throw exception on too many.</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TooManyResultsException</span><span class="token punctuation">(</span><span class="token string">"Expected one result (or null) to be returned by selectOne(), but found: "</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">MappedStatement</span> ms <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> <span class="token function">wrapCollection</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error querying database.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>SqlSession</code>的实现类<code>DefaultSqlSession</code>中,<code>SelectOne</code>实际上调用的是<code>SelectList</code>, 可见查询一条和多条实际上调用的是一个<code>Api</code>, 同时, 查询的结果记录数必须是一条, 否则会抛出异常</p></li><li><p>获取<code>MappedStatement</code>对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">MappedStatement</span> <span class="token function">getMappedStatement</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    可以看到, 从<code>configuration</code>中获取了<code>MappedStatement</code>对象.</p><p>​    <code>MappedStatement</code>是我们在解析<code>XML SQL</code>标签时进行创建的,并将其装载进入了<code>configuration</code>对象维护的<code>Map</code>集合中,其中<code>Key</code>是<code>SQL</code>标签的<code>ID</code>, <code>Value</code>是对应的<code>MappedStatement</code>对象.</p><p>​    获取<code>MappedStatement</code>的原因在于,我们定义在<code>SQL</code>标签中的所有入参类型/出参类型/入参值以及<code>SQL</code>语句等信息都定义在了<code>MappedStatement</code>之中</p></li><li><p>调用<code>Executor</code>并执行<code>Query</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CacheKey</span> key <span class="token operator">=</span> <span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">Cache</span> cache <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">flushCacheIfRequired</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">isUseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resultHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ensureNoOutParams</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> tcm<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                list <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>                tcm<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// issue #578 and #116</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    <strong>partner_consignor</strong>这里首先调用的是<code>CachingExecutor</code>的<code>query</code>方法,可以看到, 如果<code>cache</code>为空的情况下, 会调用<code>delegate</code>的<code>query</code>方法, <code>delegate</code>实际上是<code>SimpleExecutor</code>.(委托者模式)</p><p>​    这里应该是<code>二级缓存</code></p></blockquote><p>所以本质上调用的还是<code>SimpleExecutor</code>的<code>query</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"executing a query"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Executor was closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ms<span class="token punctuation">.</span><span class="token function">isFlushCacheRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        queryStack<span class="token operator">++</span><span class="token punctuation">;</span>        list <span class="token operator">=</span> resultHandler <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> localCache<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">handleLocallyCachedOutputParameters</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> key<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            list <span class="token operator">=</span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        queryStack<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DeferredLoad</span> deferredLoad <span class="token operator">:</span> deferredLoads<span class="token punctuation">)</span> <span class="token punctuation">{</span>            deferredLoad<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// issue #601</span>        deferredLoads<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getLocalCacheScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">LocalCacheScope</span><span class="token punctuation">.</span>STATEMENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// issue #482</span>            <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    首先检查本地缓存中是否存在,若不存在则执行<code>queryFromDatabase</code>,见名知意,从数据库中查询.</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> EXECUTION_PLACEHOLDER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      list <span class="token operator">=</span> <span class="token function">doQuery</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      localCache<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">StatementType</span><span class="token punctuation">.</span>CALLABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      localOutputParameterCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查询完毕之后, 会将其放入缓存</p></blockquote></li><li><p>执行<code>SQL</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">doQuery</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StatementHandler</span> handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​    <code>doQuery</code>首先获取<code>StatementHandler</code>,如第二章所讲,<code>StatementHandler</code>封装了<code>JDBC</code>的操作,能够设置参数等.</p></blockquote><p>一开始就是获取数据库连接，然后执行handler.prepare();这个方法的作用就是根据连接事务啥的创建 会话对象 就是上面jdbc操作中的 第3 步。我们进入这个方法，跟之前一样用到了委托者模式然后也是有两个实现类，一个抽象类有三个儿子。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Statement</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">Integer</span> transactionTimeout<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span> <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Statement</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">Integer</span> transactionTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> transactionTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Statement</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">Integer</span> transactionTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      statement <span class="token operator">=</span> <span class="token function">instantiateStatement</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setStatementTimeout</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> transactionTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setFetchSize</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> statement<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">closeStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">closeStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Error preparing statement.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/12/java/kuang-jia/mybatis-yuan-ma-yan-jiu/v2-4873d594f2ccfcaaae539d282a451a7b_1440w.jpg" alt="img"></p><p>点进去一看是一个接口，不慌走RoutingStatementHandler,这里用到了委托者模式，委托给BaseStatementHandler, 到此就执行到了上面的第三段代码，我们观察这段代码try中的三行代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">statement <span class="token operator">=</span> <span class="token function">instantiateStatement</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setStatementTimeout</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> transactionTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setFetchSize</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面两个就是设置会话对象的属性不重要，重要的是instantiateStatement(connection)，我们点进去看看</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">Statement</span> <span class="token function">instantiateStatement</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token class-name">Statement</span> <span class="token function">instantiateStatement</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getKeyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Jdbc3KeyGenerator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyColumnNames <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getKeyColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>keyColumnNames <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">PreparedStatement</span><span class="token punctuation">.</span>RETURN_GENERATED_KEYS<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> keyColumnNames<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ResultSetType</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ResultSet</span><span class="token punctuation">.</span>CONCUR_READ_ONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点进去是抽象类，不慌，找他的儿子PrepareStatmentHandler,我们发现return的全是prepareStatement预编译会话对象，说明mybatis默认就可以防止注入攻击。</p><p>然后我们返回获取会话对象之前的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Statement</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token class-name">StatementHandler</span> handler<span class="token punctuation">,</span> <span class="token class-name">Log</span> statementLog<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">Statement</span> stmt<span class="token punctuation">;</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span>statementLog<span class="token punctuation">)</span><span class="token punctuation">;</span>    stmt <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handler<span class="token punctuation">.</span><span class="token function">parameterize</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> stmt<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会话对象获取完之后，又执行 了handler.parameterize(stmt);这个执行的步骤基本跟获取会话对象的步骤一模一样，最终执行的是三个儿子之一的PrepareStatementHandler中的parameterize方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parameterize</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    parameterHandler<span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span><span class="token punctuation">)</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你看这里用到了parameterHandler 参数处理器 ，这个处理器我们第二部门组件介绍里面说过 作用是：负责对用户传递的参数转换成JDBC Statement 所对应的数据类型 ， 就是把String转成varchar之类的。</p><p>到这里 我们 获取了数据库连接 ，又获得了会话对象，参数也设置好了，是不是该执行sql了，prepareStatement这个方法就执行完了，我们再返回调用prepareStatement这个方法的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">doQuery</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">StatementHandler</span> handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>      stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看，之前的操作就是为了返回预编译的会话对象，返回后直接执行query方法，我们进入query方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span><span class="token punctuation">)</span> statement<span class="token punctuation">;</span>    ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">.</span><span class="token function">handleResultSets</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们点进去最终执行还是三个儿子中的PrepareStatementHandler的query方法，把会话对象转换成PreparedStatement预编译的会话对象（这里又转换了一次，那之前的理解可能有点误差），然后直接用会话对象调用execute方法，是不是jdbc一模一样，在jdbc中我们获取了会话对象也是调用execute方法。</p><p>sql执行了是不是该处理结果集了，我们看他的return, 用到了resultSetHandler，结果集处理器，这个组件上面的组件介绍提到过，作用是：负责将JDBC返回的ResultSet结果集对象转换成List类型的集合，就是把我们查到的数据转换成list类型，我们现在是selectOne,所以这个集合中只有一条数据。</p><p>到此就把一次查询的步骤说完了，其实说到底就是封装了jdbc操作数据库的步骤，最终还是和jdbc操作数据库的步骤一模一样。他的封装就是为了让我们可以更方便的传参和处理结果集。</p><p>这时候已经把查询出来的一条数据放在缓存中了，再次调用第二条查询语句的话，就不会操作数据库了，而是直接从缓存中拿这条数据。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实习复盘</title>
      <link href="/2022/04/12/gong-zuo/202202-yi-yao-wang/shi-xi-fu-pan/"/>
      <url>/2022/04/12/gong-zuo/202202-yi-yao-wang/shi-xi-fu-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="实习复盘"><a href="#实习复盘" class="headerlink" title="实习复盘"></a>实习复盘</h1><p>2022年2月10 ~ 2022年6月15</p><p>实习期间负责维护销售运营组鹰眼app后台、电销系统后台、CRM后台，支援供应链组WMS系统一个月，从零搭建PIS系统。总计完成需求30+，需求延期0%，线上bug0%。主要完成需求如下:</p><ul><li><p>dataworks导出监控: job每天定时监控mysql导出表业绩数据，并基于apoll实现数据表可配置、查询条件可配置，对于异常情况实时邮件报警，避免客诉。</p><p><img src="/2022/04/12/gong-zuo/202202-yi-yao-wang/shi-xi-fu-pan/1655272306513.png" alt="1655272306513"></p></li><li><p>BD业绩接口优化:对于全国管理者如销售总监，调用业绩接口均会在订单dubbo接口失败，排查后发现数据包大小达到了15MB，而dubbo默认为8MB，调整后仍发现dubbo超时，采用分而治之的思想，将销售总监按照下级进行拆分(拆分为1000+下级)，同时配置apoll拆开查询触发条件(下级&gt;300便触发拆开查询逻辑)，将集合进行拆分为1000/300等份，并保证各子集合数据量一致(降低数据倾斜)，最终将无响应接口优化到200ms之内。</p><p><img src="/2022/04/12/gong-zuo/202202-yi-yao-wang/shi-xi-fu-pan/1655272416732.png" alt="1655272416732"></p></li><li><p>WMS拒收提货列表查询: 该查询查询条件涉及六张表，页面涉及八张表，且为分页查询，同时由于WMS领域拆分，商品、库位、供应商等查询条件表无法join，需调用local api，</p></li></ul><p><img src="/2022/04/12/gong-zuo/202202-yi-yao-wang/shi-xi-fu-pan/1655272258688.png" alt="1655272258688"></p><p><img src="/2022/04/12/gong-zuo/202202-yi-yao-wang/shi-xi-fu-pan/1655272537244.png" alt="1655272537244"></p><ul><li><p>开发通用枚举下拉框接口: 为避免重复开发枚举下拉框接口，使用注解定义需扫描的枚举包，在spring启动时初始化枚举Map Bean， 数据结构Map&lt;String，List&lt;Map&lt;String，String&gt;&gt;&gt;(例如:CustomerType，[{tss:{label:电销，value:1}}]，将所有枚举缓存至Map中，通过枚举名获取下拉框&lt;Label,Value&gt;集合</p></li><li><p>从零搭建pis调价系统:基于爬虫+算法生成调价数据，系统每天同步200w+数据到数据库，并基于调价幅度+规则判断是否存在异常，对无异常数据系统进行调价，有异常数据需要人工审核取消托管或者维持当前价。</p><p>​    主要进行工作:</p><ul><li><p>定义通用入参</p><blockquote><p>​    BaseParam</p><p>​    BaseBatchParam</p><p>​    BasePageParam</p><p>​    IdParam</p></blockquote></li><li><p>定义通用出参</p><blockquote><p>​    Result</p><p>​    PageResult</p></blockquote></li><li><p>定义全局异常以及全局异常处理器，并区分开发环境以及线上环境，对未识别异常进行拦截</p><blockquote><p>​    BaseException</p><p>​    ArgumentException</p><p>​    BusinessException</p><p>​    ServerException</p></blockquote></li><li><p>使用断言工具类+全局异常处理器完成异常处理</p></li><li><p>对于每天200w+的调价日志，设计按星期进行分表，使用范围ID+步长解决全局ID问题</p><blockquote><p><code>auto_increment_offset</code>：表示自增长字段从那个数开始，他的取值范围是1 .. 65535。</p><p><code>auto_increment_increment</code>：表示自增长字段每次递增的量，其默认值是1，取值范围是1 .. 65535。</p></blockquote></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>债务系统-限额流程</title>
      <link href="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong-xian-e-guan-li/"/>
      <url>/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong-xian-e-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="债务系统-限额管理"><a href="#债务系统-限额管理" class="headerlink" title="债务系统-限额管理"></a>债务系统-限额管理</h1><p>整体流程：财政部下达-》省部接收—》省部分解-》省部下达-》市区接收</p><table><thead><tr><th>限额类型</th><th>DATA_TYPE</th></tr></thead><tbody><tr><td>新增债券限额</td><td>01</td></tr><tr><td>再融资债券限额</td><td>03</td></tr><tr><td>债券总限额</td><td>04</td></tr></tbody></table><table><thead><tr><th>单据类型</th><th>BILL_TYPE</th></tr></thead><tbody><tr><td>接收</td><td>01</td></tr><tr><td>限额分解</td><td>02</td></tr><tr><td>调整接收</td><td>03</td></tr><tr><td>总限额调整</td><td>04</td></tr></tbody></table><p><strong>核心表：BAS_MOF_DIV</strong></p><table><thead><tr><th><em><strong>*序号*</strong></em></th><th><em><strong>*字段名称*</strong></em></th><th><em><strong>*中文名称*</strong></em></th><th><em><strong>*类型*</strong></em></th><th><em><strong>*长度*</strong></em></th><th><em><strong>*强制/可选*</strong></em></th><th><em><strong>*库表要素编号*</strong></em></th><th><em><strong>*备注*</strong></em></th></tr></thead><tbody><tr><td>1</td><td>MOF_DIV_ID</td><td>财政区划主键</td><td>String</td><td>38</td><td>M</td><td>BE00001</td><td>主键</td></tr><tr><td>2</td><td>MOF_DIV_CODE</td><td>财政区划代码</td><td>NString</td><td>9</td><td>M</td><td>BE00017</td><td></td></tr><tr><td>3</td><td>MOF_DIV_NAME</td><td>财政区划名称</td><td>GBString</td><td>100</td><td>M</td><td>BE00016</td><td></td></tr><tr><td>4</td><td>PARENT_ID</td><td>父级节点主键</td><td>String</td><td>38</td><td>M</td><td>BE00031</td><td>父级信息项主键</td></tr><tr><td>5</td><td>LEVEL_NO</td><td>级次</td><td>Integer</td><td>2</td><td>M</td><td>BE00018</td><td>当前信息项级次</td></tr><tr><td>6</td><td>IS_LEAF</td><td>是否末级</td><td>Integer</td><td>1</td><td>M</td><td>BE00019</td><td>当前信息项是否为末级节点</td></tr><tr><td>7</td><td>START_DATE</td><td>启用日期</td><td>Date</td><td></td><td>M</td><td>BE00020</td><td>启用日期YYYYMMDD</td></tr><tr><td>8</td><td>END_DATE</td><td>停用日期</td><td>Date</td><td></td><td>M</td><td>BE00021</td><td>结束日期YYYYMMDD</td></tr><tr><td>9</td><td>IS_ENABLED</td><td>是否启用</td><td>Integer</td><td>1</td><td>M</td><td>BE00022</td><td>是否启用</td></tr><tr><td>10</td><td>UPDATE_TIME</td><td>更新时间</td><td>DateTime</td><td></td><td>M</td><td>BE00023</td><td>维护本条信息项的更新时间</td></tr><tr><td>11</td><td>IS_DELETED</td><td>是否删除</td><td>Integer</td><td>1</td><td>M</td><td>BE00030</td><td></td></tr><tr><td>12</td><td>ADM_DIV_CODE</td><td>行政区划代码</td><td>NString</td><td>9</td><td>O</td><td>BE00015</td><td>无对应的行政区划代码的时候为空</td></tr><tr><td>13</td><td>MOF_DIV_TYPE</td><td>行政区划类型</td><td>Integer</td><td>1</td><td>M</td><td>BE00032</td><td>1：中央2：省3：计划单列市4：市5：区（县）级51：省直管县52：其他县6：乡级</td></tr><tr><td>14</td><td>IS_ADMDIV</td><td>是否行政区划</td><td>Integer</td><td>1</td><td>M</td><td>BE00002</td><td>当区划是类似开发区等不存在的新政区划</td></tr><tr><td>15</td><td>PARENT_ADM_DIV_CODE</td><td>上级行政区划代码</td><td>NString</td><td>9</td><td>O</td><td>BE00015</td><td>为中央的时候为空</td></tr><tr><td>16</td><td>IS_STANDARD</td><td>是否标准</td><td>Integer</td><td>1</td><td>M</td><td>BE00035</td><td>0标准代码集1扩展代码集</td></tr><tr><td>17</td><td>CREATE_TIME</td><td>创建时间</td><td>DateTime</td><td></td><td>M</td><td>BE00036</td><td></td></tr></tbody></table><p><strong>核心表：BAS_DEBT_LIMIT</strong></p><table><thead><tr><th><em><strong>*序号*</strong></em></th><th><em><strong>*字段名称*</strong></em></th><th><em><strong>*中文名称*</strong></em></th><th><em><strong>*类型*</strong></em></th><th><em><strong>*长度*</strong></em></th><th><em><strong>*强制/可选*</strong></em></th><th><em><strong>*库表要素编号*</strong></em></th><th><em><strong>*备注*</strong></em></th></tr></thead><tbody><tr><td>1</td><td>DEBT_LIMIT_ID</td><td>债务限额调整唯一标识</td><td>String</td><td>38</td><td>M</td><td>BE00001</td><td>主键</td></tr><tr><td>2</td><td>MOF_DIV_CODE</td><td>来源方财政区划代码</td><td>NString</td><td>9</td><td>M</td><td>BE00017</td><td></td></tr><tr><td>3</td><td>REC_DIV_CODE</td><td>接收方财政区划代码</td><td>NString</td><td>9</td><td>M</td><td>BE00017</td><td></td></tr><tr><td>4</td><td>FISCAL_YEAR</td><td>预算年度</td><td>NString</td><td>4</td><td>M</td><td>BE00029</td><td></td></tr><tr><td>5</td><td>LIMIT_TYPE</td><td>限额类型</td><td>String</td><td>1</td><td>0</td><td></td><td>限额类型：1当年限额2上年结转限额</td></tr><tr><td>6</td><td>BATCH_NO</td><td>进行调整的限额批次</td><td>String</td><td>38</td><td>M</td><td>BE12113</td><td></td></tr><tr><td>7</td><td>REC_DATE</td><td>接收日期</td><td>Date</td><td>8</td><td>0</td><td></td><td></td></tr><tr><td>8</td><td>SPECIAL_DEBT_LIMIT</td><td>专项债务限额调整额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td>专项债务限额，专项债务历年累计限额</td></tr><tr><td>9</td><td>SPECIAL_DEBT_BAL</td><td>专项债务余额，接收方根据发行进度更新（废弃）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>10</td><td>GENERAL_DEBT_LIMIT</td><td>一般债务限额调整额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td>一般债务限额，一般债务历年累计限额</td></tr><tr><td>11</td><td>GENERAL_DEBT_BAL</td><td>一般债务余额，接收方根据发行进度更新（废弃）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>12</td><td>NEW_SPEDEBT_LIMIT</td><td>新增专项债务限额调整额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td>新增专项债务限额，新增专项债务限额包括土地储备专项债务限额、收费公路专项债务限额、棚改专项债务限额和其他专项债务限额。</td></tr><tr><td>13</td><td>NEW_SPEDEBT_BAL</td><td>新增专项债务余额，接收方根据发行进度更新（废弃）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>14</td><td>LANDBANK_DEBT_LIMIT</td><td>土地储备专项债务限额</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>15</td><td>LANDBANK_DEBT_BAL</td><td>土地储备专项债余额，接收方根据发行进度更新（废弃）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>16</td><td>TURNPIKE_DEBT_LIMIT</td><td>收费公路专项债务限额</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>17</td><td>TURNPIKE_DEBT_BAL</td><td>收费公路专项债务余额，接收方根据发行进度更新（废弃）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>18</td><td>SHEDREFORM_DEBT_LIMIT</td><td>棚改专项债务限额</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>19</td><td>SHEDREFORM_DEBT_BAL</td><td>棚改专项债务余额，接收方根据发行进度更新（废弃）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>20</td><td>OTHER_SPEDEBT_LIMIT</td><td>其他专项债务限额</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>21</td><td>OTHER_SPEDEBT_BAL</td><td>其他专项债务余额，接收方根据发行进度更新（废弃）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>22</td><td>NEW_GENDEBT_LIMIT</td><td>新增一般债务限额调整额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td></td></tr><tr><td>23</td><td>NEW_GENDEBT_BAL</td><td>新增一般债务余额，接收方根据发行进度更新（废弃）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>24</td><td>FOREIGN_DEBT_LIMIT</td><td>其中外债限额调整额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td></td></tr><tr><td>25</td><td>SPEDEBT_EXPREFIN_LIMIT</td><td>专项债券到期再融资限额调整额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td></td></tr><tr><td>26</td><td>REPSPE_REFIN_LIMIT</td><td>置换专项债券到期再融资限额调整额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td></td></tr><tr><td>27</td><td>NEWSPE_REFIN_LIMIT</td><td>新增专项债券到期再融资限额调整额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td></td></tr><tr><td>28</td><td>REFSPE_REP_LIMIT</td><td>用于偿还置换专项债券的再融资债券到期再融资限额调整额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td></td></tr><tr><td>29</td><td>REFSPE_NEWSPE_LIMIT</td><td>用于偿还新增专项债券的再融资债券到期再融资限额调整额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td></td></tr><tr><td>30</td><td>SPEDEBT_EXPREFIN_BAL</td><td>专项债券到期再融资余额，接收方根据发行进度更新（废弃）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>31</td><td>OTHDEBT_EXPREFIN_LIMIT</td><td>其他债券到期再融资限额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td></td></tr><tr><td>32</td><td>REPGEN_REFIN_LIMIT</td><td>置换一般债券到期再融资限额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td></td></tr><tr><td>33</td><td>NEWGEN_REFIN_LIMIT</td><td>新增一般债券到期再融资限额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td></td></tr><tr><td>34</td><td>REFGEN_REP_LIMIT</td><td>用于偿还置换一般债券的再融资债券到期再融资限额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td></td></tr><tr><td>35</td><td>REFGEN_NEWSPE_LIMIT</td><td>用于偿还新增一般债券的再融资债券到期再融资限额</td><td>Currency</td><td>20,2</td><td>M</td><td>BE00009</td><td></td></tr><tr><td>36</td><td>OTHDEBT_EXPREFIN_BAL</td><td>其他债券到期再融资余额，接收方根据发行进度更新（废弃）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>37</td><td>REPDEBT_LIMIT</td><td>置换债务限额</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>38</td><td>REPDEBT_BAL</td><td>置换债务余额，接收方根据发行进度更新（废弃）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>39</td><td>UPDATE_TIME</td><td>更新时间</td><td>DateTime</td><td>16</td><td>M</td><td>BE00023</td><td>更新时间</td></tr><tr><td>40</td><td>IS_DELETED</td><td>是否删除</td><td>Integer</td><td>1</td><td>M</td><td>BE00030</td><td>是否删除 (1:删除 2:未删除 默认值2)</td></tr><tr><td>41</td><td>CREATE_TIME</td><td>创建时间</td><td>DateTime</td><td>16</td><td>M</td><td>BE00036</td><td>创建时间</td></tr><tr><td>42</td><td>LIMIT</td><td>债务限额（废弃）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>43</td><td>MOF_AD_CODE</td><td>来源方财政区划代码(9位)</td><td>String</td><td>9</td><td></td><td></td><td></td></tr><tr><td>44</td><td>REC_AD_CODE</td><td>接收方财政区划代码(9位)</td><td>String</td><td>9</td><td></td><td></td><td></td></tr><tr><td>45</td><td>HYZW_AMT</td><td>或有债务</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>46</td><td>BILL_TYPE</td><td>单据类型</td><td>String</td><td>2</td><td></td><td></td><td>单据类型，01接收，02限额分解，03调整接收，04总限额调整</td></tr><tr><td>47</td><td>DATA_TYPE</td><td>数据类型</td><td>NString</td><td>2</td><td>O</td><td></td><td>01新增、03再融资、04总限额</td></tr><tr><td>48</td><td>CREATE_USER</td><td>创建人</td><td>String</td><td>30</td><td></td><td></td><td></td></tr><tr><td>49</td><td>UPDATE_USER</td><td>修改人</td><td>String</td><td>30</td><td></td><td></td><td></td></tr><tr><td>50</td><td>WF_ID</td><td>工作流ID</td><td>NString</td><td>8</td><td>O</td><td></td><td></td></tr><tr><td>51</td><td>WF_STATUS</td><td>工作流状态</td><td>NString</td><td>20</td><td>O</td><td></td><td></td></tr><tr><td>52</td><td>NODE_CURRENT_ID</td><td>当前处理节点</td><td>NString</td><td>8</td><td>O</td><td></td><td></td></tr><tr><td>53</td><td>NODE_NEXT_ID</td><td>下一处理节点</td><td>NString</td><td>8</td><td>O</td><td></td><td></td></tr><tr><td>54</td><td>IS_END</td><td>流程是否结束</td><td>NString</td><td>1</td><td>O</td><td></td><td>0未结束，1已结束</td></tr><tr><td>55</td><td>IS_XD</td><td>限额是否已下达</td><td>String</td><td>1</td><td>0</td><td></td><td>默认0</td></tr><tr><td>56</td><td>HOLD1</td><td>备用字段1</td><td>String</td><td>38</td><td>O</td><td></td><td></td></tr><tr><td>57</td><td>HOLD2</td><td>备用字段2</td><td>String</td><td>38</td><td>O</td><td></td><td></td></tr><tr><td>58</td><td>HOLD3</td><td>备用字段3</td><td>String</td><td>38</td><td>O</td><td></td><td></td></tr><tr><td>59</td><td>HOLD4</td><td>备用字段4</td><td>String</td><td>38</td><td>O</td><td></td><td></td></tr><tr><td>60</td><td>HOLD5</td><td>备用字段5</td><td>String</td><td>38</td><td>O</td><td></td><td></td></tr><tr><td>61</td><td>BATCH_TYPE</td><td>批次类型</td><td>NString</td><td>2</td><td>O</td><td></td><td>01正式批次 02提前批次 默认值01</td></tr><tr><td>62</td><td>SPECIAL_LIMIT_OLD</td><td>专项债务限额调整额（调整前）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>63</td><td>GENERAL_LIMIT_OLD</td><td>一般债务限额调整额（调整前）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>64</td><td>NEW_SPE_LIMIT_OLD</td><td>新增专项债务限额调整额（调整前）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>65</td><td>NEW_GEN_LIMIT_OLD</td><td>新增一般债务限额调整额（调整前）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>66</td><td>FOREIGN_LIMIT_OLD</td><td>外债限额调整额（调整前）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>67</td><td>REPSPE_REFIN_LIMIT_OLD</td><td>置换专项债券到期再融资限额调整额（调整前）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>68</td><td>NEWSPE_REFIN_LIMIT_OLD</td><td>新增专项债券到期再融资限额调整额（调整前）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>69</td><td>REFSPE_REP_LIMIT_OLD</td><td>用于偿还置换专项债券的再融资债券到期再融资限额调整额（调整前）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>70</td><td>REFSPE_NEWSPE_LIMIT_OLD</td><td>用于偿还新增专项债券的再融资债券到期再融资限额调整额（调整前）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>71</td><td>REPGEN_REFIN_LIMIT_OLD</td><td>置换一般债券到期再融资限额（调整前）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>72</td><td>NEWGEN_REFIN_LIMIT_OLD</td><td>新增一般债券到期再融资限额（调整前）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>73</td><td>REFGEN_REP_LIMIT_OLD</td><td>用于偿还置换一般债券的再融资债券到期再融资限额（调整前）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr><tr><td>74</td><td>REFGEN_NEWSPE_LIMIT_OLD</td><td>用于偿还新增一般债券的再融资债券到期再融资限额（调整前）</td><td>Currency</td><td>20,2</td><td>0</td><td></td><td></td></tr></tbody></table><h2 id="新增债务限额"><a href="#新增债务限额" class="headerlink" title="新增债务限额"></a>新增债务限额</h2><h3 id="列表查询"><a href="#列表查询" class="headerlink" title="列表查询"></a>列表查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>FISCAL_YEAR<span class="token punctuation">,</span>       AD<span class="token punctuation">.</span>NAME                              <span class="token keyword">AS</span>                                     AD_NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BATCH_NO                           <span class="token keyword">AS</span>                                     BATCH_NO<span class="token punctuation">,</span>       <span class="token punctuation">(</span>NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>NEW_GENDEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span> <span class="token operator">+</span> NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>NEW_SPEDEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">)</span> HJ<span class="token punctuation">,</span>       NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>NEW_GENDEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span>  <span class="token keyword">AS</span>                                     NEW_GENDEBT_LIMIT<span class="token punctuation">,</span>       NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>FOREIGN_DEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span> <span class="token keyword">AS</span>                                     FOREIGN_DEBT_LIMIT<span class="token punctuation">,</span>       NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>NEW_SPEDEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span>  <span class="token keyword">AS</span>                                     NEW_SPEDEBT_LIMIT<span class="token keyword">FROM</span> BAS_DEBT_V_LIMIT T         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> DSY_V_ELE_AD AD <span class="token keyword">ON</span> T<span class="token punctuation">.</span>REC_AD_CODE <span class="token operator">=</span> AD<span class="token punctuation">.</span>CODE<span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>BILL_TYPE <span class="token operator">=</span> <span class="token string">'01'</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>DATA_TYPE <span class="token operator">=</span> <span class="token string">'01'</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>REC_AD_CODE <span class="token operator">=</span> <span class="token number">42</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>FISCAL_YEAR <span class="token operator">=</span> <span class="token number">2022</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> T<span class="token punctuation">.</span>REC_DATE <span class="token keyword">DESC</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>FISCAL_YEAR <span class="token keyword">DESC</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>BATCH_NO <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心表：</p><p><code>债务限额表 BAS_DEBT_LIMIT</code></p><p><code>基础数据表 区划表 BAS_MOF_DIV</code></p><pre class="line-numbers language-none"><code class="language-none">page: 1 分页limit: 20分页start: 0分页fiscal_year: 2022年份batch_no: 批号dw: 3单位mhcx: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="限额接收"><a href="#限额接收" class="headerlink" title="限额接收"></a>限额接收</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DEBT_LIMIT_ID<span class="token punctuation">,</span>       REC_DIV_CODE<span class="token punctuation">,</span>       FISCAL_YEAR<span class="token punctuation">,</span>       LIMIT_TYPE<span class="token punctuation">,</span>       CONCAT<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">,</span> BATCH_NO<span class="token punctuation">)</span> <span class="token keyword">AS</span> BATCH_NO<span class="token punctuation">,</span>       SPECIAL_DEBT_LIMIT<span class="token punctuation">,</span>       SPECIAL_DEBT_BAL<span class="token punctuation">,</span>       GENERAL_DEBT_LIMIT<span class="token punctuation">,</span>       GENERAL_DEBT_BAL<span class="token punctuation">,</span>       NEW_SPEDEBT_LIMIT<span class="token punctuation">,</span>       NEW_SPEDEBT_BAL<span class="token punctuation">,</span>       LANDBANK_DEBT_LIMIT<span class="token punctuation">,</span>       LANDBANK_DEBT_BAL<span class="token punctuation">,</span>       TURNPIKE_DEBT_LIMIT<span class="token punctuation">,</span>       TURNPIKE_DEBT_BAL<span class="token punctuation">,</span>       SHEDREFORM_DEBT_LIMIT<span class="token punctuation">,</span>       SHEDREFORM_DEBT_BAL<span class="token punctuation">,</span>       OTHER_SPEDEBT_LIMIT<span class="token punctuation">,</span>       OTHER_SPEDEBT_BAL<span class="token punctuation">,</span>       NEW_GENDEBT_LIMIT<span class="token punctuation">,</span>       NEW_GENDEBT_BAL<span class="token punctuation">,</span>       FOREIGN_DEBT_LIMIT<span class="token punctuation">,</span>       SPEDEBT_EXPREFIN_LIMIT<span class="token punctuation">,</span>       REPSPE_REFIN_LIMIT<span class="token punctuation">,</span>       NEWSPE_REFIN_LIMIT<span class="token punctuation">,</span>       REFSPE_REP_LIMIT<span class="token punctuation">,</span>       REFSPE_NEWSPE_LIMIT<span class="token punctuation">,</span>       SPEDEBT_EXPREFIN_BAL<span class="token punctuation">,</span>       OTHDEBT_EXPREFIN_LIMIT<span class="token punctuation">,</span>       REPGEN_REFIN_LIMIT<span class="token punctuation">,</span>       NEWGEN_REFIN_LIMIT<span class="token punctuation">,</span>       REFGEN_REP_LIMIT<span class="token punctuation">,</span>       REFGEN_NEWSPE_LIMIT<span class="token punctuation">,</span>       OTHDEBT_EXPREFIN_BAL<span class="token punctuation">,</span>       REPDEBT_LIMIT<span class="token punctuation">,</span>       REPDEBT_BAL<span class="token punctuation">,</span>       <span class="token keyword">LIMIT</span><span class="token keyword">FROM</span> BAS_DEBT_V_LIMIT<span class="token keyword">WHERE</span> BILL_TYPE <span class="token operator">=</span> <span class="token string">'01'</span>  <span class="token operator">AND</span> DATA_TYPE <span class="token operator">=</span> <span class="token string">'03'</span>  <span class="token operator">AND</span> MOF_DIV_CODE <span class="token operator">=</span> <span class="token string">'42'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>MOF_DIV_CODE</code>来源为本区划</p><h3 id="限额分解录入"><a href="#限额分解录入" class="headerlink" title="限额分解录入"></a>限额分解录入</h3><h4 id="列表查询-1"><a href="#列表查询-1" class="headerlink" title="列表查询"></a>列表查询</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>DEBT_LIMIT_ID<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>FISCAL_YEAR<span class="token punctuation">,</span>       AD<span class="token punctuation">.</span>NAME                                                      AD_NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BATCH_NO<span class="token punctuation">,</span>       NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>NEW_GENDEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>NEW_SPEDEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> NEW_DEBT_LIMIT<span class="token punctuation">,</span>       NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>NEW_GENDEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                               <span class="token keyword">AS</span> NEW_GENDEBT_LIMIT<span class="token punctuation">,</span>       NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>FOREIGN_DEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                              <span class="token keyword">AS</span> FOREIGN_DEBT_LIMIT<span class="token punctuation">,</span>       NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>NEW_SPEDEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                               <span class="token keyword">AS</span> NEW_SPEDEBT_LIMIT<span class="token keyword">FROM</span> BAS_DEBT_V_LIMIT T         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> DSY_V_ELE_AD AD <span class="token keyword">ON</span> T<span class="token punctuation">.</span>REC_AD_CODE <span class="token operator">=</span> AD<span class="token punctuation">.</span>CODE<span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>BILL_TYPE <span class="token operator">=</span> <span class="token string">'02'</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>DATA_TYPE <span class="token operator">=</span> <span class="token string">'01'</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>IS_DELETED <span class="token operator">=</span> <span class="token string">'2'</span>  <span class="token operator">and</span> T<span class="token punctuation">.</span>ad_code <span class="token operator">like</span> concat<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>ad_code <span class="token operator">like</span> concat<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span>  <span class="token operator">and</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span>             <span class="token keyword">from</span> dsy_t_wf_task_complete wf             <span class="token keyword">where</span> wf<span class="token punctuation">.</span>wf_id <span class="token operator">=</span> concat<span class="token punctuation">(</span>T<span class="token punctuation">.</span>wf_id<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>               <span class="token operator">and</span> wf<span class="token punctuation">.</span>node_current_id <span class="token operator">=</span> <span class="token number">1</span>               <span class="token operator">and</span> wf<span class="token punctuation">.</span>ywsj_id <span class="token operator">=</span> T<span class="token punctuation">.</span>DEBT_LIMIT_ID<span class="token punctuation">)</span>  <span class="token operator">and</span> T<span class="token punctuation">.</span>WF_ID <span class="token operator">=</span> <span class="token number">100110</span>  <span class="token operator">and</span> <span class="token punctuation">(</span>T<span class="token punctuation">.</span>NODE_CURRENT_ID <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">or</span> <span class="token punctuation">(</span>T<span class="token punctuation">.</span>NODE_CURRENT_ID <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> T<span class="token punctuation">.</span>WF_STATUS <span class="token operator">!=</span> <span class="token string">'001'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>FISCAL_YEAR <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心表：</p><p><code>债务限额表 BAS_DEBT_LIMIT</code></p><p><code>基础数据表 区划表 BAS_MOF_DIV</code></p><h4 id="录入"><a href="#录入" class="headerlink" title="录入"></a>录入</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> BAS_DEBT_LIMIT <span class="token punctuation">(</span>DEBT_LIMIT_ID<span class="token punctuation">,</span> REC_DIV_CODE<span class="token punctuation">,</span>                            MOF_DIV_CODE<span class="token punctuation">,</span> FISCAL_YEAR<span class="token punctuation">,</span> BATCH_NO<span class="token punctuation">,</span> NEW_GENDEBT_LIMIT<span class="token punctuation">,</span>                            FOREIGN_DEBT_LIMIT<span class="token punctuation">,</span> NEW_SPEDEBT_LIMIT<span class="token punctuation">,</span> WF_ID<span class="token punctuation">,</span> NODE_CURRENT_ID<span class="token punctuation">,</span>                            NODE_NEXT_ID<span class="token punctuation">,</span> WF_STATUS<span class="token punctuation">,</span> IS_END<span class="token punctuation">,</span> MOF_AD_CODE<span class="token punctuation">,</span> REC_AD_CODE<span class="token punctuation">,</span>                                BILL_TYPE<span class="token punctuation">,</span> DATA_TYPE<span class="token punctuation">,</span>                             CREATE_USER<span class="token punctuation">,</span>                            CREATE_TIME<span class="token punctuation">,</span> LIMIT_TYPE<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span>?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> <span class="token string">'02'</span><span class="token punctuation">,</span> <span class="token string">'01'</span><span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> ?<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="限额分解下达"><a href="#限额分解下达" class="headerlink" title="限额分解下达"></a>限额分解下达</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> BAS_DEBT_LIMIT <span class="token keyword">SET</span> IS_XD<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">,</span>UPDATE_USER<span class="token operator">=</span>?<span class="token punctuation">,</span>UPDATE_TIME<span class="token operator">=</span>? <span class="token keyword">WHERE</span> DEBT_LIMIT_ID<span class="token operator">=</span>?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="限额调整录入"><a href="#限额调整录入" class="headerlink" title="限额调整录入"></a>限额调整录入</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>LIMIT_ADJ_ID<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>REC_AD_CODE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>REC_DIV_CODE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>FISCAL_YEAR<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BATCH_NO<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>ADJUST_REASON<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>AD_NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>NEW_SPE_LIMIT_ADJ  <span class="token keyword">AS</span> NEW_SPE_LIMIT_ADJ<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>NEW_GEN_LIMIT_ADJ  <span class="token keyword">AS</span> NEW_GEN_LIMIT_ADJ<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>FOREIGN_LIMIT_ADJ  <span class="token keyword">AS</span> FOREIGN_LIMIT_ADJ<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>NEW_GENDEBT_LIMIT  <span class="token keyword">AS</span> NEW_GENDEBT_LIMIT<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>NEW_LIMIT_SUM_ADJ  <span class="token keyword">AS</span> NEW_LIMIT_SUM_ADJ<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>NEW_SPEDEBT_LIMIT  <span class="token keyword">AS</span> NEW_SPEDEBT_LIMIT<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>FOREIGN_DEBT_LIMIT <span class="token keyword">AS</span> FOREIGN_DEBT_LIMIT<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>NEW_LIMIT_SUM      <span class="token keyword">AS</span> NEW_LIMIT_SUM<span class="token keyword">FROM</span> GD_DEBT_V_LIMIT_ADJ_LIMIT T<span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>DATA_TYPE <span class="token operator">=</span> <span class="token string">'01'</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>IS_DELETED <span class="token operator">=</span> <span class="token number">2</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>FISCAL_YEAR <span class="token operator">=</span> <span class="token number">2022</span>  <span class="token operator">and</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span>             <span class="token keyword">from</span> dsy_t_wf_task_complete wf             <span class="token keyword">where</span> wf<span class="token punctuation">.</span>wf_id <span class="token operator">=</span> concat<span class="token punctuation">(</span>T<span class="token punctuation">.</span>wf_id<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>               <span class="token operator">and</span> wf<span class="token punctuation">.</span>node_current_id <span class="token operator">=</span> <span class="token number">1</span>               <span class="token operator">and</span> wf<span class="token punctuation">.</span>ywsj_id <span class="token operator">=</span> T<span class="token punctuation">.</span>LIMIT_ADJ_ID<span class="token punctuation">)</span>  <span class="token operator">and</span> T<span class="token punctuation">.</span>WF_ID <span class="token operator">=</span> <span class="token number">100115</span>  <span class="token operator">and</span> <span class="token punctuation">(</span>T<span class="token punctuation">.</span>NODE_CURRENT_ID <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">or</span> <span class="token punctuation">(</span>T<span class="token punctuation">.</span>NODE_CURRENT_ID <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> T<span class="token punctuation">.</span>WF_STATUS <span class="token operator">!=</span> <span class="token string">'001'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">and</span> T<span class="token punctuation">.</span>ad_code <span class="token operator">like</span> concat<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>ad_code <span class="token operator">like</span> concat<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> FISCAL_YEAR <span class="token keyword">DESC</span><span class="token punctuation">,</span> BATCH_NO <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="再融资债券限额"><a href="#再融资债券限额" class="headerlink" title="再融资债券限额"></a>再融资债券限额</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>FISCAL_YEAR<span class="token punctuation">,</span>       AD<span class="token punctuation">.</span>NAME                                                               <span class="token keyword">AS</span> AD_NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BATCH_NO<span class="token punctuation">,</span>       <span class="token punctuation">(</span>NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>SPEDEBT_EXPREFIN_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>OTHDEBT_EXPREFIN_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> EXPREFIN_LIMIT<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>REPGEN_REFIN_LIMIT                                                  <span class="token keyword">AS</span> REPGEN_REFIN_LIMIT<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>REPSPE_REFIN_LIMIT                                                                             <span class="token keyword">AS</span> REPSPE_REFIN_LIMIT<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>NEWGEN_REFIN_LIMIT                                                                             <span class="token keyword">AS</span> NEWGEN_REFIN_LIMIT<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>NEWSPE_REFIN_LIMIT                                                                             <span class="token keyword">AS</span> NEWSPE_REFIN_LIMIT<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>REFGEN_REP_LIMIT                                                                             <span class="token keyword">AS</span> REFGEN_REP_LIMIT<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>REFSPE_REP_LIMIT                                                                             <span class="token keyword">AS</span> REFSPE_REP_LIMIT<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>REFGEN_NEWSPE_LIMIT                                                                             <span class="token keyword">AS</span> REFGEN_NEWSPE_LIMIT<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>REFSPE_NEWSPE_LIMIT                                                                             <span class="token keyword">AS</span> REFSPE_NEWSPE_LIMIT<span class="token punctuation">,</span>       to_char<span class="token punctuation">(</span>T<span class="token punctuation">.</span>CREATE_TIME<span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD hh24:MI:SS'</span><span class="token punctuation">)</span>                       <span class="token keyword">AS</span> CREATE_TIME<span class="token keyword">FROM</span> BAS_DEBT_V_LIMIT T         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> DSY_V_ELE_AD AD <span class="token keyword">ON</span> T<span class="token punctuation">.</span>REC_AD_CODE <span class="token operator">=</span> AD<span class="token punctuation">.</span>CODE<span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>BILL_TYPE <span class="token operator">=</span> <span class="token string">'01'</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>DATA_TYPE <span class="token operator">=</span> <span class="token string">'03'</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>REC_AD_CODE <span class="token operator">=</span> <span class="token number">42</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>FISCAL_YEAR <span class="token operator">=</span> <span class="token number">2022</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> T<span class="token punctuation">.</span>REC_DATE <span class="token keyword">DESC</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>FISCAL_YEAR <span class="token keyword">DESC</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>BATCH_NO <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询表以及条件和<code>新增债券限额</code>完全一致，唯一区别在于字段<code>DATA_TYPE</code></p><h2 id="债券总限额"><a href="#债券总限额" class="headerlink" title="债券总限额"></a>债券总限额</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>FISCAL_YEAR<span class="token punctuation">,</span>       AD<span class="token punctuation">.</span>NAME                                                           <span class="token keyword">AS</span> AD_NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BATCH_NO<span class="token punctuation">,</span>       <span class="token punctuation">(</span>NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>GENERAL_DEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>SPECIAL_DEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1</span> <span class="token keyword">AS</span> HJ<span class="token punctuation">,</span>       NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>GENERAL_DEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1</span>                                  <span class="token keyword">AS</span> GENERAL_DEBT_LIMIT<span class="token punctuation">,</span>       NVL<span class="token punctuation">(</span>T<span class="token punctuation">.</span>SPECIAL_DEBT_LIMIT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1</span>                                  <span class="token keyword">AS</span> SPECIAL_DEBT_LIMIT<span class="token keyword">FROM</span> BAS_DEBT_V_LIMIT T         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> DSY_V_ELE_AD AD <span class="token keyword">ON</span> T<span class="token punctuation">.</span>REC_AD_CODE <span class="token operator">=</span> AD<span class="token punctuation">.</span>CODE<span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>BILL_TYPE <span class="token operator">=</span> <span class="token string">'01'</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>DATA_TYPE <span class="token operator">=</span> <span class="token string">'04'</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>REC_AD_CODE <span class="token operator">=</span> <span class="token number">42</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>FISCAL_YEAR <span class="token operator">=</span> <span class="token number">2022</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> T<span class="token punctuation">.</span>REC_DATE <span class="token keyword">DESC</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>FISCAL_YEAR <span class="token keyword">DESC</span><span class="token punctuation">,</span> T<span class="token punctuation">.</span>BATCH_NO <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同上，区别在于<code>DATA_TYPE</code></p>]]></content>
      
      
      <categories>
          
          <category> 地方政府债务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>债务系统业务流程</title>
      <link href="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/"/>
      <url>/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="债务系统"><a href="#债务系统" class="headerlink" title="债务系统"></a>债务系统</h1><h2 id="功能及流程"><a href="#功能及流程" class="headerlink" title="功能及流程"></a>功能及流程</h2><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220714124603478.png" alt="image-20220714124603478"></p><p>项目库-&gt;限额-&gt;债券发行-&gt;转贷-&gt;支出、还本</p><h2 id="核心基础数据表及视图"><a href="#核心基础数据表及视图" class="headerlink" title="核心基础数据表及视图"></a>核心基础数据表及视图</h2><table><thead><tr><th>表</th><th>视图</th><th>含义</th></tr></thead><tbody><tr><td></td><td>DSY_V_ELE_AG</td><td>单位视图</td></tr><tr><td></td><td>DSY_V_ELE_AD</td><td>区划视图</td></tr><tr><td></td><td>ELE_VD14025</td><td>建设状态基础信息</td></tr><tr><td></td><td>ELE_GD_ZWXMLX</td><td>项目类型基础信息</td></tr></tbody></table><h2 id="数据库及地址"><a href="#数据库及地址" class="headerlink" title="数据库及地址"></a>数据库及地址</h2><p>数据库：</p><p>​    本地环境：用户名：dsy_yth_dev</p><p>​    测试环境：用户名：dsy_yth_test0623</p><p>​    密码一致：DASYtech$417</p><p>新版债务系统：<a href="http://192.168.2.18:8042/">http://192.168.2.18:8042/</a><br>老版穿透式系统：<a href="http://192.168.2.19:8014/">http://192.168.2.19:8014/</a></p><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20181231113204959.png" alt="image-20181231113204959"></p><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220713140512741.png" alt="image-20220713140512741"><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220713141208707.png" alt="image-20220713141208707"></p><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220713141506055.png" alt="image-20220713141506055"></p><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220713154900328.png" alt="image-20220713154900328"></p><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220713161527615.png" alt="image-20220713161527615"></p><h2 id="业务流程概览"><a href="#业务流程概览" class="headerlink" title="业务流程概览"></a>业务流程概览</h2><p>项目录入 -&gt; 上报财政厅 -&gt; 财政厅下发限额 -&gt; 基于限额对项目进行遴选 -&gt; 对遴选项目债券发行生成发行计划 -&gt; 将发行计划进行公示登记 -&gt; </p><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220716154059003.png" alt="项目申报整体流程"></p><h3 id="项目录入"><a href="#项目录入" class="headerlink" title="项目录入"></a>项目录入</h3><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220716122323332.png" alt="录入入口"></p><p><strong>附件上传接口</strong></p><p><a href="http://127.0.0.1:8002/third-api/uploadFile/file">http://127.0.0.1:8002/third-api/uploadFile/file</a></p><p>请求方式：post</p><p>入参：form-data</p><pre class="line-numbers language-none"><code class="language-none">busiType: ET001busiId: c6021c7741348b22b99986607f9d12ccruleId: 9795360F03C14D578A93152DB61EE727file: (binary)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>项目录入接口</strong></p><p><strong>【一般项目】</strong></p><p><a href="http://127.0.0.1:8002/gd-service/generic-base-project/project">http://127.0.0.1:8002/gd-service/generic-base-project/project</a></p><p>插入时需要获取<code>pro_debt_id</code>、<code>plan_id</code>、<code>PRO_CODE</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> pro_debt_id <span class="token operator">=</span> debtCommonService<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> plan_id <span class="token operator">=</span> debtCommonService<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PRO_CODE <span class="token operator">=</span> projectCommonDao<span class="token punctuation">.</span><span class="token function">selectNewProjectCode</span><span class="token punctuation">(</span>AD_CODE<span class="token punctuation">,</span><span class="token class-name">StringTool</span><span class="token punctuation">.</span><span class="token function">getValueFromMapByKey</span><span class="token punctuation">(</span>proAdjunctMap<span class="token punctuation">,</span> <span class="token string">"SETUP_YEAR"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>保存项目<code>基本信息</code>、<code>附属信息</code>、<code>投资计划信息</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">projectCommonDao<span class="token punctuation">.</span><span class="token function">insertProjectBasicInfo</span><span class="token punctuation">(</span>proBasicMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基本信息保存</span>projectCommonDao<span class="token punctuation">.</span><span class="token function">insertProjectAdjunctInfo</span><span class="token punctuation">(</span>proAdjunctMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//附属信息保存</span>generalProjectDao<span class="token punctuation">.</span><span class="token function">insertInvestPlanInfo</span><span class="token punctuation">(</span>proPlanList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保存投资计划信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>项目基本信息对应表：<strong>PM_PROJECT_INFO</strong></p><p>项目附属信息对应表：<strong>PM_DEBT_INFO</strong></p><p>项目投资计划对应表：<strong>PM_DEBT_INFO_PLAN</strong></p><p><strong>【专项债券项目】</strong></p><p>专项债券是为有一定收益的公益性项目发行的，在项目录入时，需要明确写清楚<code>收支预算明细</code></p><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220716135440075.png" alt="专项债券收支预算明细"></p><p><strong>一般债券和专项债券的区别</strong></p><blockquote><p>​    政府债券分类纳入预算管理，一般债券纳入一般公共预算，专项债券纳入政府性基金预算</p></blockquote><h4 id="项目类型"><a href="#项目类型" class="headerlink" title="项目类型"></a>项目类型</h4><p>项目库菜单将项目划分为：<code>基础项目</code>、<code>储备项目</code>、<code>需求项目</code>、<code>发行项目</code></p><p><code>基础项目</code>：一般债券项目、专项债券项目</p><p><code>储备项目</code>：一般储备项目、专项储备项目、<code>下级项目审核</code>  – 经办岗具备储备项目的审核权</p><p><code>需求项目</code>：<code>申报批次接收</code>、一般债券项目、专项债券项目、<code>债券需求汇总</code>、<code>下级债券需求审核</code>、<code>需求上报财政部</code>、<code>批复结果接收</code>、<code>批复结果确认</code>、<code>发改委审核结果导入</code></p><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220716142850303.png" alt="需求项目"></p><blockquote><p>​    需求项目比较特殊，支持的功能也多</p><p>省级支持接收<code>市区</code>级的项目，也允许申报项目（<code>包括专项债券项目和一般债券项目</code>），支持<code>债券项目的汇总（可以理解为打包，一起发送至财政厅进行审核）</code>。</p><p>也允许审核<code>市区级的项目</code>，打包汇总后，统一<code>上报至财政厅</code>，财政厅进行审核批复，省级可将批复结果进行接收并确认</p></blockquote><p><code>发行项目</code>：<code>遴选发行申报</code>、<code>遴选发行审核</code>、<code>下级项目审核</code></p><blockquote><p>​    <code>遴选</code>是上级向下级进行审核选拔的意思，</p><p>其中已使用限额在<code>遴选</code>项目后，就已经扣减</p></blockquote><h3 id="限额管理"><a href="#限额管理" class="headerlink" title="限额管理"></a>限额管理</h3><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220716150502939.png" alt="限额管理"></p><p>其中，限额可以理解为<code>上级对下级各类债券可使用额度的管理</code>。包括三类限额：<code>总限额</code>、<code>新增限额</code>、<code>再融资规模限额</code></p><p>限额允许接收（<code>接收上级下发的额度</code>），接收后将限额进行分解录入到<code>不同的批次</code>，并下达到<code>下级机关部门</code></p><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220716150931289.png" alt="限额下发后总览"></p><h4 id="债券类型"><a href="#债券类型" class="headerlink" title="债券类型"></a>债券类型</h4><p>从限额管理来看，有两种债券类型</p><blockquote><ul><li>​    新增债券：是债券发行机构处于筹措资金的需要，根据实际需要新发行的债券。<code>普通债券</code></li><li>再融资债券：“借新还旧”债券，是为偿还到期的一般债券和专项债券本金而发行的地方政府债券，不能直接用于项目建设。<code>还旧债券，无法用于项目</code></li><li>置换就债券：是政府发行新债券换回前国家债券持有者手中的即将到期的老债券，新债券期限更长，收益更高且有政府做担保收入更稳定；老债券由地方政府和金融机构私底下签订的协议，利率高、风险大、容易跑路。<code>换旧债券</code></li></ul></blockquote><p>地方政府允许发行<code>一般债券</code>和<code>专项债券</code></p><p>其中：</p><blockquote><ul><li>​    一般债券：指纳入一般公共管理，为<code>没有收益</code>公益性项目发行（以一般公共预算收入作为还本付息资金来源）</li><li>专项债券：指纳入政府性基金预算管理，为<code>有一定收益</code>的公益性项目发行（以公益性项目对应的政府性基金收入或专项收入作为还本付息资金来源）</li></ul></blockquote><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="查看工作流"><a href="#查看工作流" class="headerlink" title="查看工作流"></a>查看工作流</h3><ul><li><p>登陆<code>42admin</code>系统管理员，选择工作流配置，选择工作流图形化配置</p><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220810151602064.png" alt="工作流查看"></p></li><li><p>根据<code>工作流id：WF_ID</code>，查询工作流</p><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220810151634211.png" alt="查找工作流"></p></li></ul><h3 id="查看账号"><a href="#查看账号" class="headerlink" title="查看账号"></a>查看账号</h3><ul><li><p>核心表：<code>FASP_T_CAUSER</code></p><p>用户名：<code>CODE</code></p><p>密码：<code>PASSWORD</code> [加密了，不过密码都一样]</p></li></ul><h3 id="查看某一个单位的账号"><a href="#查看某一个单位的账号" class="headerlink" title="查看某一个单位的账号"></a>查看某一个单位的账号</h3><ul><li><code>FASP_T_CAUSER</code>表 <code>NAME</code> <code>like</code> <code>***</code></li></ul><h2 id="一般-x2F-专项详细流程"><a href="#一般-x2F-专项详细流程" class="headerlink" title="一般/专项详细流程"></a>一般/专项详细流程</h2><h3 id="储备申报"><a href="#储备申报" class="headerlink" title="储备申报"></a>储备申报</h3><table><thead><tr><th>KEY_WORD</th><th>方式</th></tr></thead><tbody><tr><td>生成PRO_ID</td><td>前端生成: getGUID</td></tr><tr><td>工作流传参</td><td>详见<code>前端保存页面及传参</code></td></tr><tr><td>生成PRO_CODE/PRO_DEBT_ID</td><td>详见<code>前端保存页面及传参</code></td></tr></tbody></table><ol><li><p>专项债券储备申报 -&gt; <code>新增项目</code></p><p>[注意：录入时需要选择主管部门、后序工作流审核需要一层主管部门的审核，若未录入，则无法进行审核]</p><p><strong>接口url</strong>：<code>gd-service/special-reserve-project/project</code></p><p><strong>保存的数据</strong>：</p><table><thead><tr><th>表名</th><th>含义</th></tr></thead><tbody><tr><td>PM_PROJECT_INFO</td><td>债券项目基本信息表</td></tr><tr><td>PM_DEBT_INFO</td><td>债券项目附属信息表</td></tr><tr><td>GD_PRO_RES_APPLY</td><td>新增债券储备申请表</td></tr><tr><td>PM_DEBT_BGTBALANCE</td><td>项目收支预算信息表</td></tr></tbody></table><p><strong>前端保存页面及传参：</strong><code>trunk/dsy-bgd-web/page/debt/project-manage/reserve-pro/special-pro.html</code></p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">ivAjax.post(SERVICE_NAME + "/special-reserve-project/project", {    menu_id: MENU_ID,    wf_id: WF_ID,    node_type: NODE_TYPE,    pro_id: _this.pro_id,    button_code: _this.button_code,    pro_source: _this.pro_source,    pro_basic_form: JSON.stringify(_this.$refs.jbxxFormTarget.formData),   // 基本信息    pro_adjunct_form: JSON.stringify(_this.$refs.qqzbFormTarget.formData),   // 附属信息    bgtbalance_form: JSON.stringify(_this.$refs.szysFormTarget.formData),  // 收支预算表单    bgtbalance_data: JSON.stringify(_this.$refs.szysFormTarget.getSzysData()), // 收支预算表格    res_apply_form: JSON.stringify(_this.$refs.bcsbFormTarget.formData)  // 本次申报})部分参数数据来源：    menu_id：getQueryParam("menucode")  // 菜单ID    wf_id：getQueryParam("wf_id")  // 工作流Id    node_type：getQueryParam("node_type")  // 当前节点编码    pro_id：getGUID()    button_code：add    pro_source：2    其他参数：表单录入    后台存储部分数值来源：AD_CODE = debtCommonService.getBJAdCode(AD_CODE);  // 获取本级区划    String mofDivCode = debtCommonService.getDivCode(AD_CODE);    String setupYear = StringTool.getValueFromMapByKey(proAdjunctMap, "SETUP_YEAR");    ProCode = projectCommonDao.selectNewProjectCode(AD_CODE, setupYear);    ProDebtId = debtCommonService.getId();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>专项债券储备申报 -&gt; <code>项目送审</code></p><p><strong>接口url</strong>：<code>gd-service/special-reserve-project/workflow</code></p><p><strong>前端传参</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ivAjax<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token constant">SERVICE_NAME</span> <span class="token operator">+</span> <span class="token string">"/special-reserve-project/workflow"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">button_code</span><span class="token operator">:</span> button_code<span class="token punctuation">,</span>    <span class="token literal-property property">button_name</span><span class="token operator">:</span> button_name<span class="token punctuation">,</span>    <span class="token literal-property property">shOpinion</span><span class="token operator">:</span> _this<span class="token punctuation">.</span>shFormConfig<span class="token punctuation">.</span>data<span class="token punctuation">.</span>shOpinion<span class="token punctuation">,</span> <span class="token comment">// 审核意见</span>    <span class="token literal-property property">wf_id</span><span class="token operator">:</span> <span class="token constant">WF_ID</span><span class="token punctuation">,</span>    <span class="token literal-property property">menu_id</span><span class="token operator">:</span> <span class="token constant">MENU_ID</span><span class="token punctuation">,</span>    <span class="token literal-property property">wf_condition</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>wf_condition<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">apply_ids</span><span class="token operator">:</span> apply_ids<span class="token punctuation">,</span>    <span class="token literal-property property">pro_ids</span><span class="token operator">:</span> pro_ids<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>审核岗 -&gt; 专项债券储备审核（省）-&gt; 审核</p></li></ol><h3 id="需求申报"><a href="#需求申报" class="headerlink" title="需求申报"></a>需求申报</h3><ol><li><p>专项债券需求申报 -&gt; 选择项目</p><p><strong>项目选择列表对应SQL：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> XM<span class="token punctuation">.</span>PRO_ID<span class="token punctuation">,</span><span class="token comment">--  项目主键</span>       XM<span class="token punctuation">.</span>PRO_NAME<span class="token punctuation">,</span><span class="token comment">-- 项目名称</span>       XM<span class="token punctuation">.</span>SETUP_YEAR<span class="token punctuation">,</span><span class="token comment">-- 立项年度</span>       XM<span class="token punctuation">.</span>PRO_CODE<span class="token punctuation">,</span>       XMFS<span class="token punctuation">.</span>PRO_TYPE_ID<span class="token punctuation">,</span><span class="token comment">-- 项目类型ID</span>       XMFS<span class="token punctuation">.</span>PRO_STATUS_CODE<span class="token punctuation">,</span><span class="token comment">-- 建设状态编码</span>       NVL<span class="token punctuation">(</span>XMFS<span class="token punctuation">.</span>TOTAL_BUDGET<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                         <span class="token keyword">AS</span> TOTAL_BUDGET<span class="token punctuation">,</span><span class="token comment">-- 项目总概算金额</span>       XM<span class="token punctuation">.</span>AD_CODE<span class="token punctuation">,</span><span class="token comment">-- 区划编码</span>       XM<span class="token punctuation">.</span>AG_CODE<span class="token punctuation">,</span><span class="token comment">-- 单位编码</span>       AD<span class="token punctuation">.</span>NAME                                           <span class="token keyword">AS</span> AD_NAME<span class="token punctuation">,</span><span class="token comment">-- 区划名称</span>       AG<span class="token punctuation">.</span>NAME                                           <span class="token keyword">AS</span> AG_NAME<span class="token punctuation">,</span><span class="token comment">-- 单位名称</span>       <span class="token string">'2'</span>                                               <span class="token keyword">AS</span> BOND_PRO_TYPE<span class="token punctuation">,</span> <span class="token comment">-- 债券类型</span>       XMLX<span class="token punctuation">.</span>ELE_NAME                                     <span class="token keyword">AS</span> PRO_TYPE_NAME<span class="token punctuation">,</span> <span class="token comment">--项目类型名称</span>       JSZT<span class="token punctuation">.</span>ELE_NAME                                     <span class="token keyword">AS</span> PRO_STATUS_NAME<span class="token punctuation">,</span> <span class="token comment">--建设状态名称</span>       CONCAT<span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span>XM<span class="token punctuation">.</span>PRO_NAME<span class="token punctuation">,</span> AD<span class="token punctuation">.</span>NAME<span class="token punctuation">)</span><span class="token punctuation">,</span> XM<span class="token punctuation">.</span>PRO_CODE<span class="token punctuation">)</span> <span class="token keyword">AS</span> FUZZY_SEARCH <span class="token comment">--模糊查询字段</span><span class="token keyword">FROM</span> PM_V_PROJECT_INFO XM         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> PM_V_DEBT_INFO XMFS <span class="token keyword">ON</span> XM<span class="token punctuation">.</span>PRO_ID <span class="token operator">=</span> XMFS<span class="token punctuation">.</span>PRO_ID         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> DSY_V_ELE_AG AG <span class="token comment">-- 单位视图</span>                   <span class="token keyword">ON</span> XMFS<span class="token punctuation">.</span>AG_ID <span class="token operator">=</span> AG<span class="token punctuation">.</span>GUID         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> DSY_V_ELE_AD AD <span class="token comment">-- 区划视图</span>                   <span class="token keyword">ON</span> XMFS<span class="token punctuation">.</span>AD_CODE <span class="token operator">=</span> AD<span class="token punctuation">.</span>CODE         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> ELE_VD14025 JSZT                   <span class="token keyword">ON</span> JSZT<span class="token punctuation">.</span>ELE_CODE <span class="token operator">=</span> XMFS<span class="token punctuation">.</span>PRO_STATUS_CODE <span class="token comment">-- 建设状态基础信息表</span>         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> ELE_GD_ZWXMLX XMLX                   <span class="token keyword">ON</span> XMLX<span class="token punctuation">.</span>ELE_ID <span class="token operator">=</span> XMFS<span class="token punctuation">.</span>PRO_TYPE_ID <span class="token comment">-- 项目类型基础信息表</span><span class="token keyword">WHERE</span>   <span class="token comment">-- 专项储备通过的项目</span>    <span class="token punctuation">(</span><span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span>            <span class="token keyword">FROM</span> GD_V_PRO_RESERVE_APPLY CB            <span class="token keyword">WHERE</span> XM<span class="token punctuation">.</span>PRO_ID <span class="token operator">=</span> CB<span class="token punctuation">.</span>PRO_ID <span class="token operator">AND</span> CB<span class="token punctuation">.</span>BOND_TYPE_CODE <span class="token operator">LIKE</span> <span class="token string">'2%'</span> <span class="token operator">AND</span> CB<span class="token punctuation">.</span>IS_END <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">-- 基础库通过的项目</span>   <span class="token operator">OR</span> <span class="token punctuation">(</span>XMFS<span class="token punctuation">.</span>IS_END <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">AND</span> XMFS<span class="token punctuation">.</span>BOND_PRO_TYPE <span class="token operator">like</span> <span class="token string">'2%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>专项债券需求申报 -&gt; 选择项目 -&gt; 确认选择</p><p><strong>接口url：</strong><code>gd-service/special-demand-project/project</code></p><p><strong>保存的数据：</strong></p><table><thead><tr><th>表名</th><th>含义</th></tr></thead><tbody><tr><td>GD_PRO_FUND_APPLY</td><td>新增债券资金需求申报表</td></tr></tbody></table><p><strong>后序流程：</strong></p><p>​    录入流程类似于储备申报之项目申请，只是可以对录入的储备申报进行二次修改，并确认相关信息。可参考储备申报相关流程。</p></li><li><p>专项债券需求申报 -&gt; 项目送审</p></li><li><p>主管部门进行审核</p></li><li><p>湖北省审核岗位进行审核</p></li></ol><h3 id="需求汇总"><a href="#需求汇总" class="headerlink" title="需求汇总"></a>需求汇总</h3><ol><li><p>需求项目 -&gt; 债券需求汇总</p><ul><li><p>查询未汇总需求</p></li><li><p>查询所有批次</p><p>[批次来源：需求申报批次接收、调用财政厅接口，获取申报批次]</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>BATCH_CODE <span class="token keyword">AS</span> CODE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BATCH_NAME <span class="token keyword">AS</span> NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BATCH_YEAR<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BATCH_TYPE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>START_DATE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>END_DATE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>IS_ENABLED<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>REMARK<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>DECLARE_REQUIRE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>DECLARE_STATE<span class="token keyword">FROM</span> GD_FUND_APPLY_BATCH T<span class="token keyword">WHERE</span> T<span class="token punctuation">.</span>IS_DELETED <span class="token operator">=</span> <span class="token number">2</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>IS_ENABLED <span class="token operator">=</span> <span class="token number">1</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>BATCH_TYPE <span class="token operator">LIKE</span> <span class="token string">'1%'</span>  <span class="token operator">AND</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> GD_V_PRO_FUND_APPLY_COL COL <span class="token keyword">WHERE</span> COL<span class="token punctuation">.</span>BATCH_CODE <span class="token operator">=</span> T<span class="token punctuation">.</span>BATCH_CODE <span class="token operator">AND</span> COL<span class="token punctuation">.</span>AD_CODE <span class="token operator">=</span> <span class="token number">4200</span><span class="token punctuation">)</span>  <span class="token operator">AND</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> GD_V_FUND_REPORT_RESULT R <span class="token keyword">WHERE</span> R<span class="token punctuation">.</span>BATCH_CODE <span class="token operator">=</span> T<span class="token punctuation">.</span>BATCH_CODE<span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> T<span class="token punctuation">.</span>CREATE_TIME <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进行汇总</p><ul><li>存储批次等信息</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">新增债券资金需求申报表<span class="token keyword">UPDATE</span> GD_PRO_FUND_APPLY <span class="token keyword">SET</span> BATCH_CODE <span class="token operator">=</span> ?<span class="token punctuation">,</span>COL_ID<span class="token operator">=</span>?<span class="token punctuation">,</span>AUDIT_STATUS<span class="token operator">=</span>?<span class="token punctuation">,</span>AUDIT_OPINION<span class="token operator">=</span>?<span class="token punctuation">,</span> UPDATE_USER <span class="token operator">=</span> ?<span class="token punctuation">,</span> UPDATE_TIME <span class="token operator">=</span> ? <span class="token keyword">WHERE</span> IS_DELETED <span class="token operator">=</span> ? <span class="token operator">AND</span> APPLY_ID <span class="token operator">=</span> ?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>存储汇总信息</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">新增债券资金需求汇总表<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> GD_PRO_FUND_APPLY_COL COL_ID<span class="token punctuation">,</span>MOF_DIV_CODE<span class="token punctuation">,</span>BATCH_CODE<span class="token punctuation">,</span>DTL_NUM<span class="token punctuation">,</span>SUM_APPLY_AMT<span class="token punctuation">,</span>IS_DELETED<span class="token punctuation">,</span>CREATE_TIME<span class="token punctuation">,</span>AD_CODE<span class="token punctuation">,</span>AG_CODE<span class="token punctuation">,</span>CREATE_USER<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>将批次上报财政部</p><p><strong>接口url：</strong><code>/gd-service/refin-plan/report</code></p><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220810160727942.png" alt="image-20220810160727942"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">债务数据上报表<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span>  GD_FUND_REPORT_RESULT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>财政部进行批次通过[可能由于暂未对接财政部，直接经办岗进行全部通过即可]</p><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220810161329940.png" alt="image-20220810161329940"></p></li><li><p>批复结果确认</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">新增债券资金需求批复表<span class="token keyword">UPDATE</span> GD_FUND_APPLY_REPLY <span class="token keyword">SET</span> CONFIRM_STATUS <span class="token operator">=</span> ?<span class="token punctuation">,</span> CONFIRM_TIME <span class="token operator">=</span> ?<span class="token punctuation">,</span> CONFIRM_REMARK <span class="token operator">=</span> ?<span class="token punctuation">,</span> CONFIRM_USER <span class="token operator">=</span>?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="发行项目遴选"><a href="#发行项目遴选" class="headerlink" title="发行项目遴选"></a>发行项目遴选</h3><ol><li><p>发行项目遴选 -&gt; 遴选发行申报 -&gt; 项目遴选</p><pre class="line-numbers language-none"><code class="language-none">项目承建企业信息表INSERT INTO GD_PRO_CB_INFO项目遴选发行信息表INSERT INTO GD_PRO_ISSUE_APPLY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>发行项目遴选 -&gt; 遴选发行申报 -&gt; 送审</p></li><li><p>登陆主管部门 -&gt; 遴选发行审核 -&gt; 同意审核</p></li><li><p>登陆审核岗 -&gt; 遴选发行审核 -&gt; 同意审核</p></li></ol><h3 id="债券发行计划"><a href="#债券发行计划" class="headerlink" title="债券发行计划"></a>债券发行计划</h3><ol><li><p>债券发行计划 -&gt; 债券发行批次录入</p><p><strong>业务含义</strong>：录入债券（新增债券，并绑定项目）</p><p><strong>请求url</strong>：<code>/gd-service/issue-batch/batch</code></p><pre class="line-numbers language-none"><code class="language-none">债券发行批次表INSERT INTO GD_PRO_ISSUE_BATCH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>债券发行计划 -&gt; 年度发行计划编制、月度发行计划编制；</p><p><strong>业务含义</strong>：编制发行计划，几月份发、怎么还钱</p><p><strong>请求url</strong>：<code>gd-service/issue-plan/month-plan</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">债券月度发行计划表<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> GD_ISSUE_PLAN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="发行登记"><a href="#发行登记" class="headerlink" title="发行登记"></a>发行登记</h3><ol><li><p>债券发行结果登记</p><blockquote><p>​    增补项目是，一支债券可以对应多个项目，这个实际上就是父债和子债的关系，一笔债券，对应多个项目，每个项目债券就是单独的子债；</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> DTL<span class="token punctuation">.</span>PLAN_ID<span class="token punctuation">,</span>       <span class="token function">SUM</span><span class="token punctuation">(</span>NVL<span class="token punctuation">(</span>DTL<span class="token punctuation">.</span>CAP_AMT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span>   <span class="token keyword">AS</span> CAP_AMT<span class="token punctuation">,</span>       <span class="token keyword">APPLY</span><span class="token punctuation">.</span>MOF_DIV_CODE<span class="token punctuation">,</span>       AD<span class="token punctuation">.</span>NAME                               MOF_DIV_NAME<span class="token punctuation">,</span>       AG<span class="token punctuation">.</span>NAME                               AGENCY_NAME<span class="token punctuation">,</span>       AG<span class="token punctuation">.</span>CODE                               AGENCY_CODE<span class="token punctuation">,</span>       PRO<span class="token punctuation">.</span>PRO_ID<span class="token punctuation">,</span>       PRO<span class="token punctuation">.</span>PRO_NAME<span class="token punctuation">,</span>       PRO<span class="token punctuation">.</span>PRO_CODE<span class="token punctuation">,</span>       <span class="token keyword">APPLY</span><span class="token punctuation">.</span>PRO_TYPE_NAME<span class="token punctuation">,</span>       <span class="token keyword">APPLY</span><span class="token punctuation">.</span>PRO_TYPE_ID                  <span class="token keyword">AS</span> PRO_TYPE_CODE<span class="token punctuation">,</span>       <span class="token function">SUM</span><span class="token punctuation">(</span>NVL<span class="token punctuation">(</span>DTL<span class="token punctuation">.</span>ISSUE_AMT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span> <span class="token keyword">AS</span> APPLY_AMT<span class="token punctuation">,</span>       <span class="token function">SUM</span><span class="token punctuation">(</span>NVL<span class="token punctuation">(</span>DTL<span class="token punctuation">.</span>DFCT_AMT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span>  <span class="token keyword">AS</span> DFCT_AMT<span class="token keyword">FROM</span> GD_V_ISSUE_PLAN_DETAIL DTL         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> GD_V_ISSUE_PLAN T <span class="token keyword">ON</span> DTL<span class="token punctuation">.</span>PLAN_ID <span class="token operator">=</span> T<span class="token punctuation">.</span>PLAN_ID         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> GD_V_PRO_ISSUE_APPLY <span class="token keyword">APPLY</span> <span class="token keyword">ON</span> DTL<span class="token punctuation">.</span>BUSI_DATA_ID <span class="token operator">=</span> <span class="token keyword">APPLY</span><span class="token punctuation">.</span>APPLY_ID         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> PM_V_PROJECT_INFO PRO <span class="token keyword">ON</span> <span class="token keyword">APPLY</span><span class="token punctuation">.</span>PRO_ID <span class="token operator">=</span> PRO<span class="token punctuation">.</span>PRO_ID         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> DSY_V_ELE_AD AD <span class="token keyword">ON</span> <span class="token keyword">APPLY</span><span class="token punctuation">.</span>AD_CODE <span class="token operator">=</span> AD<span class="token punctuation">.</span>CODE         <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> DSY_V_ELE_AG AG <span class="token keyword">ON</span> <span class="token keyword">APPLY</span><span class="token punctuation">.</span>AG_ID <span class="token operator">=</span> AG<span class="token punctuation">.</span>GUID<span class="token keyword">WHERE</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token operator">AND</span> <span class="token keyword">APPLY</span><span class="token punctuation">.</span>IS_END <span class="token operator">=</span> <span class="token number">1</span>  <span class="token operator">AND</span> DTL<span class="token punctuation">.</span>BUSI_DATA_TYPE <span class="token operator">=</span> <span class="token string">'01'</span>  <span class="token operator">AND</span> DTL<span class="token punctuation">.</span>PLAN_ID <span class="token operator">=</span> ?<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> DTL<span class="token punctuation">.</span>PLAN_ID<span class="token punctuation">,</span> <span class="token keyword">APPLY</span><span class="token punctuation">.</span>MOF_DIV_CODE<span class="token punctuation">,</span> AD<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span> AG<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span> AG<span class="token punctuation">.</span>CODE<span class="token punctuation">,</span> PRO<span class="token punctuation">.</span>PRO_ID<span class="token punctuation">,</span> PRO<span class="token punctuation">.</span>PRO_CODE<span class="token punctuation">,</span> PRO<span class="token punctuation">.</span>PRO_NAME<span class="token punctuation">,</span>         <span class="token keyword">APPLY</span><span class="token punctuation">.</span>PRO_TYPE_ID<span class="token punctuation">,</span> <span class="token keyword">APPLY</span><span class="token punctuation">.</span>PRO_TYPE_NAME<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/12/gong-zuo/202207-bei-jing-da-shu-yuan/zhai-wu-xi-tong/image-20220811113008075.png" alt="image-20220811113008075"></p><p><strong>请求url</strong>：<code>gd-service/bond-issue/save-bond</code></p><pre class="line-numbers language-none"><code class="language-none">保存债券信息（地方政府债券表）INSERT INTO BAS_BOND_INFO保存兑付计划信息 （债券偿还计划表）INSERT INTO GD_BOND_REPAY_PLAN保存建设项目信息（新增债券与项目对应表）INSERT INTO GD_BOND_PRO保存到期债券信息（再融资债券与到期债券对应表）INSERT INTO GD_BOND_EXPBOND保存承销团信息（债券承销机构信息）INSERT INTO GD_BOND_UW_ORGAN_ISSUE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>招标信息登记</p><p><strong>请求url：</strong><code>/bond-issue/save-bid</code></p><pre class="line-numbers language-none"><code class="language-none">保存招标信息（发行招标情况一览表）INSERT INTO GD_BOND_INVIDE_INFO投标信息（债券承销机构投标明细表）INSERT INTO GD_BOND_INPUT_INFO中标信息（承销商中标情况表）INSERT INTO GD_BOND_OUTBID_IFNO承销商缴款信息（债券中标缴款信息表）INSERT INTO GD_BOND_BID_INFO承销商投标不足（投标不足承销商统计表）INSERT INTO GD_BOND_INPUT_LACK_INFO承销商未投标信息（未投标承销商统计表）INSERT INTO GD_BOND_NOT_INPUT_INFO最低承销额不足信息（最低承销额不足情况表）INSERT INTO GD_BOND_LOWEST_LIMIT_INFO债券托管信息（债券托管情况表）INSERT INTO GD_BOND_TRUST_INFO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>省审核 - &gt; 债券发行结果确认</p></li></ol><h3 id="项目预算指标推送"><a href="#项目预算指标推送" class="headerlink" title="项目预算指标推送"></a>项目预算指标推送</h3><ol><li><p>发行登记 -&gt; 项目预算指标推送</p><p><strong>请求url</strong>:<code>/gd-service/bond-pro-bgt/push-budget</code></p><pre class="line-numbers language-none"><code class="language-none">存储指标信息（预算指标信息表）INSERT INTO GD_BGT_INFO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="债券转贷"><a href="#债券转贷" class="headerlink" title="债券转贷"></a>债券转贷</h3><h3 id="债券支出"><a href="#债券支出" class="headerlink" title="债券支出"></a>债券支出</h3><ol><li><p>债券可选择支出数据源</p><p><strong>请求url：</strong><code>/gd-service/bond-pay/bond-project</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> T<span class="token punctuation">.</span>AD_CODE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>AD_NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>AG_ID<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>AG_CODE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>AG_NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BOND_ID<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BOND_CODE<span class="token punctuation">,</span>       SURP_XPAY_AMT<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>DUE_DATE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BOND_NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BOND_ST_NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BOND_TYPE_CODE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>BOND_TYPE_NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>DEBT_DEADLINE_NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>PRO_ID<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>PRO_CODE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>PRO_NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>SETUP_YEAR<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>PRO_TYPE_ID<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>PRO_TYPE_NAME<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>START_DATE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>END_DATE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>PRO_STATUS_CODE<span class="token punctuation">,</span>       T<span class="token punctuation">.</span>PRO_STATUS_NAME<span class="token keyword">FROM</span> DEBT_V_PAY_BOND_PRO T<span class="token keyword">WHERE</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token operator">and</span> T<span class="token punctuation">.</span>ad_code <span class="token operator">like</span> concat<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span>  <span class="token operator">AND</span> T<span class="token punctuation">.</span>ad_code <span class="token operator">=</span> <span class="token number">4200</span>  <span class="token operator">and</span> T<span class="token punctuation">.</span>ag_code <span class="token operator">like</span> concat<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> T<span class="token punctuation">.</span>AD_CODE<span class="token punctuation">,</span> T<span class="token punctuation">.</span>AG_CODE<span class="token punctuation">,</span> T<span class="token punctuation">.</span>BOND_ID<span class="token punctuation">,</span> T<span class="token punctuation">.</span>PRO_ID<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新增债券支出录入</p><p><strong>接口url：</strong><code>/bond-pay/pay-voucher</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">保存新增债券支出结果信息（债券类资金支付结果登记表）<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> GD_BOND_PAY_VOUCHER保存新增债券支出申请信息（债券资金支出申请表）<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> GD_BOND_FUND_PAY_APPLY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新增债券支出确认</p></li></ol><h3 id="省还本付息录入"><a href="#省还本付息录入" class="headerlink" title="省还本付息录入"></a>省还本付息录入</h3><ol><li><p>录入</p><blockquote><p>​    会基于债券期限、以及还本付息计划，自动生成利息、兑付费、本金等信息</p></blockquote></li><li><p>送审</p></li><li><p>审核单位审核</p></li><li><p>还本付息确认</p></li></ol><h2 id="再融资详细流程"><a href="#再融资详细流程" class="headerlink" title="再融资详细流程"></a>再融资详细流程</h2><ol><li>再融资债券申请录入</li><li>审核岗审核</li></ol>]]></content>
      
      
      <categories>
          
          <category> 地方政府债务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量图片压缩bat - 基于squoosh</title>
      <link href="/2022/04/12/gong-ju/tools-01-squoosh-02/"/>
      <url>/2022/04/12/gong-ju/tools-01-squoosh-02/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​    上篇我们介绍到了谷歌图片压缩神器<code>squoosh</code>的网页版以及<code>cli</code>命令行版， 相信大家已经深深喜欢上了这款小巧轻便的工具，本篇接上篇， 为了方便<code>squoosh-cli</code>的使用，解决其无法区分不同格式的图片从何选择不同的压缩模式的问题。</p><p>​    这里我选择通过批处理脚本<code>bat</code>进行处理，已经能够实现基本需求，由于从来没有接触过<code>bat</code>，折磨了一两天，逐渐完善，差不多能用了，欢迎大家积极吐槽！</p></blockquote><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>在任意目录下，创建脚本<code>squ.bat</code></p><p>例如：<code>D:\repo\me\blog\squ.bat</code></p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo off@rem 关闭输出@rem 取参@set param=%1@rem 判断是否存在传入参数@if "%param%" == "" (@goto :set_directory) else (@set directory=%1@goto :check_directory)@rem 语句块，用来设置参数:set_directory@rem 读取用户输入图片目录@echo Please enter the picture directory (relative directory) to be compressed:@set /p directory=:end@rem 效验该文件夹是否存在:check_directory@if not exist %directory% (@echo.@echo the input directory %directory% is not exist@echo.@rem 退出cmdcmd.exe exit):end:: 切换至选择的目录@cd %directory%:: 遍历当前目录所有图片，进行压缩@for %%i in (*.jpg) do (@npx @squoosh/cli --mozjpeg {quality:80,baseline:false,arithmetic:false,progressive:true,optimize_coding:true,smoothing:0,color_space:3,quant_table:3,trellis_multipass:false,trellis_opt_zero:false,trellis_opt_table:false,trellis_loops:1,auto_subsample:true,chroma_subsample:2,separate_chroma_quality:false,chroma_quality:75} %%i)@for %%i in (*.png) do (@npx @squoosh/cli --oxipng {quality:80,baseline:false,arithmetic:false,progressive:true,optimize_coding:true,smoothing:0,color_space:3,quant_table:3,trellis_multipass:false,trellis_opt_zero:false,trellis_opt_table:false,trellis_loops:1,auto_subsample:true,chroma_subsample:2,separate_chroma_quality:false,chroma_quality:75} %%i)@pausecmd.exe exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>为了方便脚本的使用，需要配置一个环境变量，这样我们在<code>cmd</code>窗口随时都能够执行<code>suq.bat</code>了</p><p>这个大家应该都比较熟练，就简单贴一个图</p><p><img src="/2022/04/12/gong-ju/tools-01-squoosh-02/1649752382712.png" alt="配置环境变量"></p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>在待压缩图片目录上一级目录，打开<code>cmd</code>控制台，输入</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">squ.bat <span class="token variable"><span class="token variable">`</span>directoryName<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/12/gong-ju/tools-01-squoosh-02/1649754114882.png" alt="使用步骤"></p><ol start="2"><li><p>也可以通过双击<code>squ.bat</code>脚本的方式允许，会提示传入参数</p><p><img src="/2022/04/12/gong-ju/tools-01-squoosh-02/1649754256398.png" alt="双击脚本允许"></p></li></ol><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol><li><p>判断用户是否传入参数， 若没有，跳转到读取参数代码</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@rem 取参@set param=%1@rem 判断是否存在传入参数@if "%param%" == "" (@goto :set_directory) else (@set directory=%1@goto :check_directory)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若没有传入参数，读取参数</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@rem 语句块，用来设置参数:set_directory@rem 读取用户输入图片目录@echo Please enter the picture directory (relative directory) to be compressed:@set /p directory=:end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>检查文件夹是否存在</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@rem 效验该文件夹是否存在:check_directory@if not exist %directory% (@echo.@echo the input directory %directory% is not exist@echo.@rem 退出cmdcmd.exe exit):end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>切换至输入的文件夹</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">:: 切换至选择的目录@cd %directory%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>分别压缩<code>.jpg</code>,<code>.png</code></p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">:: 遍历当前目录所有图片，进行压缩@for %%i in (*.jpg) do (@npx @squoosh/cli --mozjpeg {quality:80,baseline:false,arithmetic:false,progressive:true,optimize_coding:true,smoothing:0,color_space:3,quant_table:3,trellis_multipass:false,trellis_opt_zero:false,trellis_opt_table:false,trellis_loops:1,auto_subsample:true,chroma_subsample:2,separate_chroma_quality:false,chroma_quality:75} %%i)@for %%i in (*.png) do (@npx @squoosh/cli --oxipng {quality:80,baseline:false,arithmetic:false,progressive:true,optimize_coding:true,smoothing:0,color_space:3,quant_table:3,trellis_multipass:false,trellis_opt_zero:false,trellis_opt_table:false,trellis_loops:1,auto_subsample:true,chroma_subsample:2,separate_chroma_quality:false,chroma_quality:75} %%i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>好吧，我承认就是又cv了一遍！</p><h2 id="待改进的点"><a href="#待改进的点" class="headerlink" title="待改进的点"></a>待改进的点</h2><p>目前大体能实现功能，不足之处在于，由于<code>bat</code>使用了循环，相当于将<code>squoosh</code>的多线程能力完全不要了<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>我觉得可以从两点改进：</p><ul><li><p>进入该文件夹，使用<code>squoosh</code>批量压缩文件夹的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx @squoosh/cli --mozjpeg auto <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于<code>squoosh</code>不能自动选择对应的压缩模式，可能出现创建新文件的情况</p><p>因此需要通过批处理将重复创建的文件做一次删除、再替换</p></li><li><p>修改<code>squoosh</code>源代码</p></li></ul><p>加油吧，骚年<span class="github-emoji"><span>🐫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> windwos批处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 图片压缩 </tag>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo s如何修改端口</title>
      <link href="/2022/04/12/gong-ju/build-blog3/"/>
      <url>/2022/04/12/gong-ju/build-blog3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下<code>hexo s</code>如何修改端口</p><p>转自：</p><p><a href="https://blog.csdn.net/keepfriend/article/details/110577466">hexo修改默认端口</a>  </p></blockquote><p>默认使用4000端口</p><p>暂时修改启动端口：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">hexo s -p 80 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>永久修改启动端口：</p><pre class="line-numbers language-vbscript" data-language="vbscript"><code class="language-vbscript">vim node_modules\hexo-server\index.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改其中默认的port值。</p>]]></content>
      
      
      <categories>
          
          <category> 博客部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中byte[]、File、InputStream相互转换</title>
      <link href="/2022/04/12/java/ji-chu/java-io-transfer-01/"/>
      <url>/2022/04/12/java/ji-chu/java-io-transfer-01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自<code>【java】java 中 byte[]、File、InputStream 互相转换</code></p><p><a href="https://blog.51cto.com/u_15127580/4341376">https://blog.51cto.com/u_15127580/4341376</a></p></blockquote><p>使用过程中，一定要注意close()掉各个读写流！！！！！</p><h3 id="1、将File、FileInputStream-转换为byte数组："><a href="#1、将File、FileInputStream-转换为byte数组：" class="headerlink" title="1、将File、FileInputStream 转换为byte数组："></a>1、将File、FileInputStream 转换为byte数组：</h3><p>【new File(参数) 参数可以写绝对路径，也可以如下，写一个文件名，则本文件会生成在该项目的本目录下或者从本项目的根目录下查询是否有本文件】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>input<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、将byte数组转换为InputStream："><a href="#2、将byte数组转换为InputStream：" class="headerlink" title="2、将byte数组转换为InputStream："></a>2、将byte数组转换为InputStream：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、将byte数组转换为File："><a href="#3、将byte数组转换为File：" class="headerlink" title="3、将byte数组转换为File："></a>3、将byte数组转换为File：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>''<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OutputStream</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedOutputStream</span> bufferedOutput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedOutput<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sublime右键菜单消失</title>
      <link href="/2022/04/11/gong-ju/tools-02-sublime-01/"/>
      <url>/2022/04/11/gong-ju/tools-02-sublime-01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记一次<code>sublime</code>右键菜单消失，</p><p>转载自：<a href="https://blog.csdn.net/qq_44824148/article/details/112545117">解决安装完sublime txt，鼠标右键，没有使用sublime txt打开问题</a></p><p>对于多级右键菜单，可以参考一下文章进行设置：</p><p><a href="https://www.cnblogs.com/mq0036/p/8398594.html">win10自定义鼠标右键多级菜单(包含桌面)</a></p></blockquote><p>1.打开cmd窗口，输入regedit，打开注册表</p><p><img src="/2022/04/11/gong-ju/tools-02-sublime-01/image-20220411234518841.png" alt="注册表"></p><p>2.依次打开下面文件夹<br><code>计算机\HKEY_CLASSES_ROOT\*\shell</code></p><p>3.新建Sublime Text项，并在右侧建立下面字符串<br>新建字符串值名称为<code>Icon</code>，数据为：<code>D:\文档编辑器\sublime\Sublime Text 3\sublime_text.exe,0</code></p><p><em><strong>记得设置为你自己的sublime地址，另注意最后的<code>,0</code></strong></em></p><p><img src="/2022/04/11/gong-ju/tools-02-sublime-01/image-20220411234651881.png" alt="配置Sublime"></p><p>4.新建Command项，修改默认的数据值为下面字符串<br><code>"D:\文档编辑器\sublime\Sublime Text 3\sublime_text.exe" "%1"</code></p><p>***同样的，记得设置为你自己的地址，另注意后面的<code>%1</code>以及开始和结束的<code>双引号</code></p><p><img src="/2022/04/11/gong-ju/tools-02-sublime-01/image-20220411234717856.png" alt="配置command"></p><p>5.这样就OK了</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sublime </tag>
            
            <tag> 右键菜单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具 - squoosh图片压缩</title>
      <link href="/2022/04/10/gong-ju/tools-01-squoosh-01/"/>
      <url>/2022/04/10/gong-ju/tools-01-squoosh-01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在写博客的过程中，避免不了需要使用到图片，而一个高清的图片动辄好几<code>M</code>，相当之大，给博客网站的加载带来了很大的压力，因此在上传图片的时候，建议大家进行压缩了之后，再进行上传，本篇就来介绍一下<code>Google</code>免费图片压缩工具<code>squoosh</code>的使用</p><p><a href="https://github.com/GoogleChromeLabs/squoosh">Squoosh Github地址</a></p></blockquote><p><code>Squoosh</code>可以免费无限制地将图片压缩为多种格式，压缩效率很高，速度不算快，但是可以接受。更重要是，同时提供网页版和命令行版操作，前者可以实现即时可视化，而后者可以轻松地批量操作。</p><h2 id="使用网页版"><a href="#使用网页版" class="headerlink" title="使用网页版"></a>使用网页版</h2><p><code>Squoosh</code>官方网站<a href="https://squoosh.app/">https://squoosh.app/</a></p><p><img src="/2022/04/10/gong-ju/tools-01-squoosh-01/image-20220410205842325.jpg" alt="网站主页"></p><p>大家可以直接将图片拖拽进去进行压缩</p><p><img src="/2022/04/10/gong-ju/tools-01-squoosh-01/image-20220410210226909.jpg" alt="图片压缩">界面将图片使用一个可移动的分界线分成两个部分，可以用于对比压缩前后的两张图片，也可以对比两种不同压缩方式的图片。两张图片各有一个参数选择框，分别在左下角和右下角。在 Compress 一栏可以选择压缩的方式。左面默认为 “Original image”，即不进行压缩。右面默认为 <code>MozJPEG</code> ，是一种将图片压缩为 <code>JPEG</code> 格式的方法。选择了方法后，还可以选择对应的参数。比如对于 <code>JPEG</code> 压缩，可以选择它的质量，这里选择 75 ，可以看到，图片的尺寸从原来的 2.79 MB 下降到 862 kB ，下降了69%。而拖动分界框，可以发现，图片的质量降低很小，基本可以保持清晰。</p><p>此外，在 <code>Edit</code> 菜单中，还提供了其它编辑选项。使用 <code>MozJPEG</code> 时，有重设图片大小 <code>Resize</code> 和减少颜色数量 <code>Reduce palette</code> 两个选项，可以进一步地压缩图片，读者可以自行探索。</p><p>对生成的图片满意后，可以点击下面的 <code>下载</code> 按钮，将图片直接保存至本地。整个操作都是在浏览器中完成的，使用的是 <code>WebAssembly</code> 技术，非常方便使用，在各种操作系统中都可以使用，而且有浏览器就可以，不需要安装任何其它软件。</p><h2 id="使用命令行版"><a href="#使用命令行版" class="headerlink" title="使用命令行版"></a>使用命令行版</h2><p>使用<code>npm</code>安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i -g @squoosh/cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>​    如果发现卡住的情况多半是<code>squoosh</code>依赖下载不下来，可以配置<code>taobao</code>源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/10/gong-ju/tools-01-squoosh-01/repo/me/blog/source/_posts/tools-01-squoosh-01/image-20220410210733170.jpg" alt="安装squoosh成功"></p></blockquote><p>如果需要对大量图片进行批量压缩，可以使用 Squoosh 提供的命令行工具。目前它是基于 <code>Node.js</code> 的。如果你的电脑中安装了 <code>Node.js</code> ，可以很方便地使用。其语法为</p><pre class="line-numbers language-none"><code class="language-none">$ npx @squoosh/cli [options] &lt;files...&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码非常简洁。对于新手来说，可以从浏览器中直接生成代码。在刚才的浏览器页面中，在右下角 <code>Edit</code> 对话框</p><p>右侧有两个图标，其中第一个表示命令行的图标，点击后就可以生成命令行代码，并复制到剪贴板。</p><p><img src="/2022/04/10/gong-ju/tools-01-squoosh-01/image-20220410210420950.jpg" alt="生成代码"></p><p>生成的代码为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx @squoosh/cli --mozjpeg <span class="token string">'{"quality":75,"baseline":false,"arithmetic":false,"progressive":true,"optimize_coding":true,"smoothing":0,"color_space":3,"quant_table":3,"trellis_multipass":false,"trellis_opt_zero":false,"trellis_opt_table":false,"trellis_loops":1,"auto_subsample":true,"chroma_subsample":2,"separate_chroma_quality":false,"chroma_quality":75}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，已经把 <code>options</code> 所需要的所有内容都填写好了，和网页中的设置一样。下面，只需要在最后加入你的文件名，如</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx @squoosh/cli --mozjpeg <span class="token string">'{"quality":75,"baseline":false,"arithmetic":false,"progressive":true,"optimize_coding":true,"smoothing":0,"color_space":3,"quant_table":3,"trellis_multipass":false,"trellis_opt_zero":false,"trellis_opt_table":false,"trellis_loops":1,"auto_subsample":true,"chroma_subsample":2,"separate_chroma_quality":false,"chroma_quality":75}'</span> file1.jpg file2.jpg file3.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以一次性压缩上面三个文件了。这个命令在 MacBook 中运行良好，但是在 Windows 中，由于 <code>cmd</code> 对引号的解析有问题，无法执行。但幸运的是，程序还提供了“自动”选项，是根据压缩后的图片品质来自动选取参数的，不需要自行指定参数。代码为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx @squoosh/cli --mozjpeg auto file1.jpg file2.jpg file3.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>除了使用<code>auto</code>选项之外，笔者发现可以通过去掉<code>'</code>以及<code>"</code>的方式，让命令允许允许</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@npx @squoosh/cli --mozjpeg <span class="token punctuation">{</span>quality:80,baseline:false,arithmetic:false,progressive:true,optimize_coding:true,smoothing:0,color_space:3,quant_table:3,trellis_multipass:false,trellis_opt_zero:false,trellis_opt_table:false,trellis_loops:1,auto_subsample:true,chroma_subsample:2,separate_chroma_quality:false,chroma_quality:75<span class="token punctuation">}</span> file.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时，在 Windows 中也可以正常运行了。而且对于多个图片，是多线程并行运行的。运行结果为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span>/3 ✔ Squoosh results: file3.jpg: <span class="token number">2</span>.38MB  └ file3.jpg → <span class="token number">641</span>.18KB <span class="token punctuation">(</span><span class="token number">26.3</span>%<span class="token punctuation">)</span> file1.jpg: <span class="token number">2</span>.38MB  └ file1.jpg → <span class="token number">641</span>.18KB <span class="token punctuation">(</span><span class="token number">26.3</span>%<span class="token punctuation">)</span> file2.jpg: <span class="token number">2</span>.38MB  └ file2.jpg → <span class="token number">641</span>.18KB <span class="token punctuation">(</span><span class="token number">26.3</span>%<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>体积压缩为原来的 26.3% 。</p><p>对于文件比较多的情况，可以将文件保存在一个文件夹中，进入文件夹后，使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx @squoosh/cli --mozjpeg auto <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="命令行进阶"><a href="#命令行进阶" class="headerlink" title="命令行进阶"></a>命令行进阶</h2><p>前面提到，我们可以通过命令行 + 复制<code>生成的命令</code>方式，使用<code>squoosh</code>，生成的命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@npx @squoosh/cli --mozjpeg <span class="token punctuation">{</span>quality:80,baseline:false,arithmetic:false,progressive:true,optimize_coding:true,smoothing:0,color_space:3,quant_table:3,trellis_multipass:false,trellis_opt_zero:false,trellis_opt_table:false,trellis_loops:1,auto_subsample:true,chroma_subsample:2,separate_chroma_quality:false,chroma_quality:75<span class="token punctuation">}</span> file.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先来看具体的命令，<code>--mozjpeg</code>是配置项，指定了压缩格式，会将图片生成为<code>.jpg</code>格式，而<code>{}</code>包裹的是图片质量的配置，我们可以简单看一下，不用太关心。</p><p>结合<a href="https://github.com/GoogleChromeLabs/squoosh/tree/dev/cli">Github Squoosh Cli</a>文档以及<code>-help</code>帮助文档</p><p><img src="/2022/04/10/gong-ju/tools-01-squoosh-01/repo\me\blog\source_posts\tools-01-squoosh-01-01\1649742435412.png" alt="帮助文档"></p><table><thead><tr><th>配置项</th><th>含义</th></tr></thead><tbody><tr><td>–mozjpeg</td><td>压缩格式为<code>MozJPEG</code>， 会生成<code>.jpg</code>文件</td></tr><tr><td>–oxipng</td><td>压缩格式为<code>OxiPNG</code>， 会生成<code>.png</code>文件</td></tr></tbody></table><p>可以发现，通过不同压缩格式的选择，我们能获得不同格式的图片文件，这里我仅仅列举出<code>png</code>和<code>jpg</code>。</p><p>这个有什么用呢？</p><p>我们需要明确一点的是，<code>squoosh</code>会在当前文件夹，生成和被压缩图片相同文件名的图片，虽然文件名相同，但是后缀名是可能不一样的，比如说我对<code>.jpg</code>格式的图片使用<code>--oxipng</code>选项，那么当前文件夹会<em><strong>多出一个xxx.jpg的文件，而不是将原文件替换掉</strong></em></p><p>相信这一点大家肯定无法忍受，因此我们需要通过<code>bat</code>写一个批处理脚本，对某个文件夹的所有图片，选择合适的<code>压缩格式配置项</code>对其压缩，将图片直接进行替换，而不是生成额外的图片！！！</p><p>脚本已经写好了，吐槽一下<code>bat</code>真难用，具体可以参考我的下一篇博文哦~</p><p><a href="">通过bat以及squoosh批量压缩图片</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/zzyong24/squoosh">Squoosh官方文档</a></p><p><a href="https://monkeyhut.top/2022/01/03/Squoosh-CLI%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">Squoosh CLI使用教程</a></p><p><a href="https://www.jianshu.com/p/922b54713590">Squoosh 批量高质量压缩图片</a></p><p><a href="http://www.hanlindong.com/2021/google-squoosh/">使用 Squoosh 免费高效压缩图片</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 图片压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git01-Git密钥及仓库管理</title>
      <link href="/2022/04/10/gong-ju/git-01/"/>
      <url>/2022/04/10/gong-ju/git-01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章用来记录一下自己在使用<code>Git</code>中容易遗忘的一些命令及配置</p></blockquote><h2 id="查看及修改Git配置"><a href="#查看及修改Git配置" class="headerlink" title="查看及修改Git配置"></a>查看及修改Git配置</h2><ul><li><p>查看<code>config</code>配置</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git config --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/10/gong-ju/git-01/image-20220410183208457.png" alt="查看config配置"></p></li><li><p>更改全局用户名 / 邮箱</p><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 更改全局用户名</span>git config --global user.name <span class="token string">"username"</span><span class="token comment"># 更改全局邮箱</span>git config --global user.email <span class="token string">"email@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="配置SSH-keys"><a href="#配置SSH-keys" class="headerlink" title="配置SSH keys"></a>配置SSH keys</h2><ul><li><p>在<code>Git Bash</code>中，使用<code>ssh-keygen -t rsa</code>生成密钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/10/gong-ju/git-01/image-20220410195815054.png" alt="生成密钥"></p></li><li><p>密钥会生成在<code>C:\Users\Administrator\.ssh</code>文件夹中，即<code>C</code>盘用户目录，当前登录用户，<code>.ssh</code>文件夹中</p><p><img src="/2022/04/10/gong-ju/git-01/image-20220410200638410.png" alt="生成rsa密钥"></p></li><li><p>将密钥配置在<code>GitHub</code>中</p><p><img src="/2022/04/10/gong-ju/git-01/image-20220410200720327.png" alt="配置密钥"></p><p>配置步骤即是将公钥<code>id_rsa.pub</code>内容复制到密钥文本输入框中</p></li><li><p>测试SSH配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/10/gong-ju/git-01/image-20220410201756484.png" alt="测试SSH连接GitHub"></p></li></ul><h2 id="配置Token"><a href="#配置Token" class="headerlink" title="配置Token"></a>配置Token</h2><p>这个在我的个人博客<a href="https://zzyong24.github.io/2022/04/09/build-blog/">博客搭建01</a>中有详细讲到，可以参考</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ul><li><p>关联远程仓库</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git remote add [origin] https://github.com/zzyong24/zzyong24.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/10/gong-ju/git-01/image-20220410193621627.png" alt="添加并查看远程仓库"></p><p>其中<code>[origin]</code>是远程仓库名字，习惯上使用<code>origin</code></p><p><code>链接</code>是远程仓库<code>URL</code>地址</p></li><li><p>查看远程仓库</p><pre class="line-numbers language-none"><code class="language-none">git remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除远程仓库</p><pre class="line-numbers language-none"><code class="language-none">git remote rm xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>xxx</code>为仓库名(<code>origin</code>)</p></li></ul><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><h3 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h3><p>在日常工作中，经常可能需要进行版本回退，版本的回退步骤如下：</p><ul><li><p>使用<code>git log</code>或者<code>git log --pretty=oneline</code>查看<code>git</code>提交记录，记住版本号</p><p><img src="/2022/04/10/gong-ju/git-01/image-20220410194207994.png" alt="git log版本号"></p></li><li><p>使用<code>git reset --hard HEAD^</code>进行版本号回退</p><p>其中，<code>HEAD^</code>表示的是上一个版本，<code>HEAD^^</code>是上两个版本，如果想要回退到上100个版本，可以写成<code>HEAD~100</code></p><blockquote><p>上面截图了一个版本号，建议大家直接使用<code>git reset --hard 版本号</code>回退到指定的版本</p></blockquote></li></ul><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>回退版本之后，如果想回到之前的版本，可以通过同样的方式将<code>HEAD</code>指向之前的版本</p><p>至于<code>HEAD</code>版本号如果刚才使用<code>git log</code>命令没有关闭的话，往上滑滑第一个就是了，但是如果<code>git log</code>之后将窗口关闭掉了，可以使用<code>git reflog</code>查看所有执行的命令，进而找到刚才的<code>HEAD</code>版本</p><p><img src="/2022/04/10/gong-ju/git-01/image-20220410194856151.png" alt="git reflog"></p><h2 id="建议阅读"><a href="#建议阅读" class="headerlink" title="建议阅读"></a>建议阅读</h2><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰Git教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建03-如何写博客</title>
      <link href="/2022/04/10/gong-ju/build-blog2/"/>
      <url>/2022/04/10/gong-ju/build-blog2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇主要用来讲解如何写博客，包括如何使用<code>hexo</code>命令，如何解决<code>图片显示问题</code>，如何设置<code>博客属性</code>，如何使用<code>MakrDown</code>，让我们开始吧！</p></blockquote><h2 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h2><h3 id="解决图片显示问题"><a href="#解决图片显示问题" class="headerlink" title="解决图片显示问题"></a>解决图片显示问题</h3><p>1. </p><p>   在新建博客之前，大家需要打开<code>Hexo</code>根目录下<code>_config.yml</code>的一个配置<code>post_asset_folder：true</code>，即新建文件时同目录下新建一个文件夹， 这个文件夹我们用来存放文件的图片</p><p>   <img src="/2022/04/10/gong-ju/build-blog2/image.jpg" alt="同步创建文件夹图片配置"></p><p>2. </p><p>   另外，我们需要设置<code>Typora</code>的图片复制配置，让所有的图片，都复制到刚才那个新建的文件夹里</p><p>   <img src="/2022/04/10/gong-ju/build-blog2/image1.jpg" alt="配置typora图片复制路径"></p><p>3. </p><p>   安装插件</p>   <pre class="line-numbers language-node" data-language="node"><code class="language-node">npm install https://github.com/CodeFalling/hexo-asset-image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   这样操作之后，我们就可以随便的将图片复制到markdown文档里了，页面里也能直接看到。</p><p>   还需要注意的点是：</p><ul><li><code>hexo new</code>的时候文件名不能是中文，因为如果是中文的话，文件夹也是中文的了，图片路径会进行<code>unicode</code>编码，路径就不对了</li><li><code>图片</code>不能够带非法的字符，如<code>\</code>，也会进行<code>unicode</code>编码操作</li><li>注意<code>Typora</code>的插入图片配置，要与我的保持一致</li></ul><p>   出现问题了，也教大家一个排查错误的方法：</p><blockquote><p>可以在网页中打开控制台，查看一下加载不出来的图片的<code>URL</code>，如果发现了诸如<code>%5c</code>之类的<code>unicode</code>编码痕迹，赶紧去检查自己图片的路径吧！</p></blockquote><p>   <em><strong>这个配置大家可以参考这个链接：<a href="https://cloud.tencent.com/developer/article/1702112">Hexo图片显示以及typora配置</a></strong></em></p><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p>新建博客在Blog任意目录下打开控制台，使用<code>hexo new “File Name”</code>命令，<code>File Name</code>建议使用英文，中文的话<code>Url</code>路径会不太好看。</p><p>输入命令后，会在<code>hexo</code> 的<code>source</code>文件夹的<code>_posts</code>文件夹中，创建一个<code>MarkDown</code>文件以及同名的文件夹</p><p><img src="/2022/04/10/gong-ju/build-blog2/image2.jpg" alt="新建的博客以及文件夹"></p><p>接下里就可以愉快的编写啦！</p><h2 id="博客编辑规则"><a href="#博客编辑规则" class="headerlink" title="博客编辑规则"></a>博客编辑规则</h2><p>在新建博客之后，我们会发现，<code>MarkDown</code>文档中会多出一些内容</p><p><img src="/2022/04/10/gong-ju/build-blog2/image3.jpg" alt="新建文件多出的内容"></p><p>很容易能够看的出来，<code>title</code>是文章的标题，<code>date</code>是文章的创建时间</p><p><img src="/2022/04/10/gong-ju/build-blog2/image4.jpg" alt="配置在博客中的位置"></p><hr><p>这个在<code>hexo</code>中被称为<code>Front-matter</code>，通过对其修改能够让我们自定义博客的基本信息</p><p>这里就贴一下<code>matery</code>的文档吧</p><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">转载自Matery官方文档</a></p><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>layout</td><td><code>post</code>(文章)</td><td>有<code>post</code>(文章)，<code>draft</code>(草稿)，<code>page</code>(页面)三个选项，<code>draft</code>这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹中，但不会显示在页面上，如果我们不想某一篇文章显示在页面上，那么就可以把它移动到<code>_drafts</code>文件夹中。</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td><code>cc_by</code></td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>至此，你已经能够对你的博客标题进行任意定制化的修改啦，接下来简单介绍一下<code>MarkDown</code>的使用吧。</p><h2 id="草稿的创建和发布"><a href="#草稿的创建和发布" class="headerlink" title="草稿的创建和发布"></a>草稿的创建和发布</h2><p>如果我们一篇博客需要几天才能写完， 我们可以在创建时设置其为草稿，写完之后再将其进行发布</p><blockquote><p><strong>新建草稿</strong></p><p><code>hexo new draft fileName</code></p><p><strong>预览草稿</strong></p><p><code>hexo server --draft</code></p><p><strong>发布草稿</strong></p><p><code>hexo publish fileName</code></p></blockquote><h2 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a>MarkDown</h2><p><code>MarkDown</code>文档的使用大家或多或少都有过了解，这里就不详细介绍了，贴两个入门的教程吧！很简单，只需要半小时就能够完全掌握</p><p><a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程-MarkDown</a></p><p><a href="https://markdown.com.cn/basic-syntax/">MarkDown官方文档</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>贴一些参考的文章</p><p><a href="https://zhuanlan.zhihu.com/p/156915260">hexo博客写文章及基本操作</a></p><p><a href="https://cdmana.com/2022/03/202203110530593913.html">hexo零基础搭建个人博客(详解)</a></p><p>接下来大家就可以好好的记录博客了，加油！</p>]]></content>
      
      
      <categories>
          
          <category> 博客部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建02-使用Hexo-theme-matery配置主题</title>
      <link href="/2022/04/10/gong-ju/build-blog1/"/>
      <url>/2022/04/10/gong-ju/build-blog1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>接着上一篇，上一篇我们讲到如何基于<code>Github</code>以及<code>Hexo</code>搭建一个博客网站，接下来让我详细讲解主题<code>hexo-theme-matery</code>的使用，并搭建一个美观大方的博客网站吧！</p></blockquote><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>在使用<code>hexo-theme-matery</code>之前，我们需要了解到<code>hexo</code>是支持自定义<code>theme</code>的，也就是说我们可以任意选择所有的<code>theme</code>而不仅仅是<code>matery</code>，所以有必要介绍一下市面上的一些主题，这里我贴一个链接，大家可以进去看看自己喜欢的主题，然后在选择需要哪一种吧！</p><p><a href="https://blog.csdn.net/zgd826237710/article/details/99671027">hexo开源主题</a></p><h2 id="访问hexo-theme-materyGitHub地址"><a href="#访问hexo-theme-materyGitHub地址" class="headerlink" title="访问hexo-theme-materyGitHub地址"></a>访问<code>hexo-theme-matery</code>GitHub地址</h2><p>由于<code>hexo-theme-matery</code>的官方文档相当完备，因此大家可以照着文档弄，基本都能弄出来，这里简单介绍一下我自己的一些配置。</p><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery文档地址</a></p><h2 id="步骤1：下载"><a href="#步骤1：下载" class="headerlink" title="步骤1：下载"></a>步骤1：下载</h2><p>下载的话我们直接在昨天创建的<code>Blog</code>文件夹下的<code>themes</code>子文件夹使用<code>git clone</code>命令即可</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/10/gong-ju/build-blog1/image-20220410102241164.png" alt="下载hexo-theme-matery"></p><h2 id="步骤2：配置"><a href="#步骤2：配置" class="headerlink" title="步骤2：配置"></a>步骤2：配置</h2><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>下载完毕之后，我们需要将自己的<code>Hexo</code>主题配置成<code>hexo-theme-matery</code>，因此需要修改<code>Hexo</code>根目录下<code>_config.yml</code>的<code>theme</code>值为：<code>theme： hexo-theme-matery</code></p><p>这个文件其实就是修改<code>GitHub</code>仓库配置的那个文件</p><p><img src="/2022/04/10/gong-ju/build-blog1/image-20220410102624751.png" alt="配置主题"></p><p><img src="/2022/04/10/gong-ju/build-blog1/image-20220410102732542.png" alt="修改个人主页信息"></p><p>在配置主题的时候， 大家可以同时将<code>per_page</code>的配置以及<code>Site</code>模块的配置进行修改，<em>可以参考上图</em></p><h3 id="配置页面"><a href="#配置页面" class="headerlink" title="配置页面"></a>配置页面</h3><p>我们在配置完主题之后，还需要让博客更加丰满，所以需要配置一下分类页如<code>标签</code>、<code>分类</code>、<code>归档</code>、<code>关于</code>等</p><p><img src="/2022/04/10/gong-ju/build-blog1/image-20220410103125955.png" alt="配置分类页"></p><p><em><strong>需要提醒一下大家，<code>hexo</code>在根目录下有一个配置文件<code>_config.yml</code>，同样的，<code>hexo-theme-matery</code>在<code>hexo-theme-matery</code>主题的子目录下，也有一个<code>_config.yml</code>, 因此二者很容易混淆</strong></em></p><p><img src="/2022/04/10/gong-ju/build-blog1/image-20220410103631595.png" alt="hexo-theme-matery的配置文件"></p><p>为了将二者进行区分， 接下来我会使用</p><p><code>hexo 的 _config.yml</code> 以及 <code>hexo-theme-matery 的 _config.yml</code>分别称呼他们。。。</p><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>通过以上的配置，主题大致已经部署完毕了，但是还有很多个性化设置以及便捷的配置没有做。</p><p>这里的话建议大家照着官方文档弄吧，因为在这里讲解的话可能也就是copy官方的文档了，还是再贴一下官方文档的地址，谢谢大家！</p><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery文档</a></p><p>另外，<code>hexo</code>主题是有很多的, 可以浏览一下这个博客，选择自己喜欢的<a href="https://blog.csdn.net/zgd826237710/article/details/99671027">hexo开源主题</a></p><p>个人博客的美观好看不是最重要的，关键还是文章的质量！</p><p>接下来会讲解一下怎么写文章，怎么配置文章的样式。</p><p>即<code>如何使用MarkDown</code>，以及<code>如何使用Hexo编辑文章</code>，</p><p>敬请期待！</p>]]></content>
      
      
      <categories>
          
          <category> 博客部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建01-使用GitHub + Hexo搭建博客</title>
      <link href="/2022/04/09/gong-ju/build-blog/"/>
      <url>/2022/04/09/gong-ju/build-blog/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的博客，本篇是博客的开篇，会介绍该博客是如何搭建起来的。</p><blockquote><p>博客使用<a href="https://github.com/zzyong24/zzyong24.github.io">GitHub</a> + <a href="https://hexo.io/zh-cn/docs/">Hexo</a>进行搭建， 另外，使用到了<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>部署主题。网页是一个纯静态页面，因此，不需要服务器就能够发布部署以及访问，相当方便。搭建网站大概花了半天的时间，有兴趣的同学也可以自己尝试进行部署哦！</p><p>接下来让我详细介绍网站是如何一步步搭建部署的， 以及其中可能遇到的问题。</p></blockquote><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ol><li><code>GitHub</code>（<a href="https://blog.csdn.net/ChinarCSDN/article/details/78726040">GitHub注册及使用</a>)</li><li><code>Git</code> (<a href="">Git详细安装步骤</a>)</li><li><code>Node.js</code> (<a href="https://blog.csdn.net/Small_Yogurt/article/details/104968169">Node.js详细安装步骤</a>)</li></ol><p>以上三个相信大家都有过接触，而且机器里有安装，如果没有的话，可以参考以上教程照着弄一下，由于比较简单，就不详细介绍了。</p><h2 id="步骤1：创建Git仓库并配置Token"><a href="#步骤1：创建Git仓库并配置Token" class="headerlink" title="步骤1：创建Git仓库并配置Token"></a>步骤1：创建Git仓库并配置Token</h2><h3 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h3><p>需要注意仓库名称的格式为<code>Github账号用户名.github.io</code>, Github仓库实际上是存储博客静态页面，以及博客的空间，由于有Github的存在，我们的博客才可以在不需要服务器的支持下，进行访问。</p><p><img src="/2022/04/09/gong-ju/build-blog/blog_01.png" alt="创建GitHub仓库"></p><p>（<em>这里由于我已经创建过了， 所以显示已存在</em>）</p><h3 id="配置Token"><a href="#配置Token" class="headerlink" title="配置Token"></a>配置Token</h3><p>由于GitHub更换了认证方式，因此大家在提交代码的时候，需要使用Token进行提交（<code>本质上hexo就是将GitHub作为远程仓库，存储网页和博客文档，因此也需要进行身份认证才能提交</code>）</p><p>如何配置Token大家可以参考<a href="https://docs.github.com/cn/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">Github官方文档</a></p><p>提醒一下，生成后的Token记得先保存起来，因为<strong>生成后就不在可见了</strong>，另外，注意<strong>不要给Token太高的权限</strong>，否则别人拿到你的Token是可以随意修改你的仓库的！！！</p><h2 id="步骤2：安装Hexo-cli并初始化博客"><a href="#步骤2：安装Hexo-cli并初始化博客" class="headerlink" title="步骤2：安装Hexo-cli并初始化博客"></a>步骤2：安装Hexo-cli并初始化博客</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>和创建新项目一样，需要在本地磁盘新建一个文件夹<code>Blog</code>（文件夹名称随意），鼠标右键打开<code>Git Bash Here</code>，输入<code>npm</code> 命令安装 <code>Hexo</code></p><pre class="line-numbers language-node" data-language="node"><code class="language-node">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/04/09/gong-ju/build-blog/blog_02.jpg" alt="安装Hexo"></p><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><ol><li>使用命令<code>hexo init</code>进行初始化，是不是有点类似于git init</li></ol><p><img src="/2022/04/09/gong-ju/build-blog/blog_03.jpg" alt="初始化Hexo"></p><ol start="2"><li><p>使用<code>hexo g</code>生成页面文件（生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)）</p><p><img src="/2022/04/09/gong-ju/build-blog/blog_04.jpg" alt="部署Hexo"></p></li><li><p>使用<code>hexo s</code>在本地运行（server）</p><p><img src="/2022/04/09/gong-ju/build-blog/blog_05.png" alt="本地运行Hexo"></p></li><li><p>此时，你已经可以在本地浏览你的博客网站啦！</p><p><img src="/2022/04/09/gong-ju/build-blog/blog_06.jpg" alt="浏览本地博客网站"></p></li></ol><p>​    可以发现此时页面还比较丑，而且什么东西都没有，但是我们已经可以在本地进行访问了，接下来需要做的便是将其部署到GitHub，并配置好看的主题，让我们继续往下看吧！</p><h2 id="步骤3：将博客部署到GitHub"><a href="#步骤3：将博客部署到GitHub" class="headerlink" title="步骤3：将博客部署到GitHub"></a>步骤3：将博客部署到GitHub</h2><p>​    我们做博客网站最主要还是方便我们随时随地能够看到自己的笔记，并将其分享给其他同学，因此接下来要做的便是将博客网站部署到GitHub，这样所有人就都可以看到我们的博客啦！</p><p>​    让我们回到<code>Blog</code>文件夹，用记事本打开<code>_config.yml</code>文件，如下图：</p><p><img src="/2022/04/09/gong-ju/build-blog/image-20220409231228125.png" alt="配置文件位置"></p><p>​    我们只需要修改一个地方，即可让我们的博客配置到GitHub，下滑到文件的最下面，修改为以下内容</p><p><img src="/2022/04/09/gong-ju/build-blog/image-20220409231413210.png" alt="配置文件"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/zzyong24/zzyong24.github.io.git  <span class="token comment">#你的仓库地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里需要注意一个点：<code>repository</code>地址的填写，建议使用<code>ssh</code>地址，这样就可以不用每次输入用户名和<code>token</code>了，直接可以配置<code>ssh</code>免密登陆</p><p>配置<code>ssh</code>免密步骤可参考<a href="https://zzyong24.github.io/2022/04/10/git-01/">Git密钥及仓库管理</a></p><p>(这里自己刚开始部署的时候也没用发现这个问题，后台每次<code>hexo d</code>都需要输入token，特别烦，所以查阅了一些资料</p><p>参考<a href="https://blog.csdn.net/hhgggggg/article/details/77853665">设置 SSH 使用 hexo deploy 时免输用户名密码</a></p></blockquote><p>还需要注意一个问题，就是自己的分支需要看清楚是<code>master</code>还是<code>main</code>，<em>（由于种种原因，<code>master</code>、<code>slave</code>等敏感词汇被禁用，你懂的）</em></p><p><img src="/2022/04/09/gong-ju/build-blog/image-20220409231615729.png" alt="Git仓库"></p><p>接下来还是回到<code>Blog</code>文件夹，让我们发布到GitHub上吧~</p><p>打开<code>Git Bash</code>，安装<code>Git</code>部署插件，输入命令</p><pre class="line-numbers language-node" data-language="node"><code class="language-node">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后继续输入以下三条命令</p><pre class="line-numbers language-node" data-language="node"><code class="language-node">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 publichexo g       #生成网站静态文件到默认设置的 public 文件夹hexo d       #部署到设定的仓库(hexo deploy 的缩写)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完成以后，打开浏览器，输入 <code>https://xxx.github.io</code>就可以打开你的网页了, 比如我的博客地址为<code>https://zzyong24.github.io/</code>，如果你的博客没有显示或刷新可以等一小会儿再刷新一下，它可能会有延迟的问题。到这一步为止，你已经成功部署了属于你自己的一个简单博客了，不过可能不太好看，支持的功能也不够多，接下来我们使用主题<code>hexo-theme-matery</code>来美化一下我们的博客。</p><h2 id="步骤4：使用hexo-theme-matery美化博客"><a href="#步骤4：使用hexo-theme-matery美化博客" class="headerlink" title="步骤4：使用hexo-theme-matery美化博客"></a>步骤4：使用hexo-theme-matery美化博客</h2><p>由于<code>hexo-theme-matery</code>官方文档已经相当完备了，而且是纯中文的，大家可以点击链接进行浏览<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery GitHub链接</a></p><p>明天也会出一期自己在搭建过程中对<code>hexo-theme-matery</code>做的一些自定义配置，大家有需要可以参考哦！</p><p>接下来分享一下自己忙活一天的成果吧！</p><p><img src="/2022/04/09/gong-ju/build-blog/image-20220409234844006.png" alt="这是我配置的首页"></p><p>我的博客链接：<a href="https://zzyong24.github.io/">https://zzyong24.github.io/</a></p><h2 id="本系列其他文章超链"><a href="#本系列其他文章超链" class="headerlink" title="本系列其他文章超链"></a>本系列其他文章超链</h2><p><code>如何配置hexo-theme-matery主题</code>： <a href="https://zzyong24.github.io/2022/04/10/build-blog1/">https://zzyong24.github.io/2022/04/10/build-blog1/</a></p><p><code>如何配置写博客</code>： <a href="https://zzyong24.github.io/2022/04/10/build-blog2/">https://zzyong24.github.io/2022/04/10/build-blog2/</a></p><h2 id="可参考文章"><a href="#可参考文章" class="headerlink" title="可参考文章"></a>可参考文章</h2><p><a href="https://www.bilibili.com/read/cv12633102">https://www.bilibili.com/read/cv12633102</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
